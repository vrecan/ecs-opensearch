agent:
  field_details:
    dashed_name: agent
    description: 'The agent fields contain the data about the software entity, if
      any, that collects, detects, or observes events on a host, or takes measurements
      on a host.

      Examples include Beats. Agents may also run on observers. ECS agent.* fields
      shall be populated with details of the agent running on the host or observer
      where the event happened or the measurement was taken.'
    flat_name: agent
    footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat.
      For APM, it is the agent running in the app/service. The agent information does
      not change if data is sent through queuing systems like Kafka, Redis, or processing
      systems such as Logstash or APM Server.'
    name: agent
    node_name: agent
    short: Fields about the monitoring agent.
    type: group
  fields:
    build:
      field_details:
        dashed_name: agent-build
        flat_name: agent.build
        intermediate: true
        name: build
        node_name: build
        type: object
      fields:
        original:
          field_details:
            dashed_name: agent-build-original
            description: 'Extended build information for the agent.

              This field is intended to contain any build information that a data
              source may provide, no specific formatting is required.'
            example: metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c
              built 2020-02-05 23:10:10 +0000 UTC]
            flat_name: agent.build.original
            ignore_above: 1024
            level: core
            name: build.original
            node_name: original
            normalize: []
            short: Extended build information for the agent.
            type: keyword
    ephemeral_id:
      field_details:
        dashed_name: agent-ephemeral-id
        description: 'Ephemeral identifier of this agent (if one exists).

          This id normally changes across restarts, but `agent.id` does not.'
        example: 8a4f500f
        flat_name: agent.ephemeral_id
        ignore_above: 1024
        level: extended
        name: ephemeral_id
        node_name: ephemeral_id
        normalize: []
        short: Ephemeral identifier of this agent.
        type: keyword
    id:
      field_details:
        dashed_name: agent-id
        description: 'Unique identifier of this agent (if one exists).

          Example: For Beats this would be beat.id.'
        example: 8a4f500d
        flat_name: agent.id
        ignore_above: 1024
        level: core
        name: id
        node_name: id
        normalize: []
        short: Unique identifier of this agent.
        type: keyword
    name:
      field_details:
        dashed_name: agent-name
        description: 'Custom name of the agent.

          This is a name that can be given to an agent. This can be helpful if for
          example two Filebeat instances are running on the same host but a human
          readable separation is needed on which Filebeat instance data is coming
          from.'
        example: foo
        flat_name: agent.name
        ignore_above: 1024
        level: core
        name: name
        node_name: name
        normalize: []
        short: Custom name of the agent.
        type: keyword
    type:
      field_details:
        dashed_name: agent-type
        description: 'Type of the agent.

          The agent type always stays the same and should be given by the agent used.
          In case of Filebeat the agent would always be Filebeat also if two Filebeat
          instances are run on the same machine.'
        example: filebeat
        flat_name: agent.type
        ignore_above: 1024
        level: core
        name: type
        node_name: type
        normalize: []
        short: Type of the agent.
        type: keyword
    version:
      field_details:
        dashed_name: agent-version
        description: Version of the agent.
        example: 6.0.0-rc2
        flat_name: agent.version
        ignore_above: 1024
        level: core
        name: version
        node_name: version
        normalize: []
        short: Version of the agent.
        type: keyword
  schema_details:
    group: 2
    prefix: agent.
    root: false
    title: Agent
as:
  field_details:
    dashed_name: as
    description: An autonomous system (AS) is a collection of connected Internet Protocol
      (IP) routing prefixes under the control of one or more network operators on
      behalf of a single administrative entity or domain that presents a common, clearly
      defined routing policy to the internet.
    flat_name: as
    name: as
    node_name: as
    short: Fields describing an Autonomous System (Internet routing prefix).
    type: group
  fields:
    number:
      field_details:
        dashed_name: as-number
        description: Unique number allocated to the autonomous system. The autonomous
          system number (ASN) uniquely identifies each network on the Internet.
        example: 15169
        flat_name: as.number
        level: extended
        name: number
        node_name: number
        normalize: []
        short: Unique number allocated to the autonomous system.
        type: long
    organization:
      field_details:
        dashed_name: as-organization
        flat_name: as.organization
        intermediate: true
        name: organization
        node_name: organization
        type: object
      fields:
        name:
          field_details:
            dashed_name: as-organization-name
            description: Organization name.
            example: Google LLC
            flat_name: as.organization.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: as.organization.name.text
              name: text
              type: match_only_text
            name: organization.name
            node_name: name
            normalize: []
            short: Organization name.
            type: keyword
  schema_details:
    group: 2
    prefix: as.
    reusable:
      expected:
      - as: as
        at: client
        full: client.as
      - as: as
        at: destination
        full: destination.as
      - as: as
        at: server
        full: server.as
      - as: as
        at: source
        full: source.as
      - as: as
        at: threat.indicator
        full: threat.indicator.as
      - as: as
        at: threat.enrichments.indicator
        full: threat.enrichments.indicator.as
      order: 2
      top_level: false
    root: false
    title: Autonomous System
base:
  field_details:
    dashed_name: base
    description: The `base` field set contains all fields which are at the root of
      the events. These fields are common across all types of events.
    flat_name: base
    name: base
    node_name: base
    short: All fields defined directly at the root of the events.
    type: group
  fields:
    '@timestamp':
      field_details:
        dashed_name: timestamp
        description: 'Date/time when the event originated.

          This is the date/time extracted from the event, typically representing when
          the event was generated by the source.

          If the event source has no original timestamp, this value is typically populated
          by the first time the event was received by the pipeline.

          Required field for all events.'
        example: '2016-05-23T08:05:34.853Z'
        flat_name: '@timestamp'
        level: core
        name: '@timestamp'
        node_name: '@timestamp'
        normalize: []
        required: true
        short: Date/time when the event originated.
        type: date
    labels:
      field_details:
        dashed_name: labels
        description: 'Custom key/value pairs.

          Can be used to add meta information to events. Should not contain nested
          objects. All values are stored as keyword.

          Example: `docker` and `k8s` labels.'
        example: '{"application": "foo-bar", "env": "production"}'
        flat_name: labels
        level: core
        name: labels
        node_name: labels
        normalize: []
        object_type: keyword
        short: Custom key/value pairs.
        type: object
    message:
      field_details:
        dashed_name: message
        description: 'For log events the message field contains the log message, optimized
          for viewing in a log viewer.

          For structured logs without an original message field, other fields can
          be concatenated to form a human-readable summary of the event.

          If multiple messages exist, they can be combined into one message.'
        example: Hello World
        flat_name: message
        level: core
        name: message
        node_name: message
        normalize: []
        short: Log message optimized for viewing in a log viewer.
        type: match_only_text
    tags:
      field_details:
        dashed_name: tags
        description: List of keywords used to tag each event.
        example: '["production", "env2"]'
        flat_name: tags
        ignore_above: 1024
        level: core
        name: tags
        node_name: tags
        normalize:
        - array
        short: List of keywords used to tag each event.
        type: keyword
  schema_details:
    group: 1
    prefix: ''
    root: true
    title: Base
client:
  field_details:
    dashed_name: client
    description: 'A client is defined as the initiator of a network connection for
      events regarding sessions, connections, or bidirectional flow records.

      For TCP events, the client is the initiator of the TCP connection that sends
      the SYN packet(s). For other protocols, the client is generally the initiator
      or requestor in the network transaction. Some systems use the term "originator"
      to refer the client in TCP connections. The client fields describe details about
      the system acting as the client in the network event. Client fields are usually
      populated in conjunction with server fields. Client fields are generally not
      populated for packet-level events.

      Client / server representations can add semantic context to an exchange, which
      is helpful to visualize the data in certain situations. If your context falls
      in that category, you should still ensure that source and destination are filled
      appropriately.'
    flat_name: client
    name: client
    node_name: client
    short: Fields about the client side of a network connection, used with server.
    type: group
  fields:
    address:
      field_details:
        dashed_name: client-address
        description: 'Some event client addresses are defined ambiguously. The event
          will sometimes list an IP, a domain or a unix socket.  You should always
          store the raw address in the `.address` field.

          Then it should be duplicated to `.ip` or `.domain`, depending on which one
          it is.'
        flat_name: client.address
        ignore_above: 1024
        level: extended
        name: address
        node_name: address
        normalize: []
        short: Client network address.
        type: keyword
    as:
      field_details:
        dashed_name: client-as
        description: An autonomous system (AS) is a collection of connected Internet
          Protocol (IP) routing prefixes under the control of one or more network
          operators on behalf of a single administrative entity or domain that presents
          a common, clearly defined routing policy to the internet.
        flat_name: client.as
        intermediate: true
        name: as
        node_name: as
        original_fieldset: as
        short: Fields describing an Autonomous System (Internet routing prefix).
        type: group
      fields:
        number:
          field_details:
            dashed_name: client-as-number
            description: Unique number allocated to the autonomous system. The autonomous
              system number (ASN) uniquely identifies each network on the Internet.
            example: 15169
            flat_name: client.as.number
            level: extended
            name: number
            node_name: number
            normalize: []
            original_fieldset: as
            short: Unique number allocated to the autonomous system.
            type: long
        organization:
          field_details:
            dashed_name: client-as-organization
            flat_name: client.as.organization
            intermediate: true
            name: organization
            node_name: organization
            original_fieldset: as
            type: object
          fields:
            name:
              field_details:
                dashed_name: client-as-organization-name
                description: Organization name.
                example: Google LLC
                flat_name: client.as.organization.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: client.as.organization.name.text
                  name: text
                  type: match_only_text
                name: organization.name
                node_name: name
                normalize: []
                original_fieldset: as
                short: Organization name.
                type: keyword
    bytes:
      field_details:
        dashed_name: client-bytes
        description: Bytes sent from the client to the server.
        example: 184
        flat_name: client.bytes
        format: bytes
        level: core
        name: bytes
        node_name: bytes
        normalize: []
        short: Bytes sent from the client to the server.
        type: long
    domain:
      field_details:
        dashed_name: client-domain
        description: 'The domain name of the client system.

          This value may be a host name, a fully qualified domain name, or another
          host naming format. The value may derive from the original event or be added
          from enrichment.'
        example: foo.example.com
        flat_name: client.domain
        ignore_above: 1024
        level: core
        name: domain
        node_name: domain
        normalize: []
        short: The domain name of the client.
        type: keyword
    geo:
      field_details:
        dashed_name: client-geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        flat_name: client.geo
        intermediate: true
        name: geo
        node_name: geo
        original_fieldset: geo
        short: Fields describing a location.
        type: group
      fields:
        city_name:
          field_details:
            dashed_name: client-geo-city-name
            description: City name.
            example: Montreal
            flat_name: client.geo.city_name
            ignore_above: 1024
            level: core
            name: city_name
            node_name: city_name
            normalize: []
            original_fieldset: geo
            short: City name.
            type: keyword
        continent_code:
          field_details:
            dashed_name: client-geo-continent-code
            description: Two-letter code representing continent's name.
            example: NA
            flat_name: client.geo.continent_code
            ignore_above: 1024
            level: core
            name: continent_code
            node_name: continent_code
            normalize: []
            original_fieldset: geo
            short: Continent code.
            type: keyword
        continent_name:
          field_details:
            dashed_name: client-geo-continent-name
            description: Name of the continent.
            example: North America
            flat_name: client.geo.continent_name
            ignore_above: 1024
            level: core
            name: continent_name
            node_name: continent_name
            normalize: []
            original_fieldset: geo
            short: Name of the continent.
            type: keyword
        country_iso_code:
          field_details:
            dashed_name: client-geo-country-iso-code
            description: Country ISO code.
            example: CA
            flat_name: client.geo.country_iso_code
            ignore_above: 1024
            level: core
            name: country_iso_code
            node_name: country_iso_code
            normalize: []
            original_fieldset: geo
            short: Country ISO code.
            type: keyword
        country_name:
          field_details:
            dashed_name: client-geo-country-name
            description: Country name.
            example: Canada
            flat_name: client.geo.country_name
            ignore_above: 1024
            level: core
            name: country_name
            node_name: country_name
            normalize: []
            original_fieldset: geo
            short: Country name.
            type: keyword
        location:
          field_details:
            dashed_name: client-geo-location
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'
            flat_name: client.geo.location
            level: core
            name: location
            node_name: location
            normalize: []
            original_fieldset: geo
            short: Longitude and latitude.
            type: geo_point
        name:
          field_details:
            dashed_name: client-geo-name
            description: 'User-defined description of a location, at the level of
              granularity they care about.

              Could be the name of their data centers, the floor number, if this describes
              a local physical entity, city names.

              Not typically used in automated geolocation.'
            example: boston-dc
            flat_name: client.geo.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: geo
            short: User-defined description of a location.
            type: keyword
        postal_code:
          field_details:
            dashed_name: client-geo-postal-code
            description: 'Postal code associated with the location.

              Values appropriate for this field may also be known as a postcode or
              ZIP code and will vary widely from country to country.'
            example: 94040
            flat_name: client.geo.postal_code
            ignore_above: 1024
            level: core
            name: postal_code
            node_name: postal_code
            normalize: []
            original_fieldset: geo
            short: Postal code.
            type: keyword
        region_iso_code:
          field_details:
            dashed_name: client-geo-region-iso-code
            description: Region ISO code.
            example: CA-QC
            flat_name: client.geo.region_iso_code
            ignore_above: 1024
            level: core
            name: region_iso_code
            node_name: region_iso_code
            normalize: []
            original_fieldset: geo
            short: Region ISO code.
            type: keyword
        region_name:
          field_details:
            dashed_name: client-geo-region-name
            description: Region name.
            example: Quebec
            flat_name: client.geo.region_name
            ignore_above: 1024
            level: core
            name: region_name
            node_name: region_name
            normalize: []
            original_fieldset: geo
            short: Region name.
            type: keyword
        timezone:
          field_details:
            dashed_name: client-geo-timezone
            description: The time zone of the location, such as IANA time zone name.
            example: America/Argentina/Buenos_Aires
            flat_name: client.geo.timezone
            ignore_above: 1024
            level: core
            name: timezone
            node_name: timezone
            normalize: []
            original_fieldset: geo
            short: Time zone.
            type: keyword
    ip:
      field_details:
        dashed_name: client-ip
        description: IP address of the client (IPv4 or IPv6).
        flat_name: client.ip
        level: core
        name: ip
        node_name: ip
        normalize: []
        short: IP address of the client.
        type: ip
    mac:
      field_details:
        dashed_name: client-mac
        description: 'MAC address of the client.

          The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit
          byte) is represented by two [uppercase] hexadecimal digits giving the value
          of the octet as an unsigned integer. Successive octets are separated by
          a hyphen.'
        example: 00-00-5E-00-53-23
        flat_name: client.mac
        ignore_above: 1024
        level: core
        name: mac
        node_name: mac
        normalize: []
        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
        short: MAC address of the client.
        type: keyword
    nat:
      field_details:
        dashed_name: client-nat
        flat_name: client.nat
        intermediate: true
        name: nat
        node_name: nat
        type: object
      fields:
        ip:
          field_details:
            dashed_name: client-nat-ip
            description: 'Translated IP of source based NAT sessions (e.g. internal
              client to internet).

              Typically connections traversing load balancers, firewalls, or routers.'
            flat_name: client.nat.ip
            level: extended
            name: nat.ip
            node_name: ip
            normalize: []
            short: Client NAT ip address
            type: ip
        port:
          field_details:
            dashed_name: client-nat-port
            description: 'Translated port of source based NAT sessions (e.g. internal
              client to internet).

              Typically connections traversing load balancers, firewalls, or routers.'
            flat_name: client.nat.port
            format: string
            level: extended
            name: nat.port
            node_name: port
            normalize: []
            short: Client NAT port
            type: long
    packets:
      field_details:
        dashed_name: client-packets
        description: Packets sent from the client to the server.
        example: 12
        flat_name: client.packets
        level: core
        name: packets
        node_name: packets
        normalize: []
        short: Packets sent from the client to the server.
        type: long
    port:
      field_details:
        dashed_name: client-port
        description: Port of the client.
        flat_name: client.port
        format: string
        level: core
        name: port
        node_name: port
        normalize: []
        short: Port of the client.
        type: long
    registered_domain:
      field_details:
        dashed_name: client-registered-domain
        description: 'The highest registered client domain, stripped of the subdomain.

          For example, the registered domain for "foo.example.com" is "example.com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last two labels will not work well for TLDs such as "co.uk".'
        example: example.com
        flat_name: client.registered_domain
        ignore_above: 1024
        level: extended
        name: registered_domain
        node_name: registered_domain
        normalize: []
        short: The highest registered client domain, stripped of the subdomain.
        type: keyword
    subdomain:
      field_details:
        dashed_name: client-subdomain
        description: 'The subdomain portion of a fully qualified domain name includes
          all of the names except the host name under the registered_domain.  In a
          partially qualified domain, or if the the qualification level of the full
          name cannot be determined, subdomain contains all of the names below the
          registered domain.

          For example the subdomain portion of "www.east.mydomain.co.uk" is "east".
          If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
          the subdomain field should contain "sub2.sub1", with no trailing period.'
        example: east
        flat_name: client.subdomain
        ignore_above: 1024
        level: extended
        name: subdomain
        node_name: subdomain
        normalize: []
        short: The subdomain of the domain.
        type: keyword
    top_level_domain:
      field_details:
        dashed_name: client-top-level-domain
        description: 'The effective top level domain (eTLD), also known as the domain
          suffix, is the last part of the domain name. For example, the top level
          domain for example.com is "com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last label will not work well for effective TLDs such as "co.uk".'
        example: co.uk
        flat_name: client.top_level_domain
        ignore_above: 1024
        level: extended
        name: top_level_domain
        node_name: top_level_domain
        normalize: []
        short: The effective top level domain (com, org, net, co.uk).
        type: keyword
    user:
      field_details:
        dashed_name: client-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: client.user
        intermediate: true
        name: user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: client-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: client.user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: client-user-email
            description: User email address.
            flat_name: client.user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: client-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: client.user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: client.user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: client-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: client.user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: client-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: client.user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: client-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: client.user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: client-user-group-name
                description: Name of the group.
                flat_name: client.user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: client-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: client.user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: client-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: client.user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: client-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: client.user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: client.user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: client-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: client.user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: client-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: client.user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: client-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: client.user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: client-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: client.user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: client-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: client.user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: client-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: client.user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: client-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: client.user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: client-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: client.user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
  schema_details:
    group: 2
    nestings:
    - client.as
    - client.geo
    - client.user
    prefix: client.
    reused_here:
    - full: client.as
      schema_name: as
      short: Fields describing an Autonomous System (Internet routing prefix).
    - full: client.geo
      schema_name: geo
      short: Fields describing a location.
    - full: client.user
      schema_name: user
      short: Fields to describe the user relevant to the event.
    root: false
    title: Client
cloud:
  field_details:
    dashed_name: cloud
    description: Fields related to the cloud or infrastructure the events are coming
      from.
    flat_name: cloud
    footnote: 'Examples: If Metricbeat is running on an EC2 host and fetches data
      from its host, the cloud info contains the data about this machine. If Metricbeat
      runs on a remote machine outside the cloud and fetches data from a service running
      in the cloud, the field contains cloud data from the machine the service is
      running on.

      The cloud fields may be self-nested under cloud.origin.* and cloud.target.*
      to describe origin or target service''s cloud information in the context of
      incoming or outgoing requests, respectively. However, the fieldsets cloud.origin.*
      and cloud.target.* must not be confused with the root cloud fieldset that is
      used to describe the cloud context of the actual service under observation.
      The fieldset cloud.origin.* may only be used in the context of incoming requests
      or events to provide the originating service''s cloud information. The fieldset
      cloud.target.* may only be used in the context of outgoing requests or events
      to describe the target service''s cloud information.'
    name: cloud
    node_name: cloud
    short: Fields about the cloud resource.
    type: group
  fields:
    account:
      field_details:
        dashed_name: cloud-account
        flat_name: cloud.account
        intermediate: true
        name: account
        node_name: account
        type: object
      fields:
        id:
          field_details:
            dashed_name: cloud-account-id
            description: 'The cloud account or organization id used to identify different
              entities in a multi-tenant environment.

              Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
            example: 666777888999
            flat_name: cloud.account.id
            ignore_above: 1024
            level: extended
            name: account.id
            node_name: id
            normalize: []
            short: The cloud account or organization id.
            type: keyword
        name:
          field_details:
            dashed_name: cloud-account-name
            description: 'The cloud account name or alias used to identify different
              entities in a multi-tenant environment.

              Examples: AWS account name, Google Cloud ORG display name.'
            example: elastic-dev
            flat_name: cloud.account.name
            ignore_above: 1024
            level: extended
            name: account.name
            node_name: name
            normalize: []
            short: The cloud account name.
            type: keyword
    availability_zone:
      field_details:
        dashed_name: cloud-availability-zone
        description: Availability zone in which this host, resource, or service is
          located.
        example: us-east-1c
        flat_name: cloud.availability_zone
        ignore_above: 1024
        level: extended
        name: availability_zone
        node_name: availability_zone
        normalize: []
        short: Availability zone in which this host, resource, or service is located.
        type: keyword
    instance:
      field_details:
        dashed_name: cloud-instance
        flat_name: cloud.instance
        intermediate: true
        name: instance
        node_name: instance
        type: object
      fields:
        id:
          field_details:
            dashed_name: cloud-instance-id
            description: Instance ID of the host machine.
            example: i-1234567890abcdef0
            flat_name: cloud.instance.id
            ignore_above: 1024
            level: extended
            name: instance.id
            node_name: id
            normalize: []
            short: Instance ID of the host machine.
            type: keyword
        name:
          field_details:
            dashed_name: cloud-instance-name
            description: Instance name of the host machine.
            flat_name: cloud.instance.name
            ignore_above: 1024
            level: extended
            name: instance.name
            node_name: name
            normalize: []
            short: Instance name of the host machine.
            type: keyword
    machine:
      field_details:
        dashed_name: cloud-machine
        flat_name: cloud.machine
        intermediate: true
        name: machine
        node_name: machine
        type: object
      fields:
        type:
          field_details:
            dashed_name: cloud-machine-type
            description: Machine type of the host machine.
            example: t2.medium
            flat_name: cloud.machine.type
            ignore_above: 1024
            level: extended
            name: machine.type
            node_name: type
            normalize: []
            short: Machine type of the host machine.
            type: keyword
    origin:
      field_details:
        dashed_name: cloud-cloud
        description: Fields related to the cloud or infrastructure the events are
          coming from.
        flat_name: cloud.cloud
        footnote: 'Examples: If Metricbeat is running on an EC2 host and fetches data
          from its host, the cloud info contains the data about this machine. If Metricbeat
          runs on a remote machine outside the cloud and fetches data from a service
          running in the cloud, the field contains cloud data from the machine the
          service is running on.

          The cloud fields may be self-nested under cloud.origin.* and cloud.target.*
          to describe origin or target service''s cloud information in the context
          of incoming or outgoing requests, respectively. However, the fieldsets cloud.origin.*
          and cloud.target.* must not be confused with the root cloud fieldset that
          is used to describe the cloud context of the actual service under observation.
          The fieldset cloud.origin.* may only be used in the context of incoming
          requests or events to provide the originating service''s cloud information.
          The fieldset cloud.target.* may only be used in the context of outgoing
          requests or events to describe the target service''s cloud information.'
        intermediate: true
        name: origin
        node_name: cloud
        original_fieldset: cloud
        short: Fields about the cloud resource.
        type: group
      fields:
        account:
          field_details:
            dashed_name: cloud-origin-account
            flat_name: cloud.origin.account
            intermediate: true
            name: account
            node_name: account
            original_fieldset: cloud
            type: object
          fields:
            id:
              field_details:
                dashed_name: cloud-origin-account-id
                description: 'The cloud account or organization id used to identify
                  different entities in a multi-tenant environment.

                  Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
                example: 666777888999
                flat_name: cloud.origin.account.id
                ignore_above: 1024
                level: extended
                name: account.id
                node_name: id
                normalize: []
                original_fieldset: cloud
                short: The cloud account or organization id.
                type: keyword
            name:
              field_details:
                dashed_name: cloud-origin-account-name
                description: 'The cloud account name or alias used to identify different
                  entities in a multi-tenant environment.

                  Examples: AWS account name, Google Cloud ORG display name.'
                example: elastic-dev
                flat_name: cloud.origin.account.name
                ignore_above: 1024
                level: extended
                name: account.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: The cloud account name.
                type: keyword
        availability_zone:
          field_details:
            dashed_name: cloud-origin-availability-zone
            description: Availability zone in which this host, resource, or service
              is located.
            example: us-east-1c
            flat_name: cloud.origin.availability_zone
            ignore_above: 1024
            level: extended
            name: availability_zone
            node_name: availability_zone
            normalize: []
            original_fieldset: cloud
            short: Availability zone in which this host, resource, or service is located.
            type: keyword
        instance:
          field_details:
            dashed_name: cloud-origin-instance
            flat_name: cloud.origin.instance
            intermediate: true
            name: instance
            node_name: instance
            original_fieldset: cloud
            type: object
          fields:
            id:
              field_details:
                dashed_name: cloud-origin-instance-id
                description: Instance ID of the host machine.
                example: i-1234567890abcdef0
                flat_name: cloud.origin.instance.id
                ignore_above: 1024
                level: extended
                name: instance.id
                node_name: id
                normalize: []
                original_fieldset: cloud
                short: Instance ID of the host machine.
                type: keyword
            name:
              field_details:
                dashed_name: cloud-origin-instance-name
                description: Instance name of the host machine.
                flat_name: cloud.origin.instance.name
                ignore_above: 1024
                level: extended
                name: instance.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: Instance name of the host machine.
                type: keyword
        machine:
          field_details:
            dashed_name: cloud-origin-machine
            flat_name: cloud.origin.machine
            intermediate: true
            name: machine
            node_name: machine
            original_fieldset: cloud
            type: object
          fields:
            type:
              field_details:
                dashed_name: cloud-origin-machine-type
                description: Machine type of the host machine.
                example: t2.medium
                flat_name: cloud.origin.machine.type
                ignore_above: 1024
                level: extended
                name: machine.type
                node_name: type
                normalize: []
                original_fieldset: cloud
                short: Machine type of the host machine.
                type: keyword
        project:
          field_details:
            dashed_name: cloud-origin-project
            flat_name: cloud.origin.project
            intermediate: true
            name: project
            node_name: project
            original_fieldset: cloud
            type: object
          fields:
            id:
              field_details:
                dashed_name: cloud-origin-project-id
                description: 'The cloud project identifier.

                  Examples: Google Cloud Project id, Azure Project id.'
                example: my-project
                flat_name: cloud.origin.project.id
                ignore_above: 1024
                level: extended
                name: project.id
                node_name: id
                normalize: []
                original_fieldset: cloud
                short: The cloud project id.
                type: keyword
            name:
              field_details:
                dashed_name: cloud-origin-project-name
                description: 'The cloud project name.

                  Examples: Google Cloud Project name, Azure Project name.'
                example: my project
                flat_name: cloud.origin.project.name
                ignore_above: 1024
                level: extended
                name: project.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: The cloud project name.
                type: keyword
        provider:
          field_details:
            dashed_name: cloud-origin-provider
            description: Name of the cloud provider. Example values are aws, azure,
              gcp, or digitalocean.
            example: aws
            flat_name: cloud.origin.provider
            ignore_above: 1024
            level: extended
            name: provider
            node_name: provider
            normalize: []
            original_fieldset: cloud
            short: Name of the cloud provider.
            type: keyword
        region:
          field_details:
            dashed_name: cloud-origin-region
            description: Region in which this host, resource, or service is located.
            example: us-east-1
            flat_name: cloud.origin.region
            ignore_above: 1024
            level: extended
            name: region
            node_name: region
            normalize: []
            original_fieldset: cloud
            short: Region in which this host, resource, or service is located.
            type: keyword
        service:
          field_details:
            dashed_name: cloud-origin-service
            flat_name: cloud.origin.service
            intermediate: true
            name: service
            node_name: service
            original_fieldset: cloud
            type: object
          fields:
            name:
              field_details:
                dashed_name: cloud-origin-service-name
                description: 'The cloud service name is intended to distinguish services
                  running on different platforms within a provider, eg AWS EC2 vs
                  Lambda, GCP GCE vs App Engine, Azure VM vs App Server.

                  Examples: app engine, app service, cloud run, fargate, lambda.'
                example: lambda
                flat_name: cloud.origin.service.name
                ignore_above: 1024
                level: extended
                name: service.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: The cloud service name.
                type: keyword
    project:
      field_details:
        dashed_name: cloud-project
        flat_name: cloud.project
        intermediate: true
        name: project
        node_name: project
        type: object
      fields:
        id:
          field_details:
            dashed_name: cloud-project-id
            description: 'The cloud project identifier.

              Examples: Google Cloud Project id, Azure Project id.'
            example: my-project
            flat_name: cloud.project.id
            ignore_above: 1024
            level: extended
            name: project.id
            node_name: id
            normalize: []
            short: The cloud project id.
            type: keyword
        name:
          field_details:
            dashed_name: cloud-project-name
            description: 'The cloud project name.

              Examples: Google Cloud Project name, Azure Project name.'
            example: my project
            flat_name: cloud.project.name
            ignore_above: 1024
            level: extended
            name: project.name
            node_name: name
            normalize: []
            short: The cloud project name.
            type: keyword
    provider:
      field_details:
        dashed_name: cloud-provider
        description: Name of the cloud provider. Example values are aws, azure, gcp,
          or digitalocean.
        example: aws
        flat_name: cloud.provider
        ignore_above: 1024
        level: extended
        name: provider
        node_name: provider
        normalize: []
        short: Name of the cloud provider.
        type: keyword
    region:
      field_details:
        dashed_name: cloud-region
        description: Region in which this host, resource, or service is located.
        example: us-east-1
        flat_name: cloud.region
        ignore_above: 1024
        level: extended
        name: region
        node_name: region
        normalize: []
        short: Region in which this host, resource, or service is located.
        type: keyword
    service:
      field_details:
        dashed_name: cloud-service
        flat_name: cloud.service
        intermediate: true
        name: service
        node_name: service
        type: object
      fields:
        name:
          field_details:
            dashed_name: cloud-service-name
            description: 'The cloud service name is intended to distinguish services
              running on different platforms within a provider, eg AWS EC2 vs Lambda,
              GCP GCE vs App Engine, Azure VM vs App Server.

              Examples: app engine, app service, cloud run, fargate, lambda.'
            example: lambda
            flat_name: cloud.service.name
            ignore_above: 1024
            level: extended
            name: service.name
            node_name: name
            normalize: []
            short: The cloud service name.
            type: keyword
    target:
      field_details:
        dashed_name: cloud-cloud
        description: Fields related to the cloud or infrastructure the events are
          coming from.
        flat_name: cloud.cloud
        footnote: 'Examples: If Metricbeat is running on an EC2 host and fetches data
          from its host, the cloud info contains the data about this machine. If Metricbeat
          runs on a remote machine outside the cloud and fetches data from a service
          running in the cloud, the field contains cloud data from the machine the
          service is running on.

          The cloud fields may be self-nested under cloud.origin.* and cloud.target.*
          to describe origin or target service''s cloud information in the context
          of incoming or outgoing requests, respectively. However, the fieldsets cloud.origin.*
          and cloud.target.* must not be confused with the root cloud fieldset that
          is used to describe the cloud context of the actual service under observation.
          The fieldset cloud.origin.* may only be used in the context of incoming
          requests or events to provide the originating service''s cloud information.
          The fieldset cloud.target.* may only be used in the context of outgoing
          requests or events to describe the target service''s cloud information.'
        intermediate: true
        name: target
        node_name: cloud
        original_fieldset: cloud
        short: Fields about the cloud resource.
        type: group
      fields:
        account:
          field_details:
            dashed_name: cloud-target-account
            flat_name: cloud.target.account
            intermediate: true
            name: account
            node_name: account
            original_fieldset: cloud
            type: object
          fields:
            id:
              field_details:
                dashed_name: cloud-target-account-id
                description: 'The cloud account or organization id used to identify
                  different entities in a multi-tenant environment.

                  Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
                example: 666777888999
                flat_name: cloud.target.account.id
                ignore_above: 1024
                level: extended
                name: account.id
                node_name: id
                normalize: []
                original_fieldset: cloud
                short: The cloud account or organization id.
                type: keyword
            name:
              field_details:
                dashed_name: cloud-target-account-name
                description: 'The cloud account name or alias used to identify different
                  entities in a multi-tenant environment.

                  Examples: AWS account name, Google Cloud ORG display name.'
                example: elastic-dev
                flat_name: cloud.target.account.name
                ignore_above: 1024
                level: extended
                name: account.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: The cloud account name.
                type: keyword
        availability_zone:
          field_details:
            dashed_name: cloud-target-availability-zone
            description: Availability zone in which this host, resource, or service
              is located.
            example: us-east-1c
            flat_name: cloud.target.availability_zone
            ignore_above: 1024
            level: extended
            name: availability_zone
            node_name: availability_zone
            normalize: []
            original_fieldset: cloud
            short: Availability zone in which this host, resource, or service is located.
            type: keyword
        instance:
          field_details:
            dashed_name: cloud-target-instance
            flat_name: cloud.target.instance
            intermediate: true
            name: instance
            node_name: instance
            original_fieldset: cloud
            type: object
          fields:
            id:
              field_details:
                dashed_name: cloud-target-instance-id
                description: Instance ID of the host machine.
                example: i-1234567890abcdef0
                flat_name: cloud.target.instance.id
                ignore_above: 1024
                level: extended
                name: instance.id
                node_name: id
                normalize: []
                original_fieldset: cloud
                short: Instance ID of the host machine.
                type: keyword
            name:
              field_details:
                dashed_name: cloud-target-instance-name
                description: Instance name of the host machine.
                flat_name: cloud.target.instance.name
                ignore_above: 1024
                level: extended
                name: instance.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: Instance name of the host machine.
                type: keyword
        machine:
          field_details:
            dashed_name: cloud-target-machine
            flat_name: cloud.target.machine
            intermediate: true
            name: machine
            node_name: machine
            original_fieldset: cloud
            type: object
          fields:
            type:
              field_details:
                dashed_name: cloud-target-machine-type
                description: Machine type of the host machine.
                example: t2.medium
                flat_name: cloud.target.machine.type
                ignore_above: 1024
                level: extended
                name: machine.type
                node_name: type
                normalize: []
                original_fieldset: cloud
                short: Machine type of the host machine.
                type: keyword
        project:
          field_details:
            dashed_name: cloud-target-project
            flat_name: cloud.target.project
            intermediate: true
            name: project
            node_name: project
            original_fieldset: cloud
            type: object
          fields:
            id:
              field_details:
                dashed_name: cloud-target-project-id
                description: 'The cloud project identifier.

                  Examples: Google Cloud Project id, Azure Project id.'
                example: my-project
                flat_name: cloud.target.project.id
                ignore_above: 1024
                level: extended
                name: project.id
                node_name: id
                normalize: []
                original_fieldset: cloud
                short: The cloud project id.
                type: keyword
            name:
              field_details:
                dashed_name: cloud-target-project-name
                description: 'The cloud project name.

                  Examples: Google Cloud Project name, Azure Project name.'
                example: my project
                flat_name: cloud.target.project.name
                ignore_above: 1024
                level: extended
                name: project.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: The cloud project name.
                type: keyword
        provider:
          field_details:
            dashed_name: cloud-target-provider
            description: Name of the cloud provider. Example values are aws, azure,
              gcp, or digitalocean.
            example: aws
            flat_name: cloud.target.provider
            ignore_above: 1024
            level: extended
            name: provider
            node_name: provider
            normalize: []
            original_fieldset: cloud
            short: Name of the cloud provider.
            type: keyword
        region:
          field_details:
            dashed_name: cloud-target-region
            description: Region in which this host, resource, or service is located.
            example: us-east-1
            flat_name: cloud.target.region
            ignore_above: 1024
            level: extended
            name: region
            node_name: region
            normalize: []
            original_fieldset: cloud
            short: Region in which this host, resource, or service is located.
            type: keyword
        service:
          field_details:
            dashed_name: cloud-target-service
            flat_name: cloud.target.service
            intermediate: true
            name: service
            node_name: service
            original_fieldset: cloud
            type: object
          fields:
            name:
              field_details:
                dashed_name: cloud-target-service-name
                description: 'The cloud service name is intended to distinguish services
                  running on different platforms within a provider, eg AWS EC2 vs
                  Lambda, GCP GCE vs App Engine, Azure VM vs App Server.

                  Examples: app engine, app service, cloud run, fargate, lambda.'
                example: lambda
                flat_name: cloud.target.service.name
                ignore_above: 1024
                level: extended
                name: service.name
                node_name: name
                normalize: []
                original_fieldset: cloud
                short: The cloud service name.
                type: keyword
  schema_details:
    group: 2
    nestings:
    - cloud.origin
    - cloud.target
    prefix: cloud.
    reusable:
      expected:
      - as: origin
        at: cloud
        beta: Reusing the `cloud` fields in this location is currently considered
          beta.
        full: cloud.origin
        short_override: Provides the cloud information of the origin entity in case
          of an incoming request or event.
      - as: target
        at: cloud
        beta: Reusing the `cloud` fields in this location is currently considered
          beta.
        full: cloud.target
        short_override: Provides the cloud information of the target entity in case
          of an outgoing request or event.
      order: 2
      top_level: true
    reused_here:
    - beta: Reusing the `cloud` fields in this location is currently considered beta.
      full: cloud.origin
      schema_name: cloud
      short: Provides the cloud information of the origin entity in case of an incoming
        request or event.
    - beta: Reusing the `cloud` fields in this location is currently considered beta.
      full: cloud.target
      schema_name: cloud
      short: Provides the cloud information of the target entity in case of an outgoing
        request or event.
    root: false
    title: Cloud
code_signature:
  field_details:
    dashed_name: code-signature
    description: These fields contain information about binary code signatures.
    flat_name: code_signature
    name: code_signature
    node_name: code_signature
    short: These fields contain information about binary code signatures.
    type: group
  fields:
    digest_algorithm:
      field_details:
        dashed_name: code-signature-digest-algorithm
        description: 'The hashing algorithm used to sign the process.

          This value can distinguish signatures when a file is signed multiple times
          by the same signer but with a different digest algorithm.'
        example: sha256
        flat_name: code_signature.digest_algorithm
        ignore_above: 1024
        level: extended
        name: digest_algorithm
        node_name: digest_algorithm
        normalize: []
        short: Hashing algorithm used to sign the process.
        type: keyword
    exists:
      field_details:
        dashed_name: code-signature-exists
        description: Boolean to capture if a signature is present.
        example: 'true'
        flat_name: code_signature.exists
        level: core
        name: exists
        node_name: exists
        normalize: []
        short: Boolean to capture if a signature is present.
        type: boolean
    signing_id:
      field_details:
        dashed_name: code-signature-signing-id
        description: 'The identifier used to sign the process.

          This is used to identify the application manufactured by a software vendor.
          The field is relevant to Apple *OS only.'
        example: com.apple.xpc.proxy
        flat_name: code_signature.signing_id
        ignore_above: 1024
        level: extended
        name: signing_id
        node_name: signing_id
        normalize: []
        short: The identifier used to sign the process.
        type: keyword
    status:
      field_details:
        dashed_name: code-signature-status
        description: 'Additional information about the certificate status.

          This is useful for logging cryptographic errors with the certificate validity
          or trust status. Leave unpopulated if the validity or trust of the certificate
          was unchecked.'
        example: ERROR_UNTRUSTED_ROOT
        flat_name: code_signature.status
        ignore_above: 1024
        level: extended
        name: status
        node_name: status
        normalize: []
        short: Additional information about the certificate status.
        type: keyword
    subject_name:
      field_details:
        dashed_name: code-signature-subject-name
        description: Subject name of the code signer
        example: Microsoft Corporation
        flat_name: code_signature.subject_name
        ignore_above: 1024
        level: core
        name: subject_name
        node_name: subject_name
        normalize: []
        short: Subject name of the code signer
        type: keyword
    team_id:
      field_details:
        dashed_name: code-signature-team-id
        description: 'The team identifier used to sign the process.

          This is used to identify the team or vendor of a software product. The field
          is relevant to Apple *OS only.'
        example: EQHXZ8M8AV
        flat_name: code_signature.team_id
        ignore_above: 1024
        level: extended
        name: team_id
        node_name: team_id
        normalize: []
        short: The team identifier used to sign the process.
        type: keyword
    timestamp:
      field_details:
        dashed_name: code-signature-timestamp
        description: Date and time when the code signature was generated and signed.
        example: '2021-01-01T12:10:30Z'
        flat_name: code_signature.timestamp
        level: extended
        name: timestamp
        node_name: timestamp
        normalize: []
        short: When the signature was generated and signed.
        type: date
    trusted:
      field_details:
        dashed_name: code-signature-trusted
        description: 'Stores the trust status of the certificate chain.

          Validating the trust of the certificate chain may be complicated, and this
          field should only be populated by tools that actively check the status.'
        example: 'true'
        flat_name: code_signature.trusted
        level: extended
        name: trusted
        node_name: trusted
        normalize: []
        short: Stores the trust status of the certificate chain.
        type: boolean
    valid:
      field_details:
        dashed_name: code-signature-valid
        description: 'Boolean to capture if the digital signature is verified against
          the binary content.

          Leave unpopulated if a certificate was unchecked.'
        example: 'true'
        flat_name: code_signature.valid
        level: extended
        name: valid
        node_name: valid
        normalize: []
        short: Boolean to capture if the digital signature is verified against the
          binary content.
        type: boolean
  schema_details:
    group: 2
    prefix: code_signature.
    reusable:
      expected:
      - as: code_signature
        at: file
        full: file.code_signature
      - as: code_signature
        at: process
        full: process.code_signature
      - as: code_signature
        at: dll
        full: dll.code_signature
      order: 2
      top_level: false
    root: false
    title: Code Signature
container:
  field_details:
    dashed_name: container
    description: 'Container fields are used for meta information about the specific
      container that is the source of information.

      These fields help correlate data based containers from any runtime.'
    flat_name: container
    name: container
    node_name: container
    short: Fields describing the container that generated this event.
    type: group
  fields:
    cpu:
      field_details:
        dashed_name: container-cpu
        flat_name: container.cpu
        intermediate: true
        name: cpu
        node_name: cpu
        type: object
      fields:
        usage:
          field_details:
            dashed_name: container-cpu-usage
            description: 'Percent CPU used which is normalized by the number of CPU
              cores and it ranges from 0 to 1. Scaling factor: 1000.'
            flat_name: container.cpu.usage
            level: extended
            name: cpu.usage
            node_name: usage
            normalize: []
            scaling_factor: 1000
            short: Percent CPU used, between 0 and 1.
            type: scaled_float
    disk:
      field_details:
        dashed_name: container-disk
        flat_name: container.disk
        intermediate: true
        name: disk
        node_name: disk
        type: object
      fields:
        read:
          field_details:
            dashed_name: container-disk-read
            flat_name: container.disk.read
            intermediate: true
            name: disk.read
            node_name: read
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: container-disk-read-bytes
                description: The total number of bytes (gauge) read successfully (aggregated
                  from all disks) since the last metric collection.
                flat_name: container.disk.read.bytes
                level: extended
                name: disk.read.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes read by all disks.
                type: long
        write:
          field_details:
            dashed_name: container-disk-write
            flat_name: container.disk.write
            intermediate: true
            name: disk.write
            node_name: write
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: container-disk-write-bytes
                description: The total number of bytes (gauge) written successfully
                  (aggregated from all disks) since the last metric collection.
                flat_name: container.disk.write.bytes
                level: extended
                name: disk.write.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes written on all disks.
                type: long
    id:
      field_details:
        dashed_name: container-id
        description: Unique container id.
        flat_name: container.id
        ignore_above: 1024
        level: core
        name: id
        node_name: id
        normalize: []
        short: Unique container id.
        type: keyword
    image:
      field_details:
        dashed_name: container-image
        flat_name: container.image
        intermediate: true
        name: image
        node_name: image
        type: object
      fields:
        hash:
          field_details:
            dashed_name: container-image-hash
            flat_name: container.image.hash
            intermediate: true
            name: image.hash
            node_name: hash
            type: object
          fields:
            all:
              field_details:
                dashed_name: container-image-hash-all
                description: 'An array of digests of the image the container was built
                  on. Each digest consists of the hash algorithm and value in this
                  format: `algorithm:value`. Algorithm names should align with the
                  field names in the ECS hash field set.'
                example: '[sha256:f8fefc80e3273dc756f288a63945820d6476ad64883892c771b5e2ece6bf1b26]'
                flat_name: container.image.hash.all
                ignore_above: 1024
                level: extended
                name: image.hash.all
                node_name: all
                normalize:
                - array
                short: An array of digests of the image the container was built on.
                type: keyword
        name:
          field_details:
            dashed_name: container-image-name
            description: Name of the image the container was built on.
            flat_name: container.image.name
            ignore_above: 1024
            level: extended
            name: image.name
            node_name: name
            normalize: []
            short: Name of the image the container was built on.
            type: keyword
        tag:
          field_details:
            dashed_name: container-image-tag
            description: Container image tags.
            flat_name: container.image.tag
            ignore_above: 1024
            level: extended
            name: image.tag
            node_name: tag
            normalize:
            - array
            short: Container image tags.
            type: keyword
    labels:
      field_details:
        dashed_name: container-labels
        description: Image labels.
        flat_name: container.labels
        level: extended
        name: labels
        node_name: labels
        normalize: []
        object_type: keyword
        short: Image labels.
        type: object
    memory:
      field_details:
        dashed_name: container-memory
        flat_name: container.memory
        intermediate: true
        name: memory
        node_name: memory
        type: object
      fields:
        usage:
          field_details:
            dashed_name: container-memory-usage
            description: 'Memory usage percentage and it ranges from 0 to 1. Scaling
              factor: 1000.'
            flat_name: container.memory.usage
            level: extended
            name: memory.usage
            node_name: usage
            normalize: []
            scaling_factor: 1000
            short: Percent memory used, between 0 and 1.
            type: scaled_float
    name:
      field_details:
        dashed_name: container-name
        description: Container name.
        flat_name: container.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Container name.
        type: keyword
    network:
      field_details:
        dashed_name: container-network
        flat_name: container.network
        intermediate: true
        name: network
        node_name: network
        type: object
      fields:
        egress:
          field_details:
            dashed_name: container-network-egress
            flat_name: container.network.egress
            intermediate: true
            name: network.egress
            node_name: egress
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: container-network-egress-bytes
                description: The number of bytes (gauge) sent out on all network interfaces
                  by the container since the last metric collection.
                flat_name: container.network.egress.bytes
                level: extended
                name: network.egress.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes sent on all network interfaces.
                type: long
        ingress:
          field_details:
            dashed_name: container-network-ingress
            flat_name: container.network.ingress
            intermediate: true
            name: network.ingress
            node_name: ingress
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: container-network-ingress-bytes
                description: The number of bytes received (gauge) on all network interfaces
                  by the container since the last metric collection.
                flat_name: container.network.ingress.bytes
                level: extended
                name: network.ingress.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes received on all network interfaces.
                type: long
    runtime:
      field_details:
        dashed_name: container-runtime
        description: Runtime managing this container.
        example: docker
        flat_name: container.runtime
        ignore_above: 1024
        level: extended
        name: runtime
        node_name: runtime
        normalize: []
        short: Runtime managing this container.
        type: keyword
    security_context:
      field_details:
        dashed_name: container-security-context
        flat_name: container.security_context
        intermediate: true
        name: security_context
        node_name: security_context
        type: object
      fields:
        privileged:
          field_details:
            dashed_name: container-security-context-privileged
            description: Indicates whether the container is running in privileged
              mode.
            flat_name: container.security_context.privileged
            level: extended
            name: security_context.privileged
            node_name: privileged
            normalize: []
            short: Indicates whether the container is running in privileged mode.
            type: boolean
  schema_details:
    group: 2
    prefix: container.
    root: false
    title: Container
data_stream:
  field_details:
    beta: These fields are in beta and are subject to change.
    dashed_name: data-stream
    description: 'The data_stream fields take part in defining the new data stream
      naming scheme.

      In the new data stream naming scheme the value of the data stream fields combine
      to the name of the actual data stream in the following manner: `{data_stream.type}-{data_stream.dataset}-{data_stream.namespace}`.
      This means the fields can only contain characters that are valid as part of
      names of data streams. More details about this can be found in this https://www.elastic.co/blog/an-introduction-to-the-elastic-data-stream-naming-scheme[blog
      post].

      An Elasticsearch data stream consists of one or more backing indices, and a
      data stream name forms part of the backing indices names. Due to this convention,
      data streams must also follow index naming restrictions. For example, data stream
      names cannot include `\`, `/`, `*`, `?`, `"`, `<`, `>`, `|`, ` ` (space character),
      `,`, or `#`. Please see the Elasticsearch reference for additional https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html#indices-create-api-path-params[restrictions].'
    flat_name: data_stream
    name: data_stream
    node_name: data_stream
    short: The data_stream fields take part in defining the new data stream naming
      scheme.
    type: group
  fields:
    dataset:
      field_details:
        dashed_name: data-stream-dataset
        description: "The field can contain anything that makes sense to signify the\
          \ source of the data.\nExamples include `nginx.access`, `prometheus`, `endpoint`\
          \ etc. For data streams that otherwise fit, but that do not have dataset\
          \ set we use the value \"generic\" for the dataset value. `event.dataset`\
          \ should have the same value as `data_stream.dataset`.\nBeyond the Elasticsearch\
          \ data stream naming criteria noted above, the `dataset` value has additional\
          \ restrictions:\n  * Must not contain `-`\n  * No longer than 100 characters"
        example: nginx.access
        flat_name: data_stream.dataset
        level: extended
        name: dataset
        node_name: dataset
        normalize: []
        short: The field can contain anything that makes sense to signify the source
          of the data.
        type: constant_keyword
    namespace:
      field_details:
        dashed_name: data-stream-namespace
        description: "A user defined namespace. Namespaces are useful to allow grouping\
          \ of data.\nMany users already organize their indices this way, and the\
          \ data stream naming scheme now provides this best practice as a default.\
          \ Many users will populate this field with `default`. If no value is used,\
          \ it falls back to `default`.\nBeyond the Elasticsearch index naming criteria\
          \ noted above, `namespace` value has the additional restrictions:\n  * Must\
          \ not contain `-`\n  * No longer than 100 characters"
        example: production
        flat_name: data_stream.namespace
        level: extended
        name: namespace
        node_name: namespace
        normalize: []
        short: A user defined namespace. Namespaces are useful to allow grouping of
          data.
        type: constant_keyword
    type:
      field_details:
        dashed_name: data-stream-type
        description: 'An overarching type for the data stream.

          Currently allowed values are "logs" and "metrics". We expect to also add
          "traces" and "synthetics" in the near future.'
        example: logs
        flat_name: data_stream.type
        level: extended
        name: type
        node_name: type
        normalize: []
        short: An overarching type for the data stream.
        type: constant_keyword
  schema_details:
    group: 2
    prefix: data_stream.
    root: false
    title: Data Stream
destination:
  field_details:
    dashed_name: destination
    description: 'Destination fields capture details about the receiver of a network
      exchange/packet. These fields are populated from a network event, packet, or
      other event containing details of a network transaction.

      Destination fields are usually populated in conjunction with source fields.
      The source and destination fields are considered the baseline and should always
      be filled if an event contains source and destination details from a network
      transaction. If the event also contains identification of the client and server
      roles, then the client and server fields should also be populated.'
    flat_name: destination
    name: destination
    node_name: destination
    short: Fields about the destination side of a network connection, used with source.
    type: group
  fields:
    address:
      field_details:
        dashed_name: destination-address
        description: 'Some event destination addresses are defined ambiguously. The
          event will sometimes list an IP, a domain or a unix socket.  You should
          always store the raw address in the `.address` field.

          Then it should be duplicated to `.ip` or `.domain`, depending on which one
          it is.'
        flat_name: destination.address
        ignore_above: 1024
        level: extended
        name: address
        node_name: address
        normalize: []
        short: Destination network address.
        type: keyword
    as:
      field_details:
        dashed_name: destination-as
        description: An autonomous system (AS) is a collection of connected Internet
          Protocol (IP) routing prefixes under the control of one or more network
          operators on behalf of a single administrative entity or domain that presents
          a common, clearly defined routing policy to the internet.
        flat_name: destination.as
        intermediate: true
        name: as
        node_name: as
        original_fieldset: as
        short: Fields describing an Autonomous System (Internet routing prefix).
        type: group
      fields:
        number:
          field_details:
            dashed_name: destination-as-number
            description: Unique number allocated to the autonomous system. The autonomous
              system number (ASN) uniquely identifies each network on the Internet.
            example: 15169
            flat_name: destination.as.number
            level: extended
            name: number
            node_name: number
            normalize: []
            original_fieldset: as
            short: Unique number allocated to the autonomous system.
            type: long
        organization:
          field_details:
            dashed_name: destination-as-organization
            flat_name: destination.as.organization
            intermediate: true
            name: organization
            node_name: organization
            original_fieldset: as
            type: object
          fields:
            name:
              field_details:
                dashed_name: destination-as-organization-name
                description: Organization name.
                example: Google LLC
                flat_name: destination.as.organization.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: destination.as.organization.name.text
                  name: text
                  type: match_only_text
                name: organization.name
                node_name: name
                normalize: []
                original_fieldset: as
                short: Organization name.
                type: keyword
    bytes:
      field_details:
        dashed_name: destination-bytes
        description: Bytes sent from the destination to the source.
        example: 184
        flat_name: destination.bytes
        format: bytes
        level: core
        name: bytes
        node_name: bytes
        normalize: []
        short: Bytes sent from the destination to the source.
        type: long
    domain:
      field_details:
        dashed_name: destination-domain
        description: 'The domain name of the destination system.

          This value may be a host name, a fully qualified domain name, or another
          host naming format. The value may derive from the original event or be added
          from enrichment.'
        example: foo.example.com
        flat_name: destination.domain
        ignore_above: 1024
        level: core
        name: domain
        node_name: domain
        normalize: []
        short: The domain name of the destination.
        type: keyword
    geo:
      field_details:
        dashed_name: destination-geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        flat_name: destination.geo
        intermediate: true
        name: geo
        node_name: geo
        original_fieldset: geo
        short: Fields describing a location.
        type: group
      fields:
        city_name:
          field_details:
            dashed_name: destination-geo-city-name
            description: City name.
            example: Montreal
            flat_name: destination.geo.city_name
            ignore_above: 1024
            level: core
            name: city_name
            node_name: city_name
            normalize: []
            original_fieldset: geo
            short: City name.
            type: keyword
        continent_code:
          field_details:
            dashed_name: destination-geo-continent-code
            description: Two-letter code representing continent's name.
            example: NA
            flat_name: destination.geo.continent_code
            ignore_above: 1024
            level: core
            name: continent_code
            node_name: continent_code
            normalize: []
            original_fieldset: geo
            short: Continent code.
            type: keyword
        continent_name:
          field_details:
            dashed_name: destination-geo-continent-name
            description: Name of the continent.
            example: North America
            flat_name: destination.geo.continent_name
            ignore_above: 1024
            level: core
            name: continent_name
            node_name: continent_name
            normalize: []
            original_fieldset: geo
            short: Name of the continent.
            type: keyword
        country_iso_code:
          field_details:
            dashed_name: destination-geo-country-iso-code
            description: Country ISO code.
            example: CA
            flat_name: destination.geo.country_iso_code
            ignore_above: 1024
            level: core
            name: country_iso_code
            node_name: country_iso_code
            normalize: []
            original_fieldset: geo
            short: Country ISO code.
            type: keyword
        country_name:
          field_details:
            dashed_name: destination-geo-country-name
            description: Country name.
            example: Canada
            flat_name: destination.geo.country_name
            ignore_above: 1024
            level: core
            name: country_name
            node_name: country_name
            normalize: []
            original_fieldset: geo
            short: Country name.
            type: keyword
        location:
          field_details:
            dashed_name: destination-geo-location
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'
            flat_name: destination.geo.location
            level: core
            name: location
            node_name: location
            normalize: []
            original_fieldset: geo
            short: Longitude and latitude.
            type: geo_point
        name:
          field_details:
            dashed_name: destination-geo-name
            description: 'User-defined description of a location, at the level of
              granularity they care about.

              Could be the name of their data centers, the floor number, if this describes
              a local physical entity, city names.

              Not typically used in automated geolocation.'
            example: boston-dc
            flat_name: destination.geo.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: geo
            short: User-defined description of a location.
            type: keyword
        postal_code:
          field_details:
            dashed_name: destination-geo-postal-code
            description: 'Postal code associated with the location.

              Values appropriate for this field may also be known as a postcode or
              ZIP code and will vary widely from country to country.'
            example: 94040
            flat_name: destination.geo.postal_code
            ignore_above: 1024
            level: core
            name: postal_code
            node_name: postal_code
            normalize: []
            original_fieldset: geo
            short: Postal code.
            type: keyword
        region_iso_code:
          field_details:
            dashed_name: destination-geo-region-iso-code
            description: Region ISO code.
            example: CA-QC
            flat_name: destination.geo.region_iso_code
            ignore_above: 1024
            level: core
            name: region_iso_code
            node_name: region_iso_code
            normalize: []
            original_fieldset: geo
            short: Region ISO code.
            type: keyword
        region_name:
          field_details:
            dashed_name: destination-geo-region-name
            description: Region name.
            example: Quebec
            flat_name: destination.geo.region_name
            ignore_above: 1024
            level: core
            name: region_name
            node_name: region_name
            normalize: []
            original_fieldset: geo
            short: Region name.
            type: keyword
        timezone:
          field_details:
            dashed_name: destination-geo-timezone
            description: The time zone of the location, such as IANA time zone name.
            example: America/Argentina/Buenos_Aires
            flat_name: destination.geo.timezone
            ignore_above: 1024
            level: core
            name: timezone
            node_name: timezone
            normalize: []
            original_fieldset: geo
            short: Time zone.
            type: keyword
    ip:
      field_details:
        dashed_name: destination-ip
        description: IP address of the destination (IPv4 or IPv6).
        flat_name: destination.ip
        level: core
        name: ip
        node_name: ip
        normalize: []
        short: IP address of the destination.
        type: ip
    mac:
      field_details:
        dashed_name: destination-mac
        description: 'MAC address of the destination.

          The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit
          byte) is represented by two [uppercase] hexadecimal digits giving the value
          of the octet as an unsigned integer. Successive octets are separated by
          a hyphen.'
        example: 00-00-5E-00-53-23
        flat_name: destination.mac
        ignore_above: 1024
        level: core
        name: mac
        node_name: mac
        normalize: []
        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
        short: MAC address of the destination.
        type: keyword
    nat:
      field_details:
        dashed_name: destination-nat
        flat_name: destination.nat
        intermediate: true
        name: nat
        node_name: nat
        type: object
      fields:
        ip:
          field_details:
            dashed_name: destination-nat-ip
            description: 'Translated ip of destination based NAT sessions (e.g. internet
              to private DMZ)

              Typically used with load balancers, firewalls, or routers.'
            flat_name: destination.nat.ip
            level: extended
            name: nat.ip
            node_name: ip
            normalize: []
            short: Destination NAT ip
            type: ip
        port:
          field_details:
            dashed_name: destination-nat-port
            description: 'Port the source session is translated to by NAT Device.

              Typically used with load balancers, firewalls, or routers.'
            flat_name: destination.nat.port
            format: string
            level: extended
            name: nat.port
            node_name: port
            normalize: []
            short: Destination NAT Port
            type: long
    packets:
      field_details:
        dashed_name: destination-packets
        description: Packets sent from the destination to the source.
        example: 12
        flat_name: destination.packets
        level: core
        name: packets
        node_name: packets
        normalize: []
        short: Packets sent from the destination to the source.
        type: long
    port:
      field_details:
        dashed_name: destination-port
        description: Port of the destination.
        flat_name: destination.port
        format: string
        level: core
        name: port
        node_name: port
        normalize: []
        short: Port of the destination.
        type: long
    registered_domain:
      field_details:
        dashed_name: destination-registered-domain
        description: 'The highest registered destination domain, stripped of the subdomain.

          For example, the registered domain for "foo.example.com" is "example.com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last two labels will not work well for TLDs such as "co.uk".'
        example: example.com
        flat_name: destination.registered_domain
        ignore_above: 1024
        level: extended
        name: registered_domain
        node_name: registered_domain
        normalize: []
        short: The highest registered destination domain, stripped of the subdomain.
        type: keyword
    subdomain:
      field_details:
        dashed_name: destination-subdomain
        description: 'The subdomain portion of a fully qualified domain name includes
          all of the names except the host name under the registered_domain.  In a
          partially qualified domain, or if the the qualification level of the full
          name cannot be determined, subdomain contains all of the names below the
          registered domain.

          For example the subdomain portion of "www.east.mydomain.co.uk" is "east".
          If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
          the subdomain field should contain "sub2.sub1", with no trailing period.'
        example: east
        flat_name: destination.subdomain
        ignore_above: 1024
        level: extended
        name: subdomain
        node_name: subdomain
        normalize: []
        short: The subdomain of the domain.
        type: keyword
    top_level_domain:
      field_details:
        dashed_name: destination-top-level-domain
        description: 'The effective top level domain (eTLD), also known as the domain
          suffix, is the last part of the domain name. For example, the top level
          domain for example.com is "com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last label will not work well for effective TLDs such as "co.uk".'
        example: co.uk
        flat_name: destination.top_level_domain
        ignore_above: 1024
        level: extended
        name: top_level_domain
        node_name: top_level_domain
        normalize: []
        short: The effective top level domain (com, org, net, co.uk).
        type: keyword
    user:
      field_details:
        dashed_name: destination-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: destination.user
        intermediate: true
        name: user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: destination-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: destination.user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: destination-user-email
            description: User email address.
            flat_name: destination.user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: destination-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: destination.user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: destination.user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: destination-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: destination.user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: destination-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: destination.user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: destination-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: destination.user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: destination-user-group-name
                description: Name of the group.
                flat_name: destination.user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: destination-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: destination.user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: destination-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: destination.user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: destination-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: destination.user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: destination.user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: destination-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: destination.user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: destination-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: destination.user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: destination-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: destination.user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: destination-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: destination.user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: destination-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: destination.user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: destination-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: destination.user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: destination-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: destination.user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: destination-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: destination.user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
  schema_details:
    group: 2
    nestings:
    - destination.as
    - destination.geo
    - destination.user
    prefix: destination.
    reused_here:
    - full: destination.as
      schema_name: as
      short: Fields describing an Autonomous System (Internet routing prefix).
    - full: destination.geo
      schema_name: geo
      short: Fields describing a location.
    - full: destination.user
      schema_name: user
      short: Fields to describe the user relevant to the event.
    root: false
    title: Destination
device:
  field_details:
    beta: These fields are in beta and are subject to change.
    dashed_name: device
    description: 'Fields that describe a device instance and its characteristics.  Data
      collected for applications and processes running on a (mobile) device can be
      enriched with these fields to describe the identity, type and other characteristics
      of the device.

      This field group definition is based on the Device namespace of the OpenTelemetry
      Semantic Conventions (https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/device/).'
    flat_name: device
    name: device
    node_name: device
    short: Fields characterizing a (mobile) device a process or application is running
      on.
    type: group
  fields:
    id:
      field_details:
        dashed_name: device-id
        description: "The unique identifier of a device. The identifier must not change\
          \ across application sessions but stay fixed for an instance of a (mobile)\
          \ device. \nOn iOS, this value must be equal to the vendor identifier (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor).\
          \ On Android, this value must be equal to the Firebase Installation ID or\
          \ a globally unique UUID which is persisted across sessions in your application.\n\
          For GDPR and data protection law reasons this identifier should not carry\
          \ information that would allow to identify a user."
        example: 00000000-54b3-e7c7-0000-000046bffd97
        flat_name: device.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: The unique identifier of a device.
        type: keyword
    manufacturer:
      field_details:
        dashed_name: device-manufacturer
        description: The vendor name of the device manufacturer.
        example: Samsung
        flat_name: device.manufacturer
        ignore_above: 1024
        level: extended
        name: manufacturer
        node_name: manufacturer
        normalize: []
        short: The vendor name of the device manufacturer.
        type: keyword
    model:
      field_details:
        dashed_name: device-model
        flat_name: device.model
        intermediate: true
        name: model
        node_name: model
        type: object
      fields:
        identifier:
          field_details:
            dashed_name: device-model-identifier
            description: The machine readable identifier of the device model.
            example: SM-G920F
            flat_name: device.model.identifier
            ignore_above: 1024
            level: extended
            name: model.identifier
            node_name: identifier
            normalize: []
            short: The machine readable identifier of the device model.
            type: keyword
        name:
          field_details:
            dashed_name: device-model-name
            description: The human readable marketing name of the device model.
            example: Samsung Galaxy S6
            flat_name: device.model.name
            ignore_above: 1024
            level: extended
            name: model.name
            node_name: name
            normalize: []
            short: The human readable marketing name of the device model.
            type: keyword
  schema_details:
    group: 2
    prefix: device.
    root: false
    title: Device
dll:
  field_details:
    dashed_name: dll
    description: 'These fields contain information about code libraries dynamically
      loaded into processes.


      Many operating systems refer to "shared code libraries" with different names,
      but this field set refers to all of the following:

      * Dynamic-link library (`.dll`) commonly used on Windows

      * Shared Object (`.so`) commonly used on Unix-like operating systems

      * Dynamic library (`.dylib`) commonly used on macOS'
    flat_name: dll
    name: dll
    node_name: dll
    short: These fields contain information about code libraries dynamically loaded
      into processes.
    type: group
  fields:
    code_signature:
      field_details:
        dashed_name: dll-code-signature
        description: These fields contain information about binary code signatures.
        flat_name: dll.code_signature
        intermediate: true
        name: code_signature
        node_name: code_signature
        original_fieldset: code_signature
        short: These fields contain information about binary code signatures.
        type: group
      fields:
        digest_algorithm:
          field_details:
            dashed_name: dll-code-signature-digest-algorithm
            description: 'The hashing algorithm used to sign the process.

              This value can distinguish signatures when a file is signed multiple
              times by the same signer but with a different digest algorithm.'
            example: sha256
            flat_name: dll.code_signature.digest_algorithm
            ignore_above: 1024
            level: extended
            name: digest_algorithm
            node_name: digest_algorithm
            normalize: []
            original_fieldset: code_signature
            short: Hashing algorithm used to sign the process.
            type: keyword
        exists:
          field_details:
            dashed_name: dll-code-signature-exists
            description: Boolean to capture if a signature is present.
            example: 'true'
            flat_name: dll.code_signature.exists
            level: core
            name: exists
            node_name: exists
            normalize: []
            original_fieldset: code_signature
            short: Boolean to capture if a signature is present.
            type: boolean
        signing_id:
          field_details:
            dashed_name: dll-code-signature-signing-id
            description: 'The identifier used to sign the process.

              This is used to identify the application manufactured by a software
              vendor. The field is relevant to Apple *OS only.'
            example: com.apple.xpc.proxy
            flat_name: dll.code_signature.signing_id
            ignore_above: 1024
            level: extended
            name: signing_id
            node_name: signing_id
            normalize: []
            original_fieldset: code_signature
            short: The identifier used to sign the process.
            type: keyword
        status:
          field_details:
            dashed_name: dll-code-signature-status
            description: 'Additional information about the certificate status.

              This is useful for logging cryptographic errors with the certificate
              validity or trust status. Leave unpopulated if the validity or trust
              of the certificate was unchecked.'
            example: ERROR_UNTRUSTED_ROOT
            flat_name: dll.code_signature.status
            ignore_above: 1024
            level: extended
            name: status
            node_name: status
            normalize: []
            original_fieldset: code_signature
            short: Additional information about the certificate status.
            type: keyword
        subject_name:
          field_details:
            dashed_name: dll-code-signature-subject-name
            description: Subject name of the code signer
            example: Microsoft Corporation
            flat_name: dll.code_signature.subject_name
            ignore_above: 1024
            level: core
            name: subject_name
            node_name: subject_name
            normalize: []
            original_fieldset: code_signature
            short: Subject name of the code signer
            type: keyword
        team_id:
          field_details:
            dashed_name: dll-code-signature-team-id
            description: 'The team identifier used to sign the process.

              This is used to identify the team or vendor of a software product. The
              field is relevant to Apple *OS only.'
            example: EQHXZ8M8AV
            flat_name: dll.code_signature.team_id
            ignore_above: 1024
            level: extended
            name: team_id
            node_name: team_id
            normalize: []
            original_fieldset: code_signature
            short: The team identifier used to sign the process.
            type: keyword
        timestamp:
          field_details:
            dashed_name: dll-code-signature-timestamp
            description: Date and time when the code signature was generated and signed.
            example: '2021-01-01T12:10:30Z'
            flat_name: dll.code_signature.timestamp
            level: extended
            name: timestamp
            node_name: timestamp
            normalize: []
            original_fieldset: code_signature
            short: When the signature was generated and signed.
            type: date
        trusted:
          field_details:
            dashed_name: dll-code-signature-trusted
            description: 'Stores the trust status of the certificate chain.

              Validating the trust of the certificate chain may be complicated, and
              this field should only be populated by tools that actively check the
              status.'
            example: 'true'
            flat_name: dll.code_signature.trusted
            level: extended
            name: trusted
            node_name: trusted
            normalize: []
            original_fieldset: code_signature
            short: Stores the trust status of the certificate chain.
            type: boolean
        valid:
          field_details:
            dashed_name: dll-code-signature-valid
            description: 'Boolean to capture if the digital signature is verified
              against the binary content.

              Leave unpopulated if a certificate was unchecked.'
            example: 'true'
            flat_name: dll.code_signature.valid
            level: extended
            name: valid
            node_name: valid
            normalize: []
            original_fieldset: code_signature
            short: Boolean to capture if the digital signature is verified against
              the binary content.
            type: boolean
    hash:
      field_details:
        dashed_name: dll-hash
        description: 'The hash fields represent different bitwise hash algorithms
          and their values.

          Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
          for other hashes by lowercasing the hash algorithm name and using underscore
          separators as appropriate (snake case, e.g. sha3_512).

          Note that this fieldset is used for common hashes that may be computed over
          a range of generic bytes. Entity-specific hashes such as ja3 or imphash
          are placed in the fieldsets to which they relate (tls and pe, respectively).'
        flat_name: dll.hash
        intermediate: true
        name: hash
        node_name: hash
        original_fieldset: hash
        short: Hashes, usually file hashes.
        type: group
      fields:
        md5:
          field_details:
            dashed_name: dll-hash-md5
            description: MD5 hash.
            flat_name: dll.hash.md5
            ignore_above: 1024
            level: extended
            name: md5
            node_name: md5
            normalize: []
            original_fieldset: hash
            short: MD5 hash.
            type: keyword
        sha1:
          field_details:
            dashed_name: dll-hash-sha1
            description: SHA1 hash.
            flat_name: dll.hash.sha1
            ignore_above: 1024
            level: extended
            name: sha1
            node_name: sha1
            normalize: []
            original_fieldset: hash
            short: SHA1 hash.
            type: keyword
        sha256:
          field_details:
            dashed_name: dll-hash-sha256
            description: SHA256 hash.
            flat_name: dll.hash.sha256
            ignore_above: 1024
            level: extended
            name: sha256
            node_name: sha256
            normalize: []
            original_fieldset: hash
            short: SHA256 hash.
            type: keyword
        sha384:
          field_details:
            dashed_name: dll-hash-sha384
            description: SHA384 hash.
            flat_name: dll.hash.sha384
            ignore_above: 1024
            level: extended
            name: sha384
            node_name: sha384
            normalize: []
            original_fieldset: hash
            short: SHA384 hash.
            type: keyword
        sha512:
          field_details:
            dashed_name: dll-hash-sha512
            description: SHA512 hash.
            flat_name: dll.hash.sha512
            ignore_above: 1024
            level: extended
            name: sha512
            node_name: sha512
            normalize: []
            original_fieldset: hash
            short: SHA512 hash.
            type: keyword
        ssdeep:
          field_details:
            dashed_name: dll-hash-ssdeep
            description: SSDEEP hash.
            flat_name: dll.hash.ssdeep
            ignore_above: 1024
            level: extended
            name: ssdeep
            node_name: ssdeep
            normalize: []
            original_fieldset: hash
            short: SSDEEP hash.
            type: keyword
        tlsh:
          field_details:
            dashed_name: dll-hash-tlsh
            description: TLSH hash.
            flat_name: dll.hash.tlsh
            ignore_above: 1024
            level: extended
            name: tlsh
            node_name: tlsh
            normalize: []
            original_fieldset: hash
            short: TLSH hash.
            type: keyword
    name:
      field_details:
        dashed_name: dll-name
        description: 'Name of the library.

          This generally maps to the name of the file on disk.'
        example: kernel32.dll
        flat_name: dll.name
        ignore_above: 1024
        level: core
        name: name
        node_name: name
        normalize: []
        short: Name of the library.
        type: keyword
    path:
      field_details:
        dashed_name: dll-path
        description: Full file path of the library.
        example: C:\Windows\System32\kernel32.dll
        flat_name: dll.path
        ignore_above: 1024
        level: extended
        name: path
        node_name: path
        normalize: []
        short: Full file path of the library.
        type: keyword
    pe:
      field_details:
        dashed_name: dll-pe
        description: These fields contain Windows Portable Executable (PE) metadata.
        flat_name: dll.pe
        intermediate: true
        name: pe
        node_name: pe
        original_fieldset: pe
        short: These fields contain Windows Portable Executable (PE) metadata.
        type: group
      fields:
        architecture:
          field_details:
            dashed_name: dll-pe-architecture
            description: CPU architecture target for the file.
            example: x64
            flat_name: dll.pe.architecture
            ignore_above: 1024
            level: extended
            name: architecture
            node_name: architecture
            normalize: []
            original_fieldset: pe
            short: CPU architecture target for the file.
            type: keyword
        company:
          field_details:
            dashed_name: dll-pe-company
            description: Internal company name of the file, provided at compile-time.
            example: Microsoft Corporation
            flat_name: dll.pe.company
            ignore_above: 1024
            level: extended
            name: company
            node_name: company
            normalize: []
            original_fieldset: pe
            short: Internal company name of the file, provided at compile-time.
            type: keyword
        description:
          field_details:
            dashed_name: dll-pe-description
            description: Internal description of the file, provided at compile-time.
            example: Paint
            flat_name: dll.pe.description
            ignore_above: 1024
            level: extended
            name: description
            node_name: description
            normalize: []
            original_fieldset: pe
            short: Internal description of the file, provided at compile-time.
            type: keyword
        file_version:
          field_details:
            dashed_name: dll-pe-file-version
            description: Internal version of the file, provided at compile-time.
            example: 6.3.9600.17415
            flat_name: dll.pe.file_version
            ignore_above: 1024
            level: extended
            name: file_version
            node_name: file_version
            normalize: []
            original_fieldset: pe
            short: Process name.
            type: keyword
        go_import_hash:
          field_details:
            dashed_name: dll-pe-go-import-hash
            description: 'A hash of the Go language imports in a PE file excluding
              standard library imports. An import hash can be used to fingerprint
              binaries even after recompilation or other code-level transformations
              have occurred, which would change more traditional hash values.

              The algorithm used to calculate the Go symbol hash and a reference implementation
              are available [here](https://github.com/elastic/toutoumomoma).'
            example: 10bddcb4cee42080f76c88d9ff964491
            flat_name: dll.pe.go_import_hash
            ignore_above: 1024
            level: extended
            name: go_import_hash
            node_name: go_import_hash
            normalize: []
            original_fieldset: pe
            short: A hash of the Go language imports in a PE file.
            type: keyword
        go_imports:
          field_details:
            dashed_name: dll-pe-go-imports
            description: List of imported Go language element names and types.
            flat_name: dll.pe.go_imports
            level: extended
            name: go_imports
            node_name: go_imports
            normalize: []
            original_fieldset: pe
            short: List of imported Go language element names and types.
            type: flattened
        go_imports_names_entropy:
          field_details:
            dashed_name: dll-pe-go-imports-names-entropy
            description: Shannon entropy calculation from the list of Go imports.
            flat_name: dll.pe.go_imports_names_entropy
            format: number
            level: extended
            name: go_imports_names_entropy
            node_name: go_imports_names_entropy
            normalize: []
            original_fieldset: pe
            short: Shannon entropy calculation from the list of Go imports.
            type: long
        go_imports_names_var_entropy:
          field_details:
            dashed_name: dll-pe-go-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              Go imports.
            flat_name: dll.pe.go_imports_names_var_entropy
            format: number
            level: extended
            name: go_imports_names_var_entropy
            node_name: go_imports_names_var_entropy
            normalize: []
            original_fieldset: pe
            short: Variance for Shannon entropy calculation from the list of Go imports.
            type: long
        go_stripped:
          field_details:
            dashed_name: dll-pe-go-stripped
            description: Set to true if the file is a Go executable that has had its
              symbols stripped or obfuscated and false if an unobfuscated Go executable.
            flat_name: dll.pe.go_stripped
            level: extended
            name: go_stripped
            node_name: go_stripped
            normalize: []
            original_fieldset: pe
            short: Whether the file is a stripped or obfuscated Go executable.
            type: boolean
        imphash:
          field_details:
            dashed_name: dll-pe-imphash
            description: 'A hash of the imports in a PE file. An imphash -- or import
              hash -- can be used to fingerprint binaries even after recompilation
              or other code-level transformations have occurred, which would change
              more traditional hash values.

              Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
            example: 0c6803c4e922103c4dca5963aad36ddf
            flat_name: dll.pe.imphash
            ignore_above: 1024
            level: extended
            name: imphash
            node_name: imphash
            normalize: []
            original_fieldset: pe
            short: A hash of the imports in a PE file.
            type: keyword
        import_hash:
          field_details:
            dashed_name: dll-pe-import-hash
            description: 'A hash of the imports in a PE file. An import hash can be
              used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is a synonym for imphash.'
            example: d41d8cd98f00b204e9800998ecf8427e
            flat_name: dll.pe.import_hash
            ignore_above: 1024
            level: extended
            name: import_hash
            node_name: import_hash
            normalize: []
            original_fieldset: pe
            short: A hash of the imports in a PE file.
            type: keyword
        imports:
          field_details:
            dashed_name: dll-pe-imports
            description: List of imported element names and types.
            flat_name: dll.pe.imports
            level: extended
            name: imports
            node_name: imports
            normalize:
            - array
            original_fieldset: pe
            short: List of imported element names and types.
            type: flattened
        imports_names_entropy:
          field_details:
            dashed_name: dll-pe-imports-names-entropy
            description: Shannon entropy calculation from the list of imported element
              names and types.
            flat_name: dll.pe.imports_names_entropy
            format: number
            level: extended
            name: imports_names_entropy
            node_name: imports_names_entropy
            normalize: []
            original_fieldset: pe
            short: Shannon entropy calculation from the list of imported element names
              and types.
            type: long
        imports_names_var_entropy:
          field_details:
            dashed_name: dll-pe-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              imported element names and types.
            flat_name: dll.pe.imports_names_var_entropy
            format: number
            level: extended
            name: imports_names_var_entropy
            node_name: imports_names_var_entropy
            normalize: []
            original_fieldset: pe
            short: Variance for Shannon entropy calculation from the list of imported
              element names and types.
            type: long
        original_file_name:
          field_details:
            dashed_name: dll-pe-original-file-name
            description: Internal name of the file, provided at compile-time.
            example: MSPAINT.EXE
            flat_name: dll.pe.original_file_name
            ignore_above: 1024
            level: extended
            name: original_file_name
            node_name: original_file_name
            normalize: []
            original_fieldset: pe
            short: Internal name of the file, provided at compile-time.
            type: keyword
        pehash:
          field_details:
            dashed_name: dll-pe-pehash
            description: 'A hash of the PE header and data from one or more PE sections.
              An pehash can be used to cluster files by transforming structural information
              about a file into a hash value.

              Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
            example: 73ff189b63cd6be375a7ff25179a38d347651975
            flat_name: dll.pe.pehash
            ignore_above: 1024
            level: extended
            name: pehash
            node_name: pehash
            normalize: []
            original_fieldset: pe
            short: A hash of the PE header and data from one or more PE sections.
            type: keyword
        product:
          field_details:
            dashed_name: dll-pe-product
            description: Internal product name of the file, provided at compile-time.
            example: "Microsoft\xAE Windows\xAE Operating System"
            flat_name: dll.pe.product
            ignore_above: 1024
            level: extended
            name: product
            node_name: product
            normalize: []
            original_fieldset: pe
            short: Internal product name of the file, provided at compile-time.
            type: keyword
        sections:
          field_details:
            dashed_name: dll-pe-sections
            description: 'An array containing an object for each section of the PE
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `pe.sections.*`.'
            flat_name: dll.pe.sections
            intermediate: false
            level: extended
            name: sections
            node_name: sections
            normalize:
            - array
            original_fieldset: pe
            short: Section information of the PE file.
            type: nested
          fields:
            entropy:
              field_details:
                dashed_name: dll-pe-sections-entropy
                description: Shannon entropy calculation from the section.
                flat_name: dll.pe.sections.entropy
                format: number
                level: extended
                name: sections.entropy
                node_name: entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the section.
                type: long
            name:
              field_details:
                dashed_name: dll-pe-sections-name
                description: PE Section List name.
                flat_name: dll.pe.sections.name
                ignore_above: 1024
                level: extended
                name: sections.name
                node_name: name
                normalize: []
                original_fieldset: pe
                short: PE Section List name.
                type: keyword
            physical_size:
              field_details:
                dashed_name: dll-pe-sections-physical-size
                description: PE Section List physical size.
                flat_name: dll.pe.sections.physical_size
                format: bytes
                level: extended
                name: sections.physical_size
                node_name: physical_size
                normalize: []
                original_fieldset: pe
                short: PE Section List physical size.
                type: long
            var_entropy:
              field_details:
                dashed_name: dll-pe-sections-var-entropy
                description: Variance for Shannon entropy calculation from the section.
                flat_name: dll.pe.sections.var_entropy
                format: number
                level: extended
                name: sections.var_entropy
                node_name: var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the section.
                type: long
            virtual_size:
              field_details:
                dashed_name: dll-pe-sections-virtual-size
                description: PE Section List virtual size. This is always the same
                  as `physical_size`.
                flat_name: dll.pe.sections.virtual_size
                format: string
                level: extended
                name: sections.virtual_size
                node_name: virtual_size
                normalize: []
                original_fieldset: pe
                short: PE Section List virtual size. This is always the same as `physical_size`.
                type: long
  schema_details:
    group: 2
    nestings:
    - dll.code_signature
    - dll.hash
    - dll.pe
    prefix: dll.
    reused_here:
    - full: dll.hash
      schema_name: hash
      short: Hashes, usually file hashes.
    - full: dll.pe
      schema_name: pe
      short: These fields contain Windows Portable Executable (PE) metadata.
    - full: dll.code_signature
      schema_name: code_signature
      short: These fields contain information about binary code signatures.
    root: false
    title: DLL
dns:
  field_details:
    dashed_name: dns
    description: 'Fields describing DNS queries and answers.

      DNS events should either represent a single DNS query prior to getting answers
      (`dns.type:query`) or they should represent a full exchange and contain the
      query details as well as all of the answers that were provided for this query
      (`dns.type:answer`).'
    flat_name: dns
    name: dns
    node_name: dns
    short: Fields describing DNS queries and answers.
    type: group
  fields:
    answers:
      field_details:
        dashed_name: dns-answers
        description: 'An array containing an object for each answer section returned
          by the server.

          The main keys that should be present in these objects are defined by ECS.
          Records that have more information may contain more keys than what ECS defines.

          Not all DNS data sources give all details about DNS answers. At minimum,
          answer objects must contain the `data` key. If more information is available,
          map as much of it to ECS as possible, and add any additional fields to the
          answer objects as custom fields.'
        flat_name: dns.answers
        intermediate: false
        level: extended
        name: answers
        node_name: answers
        normalize:
        - array
        short: Array of DNS answers.
        type: object
      fields:
        class:
          field_details:
            dashed_name: dns-answers-class
            description: The class of DNS data contained in this resource record.
            example: IN
            flat_name: dns.answers.class
            ignore_above: 1024
            level: extended
            name: answers.class
            node_name: class
            normalize: []
            short: The class of DNS data contained in this resource record.
            type: keyword
        data:
          field_details:
            dashed_name: dns-answers-data
            description: 'The data describing the resource.

              The meaning of this data depends on the type and class of the resource
              record.'
            example: 10.10.10.10
            flat_name: dns.answers.data
            ignore_above: 1024
            level: extended
            name: answers.data
            node_name: data
            normalize: []
            short: The data describing the resource.
            type: keyword
        name:
          field_details:
            dashed_name: dns-answers-name
            description: 'The domain name to which this resource record pertains.

              If a chain of CNAME is being resolved, each answer''s `name` should
              be the one that corresponds with the answer''s `data`. It should not
              simply be the original `question.name` repeated.'
            example: www.example.com
            flat_name: dns.answers.name
            ignore_above: 1024
            level: extended
            name: answers.name
            node_name: name
            normalize: []
            short: The domain name to which this resource record pertains.
            type: keyword
        ttl:
          field_details:
            dashed_name: dns-answers-ttl
            description: The time interval in seconds that this resource record may
              be cached before it should be discarded. Zero values mean that the data
              should not be cached.
            example: 180
            flat_name: dns.answers.ttl
            level: extended
            name: answers.ttl
            node_name: ttl
            normalize: []
            short: The time interval in seconds that this resource record may be cached
              before it should be discarded.
            type: long
        type:
          field_details:
            dashed_name: dns-answers-type
            description: The type of data contained in this resource record.
            example: CNAME
            flat_name: dns.answers.type
            ignore_above: 1024
            level: extended
            name: answers.type
            node_name: type
            normalize: []
            short: The type of data contained in this resource record.
            type: keyword
    header_flags:
      field_details:
        dashed_name: dns-header-flags
        description: Array of 2 letter DNS header flags.
        example: '["RD", "RA"]'
        expected_values:
        - AA
        - TC
        - RD
        - RA
        - AD
        - CD
        - DO
        flat_name: dns.header_flags
        ignore_above: 1024
        level: extended
        name: header_flags
        node_name: header_flags
        normalize:
        - array
        short: Array of DNS header flags.
        type: keyword
    id:
      field_details:
        dashed_name: dns-id
        description: The DNS packet identifier assigned by the program that generated
          the query. The identifier is copied to the response.
        example: 62111
        flat_name: dns.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: The DNS packet identifier assigned by the program that generated the
          query. The identifier is copied to the response.
        type: keyword
    op_code:
      field_details:
        dashed_name: dns-op-code
        description: The DNS operation code that specifies the kind of query in the
          message. This value is set by the originator of a query and copied into
          the response.
        example: QUERY
        flat_name: dns.op_code
        ignore_above: 1024
        level: extended
        name: op_code
        node_name: op_code
        normalize: []
        short: The DNS operation code that specifies the kind of query in the message.
        type: keyword
    question:
      field_details:
        dashed_name: dns-question
        flat_name: dns.question
        intermediate: true
        name: question
        node_name: question
        type: object
      fields:
        class:
          field_details:
            dashed_name: dns-question-class
            description: The class of records being queried.
            example: IN
            flat_name: dns.question.class
            ignore_above: 1024
            level: extended
            name: question.class
            node_name: class
            normalize: []
            short: The class of records being queried.
            type: keyword
        name:
          field_details:
            dashed_name: dns-question-name
            description: 'The name being queried.

              If the name field contains non-printable characters (below 32 or above
              126), those characters should be represented as escaped base 10 integers
              (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns,
              and line feeds should be converted to \t, \r, and \n respectively.'
            example: www.example.com
            flat_name: dns.question.name
            ignore_above: 1024
            level: extended
            name: question.name
            node_name: name
            normalize: []
            short: The name being queried.
            type: keyword
        registered_domain:
          field_details:
            dashed_name: dns-question-registered-domain
            description: 'The highest registered domain, stripped of the subdomain.

              For example, the registered domain for "foo.example.com" is "example.com".

              This value can be determined precisely with a list like the public suffix
              list (http://publicsuffix.org). Trying to approximate this by simply
              taking the last two labels will not work well for TLDs such as "co.uk".'
            example: example.com
            flat_name: dns.question.registered_domain
            ignore_above: 1024
            level: extended
            name: question.registered_domain
            node_name: registered_domain
            normalize: []
            short: The highest registered domain, stripped of the subdomain.
            type: keyword
        subdomain:
          field_details:
            dashed_name: dns-question-subdomain
            description: 'The subdomain is all of the labels under the registered_domain.

              If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
              the subdomain field should contain "sub2.sub1", with no trailing period.'
            example: www
            flat_name: dns.question.subdomain
            ignore_above: 1024
            level: extended
            name: question.subdomain
            node_name: subdomain
            normalize: []
            short: The subdomain of the domain.
            type: keyword
        top_level_domain:
          field_details:
            dashed_name: dns-question-top-level-domain
            description: 'The effective top level domain (eTLD), also known as the
              domain suffix, is the last part of the domain name. For example, the
              top level domain for example.com is "com".

              This value can be determined precisely with a list like the public suffix
              list (http://publicsuffix.org). Trying to approximate this by simply
              taking the last label will not work well for effective TLDs such as
              "co.uk".'
            example: co.uk
            flat_name: dns.question.top_level_domain
            ignore_above: 1024
            level: extended
            name: question.top_level_domain
            node_name: top_level_domain
            normalize: []
            short: The effective top level domain (com, org, net, co.uk).
            type: keyword
        type:
          field_details:
            dashed_name: dns-question-type
            description: The type of record being queried.
            example: AAAA
            flat_name: dns.question.type
            ignore_above: 1024
            level: extended
            name: question.type
            node_name: type
            normalize: []
            short: The type of record being queried.
            type: keyword
    resolved_ip:
      field_details:
        dashed_name: dns-resolved-ip
        description: 'Array containing all IPs seen in `answers.data`.

          The `answers` array can be difficult to use, because of the variety of data
          formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`
          makes it possible to index them as IP addresses, and makes them easier to
          visualize and query for.'
        example: '["10.10.10.10", "10.10.10.11"]'
        flat_name: dns.resolved_ip
        level: extended
        name: resolved_ip
        node_name: resolved_ip
        normalize:
        - array
        short: Array containing all IPs seen in answers.data
        type: ip
    response_code:
      field_details:
        dashed_name: dns-response-code
        description: The DNS response code.
        example: NOERROR
        flat_name: dns.response_code
        ignore_above: 1024
        level: extended
        name: response_code
        node_name: response_code
        normalize: []
        short: The DNS response code.
        type: keyword
    type:
      field_details:
        dashed_name: dns-type
        description: 'The type of DNS event captured, query or answer.

          If your source of DNS events only gives you DNS queries, you should only
          create dns events of type `dns.type:query`.

          If your source of DNS events gives you answers as well, you should create
          one event per query (optionally as soon as the query is seen). And a second
          event containing all query details as well as an array of answers.'
        example: answer
        flat_name: dns.type
        ignore_above: 1024
        level: extended
        name: type
        node_name: type
        normalize: []
        short: The type of DNS event captured, query or answer.
        type: keyword
  schema_details:
    group: 2
    prefix: dns.
    root: false
    title: DNS
ecs:
  field_details:
    dashed_name: ecs
    description: Meta-information specific to ECS.
    flat_name: ecs
    name: ecs
    node_name: ecs
    short: Meta-information specific to ECS.
    type: group
  fields:
    version:
      field_details:
        dashed_name: ecs-version
        description: 'ECS version this event conforms to. `ecs.version` is a required
          field and must exist in all events.

          When querying across multiple indices -- which may conform to slightly different
          ECS versions -- this field lets integrations adjust to the schema version
          of the events.'
        example: 1.0.0
        flat_name: ecs.version
        ignore_above: 1024
        level: core
        name: version
        node_name: version
        normalize: []
        required: true
        short: ECS version this event conforms to.
        type: keyword
  schema_details:
    group: 2
    prefix: ecs.
    root: false
    title: ECS
elf:
  field_details:
    beta: These fields are in beta and are subject to change.
    dashed_name: elf
    description: These fields contain Linux Executable Linkable Format (ELF) metadata.
    flat_name: elf
    name: elf
    node_name: elf
    short: These fields contain Linux Executable Linkable Format (ELF) metadata.
    type: group
  fields:
    architecture:
      field_details:
        dashed_name: elf-architecture
        description: Machine architecture of the ELF file.
        example: x86-64
        flat_name: elf.architecture
        ignore_above: 1024
        level: extended
        name: architecture
        node_name: architecture
        normalize: []
        short: Machine architecture of the ELF file.
        type: keyword
    byte_order:
      field_details:
        dashed_name: elf-byte-order
        description: Byte sequence of ELF file.
        example: Little Endian
        flat_name: elf.byte_order
        ignore_above: 1024
        level: extended
        name: byte_order
        node_name: byte_order
        normalize: []
        short: Byte sequence of ELF file.
        type: keyword
    cpu_type:
      field_details:
        dashed_name: elf-cpu-type
        description: CPU type of the ELF file.
        example: Intel
        flat_name: elf.cpu_type
        ignore_above: 1024
        level: extended
        name: cpu_type
        node_name: cpu_type
        normalize: []
        short: CPU type of the ELF file.
        type: keyword
    creation_date:
      field_details:
        dashed_name: elf-creation-date
        description: Extracted when possible from the file's metadata. Indicates when
          it was built or compiled. It can also be faked by malware creators.
        flat_name: elf.creation_date
        level: extended
        name: creation_date
        node_name: creation_date
        normalize: []
        short: Build or compile date.
        type: date
    exports:
      field_details:
        dashed_name: elf-exports
        description: List of exported element names and types.
        flat_name: elf.exports
        level: extended
        name: exports
        node_name: exports
        normalize:
        - array
        short: List of exported element names and types.
        type: flattened
    go_import_hash:
      field_details:
        dashed_name: elf-go-import-hash
        description: 'A hash of the Go language imports in an ELF file excluding standard
          library imports. An import hash can be used to fingerprint binaries even
          after recompilation or other code-level transformations have occurred, which
          would change more traditional hash values.

          The algorithm used to calculate the Go symbol hash and a reference implementation
          are available [here](https://github.com/elastic/toutoumomoma).'
        example: 10bddcb4cee42080f76c88d9ff964491
        flat_name: elf.go_import_hash
        ignore_above: 1024
        level: extended
        name: go_import_hash
        node_name: go_import_hash
        normalize: []
        short: A hash of the Go language imports in an ELF file.
        type: keyword
    go_imports:
      field_details:
        dashed_name: elf-go-imports
        description: List of imported Go language element names and types.
        flat_name: elf.go_imports
        level: extended
        name: go_imports
        node_name: go_imports
        normalize: []
        short: List of imported Go language element names and types.
        type: flattened
    go_imports_names_entropy:
      field_details:
        dashed_name: elf-go-imports-names-entropy
        description: Shannon entropy calculation from the list of Go imports.
        flat_name: elf.go_imports_names_entropy
        format: number
        level: extended
        name: go_imports_names_entropy
        node_name: go_imports_names_entropy
        normalize: []
        short: Shannon entropy calculation from the list of Go imports.
        type: long
    go_imports_names_var_entropy:
      field_details:
        dashed_name: elf-go-imports-names-var-entropy
        description: Variance for Shannon entropy calculation from the list of Go
          imports.
        flat_name: elf.go_imports_names_var_entropy
        format: number
        level: extended
        name: go_imports_names_var_entropy
        node_name: go_imports_names_var_entropy
        normalize: []
        short: Variance for Shannon entropy calculation from the list of Go imports.
        type: long
    go_stripped:
      field_details:
        dashed_name: elf-go-stripped
        description: Set to true if the file is a Go executable that has had its symbols
          stripped or obfuscated and false if an unobfuscated Go executable.
        flat_name: elf.go_stripped
        level: extended
        name: go_stripped
        node_name: go_stripped
        normalize: []
        short: Whether the file is a stripped or obfuscated Go executable.
        type: boolean
    header:
      field_details:
        dashed_name: elf-header
        flat_name: elf.header
        intermediate: true
        name: header
        node_name: header
        type: object
      fields:
        abi_version:
          field_details:
            dashed_name: elf-header-abi-version
            description: Version of the ELF Application Binary Interface (ABI).
            flat_name: elf.header.abi_version
            ignore_above: 1024
            level: extended
            name: header.abi_version
            node_name: abi_version
            normalize: []
            short: Version of the ELF Application Binary Interface (ABI).
            type: keyword
        class:
          field_details:
            dashed_name: elf-header-class
            description: Header class of the ELF file.
            flat_name: elf.header.class
            ignore_above: 1024
            level: extended
            name: header.class
            node_name: class
            normalize: []
            short: Header class of the ELF file.
            type: keyword
        data:
          field_details:
            dashed_name: elf-header-data
            description: Data table of the ELF header.
            flat_name: elf.header.data
            ignore_above: 1024
            level: extended
            name: header.data
            node_name: data
            normalize: []
            short: Data table of the ELF header.
            type: keyword
        entrypoint:
          field_details:
            dashed_name: elf-header-entrypoint
            description: Header entrypoint of the ELF file.
            flat_name: elf.header.entrypoint
            format: string
            level: extended
            name: header.entrypoint
            node_name: entrypoint
            normalize: []
            short: Header entrypoint of the ELF file.
            type: long
        object_version:
          field_details:
            dashed_name: elf-header-object-version
            description: '"0x1" for original ELF files.'
            flat_name: elf.header.object_version
            ignore_above: 1024
            level: extended
            name: header.object_version
            node_name: object_version
            normalize: []
            short: '"0x1" for original ELF files.'
            type: keyword
        os_abi:
          field_details:
            dashed_name: elf-header-os-abi
            description: Application Binary Interface (ABI) of the Linux OS.
            flat_name: elf.header.os_abi
            ignore_above: 1024
            level: extended
            name: header.os_abi
            node_name: os_abi
            normalize: []
            short: Application Binary Interface (ABI) of the Linux OS.
            type: keyword
        type:
          field_details:
            dashed_name: elf-header-type
            description: Header type of the ELF file.
            flat_name: elf.header.type
            ignore_above: 1024
            level: extended
            name: header.type
            node_name: type
            normalize: []
            short: Header type of the ELF file.
            type: keyword
        version:
          field_details:
            dashed_name: elf-header-version
            description: Version of the ELF header.
            flat_name: elf.header.version
            ignore_above: 1024
            level: extended
            name: header.version
            node_name: version
            normalize: []
            short: Version of the ELF header.
            type: keyword
    import_hash:
      field_details:
        dashed_name: elf-import-hash
        description: 'A hash of the imports in an ELF file. An import hash can be
          used to fingerprint binaries even after recompilation or other code-level
          transformations have occurred, which would change more traditional hash
          values.

          This is an ELF implementation of the Windows PE imphash.'
        example: d41d8cd98f00b204e9800998ecf8427e
        flat_name: elf.import_hash
        ignore_above: 1024
        level: extended
        name: import_hash
        node_name: import_hash
        normalize: []
        short: A hash of the imports in an ELF file.
        type: keyword
    imports:
      field_details:
        dashed_name: elf-imports
        description: List of imported element names and types.
        flat_name: elf.imports
        level: extended
        name: imports
        node_name: imports
        normalize:
        - array
        short: List of imported element names and types.
        type: flattened
    imports_names_entropy:
      field_details:
        dashed_name: elf-imports-names-entropy
        description: Shannon entropy calculation from the list of imported element
          names and types.
        flat_name: elf.imports_names_entropy
        format: number
        level: extended
        name: imports_names_entropy
        node_name: imports_names_entropy
        normalize: []
        short: Shannon entropy calculation from the list of imported element names
          and types.
        type: long
    imports_names_var_entropy:
      field_details:
        dashed_name: elf-imports-names-var-entropy
        description: Variance for Shannon entropy calculation from the list of imported
          element names and types.
        flat_name: elf.imports_names_var_entropy
        format: number
        level: extended
        name: imports_names_var_entropy
        node_name: imports_names_var_entropy
        normalize: []
        short: Variance for Shannon entropy calculation from the list of imported
          element names and types.
        type: long
    sections:
      field_details:
        dashed_name: elf-sections
        description: 'An array containing an object for each section of the ELF file.

          The keys that should be present in these objects are defined by sub-fields
          underneath `elf.sections.*`.'
        flat_name: elf.sections
        intermediate: false
        level: extended
        name: sections
        node_name: sections
        normalize:
        - array
        short: Section information of the ELF file.
        type: nested
      fields:
        chi2:
          field_details:
            dashed_name: elf-sections-chi2
            description: Chi-square probability distribution of the section.
            flat_name: elf.sections.chi2
            format: number
            level: extended
            name: sections.chi2
            node_name: chi2
            normalize: []
            short: Chi-square probability distribution of the section.
            type: long
        entropy:
          field_details:
            dashed_name: elf-sections-entropy
            description: Shannon entropy calculation from the section.
            flat_name: elf.sections.entropy
            format: number
            level: extended
            name: sections.entropy
            node_name: entropy
            normalize: []
            short: Shannon entropy calculation from the section.
            type: long
        flags:
          field_details:
            dashed_name: elf-sections-flags
            description: ELF Section List flags.
            flat_name: elf.sections.flags
            ignore_above: 1024
            level: extended
            name: sections.flags
            node_name: flags
            normalize: []
            short: ELF Section List flags.
            type: keyword
        name:
          field_details:
            dashed_name: elf-sections-name
            description: ELF Section List name.
            flat_name: elf.sections.name
            ignore_above: 1024
            level: extended
            name: sections.name
            node_name: name
            normalize: []
            short: ELF Section List name.
            type: keyword
        physical_offset:
          field_details:
            dashed_name: elf-sections-physical-offset
            description: ELF Section List offset.
            flat_name: elf.sections.physical_offset
            ignore_above: 1024
            level: extended
            name: sections.physical_offset
            node_name: physical_offset
            normalize: []
            short: ELF Section List offset.
            type: keyword
        physical_size:
          field_details:
            dashed_name: elf-sections-physical-size
            description: ELF Section List physical size.
            flat_name: elf.sections.physical_size
            format: bytes
            level: extended
            name: sections.physical_size
            node_name: physical_size
            normalize: []
            short: ELF Section List physical size.
            type: long
        type:
          field_details:
            dashed_name: elf-sections-type
            description: ELF Section List type.
            flat_name: elf.sections.type
            ignore_above: 1024
            level: extended
            name: sections.type
            node_name: type
            normalize: []
            short: ELF Section List type.
            type: keyword
        var_entropy:
          field_details:
            dashed_name: elf-sections-var-entropy
            description: Variance for Shannon entropy calculation from the section.
            flat_name: elf.sections.var_entropy
            format: number
            level: extended
            name: sections.var_entropy
            node_name: var_entropy
            normalize: []
            short: Variance for Shannon entropy calculation from the section.
            type: long
        virtual_address:
          field_details:
            dashed_name: elf-sections-virtual-address
            description: ELF Section List virtual address.
            flat_name: elf.sections.virtual_address
            format: string
            level: extended
            name: sections.virtual_address
            node_name: virtual_address
            normalize: []
            short: ELF Section List virtual address.
            type: long
        virtual_size:
          field_details:
            dashed_name: elf-sections-virtual-size
            description: ELF Section List virtual size.
            flat_name: elf.sections.virtual_size
            format: string
            level: extended
            name: sections.virtual_size
            node_name: virtual_size
            normalize: []
            short: ELF Section List virtual size.
            type: long
    segments:
      field_details:
        dashed_name: elf-segments
        description: 'An array containing an object for each segment of the ELF file.

          The keys that should be present in these objects are defined by sub-fields
          underneath `elf.segments.*`.'
        flat_name: elf.segments
        intermediate: false
        level: extended
        name: segments
        node_name: segments
        normalize:
        - array
        short: ELF object segment list.
        type: nested
      fields:
        sections:
          field_details:
            dashed_name: elf-segments-sections
            description: ELF object segment sections.
            flat_name: elf.segments.sections
            ignore_above: 1024
            level: extended
            name: segments.sections
            node_name: sections
            normalize: []
            short: ELF object segment sections.
            type: keyword
        type:
          field_details:
            dashed_name: elf-segments-type
            description: ELF object segment type.
            flat_name: elf.segments.type
            ignore_above: 1024
            level: extended
            name: segments.type
            node_name: type
            normalize: []
            short: ELF object segment type.
            type: keyword
    shared_libraries:
      field_details:
        dashed_name: elf-shared-libraries
        description: List of shared libraries used by this ELF object.
        flat_name: elf.shared_libraries
        ignore_above: 1024
        level: extended
        name: shared_libraries
        node_name: shared_libraries
        normalize:
        - array
        short: List of shared libraries used by this ELF object.
        type: keyword
    telfhash:
      field_details:
        dashed_name: elf-telfhash
        description: telfhash symbol hash for ELF file.
        flat_name: elf.telfhash
        ignore_above: 1024
        level: extended
        name: telfhash
        node_name: telfhash
        normalize: []
        short: telfhash hash for ELF file.
        type: keyword
  schema_details:
    group: 2
    prefix: elf.
    reusable:
      expected:
      - as: elf
        at: file
        beta: This field reuse is beta and subject to change.
        full: file.elf
      - as: elf
        at: process
        beta: This field reuse is beta and subject to change.
        full: process.elf
      order: 2
      top_level: false
    root: false
    title: ELF Header
email:
  field_details:
    dashed_name: email
    description: 'Event details relating to an email transaction.

      This field set focuses on the email message header, body, and attachments. Network
      protocols that send and receive email messages such as SMTP are outside the
      scope of the `email.*` fields.'
    flat_name: email
    name: email
    node_name: email
    short: Describes an email transaction.
    type: group
  fields:
    attachments:
      field_details:
        dashed_name: email-attachments
        description: A list of objects describing the attachment files sent along
          with an email message.
        flat_name: email.attachments
        intermediate: false
        level: extended
        name: attachments
        node_name: attachments
        normalize:
        - array
        short: List of objects describing the attachments.
        type: nested
      fields:
        file:
          field_details:
            dashed_name: email-attachments-file
            flat_name: email.attachments.file
            intermediate: true
            name: attachments.file
            node_name: file
            type: object
          fields:
            extension:
              field_details:
                dashed_name: email-attachments-file-extension
                description: Attachment file extension, excluding the leading dot.
                example: txt
                flat_name: email.attachments.file.extension
                ignore_above: 1024
                level: extended
                name: attachments.file.extension
                node_name: extension
                normalize: []
                short: Attachment file extension.
                type: keyword
            hash:
              field_details:
                dashed_name: email-attachments-file-hash
                description: 'The hash fields represent different bitwise hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).

                  Note that this fieldset is used for common hashes that may be computed
                  over a range of generic bytes. Entity-specific hashes such as ja3
                  or imphash are placed in the fieldsets to which they relate (tls
                  and pe, respectively).'
                flat_name: email.attachments.file.hash
                intermediate: true
                name: hash
                node_name: hash
                original_fieldset: hash
                short: Hashes, usually file hashes.
                type: group
              fields:
                md5:
                  field_details:
                    dashed_name: email-attachments-file-hash-md5
                    description: MD5 hash.
                    flat_name: email.attachments.file.hash.md5
                    ignore_above: 1024
                    level: extended
                    name: md5
                    node_name: md5
                    normalize: []
                    original_fieldset: hash
                    short: MD5 hash.
                    type: keyword
                sha1:
                  field_details:
                    dashed_name: email-attachments-file-hash-sha1
                    description: SHA1 hash.
                    flat_name: email.attachments.file.hash.sha1
                    ignore_above: 1024
                    level: extended
                    name: sha1
                    node_name: sha1
                    normalize: []
                    original_fieldset: hash
                    short: SHA1 hash.
                    type: keyword
                sha256:
                  field_details:
                    dashed_name: email-attachments-file-hash-sha256
                    description: SHA256 hash.
                    flat_name: email.attachments.file.hash.sha256
                    ignore_above: 1024
                    level: extended
                    name: sha256
                    node_name: sha256
                    normalize: []
                    original_fieldset: hash
                    short: SHA256 hash.
                    type: keyword
                sha384:
                  field_details:
                    dashed_name: email-attachments-file-hash-sha384
                    description: SHA384 hash.
                    flat_name: email.attachments.file.hash.sha384
                    ignore_above: 1024
                    level: extended
                    name: sha384
                    node_name: sha384
                    normalize: []
                    original_fieldset: hash
                    short: SHA384 hash.
                    type: keyword
                sha512:
                  field_details:
                    dashed_name: email-attachments-file-hash-sha512
                    description: SHA512 hash.
                    flat_name: email.attachments.file.hash.sha512
                    ignore_above: 1024
                    level: extended
                    name: sha512
                    node_name: sha512
                    normalize: []
                    original_fieldset: hash
                    short: SHA512 hash.
                    type: keyword
                ssdeep:
                  field_details:
                    dashed_name: email-attachments-file-hash-ssdeep
                    description: SSDEEP hash.
                    flat_name: email.attachments.file.hash.ssdeep
                    ignore_above: 1024
                    level: extended
                    name: ssdeep
                    node_name: ssdeep
                    normalize: []
                    original_fieldset: hash
                    short: SSDEEP hash.
                    type: keyword
                tlsh:
                  field_details:
                    dashed_name: email-attachments-file-hash-tlsh
                    description: TLSH hash.
                    flat_name: email.attachments.file.hash.tlsh
                    ignore_above: 1024
                    level: extended
                    name: tlsh
                    node_name: tlsh
                    normalize: []
                    original_fieldset: hash
                    short: TLSH hash.
                    type: keyword
            mime_type:
              field_details:
                dashed_name: email-attachments-file-mime-type
                description: 'The MIME media type of the attachment.

                  This value will typically be extracted from the `Content-Type` MIME
                  header field.'
                example: text/plain
                flat_name: email.attachments.file.mime_type
                ignore_above: 1024
                level: extended
                name: attachments.file.mime_type
                node_name: mime_type
                normalize: []
                short: MIME type of the attachment file.
                type: keyword
            name:
              field_details:
                dashed_name: email-attachments-file-name
                description: Name of the attachment file including the file extension.
                example: attachment.txt
                flat_name: email.attachments.file.name
                ignore_above: 1024
                level: extended
                name: attachments.file.name
                node_name: name
                normalize: []
                short: Name of the attachment file.
                type: keyword
            size:
              field_details:
                dashed_name: email-attachments-file-size
                description: Attachment file size in bytes.
                example: 64329
                flat_name: email.attachments.file.size
                level: extended
                name: attachments.file.size
                node_name: size
                normalize: []
                short: Attachment file size.
                type: long
    bcc:
      field_details:
        dashed_name: email-bcc
        flat_name: email.bcc
        intermediate: true
        name: bcc
        node_name: bcc
        type: object
      fields:
        address:
          field_details:
            dashed_name: email-bcc-address
            description: The email address of BCC recipient
            example: bcc.user1@example.com
            flat_name: email.bcc.address
            ignore_above: 1024
            level: extended
            name: bcc.address
            node_name: address
            normalize:
            - array
            short: Email address of BCC recipient
            type: keyword
    cc:
      field_details:
        dashed_name: email-cc
        flat_name: email.cc
        intermediate: true
        name: cc
        node_name: cc
        type: object
      fields:
        address:
          field_details:
            dashed_name: email-cc-address
            description: The email address of CC recipient
            example: cc.user1@example.com
            flat_name: email.cc.address
            ignore_above: 1024
            level: extended
            name: cc.address
            node_name: address
            normalize:
            - array
            short: Email address of CC recipient
            type: keyword
    content_type:
      field_details:
        dashed_name: email-content-type
        description: 'Information about how the message is to be displayed.

          Typically a MIME type.'
        example: text/plain
        flat_name: email.content_type
        ignore_above: 1024
        level: extended
        name: content_type
        node_name: content_type
        normalize: []
        short: MIME type of the email message.
        type: keyword
    delivery_timestamp:
      field_details:
        dashed_name: email-delivery-timestamp
        description: The date and time when the email message was received by the
          service or client.
        example: '2020-11-10T22:12:34.8196921Z'
        flat_name: email.delivery_timestamp
        level: extended
        name: delivery_timestamp
        node_name: delivery_timestamp
        normalize: []
        short: Date and time when message was delivered.
        type: date
    direction:
      field_details:
        dashed_name: email-direction
        description: The direction of the message based on the sending and receiving
          domains.
        example: inbound
        flat_name: email.direction
        ignore_above: 1024
        level: extended
        name: direction
        node_name: direction
        normalize: []
        short: Direction of the message.
        type: keyword
    from:
      field_details:
        dashed_name: email-from
        flat_name: email.from
        intermediate: true
        name: from
        node_name: from
        type: object
      fields:
        address:
          field_details:
            dashed_name: email-from-address
            description: The email address of the sender, typically from the RFC 5322
              `From:` header field.
            example: sender@example.com
            flat_name: email.from.address
            ignore_above: 1024
            level: extended
            name: from.address
            node_name: address
            normalize:
            - array
            short: The sender's email address.
            type: keyword
    local_id:
      field_details:
        dashed_name: email-local-id
        description: 'Unique identifier given to the email by the source that created
          the event.

          Identifier is not persistent across hops.'
        example: c26dbea0-80d5-463b-b93c-4e8b708219ce
        flat_name: email.local_id
        ignore_above: 1024
        level: extended
        name: local_id
        node_name: local_id
        normalize: []
        short: Unique identifier given by the source.
        type: keyword
    message_id:
      field_details:
        dashed_name: email-message-id
        description: Identifier from the RFC 5322 `Message-ID:` email header that
          refers to a particular email message.
        example: 81ce15$8r2j59@mail01.example.com
        flat_name: email.message_id
        level: extended
        name: message_id
        node_name: message_id
        normalize: []
        short: Value from the Message-ID header.
        type: wildcard
    origination_timestamp:
      field_details:
        dashed_name: email-origination-timestamp
        description: The date and time the email message was composed. Many email
          clients will fill in this value automatically when the message is sent by
          a user.
        example: '2020-11-10T22:12:34.8196921Z'
        flat_name: email.origination_timestamp
        level: extended
        name: origination_timestamp
        node_name: origination_timestamp
        normalize: []
        short: Date and time the email was composed.
        type: date
    reply_to:
      field_details:
        dashed_name: email-reply-to
        flat_name: email.reply_to
        intermediate: true
        name: reply_to
        node_name: reply_to
        type: object
      fields:
        address:
          field_details:
            dashed_name: email-reply-to-address
            description: The address that replies should be delivered to based on
              the value in the RFC 5322 `Reply-To:` header.
            example: reply.here@example.com
            flat_name: email.reply_to.address
            ignore_above: 1024
            level: extended
            name: reply_to.address
            node_name: address
            normalize:
            - array
            short: Address replies should be delivered to.
            type: keyword
    sender:
      field_details:
        dashed_name: email-sender
        flat_name: email.sender
        intermediate: true
        name: sender
        node_name: sender
        type: object
      fields:
        address:
          field_details:
            dashed_name: email-sender-address
            description: Per RFC 5322, specifies the address responsible for the actual
              transmission of the message.
            flat_name: email.sender.address
            ignore_above: 1024
            level: extended
            name: sender.address
            node_name: address
            normalize: []
            short: Address of the message sender.
            type: keyword
    subject:
      field_details:
        dashed_name: email-subject
        description: A brief summary of the topic of the message.
        example: Please see this important message.
        flat_name: email.subject
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: email.subject.text
          name: text
          type: match_only_text
        name: subject
        node_name: subject
        normalize: []
        short: The subject of the email message.
        type: keyword
    to:
      field_details:
        dashed_name: email-to
        flat_name: email.to
        intermediate: true
        name: to
        node_name: to
        type: object
      fields:
        address:
          field_details:
            dashed_name: email-to-address
            description: The email address of recipient
            example: user1@example.com
            flat_name: email.to.address
            ignore_above: 1024
            level: extended
            name: to.address
            node_name: address
            normalize:
            - array
            short: Email address of recipient
            type: keyword
    x_mailer:
      field_details:
        dashed_name: email-x-mailer
        description: The name of the application that was used to draft and send the
          original email message.
        example: Spambot v2.5
        flat_name: email.x_mailer
        ignore_above: 1024
        level: extended
        name: x_mailer
        node_name: x_mailer
        normalize: []
        short: Application that drafted email.
        type: keyword
  schema_details:
    group: 2
    nestings:
    - email.attachments.file.hash
    prefix: email.
    reused_here:
    - full: email.attachments.file.hash
      schema_name: hash
      short: Hashes, usually file hashes.
    root: false
    title: Email
error:
  field_details:
    dashed_name: error
    description: 'These fields can represent errors of any kind.

      Use them for errors that happen while fetching events or in cases where the
      event itself contains an error.'
    flat_name: error
    name: error
    node_name: error
    short: Fields about errors of any kind.
    type: group
  fields:
    code:
      field_details:
        dashed_name: error-code
        description: Error code describing the error.
        flat_name: error.code
        ignore_above: 1024
        level: core
        name: code
        node_name: code
        normalize: []
        short: Error code describing the error.
        type: keyword
    id:
      field_details:
        dashed_name: error-id
        description: Unique identifier for the error.
        flat_name: error.id
        ignore_above: 1024
        level: core
        name: id
        node_name: id
        normalize: []
        short: Unique identifier for the error.
        type: keyword
    message:
      field_details:
        dashed_name: error-message
        description: Error message.
        flat_name: error.message
        level: core
        name: message
        node_name: message
        normalize: []
        short: Error message.
        type: match_only_text
    stack_trace:
      field_details:
        dashed_name: error-stack-trace
        description: The stack trace of this error in plain text.
        flat_name: error.stack_trace
        level: extended
        multi_fields:
        - flat_name: error.stack_trace.text
          name: text
          type: match_only_text
        name: stack_trace
        node_name: stack_trace
        normalize: []
        short: The stack trace of this error in plain text.
        type: wildcard
    type:
      field_details:
        dashed_name: error-type
        description: The type of the error, for example the class name of the exception.
        example: java.lang.NullPointerException
        flat_name: error.type
        ignore_above: 1024
        level: extended
        name: type
        node_name: type
        normalize: []
        short: The type of the error, for example the class name of the exception.
        type: keyword
  schema_details:
    group: 2
    prefix: error.
    root: false
    title: Error
event:
  field_details:
    dashed_name: event
    description: 'The event fields are used for context information about the log
      or metric event itself.

      A log is defined as an event containing details of something that happened.
      Log events must include the time at which the thing happened. Examples of log
      events include a process starting on a host, a network packet being sent from
      a source to a destination, or a network connection between a client and a server
      being initiated or closed. A metric is defined as an event containing one or
      more numerical measurements and the time at which the measurement was taken.
      Examples of metric events include memory pressure measured on a host and device
      temperature. See the `event.kind` definition in this section for additional
      details about metric and state events.'
    flat_name: event
    name: event
    node_name: event
    short: Fields breaking down the event details.
    type: group
  fields:
    action:
      field_details:
        dashed_name: event-action
        description: 'The action captured by the event.

          This describes the information in the event. It is more specific than `event.category`.
          Examples are `group-add`, `process-started`, `file-created`. The value is
          normally defined by the implementer.'
        example: user-password-change
        flat_name: event.action
        ignore_above: 1024
        level: core
        name: action
        node_name: action
        normalize: []
        short: The action captured by the event.
        type: keyword
    agent_id_status:
      field_details:
        dashed_name: event-agent-id-status
        description: 'Agents are normally responsible for populating the `agent.id`
          field value. If the system receiving events is capable of validating the
          value based on authentication information for the client then this field
          can be used to reflect the outcome of that validation.

          For example if the agent''s connection is authenticated with mTLS and the
          client cert contains the ID of the agent to which the cert was issued then
          the `agent.id` value in events can be checked against the certificate. If
          the values match then `event.agent_id_status: verified` is added to the
          event, otherwise one of the other allowed values should be used.

          If no validation is performed then the field should be omitted.

          The allowed values are:

          `verified` - The `agent.id` field value matches expected value obtained
          from auth metadata.

          `mismatch` - The `agent.id` field value does not match the expected value
          obtained from auth metadata.

          `missing` - There was no `agent.id` field in the event to validate.

          `auth_metadata_missing` - There was no auth metadata or it was missing information
          about the agent ID.'
        example: verified
        flat_name: event.agent_id_status
        ignore_above: 1024
        level: extended
        name: agent_id_status
        node_name: agent_id_status
        normalize: []
        short: Validation status of the event's agent.id field.
        type: keyword
    category:
      field_details:
        allowed_values:
        - description: Events in this category annotate API calls that occured on
            a system. Typical sources for those events could be from the Operating
            System level through the native libraries (for example Windows Win32,
            Linux libc, etc.), or managed sources of events (such as ETW, syslog),
            but can also include network protocols (such as SOAP, RPC, Websocket,
            REST, etc.)
          expected_event_types:
          - access
          - admin
          - allowed
          - change
          - creation
          - deletion
          - denied
          - end
          - info
          - start
          - user
          name: api
        - description: Events in this category are related to the challenge and response
            process in which credentials are supplied and verified to allow the creation
            of a session. Common sources for these logs are Windows event logs and
            ssh logs. Visualize and analyze events in this category to look for failed
            logins, and other authentication-related activity.
          expected_event_types:
          - start
          - end
          - info
          name: authentication
        - description: 'Events in the configuration category have to deal with creating,
            modifying, or deleting the settings or parameters of an application, process,
            or system.

            Example sources include security policy change logs, configuration auditing
            logging, and system integrity monitoring.'
          expected_event_types:
          - access
          - change
          - creation
          - deletion
          - info
          name: configuration
        - description: The database category denotes events and metrics relating to
            a data storage and retrieval system. Note that use of this category is
            not limited to relational database systems. Examples include event logs
            from MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to
            visualize and analyze database activity such as accesses and changes.
          expected_event_types:
          - access
          - change
          - info
          - error
          name: database
        - description: 'Events in the driver category have to do with operating system
            device drivers and similar software entities such as Windows drivers,
            kernel extensions, kernel modules, etc.

            Use events and metrics in this category to visualize and analyze driver-related
            activity and status on hosts.'
          expected_event_types:
          - change
          - end
          - info
          - start
          name: driver
        - description: 'This category is used for events relating to email messages,
            email attachments, and email network or protocol activity.

            Emails events can be produced by email security gateways, mail transfer
            agents, email cloud service providers, or mail server monitoring applications.'
          expected_event_types:
          - info
          name: email
        - description: Relating to a set of information that has been created on,
            or has existed on a filesystem. Use this category of events to visualize
            and analyze the creation, access, and deletions of files. Events in this
            category can come from both host-based and network-based sources. An example
            source of a network-based detection of a file transfer would be the Zeek
            file.log.
          expected_event_types:
          - access
          - change
          - creation
          - deletion
          - info
          name: file
        - description: 'Use this category to visualize and analyze information such
            as host inventory or host lifecycle events.

            Most of the events in this category can usually be observed from the outside,
            such as from a hypervisor or a control plane''s point of view. Some can
            also be seen from within, such as "start" or "end".

            Note that this category is for information about hosts themselves; it
            is not meant to capture activity "happening on a host".'
          expected_event_types:
          - access
          - change
          - end
          - info
          - start
          name: host
        - description: Identity and access management (IAM) events relating to users,
            groups, and administration. Use this category to visualize and analyze
            IAM-related logs and data from active directory, LDAP, Okta, Duo, and
            other IAM systems.
          expected_event_types:
          - admin
          - change
          - creation
          - deletion
          - group
          - info
          - user
          name: iam
        - description: Relating to intrusion detections from IDS/IPS systems and functions,
            both network and host-based. Use this category to visualize and analyze
            intrusion detection alerts from systems such as Snort, Suricata, and Palo
            Alto threat detections.
          expected_event_types:
          - allowed
          - denied
          - info
          name: intrusion_detection
        - description: Events in this category refer to the loading of a library,
            such as (dll / so / dynlib), into a process. Use this category to visualize
            and analyze library loading related activity on hosts.  Keep in mind that
            driver related activity will be captured under the "driver" category above.
          expected_event_types:
          - start
          name: library
        - description: Malware detection events and alerts. Use this category to visualize
            and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
            Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS
            systems such as Suricata, or other sources of malware-related events such
            as Palo Alto Networks threat logs and Wildfire logs.
          expected_event_types:
          - info
          name: malware
        - description: Relating to all network activity, including network connection
            lifecycle, network traffic, and essentially any event that includes an
            IP address. Many events containing decoded network protocol transactions
            fit into this category. Use events in this category to visualize or analyze
            counts of network ports, protocols, addresses, geolocation information,
            etc.
          expected_event_types:
          - access
          - allowed
          - connection
          - denied
          - end
          - info
          - protocol
          - start
          name: network
        - description: Relating to software packages installed on hosts. Use this
            category to visualize and analyze inventory of software installed on various
            hosts, or to determine host vulnerability in the absence of vulnerability
            scan data.
          expected_event_types:
          - access
          - change
          - deletion
          - info
          - installation
          - start
          name: package
        - description: Use this category of events to visualize and analyze process-specific
            information such as lifecycle events or process ancestry.
          expected_event_types:
          - access
          - change
          - end
          - info
          - start
          name: process
        - description: Having to do with settings and assets stored in the Windows
            registry. Use this category to visualize and analyze activity such as
            registry access and modifications.
          expected_event_types:
          - access
          - change
          - creation
          - deletion
          name: registry
        - description: The session category is applied to events and metrics regarding
            logical persistent connections to hosts and services. Use this category
            to visualize and analyze interactive or automated persistent connections
            between assets. Data for this category may come from Windows Event logs,
            SSH logs, or stateless sessions such as HTTP cookie-based sessions, etc.
          expected_event_types:
          - start
          - end
          - info
          name: session
        - description: Use this category to visualize and analyze events describing
            threat actors' targets, motives, or behaviors.
          expected_event_types:
          - indicator
          name: threat
        - description: Relating to vulnerability scan results. Use this category to
            analyze vulnerabilities detected by Tenable, Qualys, internal scanners,
            and other vulnerability management sources.
          expected_event_types:
          - info
          name: vulnerability
        - description: 'Relating to web server access. Use this category to create
            a dashboard of web server/proxy activity from apache, IIS, nginx web servers,
            etc. Note: events from network observers such as Zeek http log may also
            be included in this category.'
          expected_event_types:
          - access
          - error
          - info
          name: web
        dashed_name: event-category
        description: 'This is one of four ECS Categorization Fields, and indicates
          the second level in the ECS category hierarchy.

          `event.category` represents the "big buckets" of ECS categories. For example,
          filtering on `event.category:process` yields all events relating to process
          activity. This field is closely related to `event.type`, which is used as
          a subcategory.

          This field is an array. This will allow proper categorization of some events
          that fall in multiple categories.'
        example: authentication
        flat_name: event.category
        ignore_above: 1024
        level: core
        name: category
        node_name: category
        normalize:
        - array
        short: Event category. The second categorization field in the hierarchy.
        type: keyword
    code:
      field_details:
        dashed_name: event-code
        description: 'Identification code for this event, if one exists.

          Some event sources use event codes to identify messages unambiguously, regardless
          of message language or wording adjustments over time. An example of this
          is the Windows Event ID.'
        example: 4648
        flat_name: event.code
        ignore_above: 1024
        level: extended
        name: code
        node_name: code
        normalize: []
        short: Identification code for this event.
        type: keyword
    created:
      field_details:
        dashed_name: event-created
        description: '`event.created` contains the date/time when the event was first
          read by an agent, or by your pipeline.

          This field is distinct from `@timestamp` in that `@timestamp` typically
          contain the time extracted from the original event.

          In most situations, these two timestamps will be slightly different. The
          difference can be used to calculate the delay between your source generating
          an event, and the time when your agent first processed it. This can be used
          to monitor your agent''s or pipeline''s ability to keep up with your event
          source.

          In case the two timestamps are identical, `@timestamp` should be used.'
        example: '2016-05-23T08:05:34.857Z'
        flat_name: event.created
        level: core
        name: created
        node_name: created
        normalize: []
        short: Time when the event was first read by an agent or by your pipeline.
        type: date
    dataset:
      field_details:
        dashed_name: event-dataset
        description: 'Name of the dataset.

          If an event source publishes more than one type of log or events (e.g. access
          log, error log), the dataset is used to specify which one the event comes
          from.

          It''s recommended but not required to start the dataset name with the module
          name, followed by a dot, then the dataset name.'
        example: apache.access
        flat_name: event.dataset
        ignore_above: 1024
        level: core
        name: dataset
        node_name: dataset
        normalize: []
        short: Name of the dataset.
        type: keyword
    duration:
      field_details:
        dashed_name: event-duration
        description: 'Duration of the event in nanoseconds.

          If `event.start` and `event.end` are known this value should be the difference
          between the end and start time.'
        flat_name: event.duration
        format: duration
        input_format: nanoseconds
        level: core
        name: duration
        node_name: duration
        normalize: []
        output_format: asMilliseconds
        output_precision: 1
        short: Duration of the event in nanoseconds.
        type: long
    end:
      field_details:
        dashed_name: event-end
        description: '`event.end` contains the date when the event ended or when the
          activity was last observed.'
        flat_name: event.end
        level: extended
        name: end
        node_name: end
        normalize: []
        short: '`event.end` contains the date when the event ended or when the activity
          was last observed.'
        type: date
    hash:
      field_details:
        dashed_name: event-hash
        description: Hash (perhaps logstash fingerprint) of raw field to be able to
          demonstrate log integrity.
        example: 123456789012345678901234567890ABCD
        flat_name: event.hash
        ignore_above: 1024
        level: extended
        name: hash
        node_name: hash
        normalize: []
        short: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
          log integrity.
        type: keyword
    id:
      field_details:
        dashed_name: event-id
        description: Unique ID to describe the event.
        example: 8a4f500d
        flat_name: event.id
        ignore_above: 1024
        level: core
        name: id
        node_name: id
        normalize: []
        short: Unique ID to describe the event.
        type: keyword
    ingested:
      field_details:
        dashed_name: event-ingested
        description: 'Timestamp when an event arrived in the central data store.

          This is different from `@timestamp`, which is when the event originally
          occurred.  It''s also different from `event.created`, which is meant to
          capture the first time an agent saw the event.

          In normal conditions, assuming no tampering, the timestamps should chronologically
          look like this: `@timestamp` < `event.created` < `event.ingested`.'
        example: '2016-05-23T08:05:35.101Z'
        flat_name: event.ingested
        level: core
        name: ingested
        node_name: ingested
        normalize: []
        short: Timestamp when an event arrived in the central data store.
        type: date
    kind:
      field_details:
        allowed_values:
        - description: 'This value indicates an event such as an alert or notable
            event, triggered by a detection rule executing externally to the Elastic
            Stack.

            `event.kind:alert` is often populated for events coming from firewalls,
            intrusion detection systems, endpoint detection and response systems,
            and so on.

            This value is not used by Elastic solutions for alert documents that are
            created by rules executing within the Kibana alerting framework.'
          name: alert
        - beta: This event categorization value is beta and subject to change.
          description: 'This value indicates events whose primary purpose is to store
            an inventory of assets/entities and their attributes. Assets/entities
            are objects (such as users and hosts) that are expected to be subjects
            of detailed analysis within the system.

            Examples include lists of user identities or accounts ingested from directory
            services such as Active Directory (AD), inventory of hosts pulled from
            configuration management databases (CMDB), and lists of cloud storage
            buckets pulled from cloud provider APIs.

            This value is used by Elastic Security for asset management solutions.
            `event.kind: asset` is not used for normal system events or logs that
            are coming from an asset/entity, nor is it used for system events or logs
            coming from a directory or CMDB system.'
          name: asset
        - description: 'The `enrichment` value indicates an event collected to provide
            additional context, often to other events.

            An example is collecting indicators of compromise (IOCs) from a threat
            intelligence provider with the intent to use those values to enrich other
            events. The IOC events from the intelligence provider should be categorized
            as `event.kind:enrichment`.'
          name: enrichment
        - description: This value is the most general and most common value for this
            field. It is used to represent events that indicate that something happened.
          name: event
        - description: 'This value is used to indicate that this event describes a
            numeric measurement taken at given point in time.

            Examples include CPU utilization, memory usage, or device temperature.

            Metric events are often collected on a predictable frequency, such as
            once every few seconds, or once a minute, but can also be used to describe
            ad-hoc numeric metric queries.'
          name: metric
        - description: 'The state value is similar to metric, indicating that this
            event describes a measurement taken at given point in time, except that
            the measurement does not result in a numeric value, but rather one of
            a fixed set of categorical values that represent conditions or states.

            Examples include periodic events reporting Elasticsearch cluster state
            (green/yellow/red), the state of a TCP connection (open, closed, fin_wait,
            etc.), the state of a host with respect to a software vulnerability (vulnerable,
            not vulnerable), and the state of a system regarding compliance with a
            regulatory standard (compliant, not compliant).

            Note that an event that describes a change of state would not use `event.kind:state`,
            but instead would use ''event.kind:event'' since a state change fits the
            more general event definition of something that happened.

            State events are often collected on a predictable frequency, such as once
            every few seconds, once a minute, once an hour, or once a day, but can
            also be used to describe ad-hoc state queries.'
          name: state
        - description: This value indicates that an error occurred during the ingestion
            of this event, and that event data may be missing, inconsistent, or incorrect.
            `event.kind:pipeline_error` is often associated with parsing errors.
          name: pipeline_error
        - description: 'This value is used by Elastic solutions (e.g., Security, Observability)
            for alert documents that are created by rules executing within the Kibana
            alerting framework.

            Usage of this value is reserved, and data ingestion pipelines must not
            populate `event.kind` with the value "signal".'
          name: signal
        dashed_name: event-kind
        description: 'This is one of four ECS Categorization Fields, and indicates
          the highest level in the ECS category hierarchy.

          `event.kind` gives high-level information about what type of information
          the event contains, without being specific to the contents of the event.
          For example, values of this field distinguish alert events from metric events.

          The value of this field can be used to inform how these kinds of events
          should be handled. They may warrant different retention, different access
          control, it may also help understand whether the data is coming in at a
          regular interval or not.'
        example: alert
        flat_name: event.kind
        ignore_above: 1024
        level: core
        name: kind
        node_name: kind
        normalize: []
        short: The kind of the event. The highest categorization field in the hierarchy.
        type: keyword
    module:
      field_details:
        dashed_name: event-module
        description: 'Name of the module this data is coming from.

          If your monitoring agent supports the concept of modules or plugins to process
          events of a given source (e.g. Apache logs), `event.module` should contain
          the name of this module.'
        example: apache
        flat_name: event.module
        ignore_above: 1024
        level: core
        name: module
        node_name: module
        normalize: []
        short: Name of the module this data is coming from.
        type: keyword
    original:
      field_details:
        dashed_name: event-original
        description: 'Raw text message of entire event. Used to demonstrate log integrity
          or where the full log message (before splitting it up in multiple parts)
          may be required, e.g. for reindex.

          This field is not indexed and doc_values are disabled. It cannot be searched,
          but it can be retrieved from `_source`. If users wish to override this and
          index this field, please see `Field data types` in the `Elasticsearch Reference`.'
        doc_values: false
        example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124;
          worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232
        flat_name: event.original
        index: false
        level: core
        name: original
        node_name: original
        normalize: []
        short: Raw text message of entire event.
        type: keyword
    outcome:
      field_details:
        allowed_values:
        - description: Indicates that this event describes a failed result. A common
            example is `event.category:file AND event.type:access AND event.outcome:failure`
            to indicate that a file access was attempted, but was not successful.
          name: failure
        - description: Indicates that this event describes a successful result. A
            common example is `event.category:file AND event.type:create AND event.outcome:success`
            to indicate that a file was successfully created.
          name: success
        - description: Indicates that this event describes only an attempt for which
            the result is unknown from the perspective of the event producer. For
            example, if the event contains information only about the request side
            of a transaction that results in a response, populating `event.outcome:unknown`
            in the request event is appropriate. The unknown value should not be used
            when an outcome doesn't make logical sense for the event. In such cases
            `event.outcome` should not be populated.
          name: unknown
        dashed_name: event-outcome
        description: 'This is one of four ECS Categorization Fields, and indicates
          the lowest level in the ECS category hierarchy.

          `event.outcome` simply denotes whether the event represents a success or
          a failure from the perspective of the entity that produced the event.

          Note that when a single transaction is described in multiple events, each
          event may populate different values of `event.outcome`, according to their
          perspective.

          Also note that in the case of a compound event (a single event that contains
          multiple logical events), this field should be populated with the value
          that best captures the overall success or failure from the perspective of
          the event producer.

          Further note that not all events will have an associated outcome. For example,
          this field is generally not populated for metric events, events with `event.type:info`,
          or any events for which an outcome does not make logical sense.'
        example: success
        flat_name: event.outcome
        ignore_above: 1024
        level: core
        name: outcome
        node_name: outcome
        normalize: []
        short: The outcome of the event. The lowest level categorization field in
          the hierarchy.
        type: keyword
    provider:
      field_details:
        dashed_name: event-provider
        description: 'Source of the event.

          Event transports such as Syslog or the Windows Event Log typically mention
          the source of an event. It can be the name of the software that generated
          the event (e.g. Sysmon, httpd), or of a subsystem of the operating system
          (kernel, Microsoft-Windows-Security-Auditing).'
        example: kernel
        flat_name: event.provider
        ignore_above: 1024
        level: extended
        name: provider
        node_name: provider
        normalize: []
        short: Source of the event.
        type: keyword
    reason:
      field_details:
        dashed_name: event-reason
        description: 'Reason why this event happened, according to the source.

          This describes the why of a particular action or outcome captured in the
          event. Where `event.action` captures the action from the event, `event.reason`
          describes why that action was taken. For example, a web proxy with an `event.action`
          which denied the request may also populate `event.reason` with the reason
          why (e.g. `blocked site`).'
        example: Terminated an unexpected process
        flat_name: event.reason
        ignore_above: 1024
        level: extended
        name: reason
        node_name: reason
        normalize: []
        short: Reason why this event happened, according to the source
        type: keyword
    reference:
      field_details:
        dashed_name: event-reference
        description: 'Reference URL linking to additional information about this event.

          This URL links to a static definition of this event. Alert events, indicated
          by `event.kind:alert`, are a common use case for this field.'
        example: https://system.example.com/event/#0001234
        flat_name: event.reference
        ignore_above: 1024
        level: extended
        name: reference
        node_name: reference
        normalize: []
        short: Event reference URL
        type: keyword
    risk_score:
      field_details:
        dashed_name: event-risk-score
        description: Risk score or priority of the event (e.g. security solutions).
          Use your system's original value here.
        flat_name: event.risk_score
        level: core
        name: risk_score
        node_name: risk_score
        normalize: []
        short: Risk score or priority of the event (e.g. security solutions). Use
          your system's original value here.
        type: float
    risk_score_norm:
      field_details:
        dashed_name: event-risk-score-norm
        description: 'Normalized risk score or priority of the event, on a scale of
          0 to 100.

          This is mainly useful if you use more than one system that assigns risk
          scores, and you want to see a normalized value across all systems.'
        flat_name: event.risk_score_norm
        level: extended
        name: risk_score_norm
        node_name: risk_score_norm
        normalize: []
        short: Normalized risk score or priority of the event (0-100).
        type: float
    sequence:
      field_details:
        dashed_name: event-sequence
        description: 'Sequence number of the event.

          The sequence number is a value published by some event sources, to make
          the exact ordering of events unambiguous, regardless of the timestamp precision.'
        flat_name: event.sequence
        format: string
        level: extended
        name: sequence
        node_name: sequence
        normalize: []
        short: Sequence number of the event.
        type: long
    severity:
      field_details:
        dashed_name: event-severity
        description: 'The numeric severity of the event according to your event source.

          What the different severity values mean can be different between sources
          and use cases. It''s up to the implementer to make sure severities are consistent
          across events from the same source.

          The Syslog severity belongs in `log.syslog.severity.code`. `event.severity`
          is meant to represent the severity according to the event source (e.g. firewall,
          IDS). If the event source does not publish its own severity, you may optionally
          copy the `log.syslog.severity.code` to `event.severity`.'
        example: 7
        flat_name: event.severity
        format: string
        level: core
        name: severity
        node_name: severity
        normalize: []
        short: Numeric severity of the event.
        type: long
    start:
      field_details:
        dashed_name: event-start
        description: '`event.start` contains the date when the event started or when
          the activity was first observed.'
        flat_name: event.start
        level: extended
        name: start
        node_name: start
        normalize: []
        short: '`event.start` contains the date when the event started or when the
          activity was first observed.'
        type: date
    timezone:
      field_details:
        dashed_name: event-timezone
        description: 'This field should be populated when the event''s timestamp does
          not include timezone information already (e.g. default Syslog timestamps).
          It''s optional otherwise.

          Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"),
          abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").'
        flat_name: event.timezone
        ignore_above: 1024
        level: extended
        name: timezone
        node_name: timezone
        normalize: []
        short: Event time zone.
        type: keyword
    type:
      field_details:
        allowed_values:
        - description: The access event type is used for the subset of events within
            a category that indicate that something was accessed. Common examples
            include `event.category:database AND event.type:access`, or `event.category:file
            AND event.type:access`. Note for file access, both directory listings
            and file opens should be included in this subcategory. You can further
            distinguish access operations using the ECS `event.action` field.
          name: access
        - description: 'The admin event type is used for the subset of events within
            a category that are related to admin objects. For example, administrative
            changes within an IAM framework that do not specifically affect a user
            or group (e.g., adding new applications to a federation solution or connecting
            discrete forests in Active Directory) would fall into this subcategory.
            Common example: `event.category:iam AND event.type:change AND event.type:admin`.
            You can further distinguish admin operations using the ECS `event.action`
            field.'
          name: admin
        - description: The allowed event type is used for the subset of events within
            a category that indicate that something was allowed. Common examples include
            `event.category:network AND event.type:connection AND event.type:allowed`
            (to indicate a network firewall event for which the firewall disposition
            was to allow the connection to complete) and `event.category:intrusion_detection
            AND event.type:allowed` (to indicate a network intrusion prevention system
            event for which the IPS disposition was to allow the connection to complete).
            You can further distinguish allowed operations using the ECS `event.action`
            field, populating with values of your choosing, such as "allow", "detect",
            or "pass".
          name: allowed
        - description: The change event type is used for the subset of events within
            a category that indicate that something has changed. If semantics best
            describe an event as modified, then include them in this subcategory.
            Common examples include `event.category:process AND event.type:change`,
            and `event.category:file AND event.type:change`. You can further distinguish
            change operations using the ECS `event.action` field.
          name: change
        - description: Used primarily with `event.category:network` this value is
            used for the subset of network traffic that includes sufficient information
            for the event to be included in flow or connection analysis. Events in
            this subcategory will contain at least source and destination IP addresses,
            source and destination TCP/UDP ports, and will usually contain counts
            of bytes and/or packets transferred. Events in this subcategory may contain
            unidirectional or bidirectional information, including summary information.
            Use this subcategory to visualize and analyze network connections. Flow
            analysis, including Netflow, IPFIX, and other flow-related events fit
            in this subcategory. Note that firewall events from many Next-Generation
            Firewall (NGFW) devices will also fit into this subcategory.  A common
            filter for flow/connection information would be `event.category:network
            AND event.type:connection AND event.type:end` (to view or analyze all
            completed network connections, ignoring mid-flow reports). You can further
            distinguish connection events using the ECS `event.action` field, populating
            with values of your choosing, such as "timeout", or "reset".
          name: connection
        - description: The "creation" event type is used for the subset of events
            within a category that indicate that something was created. A common example
            is `event.category:file AND event.type:creation`.
          name: creation
        - description: The deletion event type is used for the subset of events within
            a category that indicate that something was deleted. A common example
            is `event.category:file AND event.type:deletion` to indicate that a file
            has been deleted.
          name: deletion
        - description: The denied event type is used for the subset of events within
            a category that indicate that something was denied. Common examples include
            `event.category:network AND event.type:denied` (to indicate a network
            firewall event for which the firewall disposition was to deny the connection)
            and `event.category:intrusion_detection AND event.type:denied` (to indicate
            a network intrusion prevention system event for which the IPS disposition
            was to deny the connection to complete). You can further distinguish denied
            operations using the ECS `event.action` field, populating with values
            of your choosing, such as "blocked", "dropped", or "quarantined".
          name: denied
        - description: The end event type is used for the subset of events within
            a category that indicate something has ended. A common example is `event.category:process
            AND event.type:end`.
          name: end
        - description: The error event type is used for the subset of events within
            a category that indicate or describe an error. A common example is `event.category:database
            AND event.type:error`. Note that pipeline errors that occur during the
            event ingestion process should not use this `event.type` value. Instead,
            they should use `event.kind:pipeline_error`.
          name: error
        - description: 'The group event type is used for the subset of events within
            a category that are related to group objects. Common example: `event.category:iam
            AND event.type:creation AND event.type:group`. You can further distinguish
            group operations using the ECS `event.action` field.'
          name: group
        - description: 'The indicator event type is used for the subset of events
            within a category that contain details about indicators of compromise
            (IOCs).

            A common example is `event.category:threat AND event.type:indicator`.'
          name: indicator
        - description: The info event type is used for the subset of events within
            a category that indicate that they are purely informational, and don't
            report a state change, or any type of action. For example, an initial
            run of a file integrity monitoring system (FIM), where an agent reports
            all files under management, would fall into the "info" subcategory. Similarly,
            an event containing a dump of all currently running processes (as opposed
            to reporting that a process started/ended) would fall into the "info"
            subcategory. An additional common examples is `event.category:intrusion_detection
            AND event.type:info`.
          name: info
        - description: The installation event type is used for the subset of events
            within a category that indicate that something was installed. A common
            example is `event.category:package` AND `event.type:installation`.
          name: installation
        - description: The protocol event type is used for the subset of events within
            a category that indicate that they contain protocol details or analysis,
            beyond simply identifying the protocol. Generally, network events that
            contain specific protocol details will fall into this subcategory. A common
            example is `event.category:network AND event.type:protocol AND event.type:connection
            AND event.type:end` (to indicate that the event is a network connection
            event sent at the end of a connection that also includes a protocol detail
            breakdown). Note that events that only indicate the name or id of the
            protocol should not use the protocol value. Further note that when the
            protocol subcategory is used, the identified protocol is populated in
            the ECS `network.protocol` field.
          name: protocol
        - description: The start event type is used for the subset of events within
            a category that indicate something has started. A common example is `event.category:process
            AND event.type:start`.
          name: start
        - description: 'The user event type is used for the subset of events within
            a category that are related to user objects. Common example: `event.category:iam
            AND event.type:deletion AND event.type:user`. You can further distinguish
            user operations using the ECS `event.action` field.'
          name: user
        dashed_name: event-type
        description: 'This is one of four ECS Categorization Fields, and indicates
          the third level in the ECS category hierarchy.

          `event.type` represents a categorization "sub-bucket" that, when used along
          with the `event.category` field values, enables filtering events down to
          a level appropriate for single visualization.

          This field is an array. This will allow proper categorization of some events
          that fall in multiple event types.'
        flat_name: event.type
        ignore_above: 1024
        level: core
        name: type
        node_name: type
        normalize:
        - array
        short: Event type. The third categorization field in the hierarchy.
        type: keyword
    url:
      field_details:
        dashed_name: event-url
        description: 'URL linking to an external system to continue investigation
          of this event.

          This URL links to another system where in-depth investigation of the specific
          occurrence of this event can take place. Alert events, indicated by `event.kind:alert`,
          are a common use case for this field.'
        example: https://mysystem.example.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe
        flat_name: event.url
        ignore_above: 1024
        level: extended
        name: url
        node_name: url
        normalize: []
        short: Event investigation URL
        type: keyword
  schema_details:
    group: 2
    prefix: event.
    root: false
    title: Event
faas:
  field_details:
    beta: These fields are in beta and are subject to change.
    dashed_name: faas
    description: The user fields describe information about the function as a service
      (FaaS) that is relevant to the event.
    flat_name: faas
    name: faas
    node_name: faas
    short: Fields describing functions as a service.
    type: group
  fields:
    coldstart:
      field_details:
        dashed_name: faas-coldstart
        description: Boolean value indicating a cold start of a function.
        flat_name: faas.coldstart
        level: extended
        name: coldstart
        node_name: coldstart
        normalize: []
        short: Boolean value indicating a cold start of a function.
        type: boolean
    execution:
      field_details:
        dashed_name: faas-execution
        description: The execution ID of the current function execution.
        example: af9d5aa4-a685-4c5f-a22b-444f80b3cc28
        flat_name: faas.execution
        ignore_above: 1024
        level: extended
        name: execution
        node_name: execution
        normalize: []
        short: The execution ID of the current function execution.
        type: keyword
    id:
      field_details:
        dashed_name: faas-id
        description: 'The unique identifier of a serverless function.

          For AWS Lambda it''s the function ARN (Amazon Resource Name) without a version
          or alias suffix.'
        example: arn:aws:lambda:us-west-2:123456789012:function:my-function
        flat_name: faas.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: The unique identifier of a serverless function.
        type: keyword
    name:
      field_details:
        dashed_name: faas-name
        description: The name of a serverless function.
        example: my-function
        flat_name: faas.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: The name of a serverless function.
        type: keyword
    trigger:
      field_details:
        dashed_name: faas-trigger
        flat_name: faas.trigger
        intermediate: true
        name: trigger
        node_name: trigger
        type: object
      fields:
        request_id:
          field_details:
            dashed_name: faas-trigger-request-id
            description: The ID of the trigger request , message, event, etc.
            example: 123456789
            flat_name: faas.trigger.request_id
            ignore_above: 1024
            level: extended
            name: trigger.request_id
            node_name: request_id
            normalize: []
            short: The ID of the trigger request , message, event, etc.
            type: keyword
        type:
          field_details:
            dashed_name: faas-trigger-type
            description: The trigger for the function execution.
            example: http
            expected_values:
            - http
            - pubsub
            - datasource
            - timer
            - other
            flat_name: faas.trigger.type
            ignore_above: 1024
            level: extended
            name: trigger.type
            node_name: type
            normalize: []
            short: The trigger for the function execution.
            type: keyword
    version:
      field_details:
        dashed_name: faas-version
        description: The version of a serverless function.
        example: '123'
        flat_name: faas.version
        ignore_above: 1024
        level: extended
        name: version
        node_name: version
        normalize: []
        short: The version of a serverless function.
        type: keyword
  schema_details:
    group: 2
    prefix: faas.
    root: false
    title: FaaS
file:
  field_details:
    dashed_name: file
    description: 'A file is defined as a set of information that has been created
      on, or has existed on a filesystem.

      File objects can be associated with host events, network events, and/or file
      events (e.g., those produced by File Integrity Monitoring [FIM] products or
      services). File fields provide details about the affected file associated with
      the event or metric.'
    flat_name: file
    name: file
    node_name: file
    short: Fields describing files.
    type: group
  fields:
    accessed:
      field_details:
        dashed_name: file-accessed
        description: 'Last time the file was accessed.

          Note that not all filesystems keep track of access time.'
        flat_name: file.accessed
        level: extended
        name: accessed
        node_name: accessed
        normalize: []
        short: Last time the file was accessed.
        type: date
    attributes:
      field_details:
        dashed_name: file-attributes
        description: 'Array of file attributes.

          Attributes names will vary by platform. Here''s a non-exhaustive list of
          values that are expected in this field: archive, compressed, directory,
          encrypted, execute, hidden, read, readonly, system, write.'
        example: '["readonly", "system"]'
        flat_name: file.attributes
        ignore_above: 1024
        level: extended
        name: attributes
        node_name: attributes
        normalize:
        - array
        short: Array of file attributes.
        type: keyword
    code_signature:
      field_details:
        dashed_name: file-code-signature
        description: These fields contain information about binary code signatures.
        flat_name: file.code_signature
        intermediate: true
        name: code_signature
        node_name: code_signature
        original_fieldset: code_signature
        short: These fields contain information about binary code signatures.
        type: group
      fields:
        digest_algorithm:
          field_details:
            dashed_name: file-code-signature-digest-algorithm
            description: 'The hashing algorithm used to sign the process.

              This value can distinguish signatures when a file is signed multiple
              times by the same signer but with a different digest algorithm.'
            example: sha256
            flat_name: file.code_signature.digest_algorithm
            ignore_above: 1024
            level: extended
            name: digest_algorithm
            node_name: digest_algorithm
            normalize: []
            original_fieldset: code_signature
            short: Hashing algorithm used to sign the process.
            type: keyword
        exists:
          field_details:
            dashed_name: file-code-signature-exists
            description: Boolean to capture if a signature is present.
            example: 'true'
            flat_name: file.code_signature.exists
            level: core
            name: exists
            node_name: exists
            normalize: []
            original_fieldset: code_signature
            short: Boolean to capture if a signature is present.
            type: boolean
        signing_id:
          field_details:
            dashed_name: file-code-signature-signing-id
            description: 'The identifier used to sign the process.

              This is used to identify the application manufactured by a software
              vendor. The field is relevant to Apple *OS only.'
            example: com.apple.xpc.proxy
            flat_name: file.code_signature.signing_id
            ignore_above: 1024
            level: extended
            name: signing_id
            node_name: signing_id
            normalize: []
            original_fieldset: code_signature
            short: The identifier used to sign the process.
            type: keyword
        status:
          field_details:
            dashed_name: file-code-signature-status
            description: 'Additional information about the certificate status.

              This is useful for logging cryptographic errors with the certificate
              validity or trust status. Leave unpopulated if the validity or trust
              of the certificate was unchecked.'
            example: ERROR_UNTRUSTED_ROOT
            flat_name: file.code_signature.status
            ignore_above: 1024
            level: extended
            name: status
            node_name: status
            normalize: []
            original_fieldset: code_signature
            short: Additional information about the certificate status.
            type: keyword
        subject_name:
          field_details:
            dashed_name: file-code-signature-subject-name
            description: Subject name of the code signer
            example: Microsoft Corporation
            flat_name: file.code_signature.subject_name
            ignore_above: 1024
            level: core
            name: subject_name
            node_name: subject_name
            normalize: []
            original_fieldset: code_signature
            short: Subject name of the code signer
            type: keyword
        team_id:
          field_details:
            dashed_name: file-code-signature-team-id
            description: 'The team identifier used to sign the process.

              This is used to identify the team or vendor of a software product. The
              field is relevant to Apple *OS only.'
            example: EQHXZ8M8AV
            flat_name: file.code_signature.team_id
            ignore_above: 1024
            level: extended
            name: team_id
            node_name: team_id
            normalize: []
            original_fieldset: code_signature
            short: The team identifier used to sign the process.
            type: keyword
        timestamp:
          field_details:
            dashed_name: file-code-signature-timestamp
            description: Date and time when the code signature was generated and signed.
            example: '2021-01-01T12:10:30Z'
            flat_name: file.code_signature.timestamp
            level: extended
            name: timestamp
            node_name: timestamp
            normalize: []
            original_fieldset: code_signature
            short: When the signature was generated and signed.
            type: date
        trusted:
          field_details:
            dashed_name: file-code-signature-trusted
            description: 'Stores the trust status of the certificate chain.

              Validating the trust of the certificate chain may be complicated, and
              this field should only be populated by tools that actively check the
              status.'
            example: 'true'
            flat_name: file.code_signature.trusted
            level: extended
            name: trusted
            node_name: trusted
            normalize: []
            original_fieldset: code_signature
            short: Stores the trust status of the certificate chain.
            type: boolean
        valid:
          field_details:
            dashed_name: file-code-signature-valid
            description: 'Boolean to capture if the digital signature is verified
              against the binary content.

              Leave unpopulated if a certificate was unchecked.'
            example: 'true'
            flat_name: file.code_signature.valid
            level: extended
            name: valid
            node_name: valid
            normalize: []
            original_fieldset: code_signature
            short: Boolean to capture if the digital signature is verified against
              the binary content.
            type: boolean
    created:
      field_details:
        dashed_name: file-created
        description: 'File creation time.

          Note that not all filesystems store the creation time.'
        flat_name: file.created
        level: extended
        name: created
        node_name: created
        normalize: []
        short: File creation time.
        type: date
    ctime:
      field_details:
        dashed_name: file-ctime
        description: 'Last time the file attributes or metadata changed.

          Note that changes to the file content will update `mtime`. This implies
          `ctime` will be adjusted at the same time, since `mtime` is an attribute
          of the file.'
        flat_name: file.ctime
        level: extended
        name: ctime
        node_name: ctime
        normalize: []
        short: Last time the file attributes or metadata changed.
        type: date
    device:
      field_details:
        dashed_name: file-device
        description: Device that is the source of the file.
        example: sda
        flat_name: file.device
        ignore_above: 1024
        level: extended
        name: device
        node_name: device
        normalize: []
        short: Device that is the source of the file.
        type: keyword
    directory:
      field_details:
        dashed_name: file-directory
        description: Directory where the file is located. It should include the drive
          letter, when appropriate.
        example: /home/alice
        flat_name: file.directory
        ignore_above: 1024
        level: extended
        name: directory
        node_name: directory
        normalize: []
        short: Directory where the file is located.
        type: keyword
    drive_letter:
      field_details:
        dashed_name: file-drive-letter
        description: 'Drive letter where the file is located. This field is only relevant
          on Windows.

          The value should be uppercase, and not include the colon.'
        example: C
        flat_name: file.drive_letter
        ignore_above: 1
        level: extended
        name: drive_letter
        node_name: drive_letter
        normalize: []
        short: Drive letter where the file is located.
        type: keyword
    elf:
      field_details:
        beta: These fields are in beta and are subject to change.
        dashed_name: file-elf
        description: These fields contain Linux Executable Linkable Format (ELF) metadata.
        flat_name: file.elf
        intermediate: true
        name: elf
        node_name: elf
        original_fieldset: elf
        short: These fields contain Linux Executable Linkable Format (ELF) metadata.
        type: group
      fields:
        architecture:
          field_details:
            dashed_name: file-elf-architecture
            description: Machine architecture of the ELF file.
            example: x86-64
            flat_name: file.elf.architecture
            ignore_above: 1024
            level: extended
            name: architecture
            node_name: architecture
            normalize: []
            original_fieldset: elf
            short: Machine architecture of the ELF file.
            type: keyword
        byte_order:
          field_details:
            dashed_name: file-elf-byte-order
            description: Byte sequence of ELF file.
            example: Little Endian
            flat_name: file.elf.byte_order
            ignore_above: 1024
            level: extended
            name: byte_order
            node_name: byte_order
            normalize: []
            original_fieldset: elf
            short: Byte sequence of ELF file.
            type: keyword
        cpu_type:
          field_details:
            dashed_name: file-elf-cpu-type
            description: CPU type of the ELF file.
            example: Intel
            flat_name: file.elf.cpu_type
            ignore_above: 1024
            level: extended
            name: cpu_type
            node_name: cpu_type
            normalize: []
            original_fieldset: elf
            short: CPU type of the ELF file.
            type: keyword
        creation_date:
          field_details:
            dashed_name: file-elf-creation-date
            description: Extracted when possible from the file's metadata. Indicates
              when it was built or compiled. It can also be faked by malware creators.
            flat_name: file.elf.creation_date
            level: extended
            name: creation_date
            node_name: creation_date
            normalize: []
            original_fieldset: elf
            short: Build or compile date.
            type: date
        exports:
          field_details:
            dashed_name: file-elf-exports
            description: List of exported element names and types.
            flat_name: file.elf.exports
            level: extended
            name: exports
            node_name: exports
            normalize:
            - array
            original_fieldset: elf
            short: List of exported element names and types.
            type: flattened
        go_import_hash:
          field_details:
            dashed_name: file-elf-go-import-hash
            description: 'A hash of the Go language imports in an ELF file excluding
              standard library imports. An import hash can be used to fingerprint
              binaries even after recompilation or other code-level transformations
              have occurred, which would change more traditional hash values.

              The algorithm used to calculate the Go symbol hash and a reference implementation
              are available [here](https://github.com/elastic/toutoumomoma).'
            example: 10bddcb4cee42080f76c88d9ff964491
            flat_name: file.elf.go_import_hash
            ignore_above: 1024
            level: extended
            name: go_import_hash
            node_name: go_import_hash
            normalize: []
            original_fieldset: elf
            short: A hash of the Go language imports in an ELF file.
            type: keyword
        go_imports:
          field_details:
            dashed_name: file-elf-go-imports
            description: List of imported Go language element names and types.
            flat_name: file.elf.go_imports
            level: extended
            name: go_imports
            node_name: go_imports
            normalize: []
            original_fieldset: elf
            short: List of imported Go language element names and types.
            type: flattened
        go_imports_names_entropy:
          field_details:
            dashed_name: file-elf-go-imports-names-entropy
            description: Shannon entropy calculation from the list of Go imports.
            flat_name: file.elf.go_imports_names_entropy
            format: number
            level: extended
            name: go_imports_names_entropy
            node_name: go_imports_names_entropy
            normalize: []
            original_fieldset: elf
            short: Shannon entropy calculation from the list of Go imports.
            type: long
        go_imports_names_var_entropy:
          field_details:
            dashed_name: file-elf-go-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              Go imports.
            flat_name: file.elf.go_imports_names_var_entropy
            format: number
            level: extended
            name: go_imports_names_var_entropy
            node_name: go_imports_names_var_entropy
            normalize: []
            original_fieldset: elf
            short: Variance for Shannon entropy calculation from the list of Go imports.
            type: long
        go_stripped:
          field_details:
            dashed_name: file-elf-go-stripped
            description: Set to true if the file is a Go executable that has had its
              symbols stripped or obfuscated and false if an unobfuscated Go executable.
            flat_name: file.elf.go_stripped
            level: extended
            name: go_stripped
            node_name: go_stripped
            normalize: []
            original_fieldset: elf
            short: Whether the file is a stripped or obfuscated Go executable.
            type: boolean
        header:
          field_details:
            dashed_name: file-elf-header
            flat_name: file.elf.header
            intermediate: true
            name: header
            node_name: header
            original_fieldset: elf
            type: object
          fields:
            abi_version:
              field_details:
                dashed_name: file-elf-header-abi-version
                description: Version of the ELF Application Binary Interface (ABI).
                flat_name: file.elf.header.abi_version
                ignore_above: 1024
                level: extended
                name: header.abi_version
                node_name: abi_version
                normalize: []
                original_fieldset: elf
                short: Version of the ELF Application Binary Interface (ABI).
                type: keyword
            class:
              field_details:
                dashed_name: file-elf-header-class
                description: Header class of the ELF file.
                flat_name: file.elf.header.class
                ignore_above: 1024
                level: extended
                name: header.class
                node_name: class
                normalize: []
                original_fieldset: elf
                short: Header class of the ELF file.
                type: keyword
            data:
              field_details:
                dashed_name: file-elf-header-data
                description: Data table of the ELF header.
                flat_name: file.elf.header.data
                ignore_above: 1024
                level: extended
                name: header.data
                node_name: data
                normalize: []
                original_fieldset: elf
                short: Data table of the ELF header.
                type: keyword
            entrypoint:
              field_details:
                dashed_name: file-elf-header-entrypoint
                description: Header entrypoint of the ELF file.
                flat_name: file.elf.header.entrypoint
                format: string
                level: extended
                name: header.entrypoint
                node_name: entrypoint
                normalize: []
                original_fieldset: elf
                short: Header entrypoint of the ELF file.
                type: long
            object_version:
              field_details:
                dashed_name: file-elf-header-object-version
                description: '"0x1" for original ELF files.'
                flat_name: file.elf.header.object_version
                ignore_above: 1024
                level: extended
                name: header.object_version
                node_name: object_version
                normalize: []
                original_fieldset: elf
                short: '"0x1" for original ELF files.'
                type: keyword
            os_abi:
              field_details:
                dashed_name: file-elf-header-os-abi
                description: Application Binary Interface (ABI) of the Linux OS.
                flat_name: file.elf.header.os_abi
                ignore_above: 1024
                level: extended
                name: header.os_abi
                node_name: os_abi
                normalize: []
                original_fieldset: elf
                short: Application Binary Interface (ABI) of the Linux OS.
                type: keyword
            type:
              field_details:
                dashed_name: file-elf-header-type
                description: Header type of the ELF file.
                flat_name: file.elf.header.type
                ignore_above: 1024
                level: extended
                name: header.type
                node_name: type
                normalize: []
                original_fieldset: elf
                short: Header type of the ELF file.
                type: keyword
            version:
              field_details:
                dashed_name: file-elf-header-version
                description: Version of the ELF header.
                flat_name: file.elf.header.version
                ignore_above: 1024
                level: extended
                name: header.version
                node_name: version
                normalize: []
                original_fieldset: elf
                short: Version of the ELF header.
                type: keyword
        import_hash:
          field_details:
            dashed_name: file-elf-import-hash
            description: 'A hash of the imports in an ELF file. An import hash can
              be used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is an ELF implementation of the Windows PE imphash.'
            example: d41d8cd98f00b204e9800998ecf8427e
            flat_name: file.elf.import_hash
            ignore_above: 1024
            level: extended
            name: import_hash
            node_name: import_hash
            normalize: []
            original_fieldset: elf
            short: A hash of the imports in an ELF file.
            type: keyword
        imports:
          field_details:
            dashed_name: file-elf-imports
            description: List of imported element names and types.
            flat_name: file.elf.imports
            level: extended
            name: imports
            node_name: imports
            normalize:
            - array
            original_fieldset: elf
            short: List of imported element names and types.
            type: flattened
        imports_names_entropy:
          field_details:
            dashed_name: file-elf-imports-names-entropy
            description: Shannon entropy calculation from the list of imported element
              names and types.
            flat_name: file.elf.imports_names_entropy
            format: number
            level: extended
            name: imports_names_entropy
            node_name: imports_names_entropy
            normalize: []
            original_fieldset: elf
            short: Shannon entropy calculation from the list of imported element names
              and types.
            type: long
        imports_names_var_entropy:
          field_details:
            dashed_name: file-elf-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              imported element names and types.
            flat_name: file.elf.imports_names_var_entropy
            format: number
            level: extended
            name: imports_names_var_entropy
            node_name: imports_names_var_entropy
            normalize: []
            original_fieldset: elf
            short: Variance for Shannon entropy calculation from the list of imported
              element names and types.
            type: long
        sections:
          field_details:
            dashed_name: file-elf-sections
            description: 'An array containing an object for each section of the ELF
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `elf.sections.*`.'
            flat_name: file.elf.sections
            intermediate: false
            level: extended
            name: sections
            node_name: sections
            normalize:
            - array
            original_fieldset: elf
            short: Section information of the ELF file.
            type: nested
          fields:
            chi2:
              field_details:
                dashed_name: file-elf-sections-chi2
                description: Chi-square probability distribution of the section.
                flat_name: file.elf.sections.chi2
                format: number
                level: extended
                name: sections.chi2
                node_name: chi2
                normalize: []
                original_fieldset: elf
                short: Chi-square probability distribution of the section.
                type: long
            entropy:
              field_details:
                dashed_name: file-elf-sections-entropy
                description: Shannon entropy calculation from the section.
                flat_name: file.elf.sections.entropy
                format: number
                level: extended
                name: sections.entropy
                node_name: entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the section.
                type: long
            flags:
              field_details:
                dashed_name: file-elf-sections-flags
                description: ELF Section List flags.
                flat_name: file.elf.sections.flags
                ignore_above: 1024
                level: extended
                name: sections.flags
                node_name: flags
                normalize: []
                original_fieldset: elf
                short: ELF Section List flags.
                type: keyword
            name:
              field_details:
                dashed_name: file-elf-sections-name
                description: ELF Section List name.
                flat_name: file.elf.sections.name
                ignore_above: 1024
                level: extended
                name: sections.name
                node_name: name
                normalize: []
                original_fieldset: elf
                short: ELF Section List name.
                type: keyword
            physical_offset:
              field_details:
                dashed_name: file-elf-sections-physical-offset
                description: ELF Section List offset.
                flat_name: file.elf.sections.physical_offset
                ignore_above: 1024
                level: extended
                name: sections.physical_offset
                node_name: physical_offset
                normalize: []
                original_fieldset: elf
                short: ELF Section List offset.
                type: keyword
            physical_size:
              field_details:
                dashed_name: file-elf-sections-physical-size
                description: ELF Section List physical size.
                flat_name: file.elf.sections.physical_size
                format: bytes
                level: extended
                name: sections.physical_size
                node_name: physical_size
                normalize: []
                original_fieldset: elf
                short: ELF Section List physical size.
                type: long
            type:
              field_details:
                dashed_name: file-elf-sections-type
                description: ELF Section List type.
                flat_name: file.elf.sections.type
                ignore_above: 1024
                level: extended
                name: sections.type
                node_name: type
                normalize: []
                original_fieldset: elf
                short: ELF Section List type.
                type: keyword
            var_entropy:
              field_details:
                dashed_name: file-elf-sections-var-entropy
                description: Variance for Shannon entropy calculation from the section.
                flat_name: file.elf.sections.var_entropy
                format: number
                level: extended
                name: sections.var_entropy
                node_name: var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the section.
                type: long
            virtual_address:
              field_details:
                dashed_name: file-elf-sections-virtual-address
                description: ELF Section List virtual address.
                flat_name: file.elf.sections.virtual_address
                format: string
                level: extended
                name: sections.virtual_address
                node_name: virtual_address
                normalize: []
                original_fieldset: elf
                short: ELF Section List virtual address.
                type: long
            virtual_size:
              field_details:
                dashed_name: file-elf-sections-virtual-size
                description: ELF Section List virtual size.
                flat_name: file.elf.sections.virtual_size
                format: string
                level: extended
                name: sections.virtual_size
                node_name: virtual_size
                normalize: []
                original_fieldset: elf
                short: ELF Section List virtual size.
                type: long
        segments:
          field_details:
            dashed_name: file-elf-segments
            description: 'An array containing an object for each segment of the ELF
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `elf.segments.*`.'
            flat_name: file.elf.segments
            intermediate: false
            level: extended
            name: segments
            node_name: segments
            normalize:
            - array
            original_fieldset: elf
            short: ELF object segment list.
            type: nested
          fields:
            sections:
              field_details:
                dashed_name: file-elf-segments-sections
                description: ELF object segment sections.
                flat_name: file.elf.segments.sections
                ignore_above: 1024
                level: extended
                name: segments.sections
                node_name: sections
                normalize: []
                original_fieldset: elf
                short: ELF object segment sections.
                type: keyword
            type:
              field_details:
                dashed_name: file-elf-segments-type
                description: ELF object segment type.
                flat_name: file.elf.segments.type
                ignore_above: 1024
                level: extended
                name: segments.type
                node_name: type
                normalize: []
                original_fieldset: elf
                short: ELF object segment type.
                type: keyword
        shared_libraries:
          field_details:
            dashed_name: file-elf-shared-libraries
            description: List of shared libraries used by this ELF object.
            flat_name: file.elf.shared_libraries
            ignore_above: 1024
            level: extended
            name: shared_libraries
            node_name: shared_libraries
            normalize:
            - array
            original_fieldset: elf
            short: List of shared libraries used by this ELF object.
            type: keyword
        telfhash:
          field_details:
            dashed_name: file-elf-telfhash
            description: telfhash symbol hash for ELF file.
            flat_name: file.elf.telfhash
            ignore_above: 1024
            level: extended
            name: telfhash
            node_name: telfhash
            normalize: []
            original_fieldset: elf
            short: telfhash hash for ELF file.
            type: keyword
    extension:
      field_details:
        dashed_name: file-extension
        description: 'File extension, excluding the leading dot.

          Note that when the file name has multiple extensions (example.tar.gz), only
          the last one should be captured ("gz", not "tar.gz").'
        example: png
        flat_name: file.extension
        ignore_above: 1024
        level: extended
        name: extension
        node_name: extension
        normalize: []
        short: File extension, excluding the leading dot.
        type: keyword
    fork_name:
      field_details:
        dashed_name: file-fork-name
        description: 'A fork is additional data associated with a filesystem object.

          On Linux, a resource fork is used to store additional data with a filesystem
          object. A file always has at least one fork for the data portion, and additional
          forks may exist.

          On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default
          data stream for a file is just called $DATA. Zone.Identifier is commonly
          used by Windows to track contents downloaded from the Internet. An ADS is
          typically of the form: `C:\path\to\filename.extension:some_fork_name`, and
          `some_fork_name` is the value that should populate `fork_name`. `filename.extension`
          should populate `file.name`, and `extension` should populate `file.extension`.
          The full path, `file.path`, will include the fork name.'
        example: Zone.Identifer
        flat_name: file.fork_name
        ignore_above: 1024
        level: extended
        name: fork_name
        node_name: fork_name
        normalize: []
        short: A fork is additional data associated with a filesystem object.
        type: keyword
    gid:
      field_details:
        dashed_name: file-gid
        description: Primary group ID (GID) of the file.
        example: '1001'
        flat_name: file.gid
        ignore_above: 1024
        level: extended
        name: gid
        node_name: gid
        normalize: []
        short: Primary group ID (GID) of the file.
        type: keyword
    group:
      field_details:
        dashed_name: file-group
        description: Primary group name of the file.
        example: alice
        flat_name: file.group
        ignore_above: 1024
        level: extended
        name: group
        node_name: group
        normalize: []
        short: Primary group name of the file.
        type: keyword
    hash:
      field_details:
        dashed_name: file-hash
        description: 'The hash fields represent different bitwise hash algorithms
          and their values.

          Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
          for other hashes by lowercasing the hash algorithm name and using underscore
          separators as appropriate (snake case, e.g. sha3_512).

          Note that this fieldset is used for common hashes that may be computed over
          a range of generic bytes. Entity-specific hashes such as ja3 or imphash
          are placed in the fieldsets to which they relate (tls and pe, respectively).'
        flat_name: file.hash
        intermediate: true
        name: hash
        node_name: hash
        original_fieldset: hash
        short: Hashes, usually file hashes.
        type: group
      fields:
        md5:
          field_details:
            dashed_name: file-hash-md5
            description: MD5 hash.
            flat_name: file.hash.md5
            ignore_above: 1024
            level: extended
            name: md5
            node_name: md5
            normalize: []
            original_fieldset: hash
            short: MD5 hash.
            type: keyword
        sha1:
          field_details:
            dashed_name: file-hash-sha1
            description: SHA1 hash.
            flat_name: file.hash.sha1
            ignore_above: 1024
            level: extended
            name: sha1
            node_name: sha1
            normalize: []
            original_fieldset: hash
            short: SHA1 hash.
            type: keyword
        sha256:
          field_details:
            dashed_name: file-hash-sha256
            description: SHA256 hash.
            flat_name: file.hash.sha256
            ignore_above: 1024
            level: extended
            name: sha256
            node_name: sha256
            normalize: []
            original_fieldset: hash
            short: SHA256 hash.
            type: keyword
        sha384:
          field_details:
            dashed_name: file-hash-sha384
            description: SHA384 hash.
            flat_name: file.hash.sha384
            ignore_above: 1024
            level: extended
            name: sha384
            node_name: sha384
            normalize: []
            original_fieldset: hash
            short: SHA384 hash.
            type: keyword
        sha512:
          field_details:
            dashed_name: file-hash-sha512
            description: SHA512 hash.
            flat_name: file.hash.sha512
            ignore_above: 1024
            level: extended
            name: sha512
            node_name: sha512
            normalize: []
            original_fieldset: hash
            short: SHA512 hash.
            type: keyword
        ssdeep:
          field_details:
            dashed_name: file-hash-ssdeep
            description: SSDEEP hash.
            flat_name: file.hash.ssdeep
            ignore_above: 1024
            level: extended
            name: ssdeep
            node_name: ssdeep
            normalize: []
            original_fieldset: hash
            short: SSDEEP hash.
            type: keyword
        tlsh:
          field_details:
            dashed_name: file-hash-tlsh
            description: TLSH hash.
            flat_name: file.hash.tlsh
            ignore_above: 1024
            level: extended
            name: tlsh
            node_name: tlsh
            normalize: []
            original_fieldset: hash
            short: TLSH hash.
            type: keyword
    inode:
      field_details:
        dashed_name: file-inode
        description: Inode representing the file in the filesystem.
        example: '256383'
        flat_name: file.inode
        ignore_above: 1024
        level: extended
        name: inode
        node_name: inode
        normalize: []
        short: Inode representing the file in the filesystem.
        type: keyword
    macho:
      field_details:
        beta: These fields are in beta and are subject to change.
        dashed_name: file-macho
        description: These fields contain Mac OS Mach Object file format (Mach-O)
          metadata.
        flat_name: file.macho
        intermediate: true
        name: macho
        node_name: macho
        original_fieldset: macho
        short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
        type: group
      fields:
        go_import_hash:
          field_details:
            dashed_name: file-macho-go-import-hash
            description: 'A hash of the Go language imports in a Mach-O file excluding
              standard library imports. An import hash can be used to fingerprint
              binaries even after recompilation or other code-level transformations
              have occurred, which would change more traditional hash values.

              The algorithm used to calculate the Go symbol hash and a reference implementation
              are available [here](https://github.com/elastic/toutoumomoma).'
            example: 10bddcb4cee42080f76c88d9ff964491
            flat_name: file.macho.go_import_hash
            ignore_above: 1024
            level: extended
            name: go_import_hash
            node_name: go_import_hash
            normalize: []
            original_fieldset: macho
            short: A hash of the Go language imports in a Mach-O file.
            type: keyword
        go_imports:
          field_details:
            dashed_name: file-macho-go-imports
            description: List of imported Go language element names and types.
            flat_name: file.macho.go_imports
            level: extended
            name: go_imports
            node_name: go_imports
            normalize: []
            original_fieldset: macho
            short: List of imported Go language element names and types.
            type: flattened
        go_imports_names_entropy:
          field_details:
            dashed_name: file-macho-go-imports-names-entropy
            description: Shannon entropy calculation from the list of Go imports.
            flat_name: file.macho.go_imports_names_entropy
            format: number
            level: extended
            name: go_imports_names_entropy
            node_name: go_imports_names_entropy
            normalize: []
            original_fieldset: macho
            short: Shannon entropy calculation from the list of Go imports.
            type: long
        go_imports_names_var_entropy:
          field_details:
            dashed_name: file-macho-go-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              Go imports.
            flat_name: file.macho.go_imports_names_var_entropy
            format: number
            level: extended
            name: go_imports_names_var_entropy
            node_name: go_imports_names_var_entropy
            normalize: []
            original_fieldset: macho
            short: Variance for Shannon entropy calculation from the list of Go imports.
            type: long
        go_stripped:
          field_details:
            dashed_name: file-macho-go-stripped
            description: Set to true if the file is a Go executable that has had its
              symbols stripped or obfuscated and false if an unobfuscated Go executable.
            flat_name: file.macho.go_stripped
            level: extended
            name: go_stripped
            node_name: go_stripped
            normalize: []
            original_fieldset: macho
            short: Whether the file is a stripped or obfuscated Go executable.
            type: boolean
        import_hash:
          field_details:
            dashed_name: file-macho-import-hash
            description: 'A hash of the imports in a Mach-O file. An import hash can
              be used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is a synonym for symhash.'
            example: d41d8cd98f00b204e9800998ecf8427e
            flat_name: file.macho.import_hash
            ignore_above: 1024
            level: extended
            name: import_hash
            node_name: import_hash
            normalize: []
            original_fieldset: macho
            short: A hash of the imports in a Mach-O file.
            type: keyword
        imports:
          field_details:
            dashed_name: file-macho-imports
            description: List of imported element names and types.
            flat_name: file.macho.imports
            level: extended
            name: imports
            node_name: imports
            normalize:
            - array
            original_fieldset: macho
            short: List of imported element names and types.
            type: flattened
        imports_names_entropy:
          field_details:
            dashed_name: file-macho-imports-names-entropy
            description: Shannon entropy calculation from the list of imported element
              names and types.
            flat_name: file.macho.imports_names_entropy
            format: number
            level: extended
            name: imports_names_entropy
            node_name: imports_names_entropy
            normalize: []
            original_fieldset: macho
            short: Shannon entropy calculation from the list of imported element names
              and types.
            type: long
        imports_names_var_entropy:
          field_details:
            dashed_name: file-macho-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              imported element names and types.
            flat_name: file.macho.imports_names_var_entropy
            format: number
            level: extended
            name: imports_names_var_entropy
            node_name: imports_names_var_entropy
            normalize: []
            original_fieldset: macho
            short: Variance for Shannon entropy calculation from the list of imported
              element names and types.
            type: long
        sections:
          field_details:
            dashed_name: file-macho-sections
            description: 'An array containing an object for each section of the Mach-O
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `macho.sections.*`.'
            flat_name: file.macho.sections
            intermediate: false
            level: extended
            name: sections
            node_name: sections
            normalize:
            - array
            original_fieldset: macho
            short: Section information of the Mach-O file.
            type: nested
          fields:
            entropy:
              field_details:
                dashed_name: file-macho-sections-entropy
                description: Shannon entropy calculation from the section.
                flat_name: file.macho.sections.entropy
                format: number
                level: extended
                name: sections.entropy
                node_name: entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the section.
                type: long
            name:
              field_details:
                dashed_name: file-macho-sections-name
                description: Mach-O Section List name.
                flat_name: file.macho.sections.name
                ignore_above: 1024
                level: extended
                name: sections.name
                node_name: name
                normalize: []
                original_fieldset: macho
                short: Mach-O Section List name.
                type: keyword
            physical_size:
              field_details:
                dashed_name: file-macho-sections-physical-size
                description: Mach-O Section List physical size.
                flat_name: file.macho.sections.physical_size
                format: bytes
                level: extended
                name: sections.physical_size
                node_name: physical_size
                normalize: []
                original_fieldset: macho
                short: Mach-O Section List physical size.
                type: long
            var_entropy:
              field_details:
                dashed_name: file-macho-sections-var-entropy
                description: Variance for Shannon entropy calculation from the section.
                flat_name: file.macho.sections.var_entropy
                format: number
                level: extended
                name: sections.var_entropy
                node_name: var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the section.
                type: long
            virtual_size:
              field_details:
                dashed_name: file-macho-sections-virtual-size
                description: Mach-O Section List virtual size. This is always the
                  same as `physical_size`.
                flat_name: file.macho.sections.virtual_size
                format: string
                level: extended
                name: sections.virtual_size
                node_name: virtual_size
                normalize: []
                original_fieldset: macho
                short: Mach-O Section List virtual size. This is always the same as
                  `physical_size`.
                type: long
        symhash:
          field_details:
            dashed_name: file-macho-symhash
            description: 'A hash of the imports in a Mach-O file. An import hash can
              be used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is a Mach-O implementation of the Windows PE imphash'
            example: d3ccf195b62a9279c3c19af1080497ec
            flat_name: file.macho.symhash
            ignore_above: 1024
            level: extended
            name: symhash
            node_name: symhash
            normalize: []
            original_fieldset: macho
            short: A hash of the imports in a Mach-O file.
            type: keyword
    mime_type:
      field_details:
        dashed_name: file-mime-type
        description: MIME type should identify the format of the file or stream of
          bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA
          official types], where possible. When more than one type is applicable,
          the most specific type should be used.
        flat_name: file.mime_type
        ignore_above: 1024
        level: extended
        name: mime_type
        node_name: mime_type
        normalize: []
        short: Media type of file, document, or arrangement of bytes.
        type: keyword
    mode:
      field_details:
        dashed_name: file-mode
        description: Mode of the file in octal representation.
        example: '0640'
        flat_name: file.mode
        ignore_above: 1024
        level: extended
        name: mode
        node_name: mode
        normalize: []
        short: Mode of the file in octal representation.
        type: keyword
    mtime:
      field_details:
        dashed_name: file-mtime
        description: Last time the file content was modified.
        flat_name: file.mtime
        level: extended
        name: mtime
        node_name: mtime
        normalize: []
        short: Last time the file content was modified.
        type: date
    name:
      field_details:
        dashed_name: file-name
        description: Name of the file including the extension, without the directory.
        example: example.png
        flat_name: file.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Name of the file including the extension, without the directory.
        type: keyword
    owner:
      field_details:
        dashed_name: file-owner
        description: File owner's username.
        example: alice
        flat_name: file.owner
        ignore_above: 1024
        level: extended
        name: owner
        node_name: owner
        normalize: []
        short: File owner's username.
        type: keyword
    path:
      field_details:
        dashed_name: file-path
        description: Full path to the file, including the file name. It should include
          the drive letter, when appropriate.
        example: /home/alice/example.png
        flat_name: file.path
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: file.path.text
          name: text
          type: match_only_text
        name: path
        node_name: path
        normalize: []
        short: Full path to the file, including the file name.
        type: keyword
    pe:
      field_details:
        dashed_name: file-pe
        description: These fields contain Windows Portable Executable (PE) metadata.
        flat_name: file.pe
        intermediate: true
        name: pe
        node_name: pe
        original_fieldset: pe
        short: These fields contain Windows Portable Executable (PE) metadata.
        type: group
      fields:
        architecture:
          field_details:
            dashed_name: file-pe-architecture
            description: CPU architecture target for the file.
            example: x64
            flat_name: file.pe.architecture
            ignore_above: 1024
            level: extended
            name: architecture
            node_name: architecture
            normalize: []
            original_fieldset: pe
            short: CPU architecture target for the file.
            type: keyword
        company:
          field_details:
            dashed_name: file-pe-company
            description: Internal company name of the file, provided at compile-time.
            example: Microsoft Corporation
            flat_name: file.pe.company
            ignore_above: 1024
            level: extended
            name: company
            node_name: company
            normalize: []
            original_fieldset: pe
            short: Internal company name of the file, provided at compile-time.
            type: keyword
        description:
          field_details:
            dashed_name: file-pe-description
            description: Internal description of the file, provided at compile-time.
            example: Paint
            flat_name: file.pe.description
            ignore_above: 1024
            level: extended
            name: description
            node_name: description
            normalize: []
            original_fieldset: pe
            short: Internal description of the file, provided at compile-time.
            type: keyword
        file_version:
          field_details:
            dashed_name: file-pe-file-version
            description: Internal version of the file, provided at compile-time.
            example: 6.3.9600.17415
            flat_name: file.pe.file_version
            ignore_above: 1024
            level: extended
            name: file_version
            node_name: file_version
            normalize: []
            original_fieldset: pe
            short: Process name.
            type: keyword
        go_import_hash:
          field_details:
            dashed_name: file-pe-go-import-hash
            description: 'A hash of the Go language imports in a PE file excluding
              standard library imports. An import hash can be used to fingerprint
              binaries even after recompilation or other code-level transformations
              have occurred, which would change more traditional hash values.

              The algorithm used to calculate the Go symbol hash and a reference implementation
              are available [here](https://github.com/elastic/toutoumomoma).'
            example: 10bddcb4cee42080f76c88d9ff964491
            flat_name: file.pe.go_import_hash
            ignore_above: 1024
            level: extended
            name: go_import_hash
            node_name: go_import_hash
            normalize: []
            original_fieldset: pe
            short: A hash of the Go language imports in a PE file.
            type: keyword
        go_imports:
          field_details:
            dashed_name: file-pe-go-imports
            description: List of imported Go language element names and types.
            flat_name: file.pe.go_imports
            level: extended
            name: go_imports
            node_name: go_imports
            normalize: []
            original_fieldset: pe
            short: List of imported Go language element names and types.
            type: flattened
        go_imports_names_entropy:
          field_details:
            dashed_name: file-pe-go-imports-names-entropy
            description: Shannon entropy calculation from the list of Go imports.
            flat_name: file.pe.go_imports_names_entropy
            format: number
            level: extended
            name: go_imports_names_entropy
            node_name: go_imports_names_entropy
            normalize: []
            original_fieldset: pe
            short: Shannon entropy calculation from the list of Go imports.
            type: long
        go_imports_names_var_entropy:
          field_details:
            dashed_name: file-pe-go-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              Go imports.
            flat_name: file.pe.go_imports_names_var_entropy
            format: number
            level: extended
            name: go_imports_names_var_entropy
            node_name: go_imports_names_var_entropy
            normalize: []
            original_fieldset: pe
            short: Variance for Shannon entropy calculation from the list of Go imports.
            type: long
        go_stripped:
          field_details:
            dashed_name: file-pe-go-stripped
            description: Set to true if the file is a Go executable that has had its
              symbols stripped or obfuscated and false if an unobfuscated Go executable.
            flat_name: file.pe.go_stripped
            level: extended
            name: go_stripped
            node_name: go_stripped
            normalize: []
            original_fieldset: pe
            short: Whether the file is a stripped or obfuscated Go executable.
            type: boolean
        imphash:
          field_details:
            dashed_name: file-pe-imphash
            description: 'A hash of the imports in a PE file. An imphash -- or import
              hash -- can be used to fingerprint binaries even after recompilation
              or other code-level transformations have occurred, which would change
              more traditional hash values.

              Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
            example: 0c6803c4e922103c4dca5963aad36ddf
            flat_name: file.pe.imphash
            ignore_above: 1024
            level: extended
            name: imphash
            node_name: imphash
            normalize: []
            original_fieldset: pe
            short: A hash of the imports in a PE file.
            type: keyword
        import_hash:
          field_details:
            dashed_name: file-pe-import-hash
            description: 'A hash of the imports in a PE file. An import hash can be
              used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is a synonym for imphash.'
            example: d41d8cd98f00b204e9800998ecf8427e
            flat_name: file.pe.import_hash
            ignore_above: 1024
            level: extended
            name: import_hash
            node_name: import_hash
            normalize: []
            original_fieldset: pe
            short: A hash of the imports in a PE file.
            type: keyword
        imports:
          field_details:
            dashed_name: file-pe-imports
            description: List of imported element names and types.
            flat_name: file.pe.imports
            level: extended
            name: imports
            node_name: imports
            normalize:
            - array
            original_fieldset: pe
            short: List of imported element names and types.
            type: flattened
        imports_names_entropy:
          field_details:
            dashed_name: file-pe-imports-names-entropy
            description: Shannon entropy calculation from the list of imported element
              names and types.
            flat_name: file.pe.imports_names_entropy
            format: number
            level: extended
            name: imports_names_entropy
            node_name: imports_names_entropy
            normalize: []
            original_fieldset: pe
            short: Shannon entropy calculation from the list of imported element names
              and types.
            type: long
        imports_names_var_entropy:
          field_details:
            dashed_name: file-pe-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              imported element names and types.
            flat_name: file.pe.imports_names_var_entropy
            format: number
            level: extended
            name: imports_names_var_entropy
            node_name: imports_names_var_entropy
            normalize: []
            original_fieldset: pe
            short: Variance for Shannon entropy calculation from the list of imported
              element names and types.
            type: long
        original_file_name:
          field_details:
            dashed_name: file-pe-original-file-name
            description: Internal name of the file, provided at compile-time.
            example: MSPAINT.EXE
            flat_name: file.pe.original_file_name
            ignore_above: 1024
            level: extended
            name: original_file_name
            node_name: original_file_name
            normalize: []
            original_fieldset: pe
            short: Internal name of the file, provided at compile-time.
            type: keyword
        pehash:
          field_details:
            dashed_name: file-pe-pehash
            description: 'A hash of the PE header and data from one or more PE sections.
              An pehash can be used to cluster files by transforming structural information
              about a file into a hash value.

              Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
            example: 73ff189b63cd6be375a7ff25179a38d347651975
            flat_name: file.pe.pehash
            ignore_above: 1024
            level: extended
            name: pehash
            node_name: pehash
            normalize: []
            original_fieldset: pe
            short: A hash of the PE header and data from one or more PE sections.
            type: keyword
        product:
          field_details:
            dashed_name: file-pe-product
            description: Internal product name of the file, provided at compile-time.
            example: "Microsoft\xAE Windows\xAE Operating System"
            flat_name: file.pe.product
            ignore_above: 1024
            level: extended
            name: product
            node_name: product
            normalize: []
            original_fieldset: pe
            short: Internal product name of the file, provided at compile-time.
            type: keyword
        sections:
          field_details:
            dashed_name: file-pe-sections
            description: 'An array containing an object for each section of the PE
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `pe.sections.*`.'
            flat_name: file.pe.sections
            intermediate: false
            level: extended
            name: sections
            node_name: sections
            normalize:
            - array
            original_fieldset: pe
            short: Section information of the PE file.
            type: nested
          fields:
            entropy:
              field_details:
                dashed_name: file-pe-sections-entropy
                description: Shannon entropy calculation from the section.
                flat_name: file.pe.sections.entropy
                format: number
                level: extended
                name: sections.entropy
                node_name: entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the section.
                type: long
            name:
              field_details:
                dashed_name: file-pe-sections-name
                description: PE Section List name.
                flat_name: file.pe.sections.name
                ignore_above: 1024
                level: extended
                name: sections.name
                node_name: name
                normalize: []
                original_fieldset: pe
                short: PE Section List name.
                type: keyword
            physical_size:
              field_details:
                dashed_name: file-pe-sections-physical-size
                description: PE Section List physical size.
                flat_name: file.pe.sections.physical_size
                format: bytes
                level: extended
                name: sections.physical_size
                node_name: physical_size
                normalize: []
                original_fieldset: pe
                short: PE Section List physical size.
                type: long
            var_entropy:
              field_details:
                dashed_name: file-pe-sections-var-entropy
                description: Variance for Shannon entropy calculation from the section.
                flat_name: file.pe.sections.var_entropy
                format: number
                level: extended
                name: sections.var_entropy
                node_name: var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the section.
                type: long
            virtual_size:
              field_details:
                dashed_name: file-pe-sections-virtual-size
                description: PE Section List virtual size. This is always the same
                  as `physical_size`.
                flat_name: file.pe.sections.virtual_size
                format: string
                level: extended
                name: sections.virtual_size
                node_name: virtual_size
                normalize: []
                original_fieldset: pe
                short: PE Section List virtual size. This is always the same as `physical_size`.
                type: long
    size:
      field_details:
        dashed_name: file-size
        description: 'File size in bytes.

          Only relevant when `file.type` is "file".'
        example: 16384
        flat_name: file.size
        level: extended
        name: size
        node_name: size
        normalize: []
        short: File size in bytes.
        type: long
    target_path:
      field_details:
        dashed_name: file-target-path
        description: Target path for symlinks.
        flat_name: file.target_path
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: file.target_path.text
          name: text
          type: match_only_text
        name: target_path
        node_name: target_path
        normalize: []
        short: Target path for symlinks.
        type: keyword
    type:
      field_details:
        dashed_name: file-type
        description: File type (file, dir, or symlink).
        example: file
        flat_name: file.type
        ignore_above: 1024
        level: extended
        name: type
        node_name: type
        normalize: []
        short: File type (file, dir, or symlink).
        type: keyword
    uid:
      field_details:
        dashed_name: file-uid
        description: The user ID (UID) or security identifier (SID) of the file owner.
        example: '1001'
        flat_name: file.uid
        ignore_above: 1024
        level: extended
        name: uid
        node_name: uid
        normalize: []
        short: The user ID (UID) or security identifier (SID) of the file owner.
        type: keyword
    x509:
      field_details:
        dashed_name: file-x509
        description: 'This implements the common core fields for x509 certificates.
          This information is likely logged with TLS sessions, digital signatures
          found in executable binaries, S/MIME information in email bodies, or analysis
          of files on disk.

          When the certificate relates to a file, use the fields at `file.x509`. When
          hashes of the DER-encoded certificate are available, the `hash` data set
          should be populated as well (e.g. `file.hash.sha256`).

          Events that contain certificate information about network connections, should
          use the x509 fields under the relevant TLS fields: `tls.server.x509` and/or
          `tls.client.x509`.'
        flat_name: file.x509
        intermediate: true
        name: x509
        node_name: x509
        original_fieldset: x509
        short: These fields contain x509 certificate metadata.
        type: group
      fields:
        alternative_names:
          field_details:
            dashed_name: file-x509-alternative-names
            description: List of subject alternative names (SAN). Name types vary
              by certificate authority and certificate type but commonly contain IP
              addresses, DNS names (and wildcards), and email addresses.
            example: '*.elastic.co'
            flat_name: file.x509.alternative_names
            ignore_above: 1024
            level: extended
            name: alternative_names
            node_name: alternative_names
            normalize:
            - array
            original_fieldset: x509
            short: List of subject alternative names (SAN).
            type: keyword
        issuer:
          field_details:
            dashed_name: file-x509-issuer
            flat_name: file.x509.issuer
            intermediate: true
            name: issuer
            node_name: issuer
            original_fieldset: x509
            type: object
          fields:
            common_name:
              field_details:
                dashed_name: file-x509-issuer-common-name
                description: List of common name (CN) of issuing certificate authority.
                example: Example SHA2 High Assurance Server CA
                flat_name: file.x509.issuer.common_name
                ignore_above: 1024
                level: extended
                name: issuer.common_name
                node_name: common_name
                normalize:
                - array
                original_fieldset: x509
                short: List of common name (CN) of issuing certificate authority.
                type: keyword
            country:
              field_details:
                dashed_name: file-x509-issuer-country
                description: List of country \(C) codes
                example: US
                flat_name: file.x509.issuer.country
                ignore_above: 1024
                level: extended
                name: issuer.country
                node_name: country
                normalize:
                - array
                original_fieldset: x509
                short: List of country \(C) codes
                type: keyword
            distinguished_name:
              field_details:
                dashed_name: file-x509-issuer-distinguished-name
                description: Distinguished name (DN) of issuing certificate authority.
                example: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2
                  High Assurance Server CA
                flat_name: file.x509.issuer.distinguished_name
                ignore_above: 1024
                level: extended
                name: issuer.distinguished_name
                node_name: distinguished_name
                normalize: []
                original_fieldset: x509
                short: Distinguished name (DN) of issuing certificate authority.
                type: keyword
            locality:
              field_details:
                dashed_name: file-x509-issuer-locality
                description: List of locality names (L)
                example: Mountain View
                flat_name: file.x509.issuer.locality
                ignore_above: 1024
                level: extended
                name: issuer.locality
                node_name: locality
                normalize:
                - array
                original_fieldset: x509
                short: List of locality names (L)
                type: keyword
            organization:
              field_details:
                dashed_name: file-x509-issuer-organization
                description: List of organizations (O) of issuing certificate authority.
                example: Example Inc
                flat_name: file.x509.issuer.organization
                ignore_above: 1024
                level: extended
                name: issuer.organization
                node_name: organization
                normalize:
                - array
                original_fieldset: x509
                short: List of organizations (O) of issuing certificate authority.
                type: keyword
            organizational_unit:
              field_details:
                dashed_name: file-x509-issuer-organizational-unit
                description: List of organizational units (OU) of issuing certificate
                  authority.
                example: www.example.com
                flat_name: file.x509.issuer.organizational_unit
                ignore_above: 1024
                level: extended
                name: issuer.organizational_unit
                node_name: organizational_unit
                normalize:
                - array
                original_fieldset: x509
                short: List of organizational units (OU) of issuing certificate authority.
                type: keyword
            state_or_province:
              field_details:
                dashed_name: file-x509-issuer-state-or-province
                description: List of state or province names (ST, S, or P)
                example: California
                flat_name: file.x509.issuer.state_or_province
                ignore_above: 1024
                level: extended
                name: issuer.state_or_province
                node_name: state_or_province
                normalize:
                - array
                original_fieldset: x509
                short: List of state or province names (ST, S, or P)
                type: keyword
        not_after:
          field_details:
            dashed_name: file-x509-not-after
            description: Time at which the certificate is no longer considered valid.
            example: '2020-07-16T03:15:39Z'
            flat_name: file.x509.not_after
            level: extended
            name: not_after
            node_name: not_after
            normalize: []
            original_fieldset: x509
            short: Time at which the certificate is no longer considered valid.
            type: date
        not_before:
          field_details:
            dashed_name: file-x509-not-before
            description: Time at which the certificate is first considered valid.
            example: '2019-08-16T01:40:25Z'
            flat_name: file.x509.not_before
            level: extended
            name: not_before
            node_name: not_before
            normalize: []
            original_fieldset: x509
            short: Time at which the certificate is first considered valid.
            type: date
        public_key_algorithm:
          field_details:
            dashed_name: file-x509-public-key-algorithm
            description: Algorithm used to generate the public key.
            example: RSA
            flat_name: file.x509.public_key_algorithm
            ignore_above: 1024
            level: extended
            name: public_key_algorithm
            node_name: public_key_algorithm
            normalize: []
            original_fieldset: x509
            short: Algorithm used to generate the public key.
            type: keyword
        public_key_curve:
          field_details:
            dashed_name: file-x509-public-key-curve
            description: The curve used by the elliptic curve public key algorithm.
              This is algorithm specific.
            example: nistp521
            flat_name: file.x509.public_key_curve
            ignore_above: 1024
            level: extended
            name: public_key_curve
            node_name: public_key_curve
            normalize: []
            original_fieldset: x509
            short: The curve used by the elliptic curve public key algorithm. This
              is algorithm specific.
            type: keyword
        public_key_exponent:
          field_details:
            dashed_name: file-x509-public-key-exponent
            description: Exponent used to derive the public key. This is algorithm
              specific.
            doc_values: false
            example: 65537
            flat_name: file.x509.public_key_exponent
            index: false
            level: extended
            name: public_key_exponent
            node_name: public_key_exponent
            normalize: []
            original_fieldset: x509
            short: Exponent used to derive the public key. This is algorithm specific.
            type: long
        public_key_size:
          field_details:
            dashed_name: file-x509-public-key-size
            description: The size of the public key space in bits.
            example: 2048
            flat_name: file.x509.public_key_size
            level: extended
            name: public_key_size
            node_name: public_key_size
            normalize: []
            original_fieldset: x509
            short: The size of the public key space in bits.
            type: long
        serial_number:
          field_details:
            dashed_name: file-x509-serial-number
            description: Unique serial number issued by the certificate authority.
              For consistency, if this value is alphanumeric, it should be formatted
              without colons and uppercase characters.
            example: 55FBB9C7DEBF09809D12CCAA
            flat_name: file.x509.serial_number
            ignore_above: 1024
            level: extended
            name: serial_number
            node_name: serial_number
            normalize: []
            original_fieldset: x509
            short: Unique serial number issued by the certificate authority.
            type: keyword
        signature_algorithm:
          field_details:
            dashed_name: file-x509-signature-algorithm
            description: Identifier for certificate signature algorithm. We recommend
              using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
            example: SHA256-RSA
            flat_name: file.x509.signature_algorithm
            ignore_above: 1024
            level: extended
            name: signature_algorithm
            node_name: signature_algorithm
            normalize: []
            original_fieldset: x509
            short: Identifier for certificate signature algorithm.
            type: keyword
        subject:
          field_details:
            dashed_name: file-x509-subject
            flat_name: file.x509.subject
            intermediate: true
            name: subject
            node_name: subject
            original_fieldset: x509
            type: object
          fields:
            common_name:
              field_details:
                dashed_name: file-x509-subject-common-name
                description: List of common names (CN) of subject.
                example: shared.global.example.net
                flat_name: file.x509.subject.common_name
                ignore_above: 1024
                level: extended
                name: subject.common_name
                node_name: common_name
                normalize:
                - array
                original_fieldset: x509
                short: List of common names (CN) of subject.
                type: keyword
            country:
              field_details:
                dashed_name: file-x509-subject-country
                description: List of country \(C) code
                example: US
                flat_name: file.x509.subject.country
                ignore_above: 1024
                level: extended
                name: subject.country
                node_name: country
                normalize:
                - array
                original_fieldset: x509
                short: List of country \(C) code
                type: keyword
            distinguished_name:
              field_details:
                dashed_name: file-x509-subject-distinguished-name
                description: Distinguished name (DN) of the certificate subject entity.
                example: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net
                flat_name: file.x509.subject.distinguished_name
                ignore_above: 1024
                level: extended
                name: subject.distinguished_name
                node_name: distinguished_name
                normalize: []
                original_fieldset: x509
                short: Distinguished name (DN) of the certificate subject entity.
                type: keyword
            locality:
              field_details:
                dashed_name: file-x509-subject-locality
                description: List of locality names (L)
                example: San Francisco
                flat_name: file.x509.subject.locality
                ignore_above: 1024
                level: extended
                name: subject.locality
                node_name: locality
                normalize:
                - array
                original_fieldset: x509
                short: List of locality names (L)
                type: keyword
            organization:
              field_details:
                dashed_name: file-x509-subject-organization
                description: List of organizations (O) of subject.
                example: Example, Inc.
                flat_name: file.x509.subject.organization
                ignore_above: 1024
                level: extended
                name: subject.organization
                node_name: organization
                normalize:
                - array
                original_fieldset: x509
                short: List of organizations (O) of subject.
                type: keyword
            organizational_unit:
              field_details:
                dashed_name: file-x509-subject-organizational-unit
                description: List of organizational units (OU) of subject.
                flat_name: file.x509.subject.organizational_unit
                ignore_above: 1024
                level: extended
                name: subject.organizational_unit
                node_name: organizational_unit
                normalize:
                - array
                original_fieldset: x509
                short: List of organizational units (OU) of subject.
                type: keyword
            state_or_province:
              field_details:
                dashed_name: file-x509-subject-state-or-province
                description: List of state or province names (ST, S, or P)
                example: California
                flat_name: file.x509.subject.state_or_province
                ignore_above: 1024
                level: extended
                name: subject.state_or_province
                node_name: state_or_province
                normalize:
                - array
                original_fieldset: x509
                short: List of state or province names (ST, S, or P)
                type: keyword
        version_number:
          field_details:
            dashed_name: file-x509-version-number
            description: Version of x509 format.
            example: 3
            flat_name: file.x509.version_number
            ignore_above: 1024
            level: extended
            name: version_number
            node_name: version_number
            normalize: []
            original_fieldset: x509
            short: Version of x509 format.
            type: keyword
  schema_details:
    group: 2
    nestings:
    - file.code_signature
    - file.elf
    - file.hash
    - file.macho
    - file.pe
    - file.x509
    prefix: file.
    reusable:
      expected:
      - as: file
        at: threat.indicator
        full: threat.indicator.file
      - as: file
        at: threat.enrichments.indicator
        full: threat.enrichments.indicator.file
      order: 2
      top_level: true
    reused_here:
    - full: file.hash
      schema_name: hash
      short: Hashes, usually file hashes.
    - full: file.pe
      schema_name: pe
      short: These fields contain Windows Portable Executable (PE) metadata.
    - full: file.x509
      schema_name: x509
      short: These fields contain x509 certificate metadata.
    - full: file.code_signature
      schema_name: code_signature
      short: These fields contain information about binary code signatures.
    - beta: This field reuse is beta and subject to change.
      full: file.elf
      schema_name: elf
      short: These fields contain Linux Executable Linkable Format (ELF) metadata.
    - beta: This field reuse is beta and subject to change.
      full: file.macho
      schema_name: macho
      short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
    root: false
    title: File
geo:
  field_details:
    dashed_name: geo
    description: 'Geo fields can carry data about a specific location related to an
      event.

      This geolocation information can be derived from techniques such as Geo IP,
      or be user-supplied.'
    flat_name: geo
    name: geo
    node_name: geo
    short: Fields describing a location.
    type: group
  fields:
    city_name:
      field_details:
        dashed_name: geo-city-name
        description: City name.
        example: Montreal
        flat_name: geo.city_name
        ignore_above: 1024
        level: core
        name: city_name
        node_name: city_name
        normalize: []
        short: City name.
        type: keyword
    continent_code:
      field_details:
        dashed_name: geo-continent-code
        description: Two-letter code representing continent's name.
        example: NA
        flat_name: geo.continent_code
        ignore_above: 1024
        level: core
        name: continent_code
        node_name: continent_code
        normalize: []
        short: Continent code.
        type: keyword
    continent_name:
      field_details:
        dashed_name: geo-continent-name
        description: Name of the continent.
        example: North America
        flat_name: geo.continent_name
        ignore_above: 1024
        level: core
        name: continent_name
        node_name: continent_name
        normalize: []
        short: Name of the continent.
        type: keyword
    country_iso_code:
      field_details:
        dashed_name: geo-country-iso-code
        description: Country ISO code.
        example: CA
        flat_name: geo.country_iso_code
        ignore_above: 1024
        level: core
        name: country_iso_code
        node_name: country_iso_code
        normalize: []
        short: Country ISO code.
        type: keyword
    country_name:
      field_details:
        dashed_name: geo-country-name
        description: Country name.
        example: Canada
        flat_name: geo.country_name
        ignore_above: 1024
        level: core
        name: country_name
        node_name: country_name
        normalize: []
        short: Country name.
        type: keyword
    location:
      field_details:
        dashed_name: geo-location
        description: Longitude and latitude.
        example: '{ "lon": -73.614830, "lat": 45.505918 }'
        flat_name: geo.location
        level: core
        name: location
        node_name: location
        normalize: []
        short: Longitude and latitude.
        type: geo_point
    name:
      field_details:
        dashed_name: geo-name
        description: 'User-defined description of a location, at the level of granularity
          they care about.

          Could be the name of their data centers, the floor number, if this describes
          a local physical entity, city names.

          Not typically used in automated geolocation.'
        example: boston-dc
        flat_name: geo.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: User-defined description of a location.
        type: keyword
    postal_code:
      field_details:
        dashed_name: geo-postal-code
        description: 'Postal code associated with the location.

          Values appropriate for this field may also be known as a postcode or ZIP
          code and will vary widely from country to country.'
        example: 94040
        flat_name: geo.postal_code
        ignore_above: 1024
        level: core
        name: postal_code
        node_name: postal_code
        normalize: []
        short: Postal code.
        type: keyword
    region_iso_code:
      field_details:
        dashed_name: geo-region-iso-code
        description: Region ISO code.
        example: CA-QC
        flat_name: geo.region_iso_code
        ignore_above: 1024
        level: core
        name: region_iso_code
        node_name: region_iso_code
        normalize: []
        short: Region ISO code.
        type: keyword
    region_name:
      field_details:
        dashed_name: geo-region-name
        description: Region name.
        example: Quebec
        flat_name: geo.region_name
        ignore_above: 1024
        level: core
        name: region_name
        node_name: region_name
        normalize: []
        short: Region name.
        type: keyword
    timezone:
      field_details:
        dashed_name: geo-timezone
        description: The time zone of the location, such as IANA time zone name.
        example: America/Argentina/Buenos_Aires
        flat_name: geo.timezone
        ignore_above: 1024
        level: core
        name: timezone
        node_name: timezone
        normalize: []
        short: Time zone.
        type: keyword
  schema_details:
    group: 2
    prefix: geo.
    reusable:
      expected:
      - as: geo
        at: client
        full: client.geo
      - as: geo
        at: destination
        full: destination.geo
      - as: geo
        at: observer
        full: observer.geo
      - as: geo
        at: host
        full: host.geo
      - as: geo
        at: server
        full: server.geo
      - as: geo
        at: source
        full: source.geo
      - as: geo
        at: threat.indicator
        full: threat.indicator.geo
      - as: geo
        at: threat.enrichments.indicator
        full: threat.enrichments.indicator.geo
      order: 2
      top_level: false
    root: false
    title: Geo
group:
  field_details:
    dashed_name: group
    description: The group fields are meant to represent groups that are relevant
      to the event.
    flat_name: group
    name: group
    node_name: group
    short: User's group relevant to the event.
    type: group
  fields:
    domain:
      field_details:
        dashed_name: group-domain
        description: 'Name of the directory the group is a member of.

          For example, an LDAP or Active Directory domain name.'
        flat_name: group.domain
        ignore_above: 1024
        level: extended
        name: domain
        node_name: domain
        normalize: []
        short: Name of the directory the group is a member of.
        type: keyword
    id:
      field_details:
        dashed_name: group-id
        description: Unique identifier for the group on the system/platform.
        flat_name: group.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: Unique identifier for the group on the system/platform.
        type: keyword
    name:
      field_details:
        dashed_name: group-name
        description: Name of the group.
        flat_name: group.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Name of the group.
        type: keyword
  schema_details:
    group: 2
    prefix: group.
    reusable:
      expected:
      - as: group
        at: user
        full: user.group
      - as: group
        at: process
        full: process.group
        short_override: The effective group (egid).
      - as: real_group
        at: process
        full: process.real_group
        short_override: The real group (rgid).
      - as: saved_group
        at: process
        full: process.saved_group
        short_override: The saved group (sgid).
      - as: supplemental_groups
        at: process
        full: process.supplemental_groups
        normalize: &id001
        - array
        short_override: An array of supplemental groups.
      - as: attested_groups
        at: process
        beta: Reusing the `group` fields in this location is currently considered
          beta.
        full: process.attested_groups
        normalize: &id002
        - array
        short_override: The externally attested groups based on an external source
          such as the Kube API.
      order: 1
      top_level: true
    root: false
    title: Group
hash:
  field_details:
    dashed_name: hash
    description: 'The hash fields represent different bitwise hash algorithms and
      their values.

      Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for
      other hashes by lowercasing the hash algorithm name and using underscore separators
      as appropriate (snake case, e.g. sha3_512).

      Note that this fieldset is used for common hashes that may be computed over
      a range of generic bytes. Entity-specific hashes such as ja3 or imphash are
      placed in the fieldsets to which they relate (tls and pe, respectively).'
    flat_name: hash
    name: hash
    node_name: hash
    short: Hashes, usually file hashes.
    type: group
  fields:
    md5:
      field_details:
        dashed_name: hash-md5
        description: MD5 hash.
        flat_name: hash.md5
        ignore_above: 1024
        level: extended
        name: md5
        node_name: md5
        normalize: []
        short: MD5 hash.
        type: keyword
    sha1:
      field_details:
        dashed_name: hash-sha1
        description: SHA1 hash.
        flat_name: hash.sha1
        ignore_above: 1024
        level: extended
        name: sha1
        node_name: sha1
        normalize: []
        short: SHA1 hash.
        type: keyword
    sha256:
      field_details:
        dashed_name: hash-sha256
        description: SHA256 hash.
        flat_name: hash.sha256
        ignore_above: 1024
        level: extended
        name: sha256
        node_name: sha256
        normalize: []
        short: SHA256 hash.
        type: keyword
    sha384:
      field_details:
        dashed_name: hash-sha384
        description: SHA384 hash.
        flat_name: hash.sha384
        ignore_above: 1024
        level: extended
        name: sha384
        node_name: sha384
        normalize: []
        short: SHA384 hash.
        type: keyword
    sha512:
      field_details:
        dashed_name: hash-sha512
        description: SHA512 hash.
        flat_name: hash.sha512
        ignore_above: 1024
        level: extended
        name: sha512
        node_name: sha512
        normalize: []
        short: SHA512 hash.
        type: keyword
    ssdeep:
      field_details:
        dashed_name: hash-ssdeep
        description: SSDEEP hash.
        flat_name: hash.ssdeep
        ignore_above: 1024
        level: extended
        name: ssdeep
        node_name: ssdeep
        normalize: []
        short: SSDEEP hash.
        type: keyword
    tlsh:
      field_details:
        dashed_name: hash-tlsh
        description: TLSH hash.
        flat_name: hash.tlsh
        ignore_above: 1024
        level: extended
        name: tlsh
        node_name: tlsh
        normalize: []
        short: TLSH hash.
        type: keyword
  schema_details:
    group: 2
    prefix: hash.
    reusable:
      expected:
      - as: hash
        at: file
        full: file.hash
      - as: hash
        at: process
        full: process.hash
      - as: hash
        at: dll
        full: dll.hash
      - as: hash
        at: email.attachments.file
        full: email.attachments.file.hash
      order: 1
      top_level: false
    root: false
    title: Hash
host:
  field_details:
    dashed_name: host
    description: 'A host is defined as a general computing instance.

      ECS host.* fields should be populated with details about the host on which the
      event happened, or from which the measurement was taken. Host types include
      hardware, virtual machines, Docker containers, and Kubernetes nodes.'
    flat_name: host
    name: host
    node_name: host
    short: Fields describing the relevant computing instance.
    type: group
  fields:
    architecture:
      field_details:
        dashed_name: host-architecture
        description: Operating system architecture.
        example: x86_64
        flat_name: host.architecture
        ignore_above: 1024
        level: core
        name: architecture
        node_name: architecture
        normalize: []
        short: Operating system architecture.
        type: keyword
    boot:
      field_details:
        dashed_name: host-boot
        flat_name: host.boot
        intermediate: true
        name: boot
        node_name: boot
        type: object
      fields:
        id:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: host-boot-id
            description: Linux boot uuid taken from /proc/sys/kernel/random/boot_id.
              Note the boot_id value from /proc may or may not be the same in containers
              as on the host. Some container runtimes will bind mount a new boot_id
              value onto the proc file in each container.
            example: 88a1f0ed-5ae5-41ee-af6b-41921c311872
            flat_name: host.boot.id
            ignore_above: 1024
            level: extended
            name: boot.id
            node_name: id
            normalize: []
            short: Linux boot uuid taken from /proc/sys/kernel/random/boot_id
            type: keyword
    cpu:
      field_details:
        dashed_name: host-cpu
        flat_name: host.cpu
        intermediate: true
        name: cpu
        node_name: cpu
        type: object
      fields:
        usage:
          field_details:
            dashed_name: host-cpu-usage
            description: 'Percent CPU used which is normalized by the number of CPU
              cores and it ranges from 0 to 1.

              Scaling factor: 1000.

              For example: For a two core host, this value should be the average of
              the two cores, between 0 and 1.'
            flat_name: host.cpu.usage
            level: extended
            name: cpu.usage
            node_name: usage
            normalize: []
            scaling_factor: 1000
            short: Percent CPU used, between 0 and 1.
            type: scaled_float
    disk:
      field_details:
        dashed_name: host-disk
        flat_name: host.disk
        intermediate: true
        name: disk
        node_name: disk
        type: object
      fields:
        read:
          field_details:
            dashed_name: host-disk-read
            flat_name: host.disk.read
            intermediate: true
            name: disk.read
            node_name: read
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: host-disk-read-bytes
                description: The total number of bytes (gauge) read successfully (aggregated
                  from all disks) since the last metric collection.
                flat_name: host.disk.read.bytes
                level: extended
                name: disk.read.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes read by all disks.
                type: long
        write:
          field_details:
            dashed_name: host-disk-write
            flat_name: host.disk.write
            intermediate: true
            name: disk.write
            node_name: write
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: host-disk-write-bytes
                description: The total number of bytes (gauge) written successfully
                  (aggregated from all disks) since the last metric collection.
                flat_name: host.disk.write.bytes
                level: extended
                name: disk.write.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes written on all disks.
                type: long
    domain:
      field_details:
        dashed_name: host-domain
        description: 'Name of the domain of which the host is a member.

          For example, on Windows this could be the host''s Active Directory domain
          or NetBIOS domain name. For Linux this could be the domain of the host''s
          LDAP provider.'
        example: CONTOSO
        flat_name: host.domain
        ignore_above: 1024
        level: extended
        name: domain
        node_name: domain
        normalize: []
        short: Name of the directory the group is a member of.
        type: keyword
    geo:
      field_details:
        dashed_name: host-geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        flat_name: host.geo
        intermediate: true
        name: geo
        node_name: geo
        original_fieldset: geo
        short: Fields describing a location.
        type: group
      fields:
        city_name:
          field_details:
            dashed_name: host-geo-city-name
            description: City name.
            example: Montreal
            flat_name: host.geo.city_name
            ignore_above: 1024
            level: core
            name: city_name
            node_name: city_name
            normalize: []
            original_fieldset: geo
            short: City name.
            type: keyword
        continent_code:
          field_details:
            dashed_name: host-geo-continent-code
            description: Two-letter code representing continent's name.
            example: NA
            flat_name: host.geo.continent_code
            ignore_above: 1024
            level: core
            name: continent_code
            node_name: continent_code
            normalize: []
            original_fieldset: geo
            short: Continent code.
            type: keyword
        continent_name:
          field_details:
            dashed_name: host-geo-continent-name
            description: Name of the continent.
            example: North America
            flat_name: host.geo.continent_name
            ignore_above: 1024
            level: core
            name: continent_name
            node_name: continent_name
            normalize: []
            original_fieldset: geo
            short: Name of the continent.
            type: keyword
        country_iso_code:
          field_details:
            dashed_name: host-geo-country-iso-code
            description: Country ISO code.
            example: CA
            flat_name: host.geo.country_iso_code
            ignore_above: 1024
            level: core
            name: country_iso_code
            node_name: country_iso_code
            normalize: []
            original_fieldset: geo
            short: Country ISO code.
            type: keyword
        country_name:
          field_details:
            dashed_name: host-geo-country-name
            description: Country name.
            example: Canada
            flat_name: host.geo.country_name
            ignore_above: 1024
            level: core
            name: country_name
            node_name: country_name
            normalize: []
            original_fieldset: geo
            short: Country name.
            type: keyword
        location:
          field_details:
            dashed_name: host-geo-location
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'
            flat_name: host.geo.location
            level: core
            name: location
            node_name: location
            normalize: []
            original_fieldset: geo
            short: Longitude and latitude.
            type: geo_point
        name:
          field_details:
            dashed_name: host-geo-name
            description: 'User-defined description of a location, at the level of
              granularity they care about.

              Could be the name of their data centers, the floor number, if this describes
              a local physical entity, city names.

              Not typically used in automated geolocation.'
            example: boston-dc
            flat_name: host.geo.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: geo
            short: User-defined description of a location.
            type: keyword
        postal_code:
          field_details:
            dashed_name: host-geo-postal-code
            description: 'Postal code associated with the location.

              Values appropriate for this field may also be known as a postcode or
              ZIP code and will vary widely from country to country.'
            example: 94040
            flat_name: host.geo.postal_code
            ignore_above: 1024
            level: core
            name: postal_code
            node_name: postal_code
            normalize: []
            original_fieldset: geo
            short: Postal code.
            type: keyword
        region_iso_code:
          field_details:
            dashed_name: host-geo-region-iso-code
            description: Region ISO code.
            example: CA-QC
            flat_name: host.geo.region_iso_code
            ignore_above: 1024
            level: core
            name: region_iso_code
            node_name: region_iso_code
            normalize: []
            original_fieldset: geo
            short: Region ISO code.
            type: keyword
        region_name:
          field_details:
            dashed_name: host-geo-region-name
            description: Region name.
            example: Quebec
            flat_name: host.geo.region_name
            ignore_above: 1024
            level: core
            name: region_name
            node_name: region_name
            normalize: []
            original_fieldset: geo
            short: Region name.
            type: keyword
        timezone:
          field_details:
            dashed_name: host-geo-timezone
            description: The time zone of the location, such as IANA time zone name.
            example: America/Argentina/Buenos_Aires
            flat_name: host.geo.timezone
            ignore_above: 1024
            level: core
            name: timezone
            node_name: timezone
            normalize: []
            original_fieldset: geo
            short: Time zone.
            type: keyword
    hostname:
      field_details:
        dashed_name: host-hostname
        description: 'Hostname of the host.

          It normally contains what the `hostname` command returns on the host machine.'
        flat_name: host.hostname
        ignore_above: 1024
        level: core
        name: hostname
        node_name: hostname
        normalize: []
        short: Hostname of the host.
        type: keyword
    id:
      field_details:
        dashed_name: host-id
        description: 'Unique host id.

          As hostname is not always unique, use values that are meaningful in your
          environment.

          Example: The current usage of `beat.name`.'
        flat_name: host.id
        ignore_above: 1024
        level: core
        name: id
        node_name: id
        normalize: []
        short: Unique host id.
        type: keyword
    ip:
      field_details:
        dashed_name: host-ip
        description: Host ip addresses.
        flat_name: host.ip
        level: core
        name: ip
        node_name: ip
        normalize:
        - array
        short: Host ip addresses.
        type: ip
    mac:
      field_details:
        dashed_name: host-mac
        description: 'Host MAC addresses.

          The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit
          byte) is represented by two [uppercase] hexadecimal digits giving the value
          of the octet as an unsigned integer. Successive octets are separated by
          a hyphen.'
        example: '["00-00-5E-00-53-23", "00-00-5E-00-53-24"]'
        flat_name: host.mac
        ignore_above: 1024
        level: core
        name: mac
        node_name: mac
        normalize:
        - array
        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
        short: Host MAC addresses.
        type: keyword
    name:
      field_details:
        dashed_name: host-name
        description: 'Name of the host.

          It can contain what hostname returns on Unix systems, the fully qualified
          domain name (FQDN), or a name specified by the user. The recommended value
          is the lowercase FQDN of the host.'
        flat_name: host.name
        ignore_above: 1024
        level: core
        name: name
        node_name: name
        normalize: []
        short: Name of the host.
        type: keyword
    network:
      field_details:
        dashed_name: host-network
        flat_name: host.network
        intermediate: true
        name: network
        node_name: network
        type: object
      fields:
        egress:
          field_details:
            dashed_name: host-network-egress
            flat_name: host.network.egress
            intermediate: true
            name: network.egress
            node_name: egress
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: host-network-egress-bytes
                description: The number of bytes (gauge) sent out on all network interfaces
                  by the host since the last metric collection.
                flat_name: host.network.egress.bytes
                level: extended
                name: network.egress.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes sent on all network interfaces.
                type: long
            packets:
              field_details:
                dashed_name: host-network-egress-packets
                description: The number of packets (gauge) sent out on all network
                  interfaces by the host since the last metric collection.
                flat_name: host.network.egress.packets
                level: extended
                name: network.egress.packets
                node_name: packets
                normalize: []
                short: The number of packets sent on all network interfaces.
                type: long
        ingress:
          field_details:
            dashed_name: host-network-ingress
            flat_name: host.network.ingress
            intermediate: true
            name: network.ingress
            node_name: ingress
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: host-network-ingress-bytes
                description: The number of bytes received (gauge) on all network interfaces
                  by the host since the last metric collection.
                flat_name: host.network.ingress.bytes
                level: extended
                name: network.ingress.bytes
                node_name: bytes
                normalize: []
                short: The number of bytes received on all network interfaces.
                type: long
            packets:
              field_details:
                dashed_name: host-network-ingress-packets
                description: The number of packets (gauge) received on all network
                  interfaces by the host since the last metric collection.
                flat_name: host.network.ingress.packets
                level: extended
                name: network.ingress.packets
                node_name: packets
                normalize: []
                short: The number of packets received on all network interfaces.
                type: long
    os:
      field_details:
        dashed_name: host-os
        description: The OS fields contain information about the operating system.
        flat_name: host.os
        intermediate: true
        name: os
        node_name: os
        original_fieldset: os
        short: OS fields contain information about the operating system.
        type: group
      fields:
        family:
          field_details:
            dashed_name: host-os-family
            description: OS family (such as redhat, debian, freebsd, windows).
            example: debian
            flat_name: host.os.family
            ignore_above: 1024
            level: extended
            name: family
            node_name: family
            normalize: []
            original_fieldset: os
            short: OS family (such as redhat, debian, freebsd, windows).
            type: keyword
        full:
          field_details:
            dashed_name: host-os-full
            description: Operating system name, including the version or code name.
            example: Mac OS Mojave
            flat_name: host.os.full
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: host.os.full.text
              name: text
              type: match_only_text
            name: full
            node_name: full
            normalize: []
            original_fieldset: os
            short: Operating system name, including the version or code name.
            type: keyword
        kernel:
          field_details:
            dashed_name: host-os-kernel
            description: Operating system kernel version as a raw string.
            example: 4.4.0-112-generic
            flat_name: host.os.kernel
            ignore_above: 1024
            level: extended
            name: kernel
            node_name: kernel
            normalize: []
            original_fieldset: os
            short: Operating system kernel version as a raw string.
            type: keyword
        name:
          field_details:
            dashed_name: host-os-name
            description: Operating system name, without the version.
            example: Mac OS X
            flat_name: host.os.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: host.os.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: os
            short: Operating system name, without the version.
            type: keyword
        platform:
          field_details:
            dashed_name: host-os-platform
            description: Operating system platform (such centos, ubuntu, windows).
            example: darwin
            flat_name: host.os.platform
            ignore_above: 1024
            level: extended
            name: platform
            node_name: platform
            normalize: []
            original_fieldset: os
            short: Operating system platform (such centos, ubuntu, windows).
            type: keyword
        type:
          field_details:
            dashed_name: host-os-type
            description: 'Use the `os.type` field to categorize the operating system
              into one of the broad commercial families.

              If the OS you''re dealing with is not listed as an expected value, the
              field should not be populated. Please let us know by opening an issue
              with ECS, to propose its addition.'
            example: macos
            expected_values:
            - linux
            - macos
            - unix
            - windows
            - ios
            - android
            flat_name: host.os.type
            ignore_above: 1024
            level: extended
            name: type
            node_name: type
            normalize: []
            original_fieldset: os
            short: 'Which commercial OS family (one of: linux, macos, unix, windows,
              ios or android).'
            type: keyword
        version:
          field_details:
            dashed_name: host-os-version
            description: Operating system version as a raw string.
            example: 10.14.1
            flat_name: host.os.version
            ignore_above: 1024
            level: extended
            name: version
            node_name: version
            normalize: []
            original_fieldset: os
            short: Operating system version as a raw string.
            type: keyword
    pid_ns_ino:
      field_details:
        beta: This field is beta and subject to change.
        dashed_name: host-pid-ns-ino
        description: This is the inode number of the namespace in the namespace file
          system (nsfs). Unsigned int inum in include/linux/ns_common.h.
        example: 256383
        flat_name: host.pid_ns_ino
        ignore_above: 1024
        level: extended
        name: pid_ns_ino
        node_name: pid_ns_ino
        normalize: []
        short: Pid namespace inode
        type: keyword
    risk:
      field_details:
        beta: These fields are in beta and are subject to change.
        dashed_name: host-risk
        description: Fields for describing risk score and risk level of entities such
          as hosts and users.  These fields are not allowed to be nested under `event.*`.
          Please continue to use  `event.risk_score` and `event.risk_score_norm` for
          event risk.
        flat_name: host.risk
        intermediate: true
        name: risk
        node_name: risk
        original_fieldset: risk
        short: Fields for describing risk score and level.
        type: group
      fields:
        calculated_level:
          field_details:
            dashed_name: host-risk-calculated-level
            description: A risk classification level calculated by an internal system
              as part of entity analytics and entity risk scoring.
            example: High
            flat_name: host.risk.calculated_level
            ignore_above: 1024
            level: extended
            name: calculated_level
            node_name: calculated_level
            normalize: []
            original_fieldset: risk
            short: A risk classification level calculated by an internal system as
              part of entity analytics and entity risk scoring.
            type: keyword
        calculated_score:
          field_details:
            dashed_name: host-risk-calculated-score
            description: A risk classification score calculated by an internal system
              as part of entity analytics and entity risk scoring.
            example: 880.73
            flat_name: host.risk.calculated_score
            level: extended
            name: calculated_score
            node_name: calculated_score
            normalize: []
            original_fieldset: risk
            short: A risk classification score calculated by an internal system as
              part of entity analytics and entity risk scoring.
            type: float
        calculated_score_norm:
          field_details:
            dashed_name: host-risk-calculated-score-norm
            description: A risk classification score calculated by an internal system
              as part of entity analytics and entity risk scoring, and normalized
              to a range of 0 to 100.
            example: 88.73
            flat_name: host.risk.calculated_score_norm
            level: extended
            name: calculated_score_norm
            node_name: calculated_score_norm
            normalize: []
            original_fieldset: risk
            short: A normalized risk score calculated by an internal system.
            type: float
        static_level:
          field_details:
            dashed_name: host-risk-static-level
            description: A risk classification level obtained from outside the system,
              such as from some external Threat Intelligence Platform.
            example: High
            flat_name: host.risk.static_level
            ignore_above: 1024
            level: extended
            name: static_level
            node_name: static_level
            normalize: []
            original_fieldset: risk
            short: A risk classification level obtained from outside the system, such
              as from some external Threat Intelligence Platform.
            type: keyword
        static_score:
          field_details:
            dashed_name: host-risk-static-score
            description: A risk classification score obtained from outside the system,
              such as from some external Threat Intelligence Platform.
            example: 830.0
            flat_name: host.risk.static_score
            level: extended
            name: static_score
            node_name: static_score
            normalize: []
            original_fieldset: risk
            short: A risk classification score obtained from outside the system, such
              as from some external Threat Intelligence Platform.
            type: float
        static_score_norm:
          field_details:
            dashed_name: host-risk-static-score-norm
            description: A risk classification score obtained from outside the system,
              such as from some external Threat Intelligence Platform, and normalized
              to a range of 0 to 100.
            example: 83.0
            flat_name: host.risk.static_score_norm
            level: extended
            name: static_score_norm
            node_name: static_score_norm
            normalize: []
            original_fieldset: risk
            short: A normalized risk score calculated by an external system.
            type: float
    type:
      field_details:
        dashed_name: host-type
        description: 'Type of host.

          For Cloud providers this can be the machine type like `t2.medium`. If vm,
          this could be the container, for example, or other information meaningful
          in your environment.'
        flat_name: host.type
        ignore_above: 1024
        level: core
        name: type
        node_name: type
        normalize: []
        short: Type of host.
        type: keyword
    uptime:
      field_details:
        dashed_name: host-uptime
        description: Seconds the host has been up.
        example: 1325
        flat_name: host.uptime
        level: extended
        name: uptime
        node_name: uptime
        normalize: []
        short: Seconds the host has been up.
        type: long
  schema_details:
    group: 2
    nestings:
    - host.geo
    - host.os
    - host.risk
    prefix: host.
    reused_here:
    - full: host.geo
      schema_name: geo
      short: Fields describing a location.
    - full: host.os
      schema_name: os
      short: OS fields contain information about the operating system.
    - full: host.risk
      schema_name: risk
      short: Fields for describing risk score and level.
    root: false
    title: Host
http:
  field_details:
    dashed_name: http
    description: Fields related to HTTP activity. Use the `url` field set to store
      the url of the request.
    flat_name: http
    name: http
    node_name: http
    short: Fields describing an HTTP request.
    type: group
  fields:
    request:
      field_details:
        dashed_name: http-request
        flat_name: http.request
        intermediate: true
        name: request
        node_name: request
        type: object
      fields:
        body:
          field_details:
            dashed_name: http-request-body
            flat_name: http.request.body
            intermediate: true
            name: request.body
            node_name: body
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: http-request-body-bytes
                description: Size in bytes of the request body.
                example: 887
                flat_name: http.request.body.bytes
                format: bytes
                level: extended
                name: request.body.bytes
                node_name: bytes
                normalize: []
                short: Size in bytes of the request body.
                type: long
            content:
              field_details:
                dashed_name: http-request-body-content
                description: The full HTTP request body.
                example: Hello world
                flat_name: http.request.body.content
                level: extended
                multi_fields:
                - flat_name: http.request.body.content.text
                  name: text
                  type: match_only_text
                name: request.body.content
                node_name: content
                normalize: []
                short: The full HTTP request body.
                type: wildcard
        bytes:
          field_details:
            dashed_name: http-request-bytes
            description: Total size in bytes of the request (body and headers).
            example: 1437
            flat_name: http.request.bytes
            format: bytes
            level: extended
            name: request.bytes
            node_name: bytes
            normalize: []
            short: Total size in bytes of the request (body and headers).
            type: long
        id:
          field_details:
            dashed_name: http-request-id
            description: 'A unique identifier for each HTTP request to correlate logs
              between clients and servers in transactions.

              The id may be contained in a non-standard HTTP header, such as `X-Request-ID`
              or `X-Correlation-ID`.'
            example: 123e4567-e89b-12d3-a456-426614174000
            flat_name: http.request.id
            ignore_above: 1024
            level: extended
            name: request.id
            node_name: id
            normalize: []
            short: HTTP request ID.
            type: keyword
        method:
          field_details:
            dashed_name: http-request-method
            description: 'HTTP request method.

              The value should retain its casing from the original event. For example,
              `GET`, `get`, and `GeT` are all considered valid values for this field.'
            example: POST
            flat_name: http.request.method
            ignore_above: 1024
            level: extended
            name: request.method
            node_name: method
            normalize: []
            short: HTTP request method.
            type: keyword
        mime_type:
          field_details:
            dashed_name: http-request-mime-type
            description: 'Mime type of the body of the request.

              This value must only be populated based on the content of the request
              body, not on the `Content-Type` header. Comparing the mime type of a
              request with the request''s Content-Type header can be helpful in detecting
              threats or misconfigured clients.'
            example: image/gif
            flat_name: http.request.mime_type
            ignore_above: 1024
            level: extended
            name: request.mime_type
            node_name: mime_type
            normalize: []
            short: Mime type of the body of the request.
            type: keyword
        referrer:
          field_details:
            dashed_name: http-request-referrer
            description: Referrer for this HTTP request.
            example: https://blog.example.com/
            flat_name: http.request.referrer
            ignore_above: 1024
            level: extended
            name: request.referrer
            node_name: referrer
            normalize: []
            short: Referrer for this HTTP request.
            type: keyword
    response:
      field_details:
        dashed_name: http-response
        flat_name: http.response
        intermediate: true
        name: response
        node_name: response
        type: object
      fields:
        body:
          field_details:
            dashed_name: http-response-body
            flat_name: http.response.body
            intermediate: true
            name: response.body
            node_name: body
            type: object
          fields:
            bytes:
              field_details:
                dashed_name: http-response-body-bytes
                description: Size in bytes of the response body.
                example: 887
                flat_name: http.response.body.bytes
                format: bytes
                level: extended
                name: response.body.bytes
                node_name: bytes
                normalize: []
                short: Size in bytes of the response body.
                type: long
            content:
              field_details:
                dashed_name: http-response-body-content
                description: The full HTTP response body.
                example: Hello world
                flat_name: http.response.body.content
                level: extended
                multi_fields:
                - flat_name: http.response.body.content.text
                  name: text
                  type: match_only_text
                name: response.body.content
                node_name: content
                normalize: []
                short: The full HTTP response body.
                type: wildcard
        bytes:
          field_details:
            dashed_name: http-response-bytes
            description: Total size in bytes of the response (body and headers).
            example: 1437
            flat_name: http.response.bytes
            format: bytes
            level: extended
            name: response.bytes
            node_name: bytes
            normalize: []
            short: Total size in bytes of the response (body and headers).
            type: long
        mime_type:
          field_details:
            dashed_name: http-response-mime-type
            description: 'Mime type of the body of the response.

              This value must only be populated based on the content of the response
              body, not on the `Content-Type` header. Comparing the mime type of a
              response with the response''s Content-Type header can be helpful in
              detecting misconfigured servers.'
            example: image/gif
            flat_name: http.response.mime_type
            ignore_above: 1024
            level: extended
            name: response.mime_type
            node_name: mime_type
            normalize: []
            short: Mime type of the body of the response.
            type: keyword
        status_code:
          field_details:
            dashed_name: http-response-status-code
            description: HTTP response status code.
            example: 404
            flat_name: http.response.status_code
            format: string
            level: extended
            name: response.status_code
            node_name: status_code
            normalize: []
            short: HTTP response status code.
            type: long
    version:
      field_details:
        dashed_name: http-version
        description: HTTP version.
        example: 1.1
        flat_name: http.version
        ignore_above: 1024
        level: extended
        name: version
        node_name: version
        normalize: []
        short: HTTP version.
        type: keyword
  schema_details:
    group: 2
    prefix: http.
    root: false
    title: HTTP
interface:
  field_details:
    dashed_name: interface
    description: The interface fields are used to record ingress and egress interface
      information when reported by an observer (e.g. firewall, router, load balancer)
      in the context of the observer handling a network connection.  In the case of
      a single observer interface (e.g. network sensor on a span port) only the observer.ingress
      information should be populated.
    flat_name: interface
    name: interface
    node_name: interface
    short: Fields to describe observer interface information.
    type: group
  fields:
    alias:
      field_details:
        dashed_name: interface-alias
        description: Interface alias as reported by the system, typically used in
          firewall implementations for e.g. inside, outside, or dmz logical interface
          naming.
        example: outside
        flat_name: interface.alias
        ignore_above: 1024
        level: extended
        name: alias
        node_name: alias
        normalize: []
        short: Interface alias
        type: keyword
    id:
      field_details:
        dashed_name: interface-id
        description: Interface ID as reported by an observer (typically SNMP interface
          ID).
        example: 10
        flat_name: interface.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: Interface ID
        type: keyword
    name:
      field_details:
        dashed_name: interface-name
        description: Interface name as reported by the system.
        example: eth0
        flat_name: interface.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Interface name
        type: keyword
  schema_details:
    group: 2
    prefix: interface.
    reusable:
      expected:
      - as: interface
        at: observer.ingress
        full: observer.ingress.interface
      - as: interface
        at: observer.egress
        full: observer.egress.interface
      order: 2
      top_level: false
    root: false
    title: Interface
log:
  field_details:
    dashed_name: log
    description: 'Details about the event''s logging mechanism or logging transport.

      The log.* fields are typically populated with details about the logging mechanism
      used to create and/or transport the event. For example, syslog details belong
      under `log.syslog.*`.

      The details specific to your event source are typically not logged under `log.*`,
      but rather in `event.*` or in other ECS fields.'
    flat_name: log
    name: log
    node_name: log
    short: Details about the event's logging mechanism.
    type: group
  fields:
    file:
      field_details:
        dashed_name: log-file
        flat_name: log.file
        intermediate: true
        name: file
        node_name: file
        type: object
      fields:
        path:
          field_details:
            dashed_name: log-file-path
            description: 'Full path to the log file this event came from, including
              the file name. It should include the drive letter, when appropriate.

              If the event wasn''t read from a log file, do not populate this field.'
            example: /var/log/fun-times.log
            flat_name: log.file.path
            ignore_above: 1024
            level: extended
            name: file.path
            node_name: path
            normalize: []
            short: Full path to the log file this event came from.
            type: keyword
    level:
      field_details:
        dashed_name: log-level
        description: 'Original log level of the log event.

          If the source of the event provides a log level or textual severity, this
          is the one that goes in `log.level`. If your source doesn''t specify one,
          you may put your event transport''s severity here (e.g. Syslog severity).

          Some examples are `warn`, `err`, `i`, `informational`.'
        example: error
        flat_name: log.level
        ignore_above: 1024
        level: core
        name: level
        node_name: level
        normalize: []
        short: Log level of the log event.
        type: keyword
    logger:
      field_details:
        dashed_name: log-logger
        description: The name of the logger inside an application. This is usually
          the name of the class which initialized the logger, or can be a custom name.
        example: org.elasticsearch.bootstrap.Bootstrap
        flat_name: log.logger
        ignore_above: 1024
        level: core
        name: logger
        node_name: logger
        normalize: []
        short: Name of the logger.
        type: keyword
    origin:
      field_details:
        dashed_name: log-origin
        flat_name: log.origin
        intermediate: true
        name: origin
        node_name: origin
        type: object
      fields:
        file:
          field_details:
            dashed_name: log-origin-file
            flat_name: log.origin.file
            intermediate: true
            name: origin.file
            node_name: file
            type: object
          fields:
            line:
              field_details:
                dashed_name: log-origin-file-line
                description: The line number of the file containing the source code
                  which originated the log event.
                example: 42
                flat_name: log.origin.file.line
                level: extended
                name: origin.file.line
                node_name: line
                normalize: []
                short: The line number of the file which originated the log event.
                type: long
            name:
              field_details:
                dashed_name: log-origin-file-name
                description: 'The name of the file containing the source code which
                  originated the log event.

                  Note that this field is not meant to capture the log file. The correct
                  field to capture the log file is `log.file.path`.'
                example: Bootstrap.java
                flat_name: log.origin.file.name
                ignore_above: 1024
                level: extended
                name: origin.file.name
                node_name: name
                normalize: []
                short: The code file which originated the log event.
                type: keyword
        function:
          field_details:
            dashed_name: log-origin-function
            description: The name of the function or method which originated the log
              event.
            example: init
            flat_name: log.origin.function
            ignore_above: 1024
            level: extended
            name: origin.function
            node_name: function
            normalize: []
            short: The function which originated the log event.
            type: keyword
    syslog:
      field_details:
        dashed_name: log-syslog
        description: The Syslog metadata of the event, if the event was transmitted
          via Syslog. Please see RFCs 5424 or 3164.
        flat_name: log.syslog
        intermediate: false
        level: extended
        name: syslog
        node_name: syslog
        normalize: []
        short: Syslog metadata
        type: object
      fields:
        appname:
          field_details:
            dashed_name: log-syslog-appname
            description: The device or application that originated the Syslog message,
              if available.
            example: sshd
            flat_name: log.syslog.appname
            ignore_above: 1024
            level: extended
            name: syslog.appname
            node_name: appname
            normalize: []
            short: The device or application that originated the Syslog message.
            type: keyword
        facility:
          field_details:
            dashed_name: log-syslog-facility
            flat_name: log.syslog.facility
            intermediate: true
            name: syslog.facility
            node_name: facility
            type: object
          fields:
            code:
              field_details:
                dashed_name: log-syslog-facility-code
                description: 'The Syslog numeric facility of the log event, if available.

                  According to RFCs 5424 and 3164, this value should be an integer
                  between 0 and 23.'
                example: 23
                flat_name: log.syslog.facility.code
                format: string
                level: extended
                name: syslog.facility.code
                node_name: code
                normalize: []
                short: Syslog numeric facility of the event.
                type: long
            name:
              field_details:
                dashed_name: log-syslog-facility-name
                description: The Syslog text-based facility of the log event, if available.
                example: local7
                flat_name: log.syslog.facility.name
                ignore_above: 1024
                level: extended
                name: syslog.facility.name
                node_name: name
                normalize: []
                short: Syslog text-based facility of the event.
                type: keyword
        hostname:
          field_details:
            dashed_name: log-syslog-hostname
            description: The hostname, FQDN, or IP of the machine that originally
              sent the Syslog message. This is sourced from the hostname field of
              the syslog header. Depending on the environment, this value may be different
              from the host that handled the event, especially if the host handling
              the events is acting as a collector.
            example: example-host
            flat_name: log.syslog.hostname
            ignore_above: 1024
            level: extended
            name: syslog.hostname
            node_name: hostname
            normalize: []
            short: The host that originated the Syslog message.
            type: keyword
        msgid:
          field_details:
            dashed_name: log-syslog-msgid
            description: An identifier for the type of Syslog message, if available.
              Only applicable for RFC 5424 messages.
            example: ID47
            flat_name: log.syslog.msgid
            ignore_above: 1024
            level: extended
            name: syslog.msgid
            node_name: msgid
            normalize: []
            short: An identifier for the type of Syslog message.
            type: keyword
        priority:
          field_details:
            dashed_name: log-syslog-priority
            description: 'Syslog numeric priority of the event, if available.

              According to RFCs 5424 and 3164, the priority is 8 * facility + severity.
              This number is therefore expected to contain a value between 0 and 191.'
            example: 135
            flat_name: log.syslog.priority
            format: string
            level: extended
            name: syslog.priority
            node_name: priority
            normalize: []
            short: Syslog priority of the event.
            type: long
        procid:
          field_details:
            dashed_name: log-syslog-procid
            description: The process name or ID that originated the Syslog message,
              if available.
            example: 12345
            flat_name: log.syslog.procid
            ignore_above: 1024
            level: extended
            name: syslog.procid
            node_name: procid
            normalize: []
            short: The process name or ID that originated the Syslog message.
            type: keyword
        severity:
          field_details:
            dashed_name: log-syslog-severity
            flat_name: log.syslog.severity
            intermediate: true
            name: syslog.severity
            node_name: severity
            type: object
          fields:
            code:
              field_details:
                dashed_name: log-syslog-severity-code
                description: 'The Syslog numeric severity of the log event, if available.

                  If the event source publishing via Syslog provides a different numeric
                  severity value (e.g. firewall, IDS), your source''s numeric severity
                  should go to `event.severity`. If the event source does not specify
                  a distinct severity, you can optionally copy the Syslog severity
                  to `event.severity`.'
                example: 3
                flat_name: log.syslog.severity.code
                level: extended
                name: syslog.severity.code
                node_name: code
                normalize: []
                short: Syslog numeric severity of the event.
                type: long
            name:
              field_details:
                dashed_name: log-syslog-severity-name
                description: 'The Syslog numeric severity of the log event, if available.

                  If the event source publishing via Syslog provides a different severity
                  value (e.g. firewall, IDS), your source''s text severity should
                  go to `log.level`. If the event source does not specify a distinct
                  severity, you can optionally copy the Syslog severity to `log.level`.'
                example: Error
                flat_name: log.syslog.severity.name
                ignore_above: 1024
                level: extended
                name: syslog.severity.name
                node_name: name
                normalize: []
                short: Syslog text-based severity of the event.
                type: keyword
        structured_data:
          field_details:
            dashed_name: log-syslog-structured-data
            description: Structured data expressed in RFC 5424 messages, if available.
              These are key-value pairs formed from the structured data portion of
              the syslog message, as defined in RFC 5424 Section 6.3.
            flat_name: log.syslog.structured_data
            level: extended
            name: syslog.structured_data
            node_name: structured_data
            normalize: []
            short: Structured data expressed in RFC 5424 messages.
            type: flattened
        version:
          field_details:
            dashed_name: log-syslog-version
            description: The version of the Syslog protocol specification. Only applicable
              for RFC 5424 messages.
            example: 1
            flat_name: log.syslog.version
            ignore_above: 1024
            level: extended
            name: syslog.version
            node_name: version
            normalize: []
            short: Syslog protocol version.
            type: keyword
  schema_details:
    group: 2
    prefix: log.
    root: false
    title: Log
macho:
  field_details:
    beta: These fields are in beta and are subject to change.
    dashed_name: macho
    description: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
    flat_name: macho
    name: macho
    node_name: macho
    short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
    type: group
  fields:
    go_import_hash:
      field_details:
        dashed_name: macho-go-import-hash
        description: 'A hash of the Go language imports in a Mach-O file excluding
          standard library imports. An import hash can be used to fingerprint binaries
          even after recompilation or other code-level transformations have occurred,
          which would change more traditional hash values.

          The algorithm used to calculate the Go symbol hash and a reference implementation
          are available [here](https://github.com/elastic/toutoumomoma).'
        example: 10bddcb4cee42080f76c88d9ff964491
        flat_name: macho.go_import_hash
        ignore_above: 1024
        level: extended
        name: go_import_hash
        node_name: go_import_hash
        normalize: []
        short: A hash of the Go language imports in a Mach-O file.
        type: keyword
    go_imports:
      field_details:
        dashed_name: macho-go-imports
        description: List of imported Go language element names and types.
        flat_name: macho.go_imports
        level: extended
        name: go_imports
        node_name: go_imports
        normalize: []
        short: List of imported Go language element names and types.
        type: flattened
    go_imports_names_entropy:
      field_details:
        dashed_name: macho-go-imports-names-entropy
        description: Shannon entropy calculation from the list of Go imports.
        flat_name: macho.go_imports_names_entropy
        format: number
        level: extended
        name: go_imports_names_entropy
        node_name: go_imports_names_entropy
        normalize: []
        short: Shannon entropy calculation from the list of Go imports.
        type: long
    go_imports_names_var_entropy:
      field_details:
        dashed_name: macho-go-imports-names-var-entropy
        description: Variance for Shannon entropy calculation from the list of Go
          imports.
        flat_name: macho.go_imports_names_var_entropy
        format: number
        level: extended
        name: go_imports_names_var_entropy
        node_name: go_imports_names_var_entropy
        normalize: []
        short: Variance for Shannon entropy calculation from the list of Go imports.
        type: long
    go_stripped:
      field_details:
        dashed_name: macho-go-stripped
        description: Set to true if the file is a Go executable that has had its symbols
          stripped or obfuscated and false if an unobfuscated Go executable.
        flat_name: macho.go_stripped
        level: extended
        name: go_stripped
        node_name: go_stripped
        normalize: []
        short: Whether the file is a stripped or obfuscated Go executable.
        type: boolean
    import_hash:
      field_details:
        dashed_name: macho-import-hash
        description: 'A hash of the imports in a Mach-O file. An import hash can be
          used to fingerprint binaries even after recompilation or other code-level
          transformations have occurred, which would change more traditional hash
          values.

          This is a synonym for symhash.'
        example: d41d8cd98f00b204e9800998ecf8427e
        flat_name: macho.import_hash
        ignore_above: 1024
        level: extended
        name: import_hash
        node_name: import_hash
        normalize: []
        short: A hash of the imports in a Mach-O file.
        type: keyword
    imports:
      field_details:
        dashed_name: macho-imports
        description: List of imported element names and types.
        flat_name: macho.imports
        level: extended
        name: imports
        node_name: imports
        normalize:
        - array
        short: List of imported element names and types.
        type: flattened
    imports_names_entropy:
      field_details:
        dashed_name: macho-imports-names-entropy
        description: Shannon entropy calculation from the list of imported element
          names and types.
        flat_name: macho.imports_names_entropy
        format: number
        level: extended
        name: imports_names_entropy
        node_name: imports_names_entropy
        normalize: []
        short: Shannon entropy calculation from the list of imported element names
          and types.
        type: long
    imports_names_var_entropy:
      field_details:
        dashed_name: macho-imports-names-var-entropy
        description: Variance for Shannon entropy calculation from the list of imported
          element names and types.
        flat_name: macho.imports_names_var_entropy
        format: number
        level: extended
        name: imports_names_var_entropy
        node_name: imports_names_var_entropy
        normalize: []
        short: Variance for Shannon entropy calculation from the list of imported
          element names and types.
        type: long
    sections:
      field_details:
        dashed_name: macho-sections
        description: 'An array containing an object for each section of the Mach-O
          file.

          The keys that should be present in these objects are defined by sub-fields
          underneath `macho.sections.*`.'
        flat_name: macho.sections
        intermediate: false
        level: extended
        name: sections
        node_name: sections
        normalize:
        - array
        short: Section information of the Mach-O file.
        type: nested
      fields:
        entropy:
          field_details:
            dashed_name: macho-sections-entropy
            description: Shannon entropy calculation from the section.
            flat_name: macho.sections.entropy
            format: number
            level: extended
            name: sections.entropy
            node_name: entropy
            normalize: []
            short: Shannon entropy calculation from the section.
            type: long
        name:
          field_details:
            dashed_name: macho-sections-name
            description: Mach-O Section List name.
            flat_name: macho.sections.name
            ignore_above: 1024
            level: extended
            name: sections.name
            node_name: name
            normalize: []
            short: Mach-O Section List name.
            type: keyword
        physical_size:
          field_details:
            dashed_name: macho-sections-physical-size
            description: Mach-O Section List physical size.
            flat_name: macho.sections.physical_size
            format: bytes
            level: extended
            name: sections.physical_size
            node_name: physical_size
            normalize: []
            short: Mach-O Section List physical size.
            type: long
        var_entropy:
          field_details:
            dashed_name: macho-sections-var-entropy
            description: Variance for Shannon entropy calculation from the section.
            flat_name: macho.sections.var_entropy
            format: number
            level: extended
            name: sections.var_entropy
            node_name: var_entropy
            normalize: []
            short: Variance for Shannon entropy calculation from the section.
            type: long
        virtual_size:
          field_details:
            dashed_name: macho-sections-virtual-size
            description: Mach-O Section List virtual size. This is always the same
              as `physical_size`.
            flat_name: macho.sections.virtual_size
            format: string
            level: extended
            name: sections.virtual_size
            node_name: virtual_size
            normalize: []
            short: Mach-O Section List virtual size. This is always the same as `physical_size`.
            type: long
    symhash:
      field_details:
        dashed_name: macho-symhash
        description: 'A hash of the imports in a Mach-O file. An import hash can be
          used to fingerprint binaries even after recompilation or other code-level
          transformations have occurred, which would change more traditional hash
          values.

          This is a Mach-O implementation of the Windows PE imphash'
        example: d3ccf195b62a9279c3c19af1080497ec
        flat_name: macho.symhash
        ignore_above: 1024
        level: extended
        name: symhash
        node_name: symhash
        normalize: []
        short: A hash of the imports in a Mach-O file.
        type: keyword
  schema_details:
    group: 2
    prefix: macho.
    reusable:
      expected:
      - as: macho
        at: file
        beta: This field reuse is beta and subject to change.
        full: file.macho
      - as: macho
        at: process
        beta: This field reuse is beta and subject to change.
        full: process.macho
      order: 2
      top_level: false
    root: false
    title: Mach-O Header
network:
  field_details:
    dashed_name: network
    description: 'The network is defined as the communication path over which a host
      or network event happens.

      The network.* fields should be populated with details about the network activity
      associated with an event.'
    flat_name: network
    name: network
    node_name: network
    short: Fields describing the communication path over which the event happened.
    type: group
  fields:
    application:
      field_details:
        dashed_name: network-application
        description: 'When a specific application or service is identified from network
          connection details (source/dest IPs, ports, certificates, or wire format),
          this field captures the application''s or service''s name.

          For example, the original event identifies the network connection being
          from a specific web service in a `https` network connection, like `facebook`
          or `twitter`.

          The field value must be normalized to lowercase for querying.'
        example: aim
        flat_name: network.application
        ignore_above: 1024
        level: extended
        name: application
        node_name: application
        normalize: []
        short: Application level protocol name.
        type: keyword
    bytes:
      field_details:
        dashed_name: network-bytes
        description: 'Total bytes transferred in both directions.

          If `source.bytes` and `destination.bytes` are known, `network.bytes` is
          their sum.'
        example: 368
        flat_name: network.bytes
        format: bytes
        level: core
        name: bytes
        node_name: bytes
        normalize: []
        short: Total bytes transferred in both directions.
        type: long
    community_id:
      field_details:
        dashed_name: network-community-id
        description: 'A hash of source and destination IPs and ports, as well as the
          protocol used in a communication. This is a tool-agnostic standard to identify
          flows.

          Learn more at https://github.com/corelight/community-id-spec.'
        example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=
        flat_name: network.community_id
        ignore_above: 1024
        level: extended
        name: community_id
        node_name: community_id
        normalize: []
        short: A hash of source and destination IPs and ports.
        type: keyword
    direction:
      field_details:
        dashed_name: network-direction
        description: 'Direction of the network traffic.

          When mapping events from a host-based monitoring context, populate this
          field from the host''s point of view, using the values "ingress" or "egress".

          When mapping events from a network or perimeter-based monitoring context,
          populate this field from the point of view of the network perimeter, using
          the values "inbound", "outbound", "internal" or "external".

          Note that "internal" is not crossing perimeter boundaries, and is meant
          to describe communication between two hosts within the perimeter. Note also
          that "external" is meant to describe traffic between two hosts that are
          external to the perimeter. This could for example be useful for ISPs or
          VPN service providers.'
        example: inbound
        expected_values:
        - ingress
        - egress
        - inbound
        - outbound
        - internal
        - external
        - unknown
        flat_name: network.direction
        ignore_above: 1024
        level: core
        name: direction
        node_name: direction
        normalize: []
        short: Direction of the network traffic.
        type: keyword
    forwarded_ip:
      field_details:
        dashed_name: network-forwarded-ip
        description: Host IP address when the source IP address is the proxy.
        example: 192.1.1.2
        flat_name: network.forwarded_ip
        level: core
        name: forwarded_ip
        node_name: forwarded_ip
        normalize: []
        short: Host IP address when the source IP address is the proxy.
        type: ip
    iana_number:
      field_details:
        dashed_name: network-iana-number
        description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
          Standardized list of protocols. This aligns well with NetFlow and sFlow
          related logs which use the IANA Protocol Number.
        example: 6
        flat_name: network.iana_number
        ignore_above: 1024
        level: extended
        name: iana_number
        node_name: iana_number
        normalize: []
        short: IANA Protocol Number.
        type: keyword
    inner:
      field_details:
        dashed_name: network-inner
        description: Network.inner fields are added in addition to network.vlan fields
          to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed
          fields include vlan.id and vlan.name. Inner vlan fields are typically used
          when sending traffic with multiple 802.1q encapsulations to a network sensor
          (e.g. Zeek, Wireshark.)
        flat_name: network.inner
        level: extended
        name: inner
        node_name: inner
        normalize: []
        short: Inner VLAN tag information
        type: object
      fields:
        vlan:
          field_details:
            dashed_name: network-inner-vlan
            description: 'The VLAN fields are used to identify 802.1q tag(s) of a
              packet, as well as ingress and egress VLAN associations of an observer
              in relation to a specific packet or connection.

              Network.vlan fields are used to record a single VLAN tag, or the outer
              tag in the case of q-in-q encapsulations, for a packet or connection
              as observed, typically provided by a network sensor (e.g. Zeek, Wireshark)
              passively reporting on traffic.

              Network.inner VLAN fields are used to report inner q-in-q 802.1q tags
              (multiple 802.1q encapsulations) as observed, typically provided by
              a network sensor  (e.g. Zeek, Wireshark) passively reporting on traffic.
              Network.inner VLAN fields should only be used in addition to network.vlan
              fields to indicate q-in-q tagging.

              Observer.ingress and observer.egress VLAN values are used to record
              observer specific information when observer events contain discrete
              ingress and egress VLAN information, typically provided by firewalls,
              routers, or load balancers.'
            flat_name: network.inner.vlan
            intermediate: true
            name: vlan
            node_name: vlan
            original_fieldset: vlan
            short: Fields to describe observed VLAN information.
            type: group
          fields:
            id:
              field_details:
                dashed_name: network-inner-vlan-id
                description: VLAN ID as reported by the observer.
                example: 10
                flat_name: network.inner.vlan.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: vlan
                short: VLAN ID as reported by the observer.
                type: keyword
            name:
              field_details:
                dashed_name: network-inner-vlan-name
                description: Optional VLAN name as reported by the observer.
                example: outside
                flat_name: network.inner.vlan.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: vlan
                short: Optional VLAN name as reported by the observer.
                type: keyword
    name:
      field_details:
        dashed_name: network-name
        description: Name given by operators to sections of their network.
        example: Guest Wifi
        flat_name: network.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Name given by operators to sections of their network.
        type: keyword
    packets:
      field_details:
        dashed_name: network-packets
        description: 'Total packets transferred in both directions.

          If `source.packets` and `destination.packets` are known, `network.packets`
          is their sum.'
        example: 24
        flat_name: network.packets
        level: core
        name: packets
        node_name: packets
        normalize: []
        short: Total packets transferred in both directions.
        type: long
    protocol:
      field_details:
        dashed_name: network-protocol
        description: 'In the OSI Model this would be the Application Layer protocol.
          For example, `http`, `dns`, or `ssh`.

          The field value must be normalized to lowercase for querying.'
        example: http
        flat_name: network.protocol
        ignore_above: 1024
        level: core
        name: protocol
        node_name: protocol
        normalize: []
        short: Application protocol name.
        type: keyword
    transport:
      field_details:
        dashed_name: network-transport
        description: 'Same as network.iana_number, but instead using the Keyword name
          of the transport layer (udp, tcp, ipv6-icmp, etc.)

          The field value must be normalized to lowercase for querying.'
        example: tcp
        flat_name: network.transport
        ignore_above: 1024
        level: core
        name: transport
        node_name: transport
        normalize: []
        short: Protocol Name corresponding to the field `iana_number`.
        type: keyword
    type:
      field_details:
        dashed_name: network-type
        description: 'In the OSI Model this would be the Network Layer. ipv4, ipv6,
          ipsec, pim, etc

          The field value must be normalized to lowercase for querying.'
        example: ipv4
        flat_name: network.type
        ignore_above: 1024
        level: core
        name: type
        node_name: type
        normalize: []
        short: In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec,
          pim, etc
        type: keyword
    vlan:
      field_details:
        dashed_name: network-vlan
        description: 'The VLAN fields are used to identify 802.1q tag(s) of a packet,
          as well as ingress and egress VLAN associations of an observer in relation
          to a specific packet or connection.

          Network.vlan fields are used to record a single VLAN tag, or the outer tag
          in the case of q-in-q encapsulations, for a packet or connection as observed,
          typically provided by a network sensor (e.g. Zeek, Wireshark) passively
          reporting on traffic.

          Network.inner VLAN fields are used to report inner q-in-q 802.1q tags (multiple
          802.1q encapsulations) as observed, typically provided by a network sensor  (e.g.
          Zeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields
          should only be used in addition to network.vlan fields to indicate q-in-q
          tagging.

          Observer.ingress and observer.egress VLAN values are used to record observer
          specific information when observer events contain discrete ingress and egress
          VLAN information, typically provided by firewalls, routers, or load balancers.'
        flat_name: network.vlan
        intermediate: true
        name: vlan
        node_name: vlan
        original_fieldset: vlan
        short: Fields to describe observed VLAN information.
        type: group
      fields:
        id:
          field_details:
            dashed_name: network-vlan-id
            description: VLAN ID as reported by the observer.
            example: 10
            flat_name: network.vlan.id
            ignore_above: 1024
            level: extended
            name: id
            node_name: id
            normalize: []
            original_fieldset: vlan
            short: VLAN ID as reported by the observer.
            type: keyword
        name:
          field_details:
            dashed_name: network-vlan-name
            description: Optional VLAN name as reported by the observer.
            example: outside
            flat_name: network.vlan.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: vlan
            short: Optional VLAN name as reported by the observer.
            type: keyword
  schema_details:
    group: 2
    nestings:
    - network.inner.vlan
    - network.vlan
    prefix: network.
    reused_here:
    - full: network.vlan
      schema_name: vlan
      short: Fields to describe observed VLAN information.
    - full: network.inner.vlan
      schema_name: vlan
      short: Fields to describe observed VLAN information.
    root: false
    title: Network
observer:
  field_details:
    dashed_name: observer
    description: 'An observer is defined as a special network, security, or application
      device used to detect, observe, or create network, security, or application-related
      events and metrics.

      This could be a custom hardware appliance or a server that has been configured
      to run special network, security, or application software. Examples include
      firewalls, web proxies, intrusion detection/prevention systems, network monitoring
      sensors, web application firewalls, data loss prevention systems, and APM servers.
      The observer.* fields shall be populated with details of the system, if any,
      that detects, observes and/or creates a network, security, or application event
      or metric. Message queues and ETL components used in processing events or metrics
      are not considered observers in ECS.'
    flat_name: observer
    name: observer
    node_name: observer
    short: Fields describing an entity observing the event from outside the host.
    type: group
  fields:
    egress:
      field_details:
        dashed_name: observer-egress
        description: Observer.egress holds information like interface number and name,
          vlan, and zone information to classify egress traffic.  Single armed monitoring
          such as a network sensor on a span port should only use observer.ingress
          to categorize traffic.
        flat_name: observer.egress
        intermediate: false
        level: extended
        name: egress
        node_name: egress
        normalize: []
        short: Object field for egress information
        type: object
      fields:
        interface:
          field_details:
            dashed_name: observer-egress-interface
            description: The interface fields are used to record ingress and egress
              interface information when reported by an observer (e.g. firewall, router,
              load balancer) in the context of the observer handling a network connection.  In
              the case of a single observer interface (e.g. network sensor on a span
              port) only the observer.ingress information should be populated.
            flat_name: observer.egress.interface
            intermediate: true
            name: interface
            node_name: interface
            original_fieldset: interface
            short: Fields to describe observer interface information.
            type: group
          fields:
            alias:
              field_details:
                dashed_name: observer-egress-interface-alias
                description: Interface alias as reported by the system, typically
                  used in firewall implementations for e.g. inside, outside, or dmz
                  logical interface naming.
                example: outside
                flat_name: observer.egress.interface.alias
                ignore_above: 1024
                level: extended
                name: alias
                node_name: alias
                normalize: []
                original_fieldset: interface
                short: Interface alias
                type: keyword
            id:
              field_details:
                dashed_name: observer-egress-interface-id
                description: Interface ID as reported by an observer (typically SNMP
                  interface ID).
                example: 10
                flat_name: observer.egress.interface.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: interface
                short: Interface ID
                type: keyword
            name:
              field_details:
                dashed_name: observer-egress-interface-name
                description: Interface name as reported by the system.
                example: eth0
                flat_name: observer.egress.interface.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: interface
                short: Interface name
                type: keyword
        vlan:
          field_details:
            dashed_name: observer-egress-vlan
            description: 'The VLAN fields are used to identify 802.1q tag(s) of a
              packet, as well as ingress and egress VLAN associations of an observer
              in relation to a specific packet or connection.

              Network.vlan fields are used to record a single VLAN tag, or the outer
              tag in the case of q-in-q encapsulations, for a packet or connection
              as observed, typically provided by a network sensor (e.g. Zeek, Wireshark)
              passively reporting on traffic.

              Network.inner VLAN fields are used to report inner q-in-q 802.1q tags
              (multiple 802.1q encapsulations) as observed, typically provided by
              a network sensor  (e.g. Zeek, Wireshark) passively reporting on traffic.
              Network.inner VLAN fields should only be used in addition to network.vlan
              fields to indicate q-in-q tagging.

              Observer.ingress and observer.egress VLAN values are used to record
              observer specific information when observer events contain discrete
              ingress and egress VLAN information, typically provided by firewalls,
              routers, or load balancers.'
            flat_name: observer.egress.vlan
            intermediate: true
            name: vlan
            node_name: vlan
            original_fieldset: vlan
            short: Fields to describe observed VLAN information.
            type: group
          fields:
            id:
              field_details:
                dashed_name: observer-egress-vlan-id
                description: VLAN ID as reported by the observer.
                example: 10
                flat_name: observer.egress.vlan.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: vlan
                short: VLAN ID as reported by the observer.
                type: keyword
            name:
              field_details:
                dashed_name: observer-egress-vlan-name
                description: Optional VLAN name as reported by the observer.
                example: outside
                flat_name: observer.egress.vlan.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: vlan
                short: Optional VLAN name as reported by the observer.
                type: keyword
        zone:
          field_details:
            dashed_name: observer-egress-zone
            description: Network zone of outbound traffic as reported by the observer
              to categorize the destination area of egress traffic, e.g. Internal,
              External, DMZ, HR, Legal, etc.
            example: Public_Internet
            flat_name: observer.egress.zone
            ignore_above: 1024
            level: extended
            name: egress.zone
            node_name: zone
            normalize: []
            short: Observer Egress zone
            type: keyword
    geo:
      field_details:
        dashed_name: observer-geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        flat_name: observer.geo
        intermediate: true
        name: geo
        node_name: geo
        original_fieldset: geo
        short: Fields describing a location.
        type: group
      fields:
        city_name:
          field_details:
            dashed_name: observer-geo-city-name
            description: City name.
            example: Montreal
            flat_name: observer.geo.city_name
            ignore_above: 1024
            level: core
            name: city_name
            node_name: city_name
            normalize: []
            original_fieldset: geo
            short: City name.
            type: keyword
        continent_code:
          field_details:
            dashed_name: observer-geo-continent-code
            description: Two-letter code representing continent's name.
            example: NA
            flat_name: observer.geo.continent_code
            ignore_above: 1024
            level: core
            name: continent_code
            node_name: continent_code
            normalize: []
            original_fieldset: geo
            short: Continent code.
            type: keyword
        continent_name:
          field_details:
            dashed_name: observer-geo-continent-name
            description: Name of the continent.
            example: North America
            flat_name: observer.geo.continent_name
            ignore_above: 1024
            level: core
            name: continent_name
            node_name: continent_name
            normalize: []
            original_fieldset: geo
            short: Name of the continent.
            type: keyword
        country_iso_code:
          field_details:
            dashed_name: observer-geo-country-iso-code
            description: Country ISO code.
            example: CA
            flat_name: observer.geo.country_iso_code
            ignore_above: 1024
            level: core
            name: country_iso_code
            node_name: country_iso_code
            normalize: []
            original_fieldset: geo
            short: Country ISO code.
            type: keyword
        country_name:
          field_details:
            dashed_name: observer-geo-country-name
            description: Country name.
            example: Canada
            flat_name: observer.geo.country_name
            ignore_above: 1024
            level: core
            name: country_name
            node_name: country_name
            normalize: []
            original_fieldset: geo
            short: Country name.
            type: keyword
        location:
          field_details:
            dashed_name: observer-geo-location
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'
            flat_name: observer.geo.location
            level: core
            name: location
            node_name: location
            normalize: []
            original_fieldset: geo
            short: Longitude and latitude.
            type: geo_point
        name:
          field_details:
            dashed_name: observer-geo-name
            description: 'User-defined description of a location, at the level of
              granularity they care about.

              Could be the name of their data centers, the floor number, if this describes
              a local physical entity, city names.

              Not typically used in automated geolocation.'
            example: boston-dc
            flat_name: observer.geo.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: geo
            short: User-defined description of a location.
            type: keyword
        postal_code:
          field_details:
            dashed_name: observer-geo-postal-code
            description: 'Postal code associated with the location.

              Values appropriate for this field may also be known as a postcode or
              ZIP code and will vary widely from country to country.'
            example: 94040
            flat_name: observer.geo.postal_code
            ignore_above: 1024
            level: core
            name: postal_code
            node_name: postal_code
            normalize: []
            original_fieldset: geo
            short: Postal code.
            type: keyword
        region_iso_code:
          field_details:
            dashed_name: observer-geo-region-iso-code
            description: Region ISO code.
            example: CA-QC
            flat_name: observer.geo.region_iso_code
            ignore_above: 1024
            level: core
            name: region_iso_code
            node_name: region_iso_code
            normalize: []
            original_fieldset: geo
            short: Region ISO code.
            type: keyword
        region_name:
          field_details:
            dashed_name: observer-geo-region-name
            description: Region name.
            example: Quebec
            flat_name: observer.geo.region_name
            ignore_above: 1024
            level: core
            name: region_name
            node_name: region_name
            normalize: []
            original_fieldset: geo
            short: Region name.
            type: keyword
        timezone:
          field_details:
            dashed_name: observer-geo-timezone
            description: The time zone of the location, such as IANA time zone name.
            example: America/Argentina/Buenos_Aires
            flat_name: observer.geo.timezone
            ignore_above: 1024
            level: core
            name: timezone
            node_name: timezone
            normalize: []
            original_fieldset: geo
            short: Time zone.
            type: keyword
    hostname:
      field_details:
        dashed_name: observer-hostname
        description: Hostname of the observer.
        flat_name: observer.hostname
        ignore_above: 1024
        level: core
        name: hostname
        node_name: hostname
        normalize: []
        short: Hostname of the observer.
        type: keyword
    ingress:
      field_details:
        dashed_name: observer-ingress
        description: Observer.ingress holds information like interface number and
          name, vlan, and zone information to classify ingress traffic.  Single armed
          monitoring such as a network sensor on a span port should only use observer.ingress
          to categorize traffic.
        flat_name: observer.ingress
        intermediate: false
        level: extended
        name: ingress
        node_name: ingress
        normalize: []
        short: Object field for ingress information
        type: object
      fields:
        interface:
          field_details:
            dashed_name: observer-ingress-interface
            description: The interface fields are used to record ingress and egress
              interface information when reported by an observer (e.g. firewall, router,
              load balancer) in the context of the observer handling a network connection.  In
              the case of a single observer interface (e.g. network sensor on a span
              port) only the observer.ingress information should be populated.
            flat_name: observer.ingress.interface
            intermediate: true
            name: interface
            node_name: interface
            original_fieldset: interface
            short: Fields to describe observer interface information.
            type: group
          fields:
            alias:
              field_details:
                dashed_name: observer-ingress-interface-alias
                description: Interface alias as reported by the system, typically
                  used in firewall implementations for e.g. inside, outside, or dmz
                  logical interface naming.
                example: outside
                flat_name: observer.ingress.interface.alias
                ignore_above: 1024
                level: extended
                name: alias
                node_name: alias
                normalize: []
                original_fieldset: interface
                short: Interface alias
                type: keyword
            id:
              field_details:
                dashed_name: observer-ingress-interface-id
                description: Interface ID as reported by an observer (typically SNMP
                  interface ID).
                example: 10
                flat_name: observer.ingress.interface.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: interface
                short: Interface ID
                type: keyword
            name:
              field_details:
                dashed_name: observer-ingress-interface-name
                description: Interface name as reported by the system.
                example: eth0
                flat_name: observer.ingress.interface.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: interface
                short: Interface name
                type: keyword
        vlan:
          field_details:
            dashed_name: observer-ingress-vlan
            description: 'The VLAN fields are used to identify 802.1q tag(s) of a
              packet, as well as ingress and egress VLAN associations of an observer
              in relation to a specific packet or connection.

              Network.vlan fields are used to record a single VLAN tag, or the outer
              tag in the case of q-in-q encapsulations, for a packet or connection
              as observed, typically provided by a network sensor (e.g. Zeek, Wireshark)
              passively reporting on traffic.

              Network.inner VLAN fields are used to report inner q-in-q 802.1q tags
              (multiple 802.1q encapsulations) as observed, typically provided by
              a network sensor  (e.g. Zeek, Wireshark) passively reporting on traffic.
              Network.inner VLAN fields should only be used in addition to network.vlan
              fields to indicate q-in-q tagging.

              Observer.ingress and observer.egress VLAN values are used to record
              observer specific information when observer events contain discrete
              ingress and egress VLAN information, typically provided by firewalls,
              routers, or load balancers.'
            flat_name: observer.ingress.vlan
            intermediate: true
            name: vlan
            node_name: vlan
            original_fieldset: vlan
            short: Fields to describe observed VLAN information.
            type: group
          fields:
            id:
              field_details:
                dashed_name: observer-ingress-vlan-id
                description: VLAN ID as reported by the observer.
                example: 10
                flat_name: observer.ingress.vlan.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: vlan
                short: VLAN ID as reported by the observer.
                type: keyword
            name:
              field_details:
                dashed_name: observer-ingress-vlan-name
                description: Optional VLAN name as reported by the observer.
                example: outside
                flat_name: observer.ingress.vlan.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: vlan
                short: Optional VLAN name as reported by the observer.
                type: keyword
        zone:
          field_details:
            dashed_name: observer-ingress-zone
            description: Network zone of incoming traffic as reported by the observer
              to categorize the source area of ingress traffic. e.g. internal, External,
              DMZ, HR, Legal, etc.
            example: DMZ
            flat_name: observer.ingress.zone
            ignore_above: 1024
            level: extended
            name: ingress.zone
            node_name: zone
            normalize: []
            short: Observer ingress zone
            type: keyword
    ip:
      field_details:
        dashed_name: observer-ip
        description: IP addresses of the observer.
        flat_name: observer.ip
        level: core
        name: ip
        node_name: ip
        normalize:
        - array
        short: IP addresses of the observer.
        type: ip
    mac:
      field_details:
        dashed_name: observer-mac
        description: 'MAC addresses of the observer.

          The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit
          byte) is represented by two [uppercase] hexadecimal digits giving the value
          of the octet as an unsigned integer. Successive octets are separated by
          a hyphen.'
        example: '["00-00-5E-00-53-23", "00-00-5E-00-53-24"]'
        flat_name: observer.mac
        ignore_above: 1024
        level: core
        name: mac
        node_name: mac
        normalize:
        - array
        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
        short: MAC addresses of the observer.
        type: keyword
    name:
      field_details:
        dashed_name: observer-name
        description: 'Custom name of the observer.

          This is a name that can be given to an observer. This can be helpful for
          example if multiple firewalls of the same model are used in an organization.

          If no custom name is needed, the field can be left empty.'
        example: 1_proxySG
        flat_name: observer.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Custom name of the observer.
        type: keyword
    os:
      field_details:
        dashed_name: observer-os
        description: The OS fields contain information about the operating system.
        flat_name: observer.os
        intermediate: true
        name: os
        node_name: os
        original_fieldset: os
        short: OS fields contain information about the operating system.
        type: group
      fields:
        family:
          field_details:
            dashed_name: observer-os-family
            description: OS family (such as redhat, debian, freebsd, windows).
            example: debian
            flat_name: observer.os.family
            ignore_above: 1024
            level: extended
            name: family
            node_name: family
            normalize: []
            original_fieldset: os
            short: OS family (such as redhat, debian, freebsd, windows).
            type: keyword
        full:
          field_details:
            dashed_name: observer-os-full
            description: Operating system name, including the version or code name.
            example: Mac OS Mojave
            flat_name: observer.os.full
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: observer.os.full.text
              name: text
              type: match_only_text
            name: full
            node_name: full
            normalize: []
            original_fieldset: os
            short: Operating system name, including the version or code name.
            type: keyword
        kernel:
          field_details:
            dashed_name: observer-os-kernel
            description: Operating system kernel version as a raw string.
            example: 4.4.0-112-generic
            flat_name: observer.os.kernel
            ignore_above: 1024
            level: extended
            name: kernel
            node_name: kernel
            normalize: []
            original_fieldset: os
            short: Operating system kernel version as a raw string.
            type: keyword
        name:
          field_details:
            dashed_name: observer-os-name
            description: Operating system name, without the version.
            example: Mac OS X
            flat_name: observer.os.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: observer.os.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: os
            short: Operating system name, without the version.
            type: keyword
        platform:
          field_details:
            dashed_name: observer-os-platform
            description: Operating system platform (such centos, ubuntu, windows).
            example: darwin
            flat_name: observer.os.platform
            ignore_above: 1024
            level: extended
            name: platform
            node_name: platform
            normalize: []
            original_fieldset: os
            short: Operating system platform (such centos, ubuntu, windows).
            type: keyword
        type:
          field_details:
            dashed_name: observer-os-type
            description: 'Use the `os.type` field to categorize the operating system
              into one of the broad commercial families.

              If the OS you''re dealing with is not listed as an expected value, the
              field should not be populated. Please let us know by opening an issue
              with ECS, to propose its addition.'
            example: macos
            expected_values:
            - linux
            - macos
            - unix
            - windows
            - ios
            - android
            flat_name: observer.os.type
            ignore_above: 1024
            level: extended
            name: type
            node_name: type
            normalize: []
            original_fieldset: os
            short: 'Which commercial OS family (one of: linux, macos, unix, windows,
              ios or android).'
            type: keyword
        version:
          field_details:
            dashed_name: observer-os-version
            description: Operating system version as a raw string.
            example: 10.14.1
            flat_name: observer.os.version
            ignore_above: 1024
            level: extended
            name: version
            node_name: version
            normalize: []
            original_fieldset: os
            short: Operating system version as a raw string.
            type: keyword
    product:
      field_details:
        dashed_name: observer-product
        description: The product name of the observer.
        example: s200
        flat_name: observer.product
        ignore_above: 1024
        level: extended
        name: product
        node_name: product
        normalize: []
        short: The product name of the observer.
        type: keyword
    serial_number:
      field_details:
        dashed_name: observer-serial-number
        description: Observer serial number.
        flat_name: observer.serial_number
        ignore_above: 1024
        level: extended
        name: serial_number
        node_name: serial_number
        normalize: []
        short: Observer serial number.
        type: keyword
    type:
      field_details:
        dashed_name: observer-type
        description: 'The type of the observer the data is coming from.

          There is no predefined list of observer types. Some examples are `forwarder`,
          `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.'
        example: firewall
        flat_name: observer.type
        ignore_above: 1024
        level: core
        name: type
        node_name: type
        normalize: []
        short: The type of the observer the data is coming from.
        type: keyword
    vendor:
      field_details:
        dashed_name: observer-vendor
        description: Vendor name of the observer.
        example: Symantec
        flat_name: observer.vendor
        ignore_above: 1024
        level: core
        name: vendor
        node_name: vendor
        normalize: []
        short: Vendor name of the observer.
        type: keyword
    version:
      field_details:
        dashed_name: observer-version
        description: Observer version.
        flat_name: observer.version
        ignore_above: 1024
        level: core
        name: version
        node_name: version
        normalize: []
        short: Observer version.
        type: keyword
  schema_details:
    group: 2
    nestings:
    - observer.egress.interface
    - observer.egress.vlan
    - observer.geo
    - observer.ingress.interface
    - observer.ingress.vlan
    - observer.os
    prefix: observer.
    reused_here:
    - full: observer.geo
      schema_name: geo
      short: Fields describing a location.
    - full: observer.ingress.interface
      schema_name: interface
      short: Fields to describe observer interface information.
    - full: observer.egress.interface
      schema_name: interface
      short: Fields to describe observer interface information.
    - full: observer.os
      schema_name: os
      short: OS fields contain information about the operating system.
    - full: observer.ingress.vlan
      schema_name: vlan
      short: Fields to describe observed VLAN information.
    - full: observer.egress.vlan
      schema_name: vlan
      short: Fields to describe observed VLAN information.
    root: false
    title: Observer
orchestrator:
  field_details:
    dashed_name: orchestrator
    description: Fields that describe the resources which container orchestrators
      manage or act upon.
    flat_name: orchestrator
    name: orchestrator
    node_name: orchestrator
    short: Fields relevant to container orchestrators.
    type: group
  fields:
    api_version:
      field_details:
        dashed_name: orchestrator-api-version
        description: API version being used to carry out the action
        example: v1beta1
        flat_name: orchestrator.api_version
        ignore_above: 1024
        level: extended
        name: api_version
        node_name: api_version
        normalize: []
        short: API version being used to carry out the action
        type: keyword
    cluster:
      field_details:
        dashed_name: orchestrator-cluster
        flat_name: orchestrator.cluster
        intermediate: true
        name: cluster
        node_name: cluster
        type: object
      fields:
        id:
          field_details:
            dashed_name: orchestrator-cluster-id
            description: Unique ID of the cluster.
            flat_name: orchestrator.cluster.id
            ignore_above: 1024
            level: extended
            name: cluster.id
            node_name: id
            normalize: []
            short: Unique ID of the cluster.
            type: keyword
        name:
          field_details:
            dashed_name: orchestrator-cluster-name
            description: Name of the cluster.
            flat_name: orchestrator.cluster.name
            ignore_above: 1024
            level: extended
            name: cluster.name
            node_name: name
            normalize: []
            short: Name of the cluster.
            type: keyword
        url:
          field_details:
            dashed_name: orchestrator-cluster-url
            description: URL of the API used to manage the cluster.
            flat_name: orchestrator.cluster.url
            ignore_above: 1024
            level: extended
            name: cluster.url
            node_name: url
            normalize: []
            short: URL of the API used to manage the cluster.
            type: keyword
        version:
          field_details:
            dashed_name: orchestrator-cluster-version
            description: The version of the cluster.
            flat_name: orchestrator.cluster.version
            ignore_above: 1024
            level: extended
            name: cluster.version
            node_name: version
            normalize: []
            short: The version of the cluster.
            type: keyword
    namespace:
      field_details:
        dashed_name: orchestrator-namespace
        description: Namespace in which the action is taking place.
        example: kube-system
        flat_name: orchestrator.namespace
        ignore_above: 1024
        level: extended
        name: namespace
        node_name: namespace
        normalize: []
        short: Namespace in which the action is taking place.
        type: keyword
    organization:
      field_details:
        dashed_name: orchestrator-organization
        description: Organization affected by the event (for multi-tenant orchestrator
          setups).
        example: elastic
        flat_name: orchestrator.organization
        ignore_above: 1024
        level: extended
        name: organization
        node_name: organization
        normalize: []
        short: Organization affected by the event (for multi-tenant orchestrator setups).
        type: keyword
    resource:
      field_details:
        dashed_name: orchestrator-resource
        flat_name: orchestrator.resource
        intermediate: true
        name: resource
        node_name: resource
        type: object
      fields:
        annotation:
          field_details:
            dashed_name: orchestrator-resource-annotation
            description: The list of annotations added to the resource.
            example: '[''key1:value1'', ''key2:value2'', ''key3:value3'']'
            flat_name: orchestrator.resource.annotation
            ignore_above: 1024
            level: extended
            name: resource.annotation
            node_name: annotation
            normalize:
            - array
            short: The list of annotations added to the resource.
            type: keyword
        id:
          field_details:
            dashed_name: orchestrator-resource-id
            description: Unique ID of the resource being acted upon.
            flat_name: orchestrator.resource.id
            ignore_above: 1024
            level: extended
            name: resource.id
            node_name: id
            normalize: []
            short: Unique ID of the resource being acted upon.
            type: keyword
        ip:
          field_details:
            dashed_name: orchestrator-resource-ip
            description: 'IP address assigned to the resource associated with the
              event being observed. In the case of a Kubernetes Pod, this array would
              contain only one element: the IP of the Pod (as opposed to the Node
              on which the Pod is running).'
            flat_name: orchestrator.resource.ip
            level: extended
            name: resource.ip
            node_name: ip
            normalize:
            - array
            short: IP address assigned to the resource associated with the event being
              observed.
            type: ip
        label:
          field_details:
            dashed_name: orchestrator-resource-label
            description: The list of labels added to the resource.
            example: '[''key1:value1'', ''key2:value2'', ''key3:value3'']'
            flat_name: orchestrator.resource.label
            ignore_above: 1024
            level: extended
            name: resource.label
            node_name: label
            normalize:
            - array
            short: The list of labels added to the resource.
            type: keyword
        name:
          field_details:
            dashed_name: orchestrator-resource-name
            description: Name of the resource being acted upon.
            example: test-pod-cdcws
            flat_name: orchestrator.resource.name
            ignore_above: 1024
            level: extended
            name: resource.name
            node_name: name
            normalize: []
            short: Name of the resource being acted upon.
            type: keyword
        parent:
          field_details:
            dashed_name: orchestrator-resource-parent
            flat_name: orchestrator.resource.parent
            intermediate: true
            name: resource.parent
            node_name: parent
            type: object
          fields:
            type:
              field_details:
                dashed_name: orchestrator-resource-parent-type
                description: Type or kind of the parent resource associated with the
                  event being observed. In Kubernetes, this will be the name of a
                  built-in workload resource (e.g., Deployment, StatefulSet, DaemonSet).
                example: DaemonSet
                flat_name: orchestrator.resource.parent.type
                ignore_above: 1024
                level: extended
                name: resource.parent.type
                node_name: type
                normalize: []
                short: Type or kind of the parent resource associated with the event
                  being observed.
                type: keyword
        type:
          field_details:
            dashed_name: orchestrator-resource-type
            description: Type of resource being acted upon.
            example: service
            flat_name: orchestrator.resource.type
            ignore_above: 1024
            level: extended
            name: resource.type
            node_name: type
            normalize: []
            short: Type of resource being acted upon.
            type: keyword
    type:
      field_details:
        dashed_name: orchestrator-type
        description: Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry).
        example: kubernetes
        flat_name: orchestrator.type
        ignore_above: 1024
        level: extended
        name: type
        node_name: type
        normalize: []
        short: Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry).
        type: keyword
  schema_details:
    group: 2
    prefix: orchestrator.
    root: false
    title: Orchestrator
organization:
  field_details:
    dashed_name: organization
    description: 'The organization fields enrich data with information about the company
      or entity the data is associated with.

      These fields help you arrange or filter data stored in an index by one or multiple
      organizations.'
    flat_name: organization
    name: organization
    node_name: organization
    short: Fields describing the organization or company the event is associated with.
    type: group
  fields:
    id:
      field_details:
        dashed_name: organization-id
        description: Unique identifier for the organization.
        flat_name: organization.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: Unique identifier for the organization.
        type: keyword
    name:
      field_details:
        dashed_name: organization-name
        description: Organization name.
        flat_name: organization.name
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: organization.name.text
          name: text
          type: match_only_text
        name: name
        node_name: name
        normalize: []
        short: Organization name.
        type: keyword
  schema_details:
    group: 2
    prefix: organization.
    root: false
    title: Organization
os:
  field_details:
    dashed_name: os
    description: The OS fields contain information about the operating system.
    flat_name: os
    name: os
    node_name: os
    short: OS fields contain information about the operating system.
    type: group
  fields:
    family:
      field_details:
        dashed_name: os-family
        description: OS family (such as redhat, debian, freebsd, windows).
        example: debian
        flat_name: os.family
        ignore_above: 1024
        level: extended
        name: family
        node_name: family
        normalize: []
        short: OS family (such as redhat, debian, freebsd, windows).
        type: keyword
    full:
      field_details:
        dashed_name: os-full
        description: Operating system name, including the version or code name.
        example: Mac OS Mojave
        flat_name: os.full
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: os.full.text
          name: text
          type: match_only_text
        name: full
        node_name: full
        normalize: []
        short: Operating system name, including the version or code name.
        type: keyword
    kernel:
      field_details:
        dashed_name: os-kernel
        description: Operating system kernel version as a raw string.
        example: 4.4.0-112-generic
        flat_name: os.kernel
        ignore_above: 1024
        level: extended
        name: kernel
        node_name: kernel
        normalize: []
        short: Operating system kernel version as a raw string.
        type: keyword
    name:
      field_details:
        dashed_name: os-name
        description: Operating system name, without the version.
        example: Mac OS X
        flat_name: os.name
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: os.name.text
          name: text
          type: match_only_text
        name: name
        node_name: name
        normalize: []
        short: Operating system name, without the version.
        type: keyword
    platform:
      field_details:
        dashed_name: os-platform
        description: Operating system platform (such centos, ubuntu, windows).
        example: darwin
        flat_name: os.platform
        ignore_above: 1024
        level: extended
        name: platform
        node_name: platform
        normalize: []
        short: Operating system platform (such centos, ubuntu, windows).
        type: keyword
    type:
      field_details:
        dashed_name: os-type
        description: 'Use the `os.type` field to categorize the operating system into
          one of the broad commercial families.

          If the OS you''re dealing with is not listed as an expected value, the field
          should not be populated. Please let us know by opening an issue with ECS,
          to propose its addition.'
        example: macos
        expected_values:
        - linux
        - macos
        - unix
        - windows
        - ios
        - android
        flat_name: os.type
        ignore_above: 1024
        level: extended
        name: type
        node_name: type
        normalize: []
        short: 'Which commercial OS family (one of: linux, macos, unix, windows, ios
          or android).'
        type: keyword
    version:
      field_details:
        dashed_name: os-version
        description: Operating system version as a raw string.
        example: 10.14.1
        flat_name: os.version
        ignore_above: 1024
        level: extended
        name: version
        node_name: version
        normalize: []
        short: Operating system version as a raw string.
        type: keyword
  schema_details:
    group: 2
    prefix: os.
    reusable:
      expected:
      - as: os
        at: observer
        full: observer.os
      - as: os
        at: host
        full: host.os
      - as: os
        at: user_agent
        full: user_agent.os
      order: 2
      top_level: false
    root: false
    title: Operating System
package:
  field_details:
    dashed_name: package
    description: These fields contain information about an installed software package.
      It contains general information about a package, such as name, version or size.
      It also contains installation details, such as time or location.
    flat_name: package
    name: package
    node_name: package
    short: These fields contain information about an installed software package.
    type: group
  fields:
    architecture:
      field_details:
        dashed_name: package-architecture
        description: Package architecture.
        example: x86_64
        flat_name: package.architecture
        ignore_above: 1024
        level: extended
        name: architecture
        node_name: architecture
        normalize: []
        short: Package architecture.
        type: keyword
    build_version:
      field_details:
        dashed_name: package-build-version
        description: 'Additional information about the build version of the installed
          package.

          For example use the commit SHA of a non-released package.'
        example: 36f4f7e89dd61b0988b12ee000b98966867710cd
        flat_name: package.build_version
        ignore_above: 1024
        level: extended
        name: build_version
        node_name: build_version
        normalize: []
        short: Build version information
        type: keyword
    checksum:
      field_details:
        dashed_name: package-checksum
        description: Checksum of the installed package for verification.
        example: 68b329da9893e34099c7d8ad5cb9c940
        flat_name: package.checksum
        ignore_above: 1024
        level: extended
        name: checksum
        node_name: checksum
        normalize: []
        short: Checksum of the installed package for verification.
        type: keyword
    description:
      field_details:
        dashed_name: package-description
        description: Description of the package.
        example: Open source programming language to build simple/reliable/efficient
          software.
        flat_name: package.description
        ignore_above: 1024
        level: extended
        name: description
        node_name: description
        normalize: []
        short: Description of the package.
        type: keyword
    install_scope:
      field_details:
        dashed_name: package-install-scope
        description: Indicating how the package was installed, e.g. user-local, global.
        example: global
        flat_name: package.install_scope
        ignore_above: 1024
        level: extended
        name: install_scope
        node_name: install_scope
        normalize: []
        short: Indicating how the package was installed, e.g. user-local, global.
        type: keyword
    installed:
      field_details:
        dashed_name: package-installed
        description: Time when package was installed.
        flat_name: package.installed
        level: extended
        name: installed
        node_name: installed
        normalize: []
        short: Time when package was installed.
        type: date
    license:
      field_details:
        dashed_name: package-license
        description: 'License under which the package was released.

          Use a short name, e.g. the license identifier from SPDX License List where
          possible (https://spdx.org/licenses/).'
        example: Apache License 2.0
        flat_name: package.license
        ignore_above: 1024
        level: extended
        name: license
        node_name: license
        normalize: []
        short: Package license
        type: keyword
    name:
      field_details:
        dashed_name: package-name
        description: Package name
        example: go
        flat_name: package.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Package name
        type: keyword
    path:
      field_details:
        dashed_name: package-path
        description: Path where the package is installed.
        example: /usr/local/Cellar/go/1.12.9/
        flat_name: package.path
        ignore_above: 1024
        level: extended
        name: path
        node_name: path
        normalize: []
        short: Path where the package is installed.
        type: keyword
    reference:
      field_details:
        dashed_name: package-reference
        description: Home page or reference URL of the software in this package, if
          available.
        example: https://golang.org
        flat_name: package.reference
        ignore_above: 1024
        level: extended
        name: reference
        node_name: reference
        normalize: []
        short: Package home page or reference URL
        type: keyword
    size:
      field_details:
        dashed_name: package-size
        description: Package size in bytes.
        example: 62231
        flat_name: package.size
        format: string
        level: extended
        name: size
        node_name: size
        normalize: []
        short: Package size in bytes.
        type: long
    type:
      field_details:
        dashed_name: package-type
        description: 'Type of package.

          This should contain the package file type, rather than the package manager
          name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.'
        example: rpm
        flat_name: package.type
        ignore_above: 1024
        level: extended
        name: type
        node_name: type
        normalize: []
        short: Package type
        type: keyword
    version:
      field_details:
        dashed_name: package-version
        description: Package version
        example: 1.12.9
        flat_name: package.version
        ignore_above: 1024
        level: extended
        name: version
        node_name: version
        normalize: []
        short: Package version
        type: keyword
  schema_details:
    group: 2
    prefix: package.
    root: false
    title: Package
pe:
  field_details:
    dashed_name: pe
    description: These fields contain Windows Portable Executable (PE) metadata.
    flat_name: pe
    name: pe
    node_name: pe
    short: These fields contain Windows Portable Executable (PE) metadata.
    type: group
  fields:
    architecture:
      field_details:
        dashed_name: pe-architecture
        description: CPU architecture target for the file.
        example: x64
        flat_name: pe.architecture
        ignore_above: 1024
        level: extended
        name: architecture
        node_name: architecture
        normalize: []
        short: CPU architecture target for the file.
        type: keyword
    company:
      field_details:
        dashed_name: pe-company
        description: Internal company name of the file, provided at compile-time.
        example: Microsoft Corporation
        flat_name: pe.company
        ignore_above: 1024
        level: extended
        name: company
        node_name: company
        normalize: []
        short: Internal company name of the file, provided at compile-time.
        type: keyword
    description:
      field_details:
        dashed_name: pe-description
        description: Internal description of the file, provided at compile-time.
        example: Paint
        flat_name: pe.description
        ignore_above: 1024
        level: extended
        name: description
        node_name: description
        normalize: []
        short: Internal description of the file, provided at compile-time.
        type: keyword
    file_version:
      field_details:
        dashed_name: pe-file-version
        description: Internal version of the file, provided at compile-time.
        example: 6.3.9600.17415
        flat_name: pe.file_version
        ignore_above: 1024
        level: extended
        name: file_version
        node_name: file_version
        normalize: []
        short: Process name.
        type: keyword
    go_import_hash:
      field_details:
        dashed_name: pe-go-import-hash
        description: 'A hash of the Go language imports in a PE file excluding standard
          library imports. An import hash can be used to fingerprint binaries even
          after recompilation or other code-level transformations have occurred, which
          would change more traditional hash values.

          The algorithm used to calculate the Go symbol hash and a reference implementation
          are available [here](https://github.com/elastic/toutoumomoma).'
        example: 10bddcb4cee42080f76c88d9ff964491
        flat_name: pe.go_import_hash
        ignore_above: 1024
        level: extended
        name: go_import_hash
        node_name: go_import_hash
        normalize: []
        short: A hash of the Go language imports in a PE file.
        type: keyword
    go_imports:
      field_details:
        dashed_name: pe-go-imports
        description: List of imported Go language element names and types.
        flat_name: pe.go_imports
        level: extended
        name: go_imports
        node_name: go_imports
        normalize: []
        short: List of imported Go language element names and types.
        type: flattened
    go_imports_names_entropy:
      field_details:
        dashed_name: pe-go-imports-names-entropy
        description: Shannon entropy calculation from the list of Go imports.
        flat_name: pe.go_imports_names_entropy
        format: number
        level: extended
        name: go_imports_names_entropy
        node_name: go_imports_names_entropy
        normalize: []
        short: Shannon entropy calculation from the list of Go imports.
        type: long
    go_imports_names_var_entropy:
      field_details:
        dashed_name: pe-go-imports-names-var-entropy
        description: Variance for Shannon entropy calculation from the list of Go
          imports.
        flat_name: pe.go_imports_names_var_entropy
        format: number
        level: extended
        name: go_imports_names_var_entropy
        node_name: go_imports_names_var_entropy
        normalize: []
        short: Variance for Shannon entropy calculation from the list of Go imports.
        type: long
    go_stripped:
      field_details:
        dashed_name: pe-go-stripped
        description: Set to true if the file is a Go executable that has had its symbols
          stripped or obfuscated and false if an unobfuscated Go executable.
        flat_name: pe.go_stripped
        level: extended
        name: go_stripped
        node_name: go_stripped
        normalize: []
        short: Whether the file is a stripped or obfuscated Go executable.
        type: boolean
    imphash:
      field_details:
        dashed_name: pe-imphash
        description: 'A hash of the imports in a PE file. An imphash -- or import
          hash -- can be used to fingerprint binaries even after recompilation or
          other code-level transformations have occurred, which would change more
          traditional hash values.

          Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
        example: 0c6803c4e922103c4dca5963aad36ddf
        flat_name: pe.imphash
        ignore_above: 1024
        level: extended
        name: imphash
        node_name: imphash
        normalize: []
        short: A hash of the imports in a PE file.
        type: keyword
    import_hash:
      field_details:
        dashed_name: pe-import-hash
        description: 'A hash of the imports in a PE file. An import hash can be used
          to fingerprint binaries even after recompilation or other code-level transformations
          have occurred, which would change more traditional hash values.

          This is a synonym for imphash.'
        example: d41d8cd98f00b204e9800998ecf8427e
        flat_name: pe.import_hash
        ignore_above: 1024
        level: extended
        name: import_hash
        node_name: import_hash
        normalize: []
        short: A hash of the imports in a PE file.
        type: keyword
    imports:
      field_details:
        dashed_name: pe-imports
        description: List of imported element names and types.
        flat_name: pe.imports
        level: extended
        name: imports
        node_name: imports
        normalize:
        - array
        short: List of imported element names and types.
        type: flattened
    imports_names_entropy:
      field_details:
        dashed_name: pe-imports-names-entropy
        description: Shannon entropy calculation from the list of imported element
          names and types.
        flat_name: pe.imports_names_entropy
        format: number
        level: extended
        name: imports_names_entropy
        node_name: imports_names_entropy
        normalize: []
        short: Shannon entropy calculation from the list of imported element names
          and types.
        type: long
    imports_names_var_entropy:
      field_details:
        dashed_name: pe-imports-names-var-entropy
        description: Variance for Shannon entropy calculation from the list of imported
          element names and types.
        flat_name: pe.imports_names_var_entropy
        format: number
        level: extended
        name: imports_names_var_entropy
        node_name: imports_names_var_entropy
        normalize: []
        short: Variance for Shannon entropy calculation from the list of imported
          element names and types.
        type: long
    original_file_name:
      field_details:
        dashed_name: pe-original-file-name
        description: Internal name of the file, provided at compile-time.
        example: MSPAINT.EXE
        flat_name: pe.original_file_name
        ignore_above: 1024
        level: extended
        name: original_file_name
        node_name: original_file_name
        normalize: []
        short: Internal name of the file, provided at compile-time.
        type: keyword
    pehash:
      field_details:
        dashed_name: pe-pehash
        description: 'A hash of the PE header and data from one or more PE sections.
          An pehash can be used to cluster files by transforming structural information
          about a file into a hash value.

          Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
        example: 73ff189b63cd6be375a7ff25179a38d347651975
        flat_name: pe.pehash
        ignore_above: 1024
        level: extended
        name: pehash
        node_name: pehash
        normalize: []
        short: A hash of the PE header and data from one or more PE sections.
        type: keyword
    product:
      field_details:
        dashed_name: pe-product
        description: Internal product name of the file, provided at compile-time.
        example: "Microsoft\xAE Windows\xAE Operating System"
        flat_name: pe.product
        ignore_above: 1024
        level: extended
        name: product
        node_name: product
        normalize: []
        short: Internal product name of the file, provided at compile-time.
        type: keyword
    sections:
      field_details:
        dashed_name: pe-sections
        description: 'An array containing an object for each section of the PE file.

          The keys that should be present in these objects are defined by sub-fields
          underneath `pe.sections.*`.'
        flat_name: pe.sections
        intermediate: false
        level: extended
        name: sections
        node_name: sections
        normalize:
        - array
        short: Section information of the PE file.
        type: nested
      fields:
        entropy:
          field_details:
            dashed_name: pe-sections-entropy
            description: Shannon entropy calculation from the section.
            flat_name: pe.sections.entropy
            format: number
            level: extended
            name: sections.entropy
            node_name: entropy
            normalize: []
            short: Shannon entropy calculation from the section.
            type: long
        name:
          field_details:
            dashed_name: pe-sections-name
            description: PE Section List name.
            flat_name: pe.sections.name
            ignore_above: 1024
            level: extended
            name: sections.name
            node_name: name
            normalize: []
            short: PE Section List name.
            type: keyword
        physical_size:
          field_details:
            dashed_name: pe-sections-physical-size
            description: PE Section List physical size.
            flat_name: pe.sections.physical_size
            format: bytes
            level: extended
            name: sections.physical_size
            node_name: physical_size
            normalize: []
            short: PE Section List physical size.
            type: long
        var_entropy:
          field_details:
            dashed_name: pe-sections-var-entropy
            description: Variance for Shannon entropy calculation from the section.
            flat_name: pe.sections.var_entropy
            format: number
            level: extended
            name: sections.var_entropy
            node_name: var_entropy
            normalize: []
            short: Variance for Shannon entropy calculation from the section.
            type: long
        virtual_size:
          field_details:
            dashed_name: pe-sections-virtual-size
            description: PE Section List virtual size. This is always the same as
              `physical_size`.
            flat_name: pe.sections.virtual_size
            format: string
            level: extended
            name: sections.virtual_size
            node_name: virtual_size
            normalize: []
            short: PE Section List virtual size. This is always the same as `physical_size`.
            type: long
  schema_details:
    group: 2
    prefix: pe.
    reusable:
      expected:
      - as: pe
        at: file
        full: file.pe
      - as: pe
        at: dll
        full: dll.pe
      - as: pe
        at: process
        full: process.pe
      order: 1
      top_level: false
    root: false
    title: PE Header
process:
  field_details:
    dashed_name: process
    description: 'These fields contain information about a process.

      These fields can help you correlate metrics information with a process id/name
      from a log message.  The `process.pid` often stays in the metric itself and
      is copied to the global field for correlation.'
    flat_name: process
    name: process
    node_name: process
    short: These fields contain information about a process.
    type: group
  fields:
    args:
      field_details:
        dashed_name: process-args
        description: 'Array of process arguments, starting with the absolute path
          to the executable.

          May be filtered to protect sensitive information.'
        example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
        flat_name: process.args
        ignore_above: 1024
        level: extended
        name: args
        node_name: args
        normalize:
        - array
        short: Array of process arguments.
        type: keyword
    args_count:
      field_details:
        dashed_name: process-args-count
        description: 'Length of the process.args array.

          This field can be useful for querying or performing bucket analysis on how
          many arguments were provided to start a process. More arguments may be an
          indication of suspicious activity.'
        example: 4
        flat_name: process.args_count
        level: extended
        name: args_count
        node_name: args_count
        normalize: []
        short: Length of the process.args array.
        type: long
    attested_groups:
      field_details:
        dashed_name: process-group
        description: The group fields are meant to represent groups that are relevant
          to the event.
        flat_name: process.group
        intermediate: true
        name: attested_groups
        node_name: group
        original_fieldset: group
        short: User's group relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-attested-groups-domain
            description: 'Name of the directory the group is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.attested_groups.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: group
            short: Name of the directory the group is a member of.
            type: keyword
        id:
          field_details:
            dashed_name: process-attested-groups-id
            description: Unique identifier for the group on the system/platform.
            flat_name: process.attested_groups.id
            ignore_above: 1024
            level: extended
            name: id
            node_name: id
            normalize: []
            original_fieldset: group
            short: Unique identifier for the group on the system/platform.
            type: keyword
        name:
          field_details:
            dashed_name: process-attested-groups-name
            description: Name of the group.
            flat_name: process.attested_groups.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: group
            short: Name of the group.
            type: keyword
    attested_user:
      field_details:
        dashed_name: process-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: process.user
        intermediate: true
        name: attested_user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-attested-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.attested_user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: process-attested-user-email
            description: User email address.
            flat_name: process.attested_user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: process-attested-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: process.attested_user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.attested_user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: process-attested-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.attested_user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-attested-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.attested_user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-attested-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.attested_user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-attested-user-group-name
                description: Name of the group.
                flat_name: process.attested_user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-attested-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: process.attested_user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: process-attested-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: process.attested_user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: process-attested-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: process.attested_user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: process.attested_user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-attested-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: process.attested_user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: process-attested-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: process.attested_user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: process-attested-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: process.attested_user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: process-attested-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: process.attested_user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: process-attested-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: process.attested_user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: process-attested-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: process.attested_user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: process-attested-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: process.attested_user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: process-attested-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: process.attested_user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
    code_signature:
      field_details:
        dashed_name: process-code-signature
        description: These fields contain information about binary code signatures.
        flat_name: process.code_signature
        intermediate: true
        name: code_signature
        node_name: code_signature
        original_fieldset: code_signature
        short: These fields contain information about binary code signatures.
        type: group
      fields:
        digest_algorithm:
          field_details:
            dashed_name: process-code-signature-digest-algorithm
            description: 'The hashing algorithm used to sign the process.

              This value can distinguish signatures when a file is signed multiple
              times by the same signer but with a different digest algorithm.'
            example: sha256
            flat_name: process.code_signature.digest_algorithm
            ignore_above: 1024
            level: extended
            name: digest_algorithm
            node_name: digest_algorithm
            normalize: []
            original_fieldset: code_signature
            short: Hashing algorithm used to sign the process.
            type: keyword
        exists:
          field_details:
            dashed_name: process-code-signature-exists
            description: Boolean to capture if a signature is present.
            example: 'true'
            flat_name: process.code_signature.exists
            level: core
            name: exists
            node_name: exists
            normalize: []
            original_fieldset: code_signature
            short: Boolean to capture if a signature is present.
            type: boolean
        signing_id:
          field_details:
            dashed_name: process-code-signature-signing-id
            description: 'The identifier used to sign the process.

              This is used to identify the application manufactured by a software
              vendor. The field is relevant to Apple *OS only.'
            example: com.apple.xpc.proxy
            flat_name: process.code_signature.signing_id
            ignore_above: 1024
            level: extended
            name: signing_id
            node_name: signing_id
            normalize: []
            original_fieldset: code_signature
            short: The identifier used to sign the process.
            type: keyword
        status:
          field_details:
            dashed_name: process-code-signature-status
            description: 'Additional information about the certificate status.

              This is useful for logging cryptographic errors with the certificate
              validity or trust status. Leave unpopulated if the validity or trust
              of the certificate was unchecked.'
            example: ERROR_UNTRUSTED_ROOT
            flat_name: process.code_signature.status
            ignore_above: 1024
            level: extended
            name: status
            node_name: status
            normalize: []
            original_fieldset: code_signature
            short: Additional information about the certificate status.
            type: keyword
        subject_name:
          field_details:
            dashed_name: process-code-signature-subject-name
            description: Subject name of the code signer
            example: Microsoft Corporation
            flat_name: process.code_signature.subject_name
            ignore_above: 1024
            level: core
            name: subject_name
            node_name: subject_name
            normalize: []
            original_fieldset: code_signature
            short: Subject name of the code signer
            type: keyword
        team_id:
          field_details:
            dashed_name: process-code-signature-team-id
            description: 'The team identifier used to sign the process.

              This is used to identify the team or vendor of a software product. The
              field is relevant to Apple *OS only.'
            example: EQHXZ8M8AV
            flat_name: process.code_signature.team_id
            ignore_above: 1024
            level: extended
            name: team_id
            node_name: team_id
            normalize: []
            original_fieldset: code_signature
            short: The team identifier used to sign the process.
            type: keyword
        timestamp:
          field_details:
            dashed_name: process-code-signature-timestamp
            description: Date and time when the code signature was generated and signed.
            example: '2021-01-01T12:10:30Z'
            flat_name: process.code_signature.timestamp
            level: extended
            name: timestamp
            node_name: timestamp
            normalize: []
            original_fieldset: code_signature
            short: When the signature was generated and signed.
            type: date
        trusted:
          field_details:
            dashed_name: process-code-signature-trusted
            description: 'Stores the trust status of the certificate chain.

              Validating the trust of the certificate chain may be complicated, and
              this field should only be populated by tools that actively check the
              status.'
            example: 'true'
            flat_name: process.code_signature.trusted
            level: extended
            name: trusted
            node_name: trusted
            normalize: []
            original_fieldset: code_signature
            short: Stores the trust status of the certificate chain.
            type: boolean
        valid:
          field_details:
            dashed_name: process-code-signature-valid
            description: 'Boolean to capture if the digital signature is verified
              against the binary content.

              Leave unpopulated if a certificate was unchecked.'
            example: 'true'
            flat_name: process.code_signature.valid
            level: extended
            name: valid
            node_name: valid
            normalize: []
            original_fieldset: code_signature
            short: Boolean to capture if the digital signature is verified against
              the binary content.
            type: boolean
    command_line:
      field_details:
        dashed_name: process-command-line
        description: 'Full command line that started the process, including the absolute
          path to the executable, and all arguments.

          Some arguments may be filtered to protect sensitive information.'
        example: /usr/bin/ssh -l user 10.0.0.16
        flat_name: process.command_line
        level: extended
        multi_fields:
        - flat_name: process.command_line.text
          name: text
          type: match_only_text
        name: command_line
        node_name: command_line
        normalize: []
        short: Full command line that started the process.
        type: wildcard
    elf:
      field_details:
        beta: These fields are in beta and are subject to change.
        dashed_name: process-elf
        description: These fields contain Linux Executable Linkable Format (ELF) metadata.
        flat_name: process.elf
        intermediate: true
        name: elf
        node_name: elf
        original_fieldset: elf
        short: These fields contain Linux Executable Linkable Format (ELF) metadata.
        type: group
      fields:
        architecture:
          field_details:
            dashed_name: process-elf-architecture
            description: Machine architecture of the ELF file.
            example: x86-64
            flat_name: process.elf.architecture
            ignore_above: 1024
            level: extended
            name: architecture
            node_name: architecture
            normalize: []
            original_fieldset: elf
            short: Machine architecture of the ELF file.
            type: keyword
        byte_order:
          field_details:
            dashed_name: process-elf-byte-order
            description: Byte sequence of ELF file.
            example: Little Endian
            flat_name: process.elf.byte_order
            ignore_above: 1024
            level: extended
            name: byte_order
            node_name: byte_order
            normalize: []
            original_fieldset: elf
            short: Byte sequence of ELF file.
            type: keyword
        cpu_type:
          field_details:
            dashed_name: process-elf-cpu-type
            description: CPU type of the ELF file.
            example: Intel
            flat_name: process.elf.cpu_type
            ignore_above: 1024
            level: extended
            name: cpu_type
            node_name: cpu_type
            normalize: []
            original_fieldset: elf
            short: CPU type of the ELF file.
            type: keyword
        creation_date:
          field_details:
            dashed_name: process-elf-creation-date
            description: Extracted when possible from the file's metadata. Indicates
              when it was built or compiled. It can also be faked by malware creators.
            flat_name: process.elf.creation_date
            level: extended
            name: creation_date
            node_name: creation_date
            normalize: []
            original_fieldset: elf
            short: Build or compile date.
            type: date
        exports:
          field_details:
            dashed_name: process-elf-exports
            description: List of exported element names and types.
            flat_name: process.elf.exports
            level: extended
            name: exports
            node_name: exports
            normalize:
            - array
            original_fieldset: elf
            short: List of exported element names and types.
            type: flattened
        go_import_hash:
          field_details:
            dashed_name: process-elf-go-import-hash
            description: 'A hash of the Go language imports in an ELF file excluding
              standard library imports. An import hash can be used to fingerprint
              binaries even after recompilation or other code-level transformations
              have occurred, which would change more traditional hash values.

              The algorithm used to calculate the Go symbol hash and a reference implementation
              are available [here](https://github.com/elastic/toutoumomoma).'
            example: 10bddcb4cee42080f76c88d9ff964491
            flat_name: process.elf.go_import_hash
            ignore_above: 1024
            level: extended
            name: go_import_hash
            node_name: go_import_hash
            normalize: []
            original_fieldset: elf
            short: A hash of the Go language imports in an ELF file.
            type: keyword
        go_imports:
          field_details:
            dashed_name: process-elf-go-imports
            description: List of imported Go language element names and types.
            flat_name: process.elf.go_imports
            level: extended
            name: go_imports
            node_name: go_imports
            normalize: []
            original_fieldset: elf
            short: List of imported Go language element names and types.
            type: flattened
        go_imports_names_entropy:
          field_details:
            dashed_name: process-elf-go-imports-names-entropy
            description: Shannon entropy calculation from the list of Go imports.
            flat_name: process.elf.go_imports_names_entropy
            format: number
            level: extended
            name: go_imports_names_entropy
            node_name: go_imports_names_entropy
            normalize: []
            original_fieldset: elf
            short: Shannon entropy calculation from the list of Go imports.
            type: long
        go_imports_names_var_entropy:
          field_details:
            dashed_name: process-elf-go-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              Go imports.
            flat_name: process.elf.go_imports_names_var_entropy
            format: number
            level: extended
            name: go_imports_names_var_entropy
            node_name: go_imports_names_var_entropy
            normalize: []
            original_fieldset: elf
            short: Variance for Shannon entropy calculation from the list of Go imports.
            type: long
        go_stripped:
          field_details:
            dashed_name: process-elf-go-stripped
            description: Set to true if the file is a Go executable that has had its
              symbols stripped or obfuscated and false if an unobfuscated Go executable.
            flat_name: process.elf.go_stripped
            level: extended
            name: go_stripped
            node_name: go_stripped
            normalize: []
            original_fieldset: elf
            short: Whether the file is a stripped or obfuscated Go executable.
            type: boolean
        header:
          field_details:
            dashed_name: process-elf-header
            flat_name: process.elf.header
            intermediate: true
            name: header
            node_name: header
            original_fieldset: elf
            type: object
          fields:
            abi_version:
              field_details:
                dashed_name: process-elf-header-abi-version
                description: Version of the ELF Application Binary Interface (ABI).
                flat_name: process.elf.header.abi_version
                ignore_above: 1024
                level: extended
                name: header.abi_version
                node_name: abi_version
                normalize: []
                original_fieldset: elf
                short: Version of the ELF Application Binary Interface (ABI).
                type: keyword
            class:
              field_details:
                dashed_name: process-elf-header-class
                description: Header class of the ELF file.
                flat_name: process.elf.header.class
                ignore_above: 1024
                level: extended
                name: header.class
                node_name: class
                normalize: []
                original_fieldset: elf
                short: Header class of the ELF file.
                type: keyword
            data:
              field_details:
                dashed_name: process-elf-header-data
                description: Data table of the ELF header.
                flat_name: process.elf.header.data
                ignore_above: 1024
                level: extended
                name: header.data
                node_name: data
                normalize: []
                original_fieldset: elf
                short: Data table of the ELF header.
                type: keyword
            entrypoint:
              field_details:
                dashed_name: process-elf-header-entrypoint
                description: Header entrypoint of the ELF file.
                flat_name: process.elf.header.entrypoint
                format: string
                level: extended
                name: header.entrypoint
                node_name: entrypoint
                normalize: []
                original_fieldset: elf
                short: Header entrypoint of the ELF file.
                type: long
            object_version:
              field_details:
                dashed_name: process-elf-header-object-version
                description: '"0x1" for original ELF files.'
                flat_name: process.elf.header.object_version
                ignore_above: 1024
                level: extended
                name: header.object_version
                node_name: object_version
                normalize: []
                original_fieldset: elf
                short: '"0x1" for original ELF files.'
                type: keyword
            os_abi:
              field_details:
                dashed_name: process-elf-header-os-abi
                description: Application Binary Interface (ABI) of the Linux OS.
                flat_name: process.elf.header.os_abi
                ignore_above: 1024
                level: extended
                name: header.os_abi
                node_name: os_abi
                normalize: []
                original_fieldset: elf
                short: Application Binary Interface (ABI) of the Linux OS.
                type: keyword
            type:
              field_details:
                dashed_name: process-elf-header-type
                description: Header type of the ELF file.
                flat_name: process.elf.header.type
                ignore_above: 1024
                level: extended
                name: header.type
                node_name: type
                normalize: []
                original_fieldset: elf
                short: Header type of the ELF file.
                type: keyword
            version:
              field_details:
                dashed_name: process-elf-header-version
                description: Version of the ELF header.
                flat_name: process.elf.header.version
                ignore_above: 1024
                level: extended
                name: header.version
                node_name: version
                normalize: []
                original_fieldset: elf
                short: Version of the ELF header.
                type: keyword
        import_hash:
          field_details:
            dashed_name: process-elf-import-hash
            description: 'A hash of the imports in an ELF file. An import hash can
              be used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is an ELF implementation of the Windows PE imphash.'
            example: d41d8cd98f00b204e9800998ecf8427e
            flat_name: process.elf.import_hash
            ignore_above: 1024
            level: extended
            name: import_hash
            node_name: import_hash
            normalize: []
            original_fieldset: elf
            short: A hash of the imports in an ELF file.
            type: keyword
        imports:
          field_details:
            dashed_name: process-elf-imports
            description: List of imported element names and types.
            flat_name: process.elf.imports
            level: extended
            name: imports
            node_name: imports
            normalize:
            - array
            original_fieldset: elf
            short: List of imported element names and types.
            type: flattened
        imports_names_entropy:
          field_details:
            dashed_name: process-elf-imports-names-entropy
            description: Shannon entropy calculation from the list of imported element
              names and types.
            flat_name: process.elf.imports_names_entropy
            format: number
            level: extended
            name: imports_names_entropy
            node_name: imports_names_entropy
            normalize: []
            original_fieldset: elf
            short: Shannon entropy calculation from the list of imported element names
              and types.
            type: long
        imports_names_var_entropy:
          field_details:
            dashed_name: process-elf-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              imported element names and types.
            flat_name: process.elf.imports_names_var_entropy
            format: number
            level: extended
            name: imports_names_var_entropy
            node_name: imports_names_var_entropy
            normalize: []
            original_fieldset: elf
            short: Variance for Shannon entropy calculation from the list of imported
              element names and types.
            type: long
        sections:
          field_details:
            dashed_name: process-elf-sections
            description: 'An array containing an object for each section of the ELF
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `elf.sections.*`.'
            flat_name: process.elf.sections
            intermediate: false
            level: extended
            name: sections
            node_name: sections
            normalize:
            - array
            original_fieldset: elf
            short: Section information of the ELF file.
            type: nested
          fields:
            chi2:
              field_details:
                dashed_name: process-elf-sections-chi2
                description: Chi-square probability distribution of the section.
                flat_name: process.elf.sections.chi2
                format: number
                level: extended
                name: sections.chi2
                node_name: chi2
                normalize: []
                original_fieldset: elf
                short: Chi-square probability distribution of the section.
                type: long
            entropy:
              field_details:
                dashed_name: process-elf-sections-entropy
                description: Shannon entropy calculation from the section.
                flat_name: process.elf.sections.entropy
                format: number
                level: extended
                name: sections.entropy
                node_name: entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the section.
                type: long
            flags:
              field_details:
                dashed_name: process-elf-sections-flags
                description: ELF Section List flags.
                flat_name: process.elf.sections.flags
                ignore_above: 1024
                level: extended
                name: sections.flags
                node_name: flags
                normalize: []
                original_fieldset: elf
                short: ELF Section List flags.
                type: keyword
            name:
              field_details:
                dashed_name: process-elf-sections-name
                description: ELF Section List name.
                flat_name: process.elf.sections.name
                ignore_above: 1024
                level: extended
                name: sections.name
                node_name: name
                normalize: []
                original_fieldset: elf
                short: ELF Section List name.
                type: keyword
            physical_offset:
              field_details:
                dashed_name: process-elf-sections-physical-offset
                description: ELF Section List offset.
                flat_name: process.elf.sections.physical_offset
                ignore_above: 1024
                level: extended
                name: sections.physical_offset
                node_name: physical_offset
                normalize: []
                original_fieldset: elf
                short: ELF Section List offset.
                type: keyword
            physical_size:
              field_details:
                dashed_name: process-elf-sections-physical-size
                description: ELF Section List physical size.
                flat_name: process.elf.sections.physical_size
                format: bytes
                level: extended
                name: sections.physical_size
                node_name: physical_size
                normalize: []
                original_fieldset: elf
                short: ELF Section List physical size.
                type: long
            type:
              field_details:
                dashed_name: process-elf-sections-type
                description: ELF Section List type.
                flat_name: process.elf.sections.type
                ignore_above: 1024
                level: extended
                name: sections.type
                node_name: type
                normalize: []
                original_fieldset: elf
                short: ELF Section List type.
                type: keyword
            var_entropy:
              field_details:
                dashed_name: process-elf-sections-var-entropy
                description: Variance for Shannon entropy calculation from the section.
                flat_name: process.elf.sections.var_entropy
                format: number
                level: extended
                name: sections.var_entropy
                node_name: var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the section.
                type: long
            virtual_address:
              field_details:
                dashed_name: process-elf-sections-virtual-address
                description: ELF Section List virtual address.
                flat_name: process.elf.sections.virtual_address
                format: string
                level: extended
                name: sections.virtual_address
                node_name: virtual_address
                normalize: []
                original_fieldset: elf
                short: ELF Section List virtual address.
                type: long
            virtual_size:
              field_details:
                dashed_name: process-elf-sections-virtual-size
                description: ELF Section List virtual size.
                flat_name: process.elf.sections.virtual_size
                format: string
                level: extended
                name: sections.virtual_size
                node_name: virtual_size
                normalize: []
                original_fieldset: elf
                short: ELF Section List virtual size.
                type: long
        segments:
          field_details:
            dashed_name: process-elf-segments
            description: 'An array containing an object for each segment of the ELF
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `elf.segments.*`.'
            flat_name: process.elf.segments
            intermediate: false
            level: extended
            name: segments
            node_name: segments
            normalize:
            - array
            original_fieldset: elf
            short: ELF object segment list.
            type: nested
          fields:
            sections:
              field_details:
                dashed_name: process-elf-segments-sections
                description: ELF object segment sections.
                flat_name: process.elf.segments.sections
                ignore_above: 1024
                level: extended
                name: segments.sections
                node_name: sections
                normalize: []
                original_fieldset: elf
                short: ELF object segment sections.
                type: keyword
            type:
              field_details:
                dashed_name: process-elf-segments-type
                description: ELF object segment type.
                flat_name: process.elf.segments.type
                ignore_above: 1024
                level: extended
                name: segments.type
                node_name: type
                normalize: []
                original_fieldset: elf
                short: ELF object segment type.
                type: keyword
        shared_libraries:
          field_details:
            dashed_name: process-elf-shared-libraries
            description: List of shared libraries used by this ELF object.
            flat_name: process.elf.shared_libraries
            ignore_above: 1024
            level: extended
            name: shared_libraries
            node_name: shared_libraries
            normalize:
            - array
            original_fieldset: elf
            short: List of shared libraries used by this ELF object.
            type: keyword
        telfhash:
          field_details:
            dashed_name: process-elf-telfhash
            description: telfhash symbol hash for ELF file.
            flat_name: process.elf.telfhash
            ignore_above: 1024
            level: extended
            name: telfhash
            node_name: telfhash
            normalize: []
            original_fieldset: elf
            short: telfhash hash for ELF file.
            type: keyword
    end:
      field_details:
        dashed_name: process-end
        description: The time the process ended.
        example: '2016-05-23T08:05:34.853Z'
        flat_name: process.end
        level: extended
        name: end
        node_name: end
        normalize: []
        short: The time the process ended.
        type: date
    entity_id:
      field_details:
        dashed_name: process-entity-id
        description: 'Unique identifier for the process.

          The implementation of this is specified by the data source, but some examples
          of what could be used here are a process-generated UUID, Sysmon Process
          GUIDs, or a hash of some uniquely identifying components of a process.

          Constructing a globally unique identifier is a common practice to mitigate
          PID reuse as well as to identify a specific process over time, across multiple
          monitored hosts.'
        example: c2c455d9f99375d
        flat_name: process.entity_id
        ignore_above: 1024
        level: extended
        name: entity_id
        node_name: entity_id
        normalize: []
        short: Unique identifier for the process.
        type: keyword
    entry_leader:
      field_details:
        dashed_name: process-process
        description: 'These fields contain information about a process.

          These fields can help you correlate metrics information with a process id/name
          from a log message.  The `process.pid` often stays in the metric itself
          and is copied to the global field for correlation.'
        flat_name: process.process
        intermediate: true
        name: entry_leader
        node_name: process
        original_fieldset: process
        short: These fields contain information about a process.
        type: group
      fields:
        args:
          field_details:
            dashed_name: process-entry-leader-args
            description: 'Array of process arguments, starting with the absolute path
              to the executable.

              May be filtered to protect sensitive information.'
            example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
            flat_name: process.entry_leader.args
            ignore_above: 1024
            level: extended
            name: args
            node_name: args
            normalize:
            - array
            original_fieldset: process
            short: Array of process arguments.
            type: keyword
        args_count:
          field_details:
            dashed_name: process-entry-leader-args-count
            description: 'Length of the process.args array.

              This field can be useful for querying or performing bucket analysis
              on how many arguments were provided to start a process. More arguments
              may be an indication of suspicious activity.'
            example: 4
            flat_name: process.entry_leader.args_count
            level: extended
            name: args_count
            node_name: args_count
            normalize: []
            original_fieldset: process
            short: Length of the process.args array.
            type: long
        attested_groups:
          field_details:
            dashed_name: process-entry-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.entry_leader.group
            intermediate: true
            name: attested_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-attested-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.attested_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-attested-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.entry_leader.attested_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-attested-groups-name
                description: Name of the group.
                flat_name: process.entry_leader.attested_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        attested_user:
          field_details:
            dashed_name: process-entry-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.entry_leader.user
            intermediate: true
            name: attested_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-attested-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.attested_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-entry-leader-attested-user-email
                description: User email address.
                flat_name: process.entry_leader.attested_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-entry-leader-attested-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.entry_leader.attested_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.attested_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-entry-leader-attested-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.attested_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.attested_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.attested_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-group-name
                    description: Name of the group.
                    flat_name: process.entry_leader.attested_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-entry-leader-attested-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.entry_leader.attested_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-attested-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.entry_leader.attested_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-attested-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.entry_leader.attested_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.entry_leader.attested_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-entry-leader-attested-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.entry_leader.attested_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.entry_leader.attested_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.entry_leader.attested_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.entry_leader.attested_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.entry_leader.attested_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.entry_leader.attested_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-attested-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.entry_leader.attested_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-entry-leader-attested-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.entry_leader.attested_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        code_signature:
          field_details:
            dashed_name: process-entry-leader-code-signature
            description: These fields contain information about binary code signatures.
            flat_name: process.entry_leader.code_signature
            intermediate: true
            name: code_signature
            node_name: code_signature
            original_fieldset: code_signature
            short: These fields contain information about binary code signatures.
            type: group
          fields:
            digest_algorithm:
              field_details:
                dashed_name: process-entry-leader-code-signature-digest-algorithm
                description: 'The hashing algorithm used to sign the process.

                  This value can distinguish signatures when a file is signed multiple
                  times by the same signer but with a different digest algorithm.'
                example: sha256
                flat_name: process.entry_leader.code_signature.digest_algorithm
                ignore_above: 1024
                level: extended
                name: digest_algorithm
                node_name: digest_algorithm
                normalize: []
                original_fieldset: code_signature
                short: Hashing algorithm used to sign the process.
                type: keyword
            exists:
              field_details:
                dashed_name: process-entry-leader-code-signature-exists
                description: Boolean to capture if a signature is present.
                example: 'true'
                flat_name: process.entry_leader.code_signature.exists
                level: core
                name: exists
                node_name: exists
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if a signature is present.
                type: boolean
            signing_id:
              field_details:
                dashed_name: process-entry-leader-code-signature-signing-id
                description: 'The identifier used to sign the process.

                  This is used to identify the application manufactured by a software
                  vendor. The field is relevant to Apple *OS only.'
                example: com.apple.xpc.proxy
                flat_name: process.entry_leader.code_signature.signing_id
                ignore_above: 1024
                level: extended
                name: signing_id
                node_name: signing_id
                normalize: []
                original_fieldset: code_signature
                short: The identifier used to sign the process.
                type: keyword
            status:
              field_details:
                dashed_name: process-entry-leader-code-signature-status
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT
                flat_name: process.entry_leader.code_signature.status
                ignore_above: 1024
                level: extended
                name: status
                node_name: status
                normalize: []
                original_fieldset: code_signature
                short: Additional information about the certificate status.
                type: keyword
            subject_name:
              field_details:
                dashed_name: process-entry-leader-code-signature-subject-name
                description: Subject name of the code signer
                example: Microsoft Corporation
                flat_name: process.entry_leader.code_signature.subject_name
                ignore_above: 1024
                level: core
                name: subject_name
                node_name: subject_name
                normalize: []
                original_fieldset: code_signature
                short: Subject name of the code signer
                type: keyword
            team_id:
              field_details:
                dashed_name: process-entry-leader-code-signature-team-id
                description: 'The team identifier used to sign the process.

                  This is used to identify the team or vendor of a software product.
                  The field is relevant to Apple *OS only.'
                example: EQHXZ8M8AV
                flat_name: process.entry_leader.code_signature.team_id
                ignore_above: 1024
                level: extended
                name: team_id
                node_name: team_id
                normalize: []
                original_fieldset: code_signature
                short: The team identifier used to sign the process.
                type: keyword
            timestamp:
              field_details:
                dashed_name: process-entry-leader-code-signature-timestamp
                description: Date and time when the code signature was generated and
                  signed.
                example: '2021-01-01T12:10:30Z'
                flat_name: process.entry_leader.code_signature.timestamp
                level: extended
                name: timestamp
                node_name: timestamp
                normalize: []
                original_fieldset: code_signature
                short: When the signature was generated and signed.
                type: date
            trusted:
              field_details:
                dashed_name: process-entry-leader-code-signature-trusted
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'
                flat_name: process.entry_leader.code_signature.trusted
                level: extended
                name: trusted
                node_name: trusted
                normalize: []
                original_fieldset: code_signature
                short: Stores the trust status of the certificate chain.
                type: boolean
            valid:
              field_details:
                dashed_name: process-entry-leader-code-signature-valid
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'
                flat_name: process.entry_leader.code_signature.valid
                level: extended
                name: valid
                node_name: valid
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if the digital signature is verified against
                  the binary content.
                type: boolean
        command_line:
          field_details:
            dashed_name: process-entry-leader-command-line
            description: 'Full command line that started the process, including the
              absolute path to the executable, and all arguments.

              Some arguments may be filtered to protect sensitive information.'
            example: /usr/bin/ssh -l user 10.0.0.16
            flat_name: process.entry_leader.command_line
            level: extended
            multi_fields:
            - flat_name: process.entry_leader.command_line.text
              name: text
              type: match_only_text
            name: command_line
            node_name: command_line
            normalize: []
            original_fieldset: process
            short: Full command line that started the process.
            type: wildcard
        elf:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-entry-leader-elf
            description: These fields contain Linux Executable Linkable Format (ELF)
              metadata.
            flat_name: process.entry_leader.elf
            intermediate: true
            name: elf
            node_name: elf
            original_fieldset: elf
            short: These fields contain Linux Executable Linkable Format (ELF) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-entry-leader-elf-architecture
                description: Machine architecture of the ELF file.
                example: x86-64
                flat_name: process.entry_leader.elf.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: elf
                short: Machine architecture of the ELF file.
                type: keyword
            byte_order:
              field_details:
                dashed_name: process-entry-leader-elf-byte-order
                description: Byte sequence of ELF file.
                example: Little Endian
                flat_name: process.entry_leader.elf.byte_order
                ignore_above: 1024
                level: extended
                name: byte_order
                node_name: byte_order
                normalize: []
                original_fieldset: elf
                short: Byte sequence of ELF file.
                type: keyword
            cpu_type:
              field_details:
                dashed_name: process-entry-leader-elf-cpu-type
                description: CPU type of the ELF file.
                example: Intel
                flat_name: process.entry_leader.elf.cpu_type
                ignore_above: 1024
                level: extended
                name: cpu_type
                node_name: cpu_type
                normalize: []
                original_fieldset: elf
                short: CPU type of the ELF file.
                type: keyword
            creation_date:
              field_details:
                dashed_name: process-entry-leader-elf-creation-date
                description: Extracted when possible from the file's metadata. Indicates
                  when it was built or compiled. It can also be faked by malware creators.
                flat_name: process.entry_leader.elf.creation_date
                level: extended
                name: creation_date
                node_name: creation_date
                normalize: []
                original_fieldset: elf
                short: Build or compile date.
                type: date
            exports:
              field_details:
                dashed_name: process-entry-leader-elf-exports
                description: List of exported element names and types.
                flat_name: process.entry_leader.elf.exports
                level: extended
                name: exports
                node_name: exports
                normalize:
                - array
                original_fieldset: elf
                short: List of exported element names and types.
                type: flattened
            go_import_hash:
              field_details:
                dashed_name: process-entry-leader-elf-go-import-hash
                description: 'A hash of the Go language imports in an ELF file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.entry_leader.elf.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the Go language imports in an ELF file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-entry-leader-elf-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.entry_leader.elf.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: elf
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-entry-leader-elf-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.entry_leader.elf.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-entry-leader-elf-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.entry_leader.elf.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-entry-leader-elf-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.entry_leader.elf.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: elf
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            header:
              field_details:
                dashed_name: process-entry-leader-elf-header
                flat_name: process.entry_leader.elf.header
                intermediate: true
                name: header
                node_name: header
                original_fieldset: elf
                type: object
              fields:
                abi_version:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-abi-version
                    description: Version of the ELF Application Binary Interface (ABI).
                    flat_name: process.entry_leader.elf.header.abi_version
                    ignore_above: 1024
                    level: extended
                    name: header.abi_version
                    node_name: abi_version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF Application Binary Interface (ABI).
                    type: keyword
                class:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-class
                    description: Header class of the ELF file.
                    flat_name: process.entry_leader.elf.header.class
                    ignore_above: 1024
                    level: extended
                    name: header.class
                    node_name: class
                    normalize: []
                    original_fieldset: elf
                    short: Header class of the ELF file.
                    type: keyword
                data:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-data
                    description: Data table of the ELF header.
                    flat_name: process.entry_leader.elf.header.data
                    ignore_above: 1024
                    level: extended
                    name: header.data
                    node_name: data
                    normalize: []
                    original_fieldset: elf
                    short: Data table of the ELF header.
                    type: keyword
                entrypoint:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-entrypoint
                    description: Header entrypoint of the ELF file.
                    flat_name: process.entry_leader.elf.header.entrypoint
                    format: string
                    level: extended
                    name: header.entrypoint
                    node_name: entrypoint
                    normalize: []
                    original_fieldset: elf
                    short: Header entrypoint of the ELF file.
                    type: long
                object_version:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-object-version
                    description: '"0x1" for original ELF files.'
                    flat_name: process.entry_leader.elf.header.object_version
                    ignore_above: 1024
                    level: extended
                    name: header.object_version
                    node_name: object_version
                    normalize: []
                    original_fieldset: elf
                    short: '"0x1" for original ELF files.'
                    type: keyword
                os_abi:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-os-abi
                    description: Application Binary Interface (ABI) of the Linux OS.
                    flat_name: process.entry_leader.elf.header.os_abi
                    ignore_above: 1024
                    level: extended
                    name: header.os_abi
                    node_name: os_abi
                    normalize: []
                    original_fieldset: elf
                    short: Application Binary Interface (ABI) of the Linux OS.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-type
                    description: Header type of the ELF file.
                    flat_name: process.entry_leader.elf.header.type
                    ignore_above: 1024
                    level: extended
                    name: header.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: Header type of the ELF file.
                    type: keyword
                version:
                  field_details:
                    dashed_name: process-entry-leader-elf-header-version
                    description: Version of the ELF header.
                    flat_name: process.entry_leader.elf.header.version
                    ignore_above: 1024
                    level: extended
                    name: header.version
                    node_name: version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF header.
                    type: keyword
            import_hash:
              field_details:
                dashed_name: process-entry-leader-elf-import-hash
                description: 'A hash of the imports in an ELF file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is an ELF implementation of the Windows PE imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.entry_leader.elf.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the imports in an ELF file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-entry-leader-elf-imports
                description: List of imported element names and types.
                flat_name: process.entry_leader.elf.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: elf
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-entry-leader-elf-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.entry_leader.elf.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-entry-leader-elf-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.entry_leader.elf.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-entry-leader-elf-sections
                description: 'An array containing an object for each section of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.sections.*`.'
                flat_name: process.entry_leader.elf.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: elf
                short: Section information of the ELF file.
                type: nested
              fields:
                chi2:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-chi2
                    description: Chi-square probability distribution of the section.
                    flat_name: process.entry_leader.elf.sections.chi2
                    format: number
                    level: extended
                    name: sections.chi2
                    node_name: chi2
                    normalize: []
                    original_fieldset: elf
                    short: Chi-square probability distribution of the section.
                    type: long
                entropy:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.entry_leader.elf.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the section.
                    type: long
                flags:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-flags
                    description: ELF Section List flags.
                    flat_name: process.entry_leader.elf.sections.flags
                    ignore_above: 1024
                    level: extended
                    name: sections.flags
                    node_name: flags
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List flags.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-name
                    description: ELF Section List name.
                    flat_name: process.entry_leader.elf.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List name.
                    type: keyword
                physical_offset:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-physical-offset
                    description: ELF Section List offset.
                    flat_name: process.entry_leader.elf.sections.physical_offset
                    ignore_above: 1024
                    level: extended
                    name: sections.physical_offset
                    node_name: physical_offset
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List offset.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-physical-size
                    description: ELF Section List physical size.
                    flat_name: process.entry_leader.elf.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List physical size.
                    type: long
                type:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-type
                    description: ELF Section List type.
                    flat_name: process.entry_leader.elf.sections.type
                    ignore_above: 1024
                    level: extended
                    name: sections.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List type.
                    type: keyword
                var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.entry_leader.elf.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_address:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-virtual-address
                    description: ELF Section List virtual address.
                    flat_name: process.entry_leader.elf.sections.virtual_address
                    format: string
                    level: extended
                    name: sections.virtual_address
                    node_name: virtual_address
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual address.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-entry-leader-elf-sections-virtual-size
                    description: ELF Section List virtual size.
                    flat_name: process.entry_leader.elf.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual size.
                    type: long
            segments:
              field_details:
                dashed_name: process-entry-leader-elf-segments
                description: 'An array containing an object for each segment of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.segments.*`.'
                flat_name: process.entry_leader.elf.segments
                intermediate: false
                level: extended
                name: segments
                node_name: segments
                normalize:
                - array
                original_fieldset: elf
                short: ELF object segment list.
                type: nested
              fields:
                sections:
                  field_details:
                    dashed_name: process-entry-leader-elf-segments-sections
                    description: ELF object segment sections.
                    flat_name: process.entry_leader.elf.segments.sections
                    ignore_above: 1024
                    level: extended
                    name: segments.sections
                    node_name: sections
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment sections.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-entry-leader-elf-segments-type
                    description: ELF object segment type.
                    flat_name: process.entry_leader.elf.segments.type
                    ignore_above: 1024
                    level: extended
                    name: segments.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment type.
                    type: keyword
            shared_libraries:
              field_details:
                dashed_name: process-entry-leader-elf-shared-libraries
                description: List of shared libraries used by this ELF object.
                flat_name: process.entry_leader.elf.shared_libraries
                ignore_above: 1024
                level: extended
                name: shared_libraries
                node_name: shared_libraries
                normalize:
                - array
                original_fieldset: elf
                short: List of shared libraries used by this ELF object.
                type: keyword
            telfhash:
              field_details:
                dashed_name: process-entry-leader-elf-telfhash
                description: telfhash symbol hash for ELF file.
                flat_name: process.entry_leader.elf.telfhash
                ignore_above: 1024
                level: extended
                name: telfhash
                node_name: telfhash
                normalize: []
                original_fieldset: elf
                short: telfhash hash for ELF file.
                type: keyword
        end:
          field_details:
            dashed_name: process-entry-leader-end
            description: The time the process ended.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.entry_leader.end
            level: extended
            name: end
            node_name: end
            normalize: []
            original_fieldset: process
            short: The time the process ended.
            type: date
        entity_id:
          field_details:
            dashed_name: process-entry-leader-entity-id
            description: 'Unique identifier for the process.

              The implementation of this is specified by the data source, but some
              examples of what could be used here are a process-generated UUID, Sysmon
              Process GUIDs, or a hash of some uniquely identifying components of
              a process.

              Constructing a globally unique identifier is a common practice to mitigate
              PID reuse as well as to identify a specific process over time, across
              multiple monitored hosts.'
            example: c2c455d9f99375d
            flat_name: process.entry_leader.entity_id
            ignore_above: 1024
            level: extended
            name: entity_id
            node_name: entity_id
            normalize: []
            original_fieldset: process
            short: Unique identifier for the process.
            type: keyword
        entry_meta:
          field_details:
            dashed_name: process-entry-leader-entry-meta
            flat_name: process.entry_leader.entry_meta
            intermediate: true
            name: entry_meta
            node_name: entry_meta
            original_fieldset: process
            type: object
          fields:
            source:
              field_details:
                dashed_name: process-entry-leader-entry-meta-source
                description: 'Source fields capture details about the sender of a
                  network exchange/packet. These fields are populated from a network
                  event, packet, or other event containing details of a network transaction.

                  Source fields are usually populated in conjunction with destination
                  fields. The source and destination fields are considered the baseline
                  and should always be filled if an event contains source and destination
                  details from a network transaction. If the event also contains identification
                  of the client and server roles, then the client and server fields
                  should also be populated.'
                flat_name: process.entry_leader.entry_meta.source
                intermediate: true
                name: source
                node_name: source
                original_fieldset: source
                short: Fields about the source side of a network connection, used
                  with destination.
                type: group
              fields:
                address:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-address
                    description: 'Some event source addresses are defined ambiguously.
                      The event will sometimes list an IP, a domain or a unix socket.  You
                      should always store the raw address in the `.address` field.

                      Then it should be duplicated to `.ip` or `.domain`, depending
                      on which one it is.'
                    flat_name: process.entry_leader.entry_meta.source.address
                    ignore_above: 1024
                    level: extended
                    name: address
                    node_name: address
                    normalize: []
                    original_fieldset: source
                    short: Source network address.
                    type: keyword
                as:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-as
                    description: An autonomous system (AS) is a collection of connected
                      Internet Protocol (IP) routing prefixes under the control of
                      one or more network operators on behalf of a single administrative
                      entity or domain that presents a common, clearly defined routing
                      policy to the internet.
                    flat_name: process.entry_leader.entry_meta.source.as
                    intermediate: true
                    name: as
                    node_name: as
                    original_fieldset: as
                    short: Fields describing an Autonomous System (Internet routing
                      prefix).
                    type: group
                  fields:
                    number:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-as-number
                        description: Unique number allocated to the autonomous system.
                          The autonomous system number (ASN) uniquely identifies each
                          network on the Internet.
                        example: 15169
                        flat_name: process.entry_leader.entry_meta.source.as.number
                        level: extended
                        name: number
                        node_name: number
                        normalize: []
                        original_fieldset: as
                        short: Unique number allocated to the autonomous system.
                        type: long
                    organization:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-as-organization
                        flat_name: process.entry_leader.entry_meta.source.as.organization
                        intermediate: true
                        name: organization
                        node_name: organization
                        original_fieldset: as
                        type: object
                      fields:
                        name:
                          field_details:
                            dashed_name: process-entry-leader-entry-meta-source-as-organization-name
                            description: Organization name.
                            example: Google LLC
                            flat_name: process.entry_leader.entry_meta.source.as.organization.name
                            ignore_above: 1024
                            level: extended
                            multi_fields:
                            - flat_name: process.entry_leader.entry_meta.source.as.organization.name.text
                              name: text
                              type: match_only_text
                            name: organization.name
                            node_name: name
                            normalize: []
                            original_fieldset: as
                            short: Organization name.
                            type: keyword
                bytes:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-bytes
                    description: Bytes sent from the source to the destination.
                    example: 184
                    flat_name: process.entry_leader.entry_meta.source.bytes
                    format: bytes
                    level: core
                    name: bytes
                    node_name: bytes
                    normalize: []
                    original_fieldset: source
                    short: Bytes sent from the source to the destination.
                    type: long
                domain:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-domain
                    description: 'The domain name of the source system.

                      This value may be a host name, a fully qualified domain name,
                      or another host naming format. The value may derive from the
                      original event or be added from enrichment.'
                    example: foo.example.com
                    flat_name: process.entry_leader.entry_meta.source.domain
                    ignore_above: 1024
                    level: core
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: source
                    short: The domain name of the source.
                    type: keyword
                geo:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-geo
                    description: 'Geo fields can carry data about a specific location
                      related to an event.

                      This geolocation information can be derived from techniques
                      such as Geo IP, or be user-supplied.'
                    flat_name: process.entry_leader.entry_meta.source.geo
                    intermediate: true
                    name: geo
                    node_name: geo
                    original_fieldset: geo
                    short: Fields describing a location.
                    type: group
                  fields:
                    city_name:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-city-name
                        description: City name.
                        example: Montreal
                        flat_name: process.entry_leader.entry_meta.source.geo.city_name
                        ignore_above: 1024
                        level: core
                        name: city_name
                        node_name: city_name
                        normalize: []
                        original_fieldset: geo
                        short: City name.
                        type: keyword
                    continent_code:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-continent-code
                        description: Two-letter code representing continent's name.
                        example: NA
                        flat_name: process.entry_leader.entry_meta.source.geo.continent_code
                        ignore_above: 1024
                        level: core
                        name: continent_code
                        node_name: continent_code
                        normalize: []
                        original_fieldset: geo
                        short: Continent code.
                        type: keyword
                    continent_name:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-continent-name
                        description: Name of the continent.
                        example: North America
                        flat_name: process.entry_leader.entry_meta.source.geo.continent_name
                        ignore_above: 1024
                        level: core
                        name: continent_name
                        node_name: continent_name
                        normalize: []
                        original_fieldset: geo
                        short: Name of the continent.
                        type: keyword
                    country_iso_code:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-country-iso-code
                        description: Country ISO code.
                        example: CA
                        flat_name: process.entry_leader.entry_meta.source.geo.country_iso_code
                        ignore_above: 1024
                        level: core
                        name: country_iso_code
                        node_name: country_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Country ISO code.
                        type: keyword
                    country_name:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-country-name
                        description: Country name.
                        example: Canada
                        flat_name: process.entry_leader.entry_meta.source.geo.country_name
                        ignore_above: 1024
                        level: core
                        name: country_name
                        node_name: country_name
                        normalize: []
                        original_fieldset: geo
                        short: Country name.
                        type: keyword
                    location:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-location
                        description: Longitude and latitude.
                        example: '{ "lon": -73.614830, "lat": 45.505918 }'
                        flat_name: process.entry_leader.entry_meta.source.geo.location
                        level: core
                        name: location
                        node_name: location
                        normalize: []
                        original_fieldset: geo
                        short: Longitude and latitude.
                        type: geo_point
                    name:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-name
                        description: 'User-defined description of a location, at the
                          level of granularity they care about.

                          Could be the name of their data centers, the floor number,
                          if this describes a local physical entity, city names.

                          Not typically used in automated geolocation.'
                        example: boston-dc
                        flat_name: process.entry_leader.entry_meta.source.geo.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: geo
                        short: User-defined description of a location.
                        type: keyword
                    postal_code:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-postal-code
                        description: 'Postal code associated with the location.

                          Values appropriate for this field may also be known as a
                          postcode or ZIP code and will vary widely from country to
                          country.'
                        example: 94040
                        flat_name: process.entry_leader.entry_meta.source.geo.postal_code
                        ignore_above: 1024
                        level: core
                        name: postal_code
                        node_name: postal_code
                        normalize: []
                        original_fieldset: geo
                        short: Postal code.
                        type: keyword
                    region_iso_code:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-region-iso-code
                        description: Region ISO code.
                        example: CA-QC
                        flat_name: process.entry_leader.entry_meta.source.geo.region_iso_code
                        ignore_above: 1024
                        level: core
                        name: region_iso_code
                        node_name: region_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Region ISO code.
                        type: keyword
                    region_name:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-region-name
                        description: Region name.
                        example: Quebec
                        flat_name: process.entry_leader.entry_meta.source.geo.region_name
                        ignore_above: 1024
                        level: core
                        name: region_name
                        node_name: region_name
                        normalize: []
                        original_fieldset: geo
                        short: Region name.
                        type: keyword
                    timezone:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-geo-timezone
                        description: The time zone of the location, such as IANA time
                          zone name.
                        example: America/Argentina/Buenos_Aires
                        flat_name: process.entry_leader.entry_meta.source.geo.timezone
                        ignore_above: 1024
                        level: core
                        name: timezone
                        node_name: timezone
                        normalize: []
                        original_fieldset: geo
                        short: Time zone.
                        type: keyword
                ip:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-ip
                    description: IP address of the source (IPv4 or IPv6).
                    flat_name: process.entry_leader.entry_meta.source.ip
                    level: core
                    name: ip
                    node_name: ip
                    normalize: []
                    original_fieldset: source
                    short: IP address of the source.
                    type: ip
                mac:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-mac
                    description: 'MAC address of the source.

                      The notation format from RFC 7042 is suggested: Each octet (that
                      is, 8-bit byte) is represented by two [uppercase] hexadecimal
                      digits giving the value of the octet as an unsigned integer.
                      Successive octets are separated by a hyphen.'
                    example: 00-00-5E-00-53-23
                    flat_name: process.entry_leader.entry_meta.source.mac
                    ignore_above: 1024
                    level: core
                    name: mac
                    node_name: mac
                    normalize: []
                    original_fieldset: source
                    pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                    short: MAC address of the source.
                    type: keyword
                nat:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-nat
                    flat_name: process.entry_leader.entry_meta.source.nat
                    intermediate: true
                    name: nat
                    node_name: nat
                    original_fieldset: source
                    type: object
                  fields:
                    ip:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-nat-ip
                        description: 'Translated ip of source based NAT sessions (e.g.
                          internal client to internet)

                          Typically connections traversing load balancers, firewalls,
                          or routers.'
                        flat_name: process.entry_leader.entry_meta.source.nat.ip
                        level: extended
                        name: nat.ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: Source NAT ip
                        type: ip
                    port:
                      field_details:
                        dashed_name: process-entry-leader-entry-meta-source-nat-port
                        description: 'Translated port of source based NAT sessions.
                          (e.g. internal client to internet)

                          Typically used with load balancers, firewalls, or routers.'
                        flat_name: process.entry_leader.entry_meta.source.nat.port
                        format: string
                        level: extended
                        name: nat.port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Source NAT port
                        type: long
                packets:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-packets
                    description: Packets sent from the source to the destination.
                    example: 12
                    flat_name: process.entry_leader.entry_meta.source.packets
                    level: core
                    name: packets
                    node_name: packets
                    normalize: []
                    original_fieldset: source
                    short: Packets sent from the source to the destination.
                    type: long
                port:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-port
                    description: Port of the source.
                    flat_name: process.entry_leader.entry_meta.source.port
                    format: string
                    level: core
                    name: port
                    node_name: port
                    normalize: []
                    original_fieldset: source
                    short: Port of the source.
                    type: long
                registered_domain:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-registered-domain
                    description: 'The highest registered source domain, stripped of
                      the subdomain.

                      For example, the registered domain for "foo.example.com" is
                      "example.com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last two labels will not work well
                      for TLDs such as "co.uk".'
                    example: example.com
                    flat_name: process.entry_leader.entry_meta.source.registered_domain
                    ignore_above: 1024
                    level: extended
                    name: registered_domain
                    node_name: registered_domain
                    normalize: []
                    original_fieldset: source
                    short: The highest registered source domain, stripped of the subdomain.
                    type: keyword
                subdomain:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-subdomain
                    description: 'The subdomain portion of a fully qualified domain
                      name includes all of the names except the host name under the
                      registered_domain.  In a partially qualified domain, or if the
                      the qualification level of the full name cannot be determined,
                      subdomain contains all of the names below the registered domain.

                      For example the subdomain portion of "www.east.mydomain.co.uk"
                      is "east". If the domain has multiple levels of subdomain, such
                      as "sub2.sub1.example.com", the subdomain field should contain
                      "sub2.sub1", with no trailing period.'
                    example: east
                    flat_name: process.entry_leader.entry_meta.source.subdomain
                    ignore_above: 1024
                    level: extended
                    name: subdomain
                    node_name: subdomain
                    normalize: []
                    original_fieldset: source
                    short: The subdomain of the domain.
                    type: keyword
                top_level_domain:
                  field_details:
                    dashed_name: process-entry-leader-entry-meta-source-top-level-domain
                    description: 'The effective top level domain (eTLD), also known
                      as the domain suffix, is the last part of the domain name. For
                      example, the top level domain for example.com is "com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last label will not work well for
                      effective TLDs such as "co.uk".'
                    example: co.uk
                    flat_name: process.entry_leader.entry_meta.source.top_level_domain
                    ignore_above: 1024
                    level: extended
                    name: top_level_domain
                    node_name: top_level_domain
                    normalize: []
                    original_fieldset: source
                    short: The effective top level domain (com, org, net, co.uk).
                    type: keyword
            type:
              field_details:
                dashed_name: process-entry-leader-entry-meta-type
                description: 'The entry type for the entry session leader. Values
                  include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                  console

                  Note: This field is only set on process.session_leader.'
                flat_name: process.entry_leader.entry_meta.type
                ignore_above: 1024
                level: extended
                name: entry_meta.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The entry type for the entry session leader.
                type: keyword
        env_vars:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-entry-leader-env-vars
            description: 'Array of environment variable bindings. Captured from a
              snapshot of the environment at the time of execution.

              May be filtered to protect sensitive information.'
            example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
            flat_name: process.entry_leader.env_vars
            ignore_above: 1024
            level: extended
            name: env_vars
            node_name: env_vars
            normalize:
            - array
            original_fieldset: process
            short: Array of environment variable bindings.
            type: keyword
        executable:
          field_details:
            dashed_name: process-entry-leader-executable
            description: Absolute path to the process executable.
            example: /usr/bin/ssh
            flat_name: process.entry_leader.executable
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.entry_leader.executable.text
              name: text
              type: match_only_text
            name: executable
            node_name: executable
            normalize: []
            original_fieldset: process
            short: Absolute path to the process executable.
            type: keyword
        exit_code:
          field_details:
            dashed_name: process-entry-leader-exit-code
            description: 'The exit code of the process, if this is a termination event.

              The field should be absent if there is no exit code for the event (e.g.
              process start).'
            example: 137
            flat_name: process.entry_leader.exit_code
            level: extended
            name: exit_code
            node_name: exit_code
            normalize: []
            original_fieldset: process
            short: The exit code of the process.
            type: long
        group:
          field_details:
            dashed_name: process-entry-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.entry_leader.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.entry_leader.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-group-name
                description: Name of the group.
                flat_name: process.entry_leader.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-entry-leader-hash
            description: 'The hash fields represent different bitwise hash algorithms
              and their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).

              Note that this fieldset is used for common hashes that may be computed
              over a range of generic bytes. Entity-specific hashes such as ja3 or
              imphash are placed in the fieldsets to which they relate (tls and pe,
              respectively).'
            flat_name: process.entry_leader.hash
            intermediate: true
            name: hash
            node_name: hash
            original_fieldset: hash
            short: Hashes, usually file hashes.
            type: group
          fields:
            md5:
              field_details:
                dashed_name: process-entry-leader-hash-md5
                description: MD5 hash.
                flat_name: process.entry_leader.hash.md5
                ignore_above: 1024
                level: extended
                name: md5
                node_name: md5
                normalize: []
                original_fieldset: hash
                short: MD5 hash.
                type: keyword
            sha1:
              field_details:
                dashed_name: process-entry-leader-hash-sha1
                description: SHA1 hash.
                flat_name: process.entry_leader.hash.sha1
                ignore_above: 1024
                level: extended
                name: sha1
                node_name: sha1
                normalize: []
                original_fieldset: hash
                short: SHA1 hash.
                type: keyword
            sha256:
              field_details:
                dashed_name: process-entry-leader-hash-sha256
                description: SHA256 hash.
                flat_name: process.entry_leader.hash.sha256
                ignore_above: 1024
                level: extended
                name: sha256
                node_name: sha256
                normalize: []
                original_fieldset: hash
                short: SHA256 hash.
                type: keyword
            sha384:
              field_details:
                dashed_name: process-entry-leader-hash-sha384
                description: SHA384 hash.
                flat_name: process.entry_leader.hash.sha384
                ignore_above: 1024
                level: extended
                name: sha384
                node_name: sha384
                normalize: []
                original_fieldset: hash
                short: SHA384 hash.
                type: keyword
            sha512:
              field_details:
                dashed_name: process-entry-leader-hash-sha512
                description: SHA512 hash.
                flat_name: process.entry_leader.hash.sha512
                ignore_above: 1024
                level: extended
                name: sha512
                node_name: sha512
                normalize: []
                original_fieldset: hash
                short: SHA512 hash.
                type: keyword
            ssdeep:
              field_details:
                dashed_name: process-entry-leader-hash-ssdeep
                description: SSDEEP hash.
                flat_name: process.entry_leader.hash.ssdeep
                ignore_above: 1024
                level: extended
                name: ssdeep
                node_name: ssdeep
                normalize: []
                original_fieldset: hash
                short: SSDEEP hash.
                type: keyword
            tlsh:
              field_details:
                dashed_name: process-entry-leader-hash-tlsh
                description: TLSH hash.
                flat_name: process.entry_leader.hash.tlsh
                ignore_above: 1024
                level: extended
                name: tlsh
                node_name: tlsh
                normalize: []
                original_fieldset: hash
                short: TLSH hash.
                type: keyword
        interactive:
          field_details:
            dashed_name: process-entry-leader-interactive
            description: 'Whether the process is connected to an interactive shell.

              Process interactivity is inferred from the processes file descriptors.
              If the character device for the controlling tty is the same as stdin
              and stderr for the process, the process is considered interactive.

              Note: A non-interactive process can belong to an interactive session
              and is simply one that does not have open file descriptors reading the
              controlling TTY on FD 0 (stdin) or writing to the controlling TTY on
              FD 2 (stderr). A backgrounded process is still considered interactive
              if stdin and stderr are connected to the controlling TTY.'
            example: true
            flat_name: process.entry_leader.interactive
            level: extended
            name: interactive
            node_name: interactive
            normalize: []
            original_fieldset: process
            short: Whether the process is connected to an interactive shell.
            type: boolean
        io:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-entry-leader-io
            description: 'A chunk of input or output (IO) from a single process.

              This field only appears on the top level process object, which is the
              process that wrote the output or read the input.'
            flat_name: process.entry_leader.io
            intermediate: false
            level: extended
            name: io
            node_name: io
            normalize: []
            original_fieldset: process
            short: A chunk of input or output (IO) from a single process.
            type: object
          fields:
            bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-io-bytes-skipped
                description: An array of byte offsets and lengths denoting where IO
                  data has been skipped.
                flat_name: process.entry_leader.io.bytes_skipped
                intermediate: false
                level: extended
                name: io.bytes_skipped
                node_name: bytes_skipped
                normalize:
                - array
                original_fieldset: process
                short: An array of byte offsets and lengths denoting where IO data
                  has been skipped.
                type: object
              fields:
                length:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-io-bytes-skipped-length
                    description: The length of bytes skipped.
                    flat_name: process.entry_leader.io.bytes_skipped.length
                    level: extended
                    name: io.bytes_skipped.length
                    node_name: length
                    normalize: []
                    original_fieldset: process
                    short: The length of bytes skipped.
                    type: long
                offset:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-io-bytes-skipped-offset
                    description: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    flat_name: process.entry_leader.io.bytes_skipped.offset
                    level: extended
                    name: io.bytes_skipped.offset
                    node_name: offset
                    normalize: []
                    original_fieldset: process
                    short: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    type: long
            max_bytes_per_process_exceeded:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-io-max-bytes-per-process-exceeded
                description: If true, the process producing the output has exceeded
                  the max_kilobytes_per_process configuration setting.
                flat_name: process.entry_leader.io.max_bytes_per_process_exceeded
                level: extended
                name: io.max_bytes_per_process_exceeded
                node_name: max_bytes_per_process_exceeded
                normalize: []
                original_fieldset: process
                short: If true, the process producing the output has exceeded the
                  max_kilobytes_per_process configuration setting.
                type: boolean
            text:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-io-text
                description: 'A chunk of output or input sanitized to UTF-8.

                  Best efforts are made to ensure complete lines are captured in these
                  events. Assumptions should NOT be made that multiple lines will
                  appear in the same event. TTY output may contain terminal control
                  codes such as for cursor movement, so some string queries may not
                  match due to terminal codes inserted between characters of a word.'
                flat_name: process.entry_leader.io.text
                level: extended
                name: io.text
                node_name: text
                normalize: []
                original_fieldset: process
                short: A chunk of output or input sanitized to UTF-8.
                type: wildcard
            total_bytes_captured:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-io-total-bytes-captured
                description: The total number of bytes captured in this event.
                flat_name: process.entry_leader.io.total_bytes_captured
                level: extended
                name: io.total_bytes_captured
                node_name: total_bytes_captured
                normalize: []
                original_fieldset: process
                short: The total number of bytes captured in this event.
                type: long
            total_bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-io-total-bytes-skipped
                description: The total number of bytes that were not captured due
                  to implementation restrictions such as buffer size limits. Implementors
                  should strive to ensure this value is always zero
                flat_name: process.entry_leader.io.total_bytes_skipped
                level: extended
                name: io.total_bytes_skipped
                node_name: total_bytes_skipped
                normalize: []
                original_fieldset: process
                short: The total number of bytes that were not captured due to implementation
                  restrictions such as buffer size limits.
                type: long
            type:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-io-type
                description: 'The type of object on which the IO action (read or write)
                  was taken.

                  Currently only ''tty'' is supported. Other types may be added in
                  the future for ''file'' and ''socket'' support.'
                flat_name: process.entry_leader.io.type
                ignore_above: 1024
                level: extended
                name: io.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The type of object on which the IO action (read or write) was
                  taken.
                type: keyword
        macho:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-entry-leader-macho
            description: These fields contain Mac OS Mach Object file format (Mach-O)
              metadata.
            flat_name: process.entry_leader.macho
            intermediate: true
            name: macho
            node_name: macho
            original_fieldset: macho
            short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
            type: group
          fields:
            go_import_hash:
              field_details:
                dashed_name: process-entry-leader-macho-go-import-hash
                description: 'A hash of the Go language imports in a Mach-O file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.entry_leader.macho.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the Go language imports in a Mach-O file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-entry-leader-macho-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.entry_leader.macho.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: macho
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-entry-leader-macho-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.entry_leader.macho.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-entry-leader-macho-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.entry_leader.macho.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-entry-leader-macho-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.entry_leader.macho.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: macho
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            import_hash:
              field_details:
                dashed_name: process-entry-leader-macho-import-hash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a synonym for symhash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.entry_leader.macho.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-entry-leader-macho-imports
                description: List of imported element names and types.
                flat_name: process.entry_leader.macho.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: macho
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-entry-leader-macho-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.entry_leader.macho.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-entry-leader-macho-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.entry_leader.macho.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-entry-leader-macho-sections
                description: 'An array containing an object for each section of the
                  Mach-O file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `macho.sections.*`.'
                flat_name: process.entry_leader.macho.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: macho
                short: Section information of the Mach-O file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-entry-leader-macho-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.entry_leader.macho.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-entry-leader-macho-sections-name
                    description: Mach-O Section List name.
                    flat_name: process.entry_leader.macho.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-entry-leader-macho-sections-physical-size
                    description: Mach-O Section List physical size.
                    flat_name: process.entry_leader.macho.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-macho-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.entry_leader.macho.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-entry-leader-macho-sections-virtual-size
                    description: Mach-O Section List virtual size. This is always
                      the same as `physical_size`.
                    flat_name: process.entry_leader.macho.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List virtual size. This is always the same
                      as `physical_size`.
                    type: long
            symhash:
              field_details:
                dashed_name: process-entry-leader-macho-symhash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a Mach-O implementation of the Windows PE imphash'
                example: d3ccf195b62a9279c3c19af1080497ec
                flat_name: process.entry_leader.macho.symhash
                ignore_above: 1024
                level: extended
                name: symhash
                node_name: symhash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
        name:
          field_details:
            dashed_name: process-entry-leader-name
            description: 'Process name.

              Sometimes called program name or similar.'
            example: ssh
            flat_name: process.entry_leader.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.entry_leader.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: process
            short: Process name.
            type: keyword
        parent:
          field_details:
            dashed_name: process-entry-leader-process
            description: 'These fields contain information about a process.

              These fields can help you correlate metrics information with a process
              id/name from a log message.  The `process.pid` often stays in the metric
              itself and is copied to the global field for correlation.'
            flat_name: process.entry_leader.process
            intermediate: true
            name: parent
            node_name: process
            original_fieldset: process
            short: These fields contain information about a process.
            type: group
          fields:
            args:
              field_details:
                dashed_name: process-entry-leader-parent-args
                description: 'Array of process arguments, starting with the absolute
                  path to the executable.

                  May be filtered to protect sensitive information.'
                example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
                flat_name: process.entry_leader.parent.args
                ignore_above: 1024
                level: extended
                name: args
                node_name: args
                normalize:
                - array
                original_fieldset: process
                short: Array of process arguments.
                type: keyword
            args_count:
              field_details:
                dashed_name: process-entry-leader-parent-args-count
                description: 'Length of the process.args array.

                  This field can be useful for querying or performing bucket analysis
                  on how many arguments were provided to start a process. More arguments
                  may be an indication of suspicious activity.'
                example: 4
                flat_name: process.entry_leader.parent.args_count
                level: extended
                name: args_count
                node_name: args_count
                normalize: []
                original_fieldset: process
                short: Length of the process.args array.
                type: long
            attested_groups:
              field_details:
                dashed_name: process-entry-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.parent.group
                intermediate: true
                name: attested_groups
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-groups-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.attested_groups.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-groups-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.parent.attested_groups.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-groups-name
                    description: Name of the group.
                    flat_name: process.entry_leader.parent.attested_groups.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            attested_user:
              field_details:
                dashed_name: process-entry-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.entry_leader.parent.user
                intermediate: true
                name: attested_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.attested_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-email
                    description: User email address.
                    flat_name: process.entry_leader.parent.attested_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.entry_leader.parent.attested_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.attested_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.attested_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.attested_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.attested_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-group-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.attested_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.entry_leader.parent.attested_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.entry_leader.parent.attested_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.entry_leader.parent.attested_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.entry_leader.parent.attested_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-entry-leader-parent-attested-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.entry_leader.parent.attested_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.entry_leader.parent.attested_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.entry_leader.parent.attested_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.entry_leader.parent.attested_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.entry_leader.parent.attested_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.entry_leader.parent.attested_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-attested-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.entry_leader.parent.attested_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-entry-leader-parent-attested-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.entry_leader.parent.attested_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            code_signature:
              field_details:
                dashed_name: process-entry-leader-parent-code-signature
                description: These fields contain information about binary code signatures.
                flat_name: process.entry_leader.parent.code_signature
                intermediate: true
                name: code_signature
                node_name: code_signature
                original_fieldset: code_signature
                short: These fields contain information about binary code signatures.
                type: group
              fields:
                digest_algorithm:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-digest-algorithm
                    description: 'The hashing algorithm used to sign the process.

                      This value can distinguish signatures when a file is signed
                      multiple times by the same signer but with a different digest
                      algorithm.'
                    example: sha256
                    flat_name: process.entry_leader.parent.code_signature.digest_algorithm
                    ignore_above: 1024
                    level: extended
                    name: digest_algorithm
                    node_name: digest_algorithm
                    normalize: []
                    original_fieldset: code_signature
                    short: Hashing algorithm used to sign the process.
                    type: keyword
                exists:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-exists
                    description: Boolean to capture if a signature is present.
                    example: 'true'
                    flat_name: process.entry_leader.parent.code_signature.exists
                    level: core
                    name: exists
                    node_name: exists
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if a signature is present.
                    type: boolean
                signing_id:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-signing-id
                    description: 'The identifier used to sign the process.

                      This is used to identify the application manufactured by a software
                      vendor. The field is relevant to Apple *OS only.'
                    example: com.apple.xpc.proxy
                    flat_name: process.entry_leader.parent.code_signature.signing_id
                    ignore_above: 1024
                    level: extended
                    name: signing_id
                    node_name: signing_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The identifier used to sign the process.
                    type: keyword
                status:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-status
                    description: 'Additional information about the certificate status.

                      This is useful for logging cryptographic errors with the certificate
                      validity or trust status. Leave unpopulated if the validity
                      or trust of the certificate was unchecked.'
                    example: ERROR_UNTRUSTED_ROOT
                    flat_name: process.entry_leader.parent.code_signature.status
                    ignore_above: 1024
                    level: extended
                    name: status
                    node_name: status
                    normalize: []
                    original_fieldset: code_signature
                    short: Additional information about the certificate status.
                    type: keyword
                subject_name:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-subject-name
                    description: Subject name of the code signer
                    example: Microsoft Corporation
                    flat_name: process.entry_leader.parent.code_signature.subject_name
                    ignore_above: 1024
                    level: core
                    name: subject_name
                    node_name: subject_name
                    normalize: []
                    original_fieldset: code_signature
                    short: Subject name of the code signer
                    type: keyword
                team_id:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-team-id
                    description: 'The team identifier used to sign the process.

                      This is used to identify the team or vendor of a software product.
                      The field is relevant to Apple *OS only.'
                    example: EQHXZ8M8AV
                    flat_name: process.entry_leader.parent.code_signature.team_id
                    ignore_above: 1024
                    level: extended
                    name: team_id
                    node_name: team_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The team identifier used to sign the process.
                    type: keyword
                timestamp:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-timestamp
                    description: Date and time when the code signature was generated
                      and signed.
                    example: '2021-01-01T12:10:30Z'
                    flat_name: process.entry_leader.parent.code_signature.timestamp
                    level: extended
                    name: timestamp
                    node_name: timestamp
                    normalize: []
                    original_fieldset: code_signature
                    short: When the signature was generated and signed.
                    type: date
                trusted:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-trusted
                    description: 'Stores the trust status of the certificate chain.

                      Validating the trust of the certificate chain may be complicated,
                      and this field should only be populated by tools that actively
                      check the status.'
                    example: 'true'
                    flat_name: process.entry_leader.parent.code_signature.trusted
                    level: extended
                    name: trusted
                    node_name: trusted
                    normalize: []
                    original_fieldset: code_signature
                    short: Stores the trust status of the certificate chain.
                    type: boolean
                valid:
                  field_details:
                    dashed_name: process-entry-leader-parent-code-signature-valid
                    description: 'Boolean to capture if the digital signature is verified
                      against the binary content.

                      Leave unpopulated if a certificate was unchecked.'
                    example: 'true'
                    flat_name: process.entry_leader.parent.code_signature.valid
                    level: extended
                    name: valid
                    node_name: valid
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if the digital signature is verified
                      against the binary content.
                    type: boolean
            command_line:
              field_details:
                dashed_name: process-entry-leader-parent-command-line
                description: 'Full command line that started the process, including
                  the absolute path to the executable, and all arguments.

                  Some arguments may be filtered to protect sensitive information.'
                example: /usr/bin/ssh -l user 10.0.0.16
                flat_name: process.entry_leader.parent.command_line
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.parent.command_line.text
                  name: text
                  type: match_only_text
                name: command_line
                node_name: command_line
                normalize: []
                original_fieldset: process
                short: Full command line that started the process.
                type: wildcard
            elf:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-entry-leader-parent-elf
                description: These fields contain Linux Executable Linkable Format
                  (ELF) metadata.
                flat_name: process.entry_leader.parent.elf
                intermediate: true
                name: elf
                node_name: elf
                original_fieldset: elf
                short: These fields contain Linux Executable Linkable Format (ELF)
                  metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-architecture
                    description: Machine architecture of the ELF file.
                    example: x86-64
                    flat_name: process.entry_leader.parent.elf.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: elf
                    short: Machine architecture of the ELF file.
                    type: keyword
                byte_order:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-byte-order
                    description: Byte sequence of ELF file.
                    example: Little Endian
                    flat_name: process.entry_leader.parent.elf.byte_order
                    ignore_above: 1024
                    level: extended
                    name: byte_order
                    node_name: byte_order
                    normalize: []
                    original_fieldset: elf
                    short: Byte sequence of ELF file.
                    type: keyword
                cpu_type:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-cpu-type
                    description: CPU type of the ELF file.
                    example: Intel
                    flat_name: process.entry_leader.parent.elf.cpu_type
                    ignore_above: 1024
                    level: extended
                    name: cpu_type
                    node_name: cpu_type
                    normalize: []
                    original_fieldset: elf
                    short: CPU type of the ELF file.
                    type: keyword
                creation_date:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-creation-date
                    description: Extracted when possible from the file's metadata.
                      Indicates when it was built or compiled. It can also be faked
                      by malware creators.
                    flat_name: process.entry_leader.parent.elf.creation_date
                    level: extended
                    name: creation_date
                    node_name: creation_date
                    normalize: []
                    original_fieldset: elf
                    short: Build or compile date.
                    type: date
                exports:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-exports
                    description: List of exported element names and types.
                    flat_name: process.entry_leader.parent.elf.exports
                    level: extended
                    name: exports
                    node_name: exports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of exported element names and types.
                    type: flattened
                go_import_hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-go-import-hash
                    description: 'A hash of the Go language imports in an ELF file
                      excluding standard library imports. An import hash can be used
                      to fingerprint binaries even after recompilation or other code-level
                      transformations have occurred, which would change more traditional
                      hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.entry_leader.parent.elf.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the Go language imports in an ELF file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.entry_leader.parent.elf.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: elf
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.entry_leader.parent.elf.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.entry_leader.parent.elf.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.entry_leader.parent.elf.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: elf
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                header:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-header
                    flat_name: process.entry_leader.parent.elf.header
                    intermediate: true
                    name: header
                    node_name: header
                    original_fieldset: elf
                    type: object
                  fields:
                    abi_version:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-abi-version
                        description: Version of the ELF Application Binary Interface
                          (ABI).
                        flat_name: process.entry_leader.parent.elf.header.abi_version
                        ignore_above: 1024
                        level: extended
                        name: header.abi_version
                        node_name: abi_version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF Application Binary Interface (ABI).
                        type: keyword
                    class:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-class
                        description: Header class of the ELF file.
                        flat_name: process.entry_leader.parent.elf.header.class
                        ignore_above: 1024
                        level: extended
                        name: header.class
                        node_name: class
                        normalize: []
                        original_fieldset: elf
                        short: Header class of the ELF file.
                        type: keyword
                    data:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-data
                        description: Data table of the ELF header.
                        flat_name: process.entry_leader.parent.elf.header.data
                        ignore_above: 1024
                        level: extended
                        name: header.data
                        node_name: data
                        normalize: []
                        original_fieldset: elf
                        short: Data table of the ELF header.
                        type: keyword
                    entrypoint:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-entrypoint
                        description: Header entrypoint of the ELF file.
                        flat_name: process.entry_leader.parent.elf.header.entrypoint
                        format: string
                        level: extended
                        name: header.entrypoint
                        node_name: entrypoint
                        normalize: []
                        original_fieldset: elf
                        short: Header entrypoint of the ELF file.
                        type: long
                    object_version:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-object-version
                        description: '"0x1" for original ELF files.'
                        flat_name: process.entry_leader.parent.elf.header.object_version
                        ignore_above: 1024
                        level: extended
                        name: header.object_version
                        node_name: object_version
                        normalize: []
                        original_fieldset: elf
                        short: '"0x1" for original ELF files.'
                        type: keyword
                    os_abi:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-os-abi
                        description: Application Binary Interface (ABI) of the Linux
                          OS.
                        flat_name: process.entry_leader.parent.elf.header.os_abi
                        ignore_above: 1024
                        level: extended
                        name: header.os_abi
                        node_name: os_abi
                        normalize: []
                        original_fieldset: elf
                        short: Application Binary Interface (ABI) of the Linux OS.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-type
                        description: Header type of the ELF file.
                        flat_name: process.entry_leader.parent.elf.header.type
                        ignore_above: 1024
                        level: extended
                        name: header.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: Header type of the ELF file.
                        type: keyword
                    version:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-header-version
                        description: Version of the ELF header.
                        flat_name: process.entry_leader.parent.elf.header.version
                        ignore_above: 1024
                        level: extended
                        name: header.version
                        node_name: version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF header.
                        type: keyword
                import_hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-import-hash
                    description: 'A hash of the imports in an ELF file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is an ELF implementation of the Windows PE imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.entry_leader.parent.elf.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the imports in an ELF file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-imports
                    description: List of imported element names and types.
                    flat_name: process.entry_leader.parent.elf.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.entry_leader.parent.elf.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.entry_leader.parent.elf.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                sections:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-sections
                    description: 'An array containing an object for each section of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.sections.*`.'
                    flat_name: process.entry_leader.parent.elf.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: elf
                    short: Section information of the ELF file.
                    type: nested
                  fields:
                    chi2:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-chi2
                        description: Chi-square probability distribution of the section.
                        flat_name: process.entry_leader.parent.elf.sections.chi2
                        format: number
                        level: extended
                        name: sections.chi2
                        node_name: chi2
                        normalize: []
                        original_fieldset: elf
                        short: Chi-square probability distribution of the section.
                        type: long
                    entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.entry_leader.parent.elf.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the section.
                        type: long
                    flags:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-flags
                        description: ELF Section List flags.
                        flat_name: process.entry_leader.parent.elf.sections.flags
                        ignore_above: 1024
                        level: extended
                        name: sections.flags
                        node_name: flags
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List flags.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-name
                        description: ELF Section List name.
                        flat_name: process.entry_leader.parent.elf.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List name.
                        type: keyword
                    physical_offset:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-physical-offset
                        description: ELF Section List offset.
                        flat_name: process.entry_leader.parent.elf.sections.physical_offset
                        ignore_above: 1024
                        level: extended
                        name: sections.physical_offset
                        node_name: physical_offset
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List offset.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-physical-size
                        description: ELF Section List physical size.
                        flat_name: process.entry_leader.parent.elf.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List physical size.
                        type: long
                    type:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-type
                        description: ELF Section List type.
                        flat_name: process.entry_leader.parent.elf.sections.type
                        ignore_above: 1024
                        level: extended
                        name: sections.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List type.
                        type: keyword
                    var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.entry_leader.parent.elf.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_address:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-virtual-address
                        description: ELF Section List virtual address.
                        flat_name: process.entry_leader.parent.elf.sections.virtual_address
                        format: string
                        level: extended
                        name: sections.virtual_address
                        node_name: virtual_address
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual address.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-sections-virtual-size
                        description: ELF Section List virtual size.
                        flat_name: process.entry_leader.parent.elf.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual size.
                        type: long
                segments:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-segments
                    description: 'An array containing an object for each segment of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.segments.*`.'
                    flat_name: process.entry_leader.parent.elf.segments
                    intermediate: false
                    level: extended
                    name: segments
                    node_name: segments
                    normalize:
                    - array
                    original_fieldset: elf
                    short: ELF object segment list.
                    type: nested
                  fields:
                    sections:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-segments-sections
                        description: ELF object segment sections.
                        flat_name: process.entry_leader.parent.elf.segments.sections
                        ignore_above: 1024
                        level: extended
                        name: segments.sections
                        node_name: sections
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment sections.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: process-entry-leader-parent-elf-segments-type
                        description: ELF object segment type.
                        flat_name: process.entry_leader.parent.elf.segments.type
                        ignore_above: 1024
                        level: extended
                        name: segments.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment type.
                        type: keyword
                shared_libraries:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-shared-libraries
                    description: List of shared libraries used by this ELF object.
                    flat_name: process.entry_leader.parent.elf.shared_libraries
                    ignore_above: 1024
                    level: extended
                    name: shared_libraries
                    node_name: shared_libraries
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of shared libraries used by this ELF object.
                    type: keyword
                telfhash:
                  field_details:
                    dashed_name: process-entry-leader-parent-elf-telfhash
                    description: telfhash symbol hash for ELF file.
                    flat_name: process.entry_leader.parent.elf.telfhash
                    ignore_above: 1024
                    level: extended
                    name: telfhash
                    node_name: telfhash
                    normalize: []
                    original_fieldset: elf
                    short: telfhash hash for ELF file.
                    type: keyword
            end:
              field_details:
                dashed_name: process-entry-leader-parent-end
                description: The time the process ended.
                example: '2016-05-23T08:05:34.853Z'
                flat_name: process.entry_leader.parent.end
                level: extended
                name: end
                node_name: end
                normalize: []
                original_fieldset: process
                short: The time the process ended.
                type: date
            entity_id:
              field_details:
                dashed_name: process-entry-leader-parent-entity-id
                description: 'Unique identifier for the process.

                  The implementation of this is specified by the data source, but
                  some examples of what could be used here are a process-generated
                  UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying
                  components of a process.

                  Constructing a globally unique identifier is a common practice to
                  mitigate PID reuse as well as to identify a specific process over
                  time, across multiple monitored hosts.'
                example: c2c455d9f99375d
                flat_name: process.entry_leader.parent.entity_id
                ignore_above: 1024
                level: extended
                name: entity_id
                node_name: entity_id
                normalize: []
                original_fieldset: process
                short: Unique identifier for the process.
                type: keyword
            entry_meta:
              field_details:
                dashed_name: process-entry-leader-parent-entry-meta
                flat_name: process.entry_leader.parent.entry_meta
                intermediate: true
                name: entry_meta
                node_name: entry_meta
                original_fieldset: process
                type: object
              fields:
                source:
                  field_details:
                    dashed_name: process-entry-leader-parent-entry-meta-source
                    description: 'Source fields capture details about the sender of
                      a network exchange/packet. These fields are populated from a
                      network event, packet, or other event containing details of
                      a network transaction.

                      Source fields are usually populated in conjunction with destination
                      fields. The source and destination fields are considered the
                      baseline and should always be filled if an event contains source
                      and destination details from a network transaction. If the event
                      also contains identification of the client and server roles,
                      then the client and server fields should also be populated.'
                    flat_name: process.entry_leader.parent.entry_meta.source
                    intermediate: true
                    name: source
                    node_name: source
                    original_fieldset: source
                    short: Fields about the source side of a network connection, used
                      with destination.
                    type: group
                  fields:
                    address:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-address
                        description: 'Some event source addresses are defined ambiguously.
                          The event will sometimes list an IP, a domain or a unix
                          socket.  You should always store the raw address in the
                          `.address` field.

                          Then it should be duplicated to `.ip` or `.domain`, depending
                          on which one it is.'
                        flat_name: process.entry_leader.parent.entry_meta.source.address
                        ignore_above: 1024
                        level: extended
                        name: address
                        node_name: address
                        normalize: []
                        original_fieldset: source
                        short: Source network address.
                        type: keyword
                    as:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-as
                        description: An autonomous system (AS) is a collection of
                          connected Internet Protocol (IP) routing prefixes under
                          the control of one or more network operators on behalf of
                          a single administrative entity or domain that presents a
                          common, clearly defined routing policy to the internet.
                        flat_name: process.entry_leader.parent.entry_meta.source.as
                        intermediate: true
                        name: as
                        node_name: as
                        original_fieldset: as
                        short: Fields describing an Autonomous System (Internet routing
                          prefix).
                        type: group
                      fields:
                        number:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-as-number
                            description: Unique number allocated to the autonomous
                              system. The autonomous system number (ASN) uniquely
                              identifies each network on the Internet.
                            example: 15169
                            flat_name: process.entry_leader.parent.entry_meta.source.as.number
                            level: extended
                            name: number
                            node_name: number
                            normalize: []
                            original_fieldset: as
                            short: Unique number allocated to the autonomous system.
                            type: long
                        organization:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-as-organization
                            flat_name: process.entry_leader.parent.entry_meta.source.as.organization
                            intermediate: true
                            name: organization
                            node_name: organization
                            original_fieldset: as
                            type: object
                          fields:
                            name:
                              field_details:
                                dashed_name: process-entry-leader-parent-entry-meta-source-as-organization-name
                                description: Organization name.
                                example: Google LLC
                                flat_name: process.entry_leader.parent.entry_meta.source.as.organization.name
                                ignore_above: 1024
                                level: extended
                                multi_fields:
                                - flat_name: process.entry_leader.parent.entry_meta.source.as.organization.name.text
                                  name: text
                                  type: match_only_text
                                name: organization.name
                                node_name: name
                                normalize: []
                                original_fieldset: as
                                short: Organization name.
                                type: keyword
                    bytes:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-bytes
                        description: Bytes sent from the source to the destination.
                        example: 184
                        flat_name: process.entry_leader.parent.entry_meta.source.bytes
                        format: bytes
                        level: core
                        name: bytes
                        node_name: bytes
                        normalize: []
                        original_fieldset: source
                        short: Bytes sent from the source to the destination.
                        type: long
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-domain
                        description: 'The domain name of the source system.

                          This value may be a host name, a fully qualified domain
                          name, or another host naming format. The value may derive
                          from the original event or be added from enrichment.'
                        example: foo.example.com
                        flat_name: process.entry_leader.parent.entry_meta.source.domain
                        ignore_above: 1024
                        level: core
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: source
                        short: The domain name of the source.
                        type: keyword
                    geo:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-geo
                        description: 'Geo fields can carry data about a specific location
                          related to an event.

                          This geolocation information can be derived from techniques
                          such as Geo IP, or be user-supplied.'
                        flat_name: process.entry_leader.parent.entry_meta.source.geo
                        intermediate: true
                        name: geo
                        node_name: geo
                        original_fieldset: geo
                        short: Fields describing a location.
                        type: group
                      fields:
                        city_name:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-city-name
                            description: City name.
                            example: Montreal
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.city_name
                            ignore_above: 1024
                            level: core
                            name: city_name
                            node_name: city_name
                            normalize: []
                            original_fieldset: geo
                            short: City name.
                            type: keyword
                        continent_code:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-continent-code
                            description: Two-letter code representing continent's
                              name.
                            example: NA
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.continent_code
                            ignore_above: 1024
                            level: core
                            name: continent_code
                            node_name: continent_code
                            normalize: []
                            original_fieldset: geo
                            short: Continent code.
                            type: keyword
                        continent_name:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-continent-name
                            description: Name of the continent.
                            example: North America
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.continent_name
                            ignore_above: 1024
                            level: core
                            name: continent_name
                            node_name: continent_name
                            normalize: []
                            original_fieldset: geo
                            short: Name of the continent.
                            type: keyword
                        country_iso_code:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-country-iso-code
                            description: Country ISO code.
                            example: CA
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.country_iso_code
                            ignore_above: 1024
                            level: core
                            name: country_iso_code
                            node_name: country_iso_code
                            normalize: []
                            original_fieldset: geo
                            short: Country ISO code.
                            type: keyword
                        country_name:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-country-name
                            description: Country name.
                            example: Canada
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.country_name
                            ignore_above: 1024
                            level: core
                            name: country_name
                            node_name: country_name
                            normalize: []
                            original_fieldset: geo
                            short: Country name.
                            type: keyword
                        location:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-location
                            description: Longitude and latitude.
                            example: '{ "lon": -73.614830, "lat": 45.505918 }'
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.location
                            level: core
                            name: location
                            node_name: location
                            normalize: []
                            original_fieldset: geo
                            short: Longitude and latitude.
                            type: geo_point
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-name
                            description: 'User-defined description of a location,
                              at the level of granularity they care about.

                              Could be the name of their data centers, the floor number,
                              if this describes a local physical entity, city names.

                              Not typically used in automated geolocation.'
                            example: boston-dc
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: geo
                            short: User-defined description of a location.
                            type: keyword
                        postal_code:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-postal-code
                            description: 'Postal code associated with the location.

                              Values appropriate for this field may also be known
                              as a postcode or ZIP code and will vary widely from
                              country to country.'
                            example: 94040
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.postal_code
                            ignore_above: 1024
                            level: core
                            name: postal_code
                            node_name: postal_code
                            normalize: []
                            original_fieldset: geo
                            short: Postal code.
                            type: keyword
                        region_iso_code:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-region-iso-code
                            description: Region ISO code.
                            example: CA-QC
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.region_iso_code
                            ignore_above: 1024
                            level: core
                            name: region_iso_code
                            node_name: region_iso_code
                            normalize: []
                            original_fieldset: geo
                            short: Region ISO code.
                            type: keyword
                        region_name:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-region-name
                            description: Region name.
                            example: Quebec
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.region_name
                            ignore_above: 1024
                            level: core
                            name: region_name
                            node_name: region_name
                            normalize: []
                            original_fieldset: geo
                            short: Region name.
                            type: keyword
                        timezone:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-geo-timezone
                            description: The time zone of the location, such as IANA
                              time zone name.
                            example: America/Argentina/Buenos_Aires
                            flat_name: process.entry_leader.parent.entry_meta.source.geo.timezone
                            ignore_above: 1024
                            level: core
                            name: timezone
                            node_name: timezone
                            normalize: []
                            original_fieldset: geo
                            short: Time zone.
                            type: keyword
                    ip:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-ip
                        description: IP address of the source (IPv4 or IPv6).
                        flat_name: process.entry_leader.parent.entry_meta.source.ip
                        level: core
                        name: ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: IP address of the source.
                        type: ip
                    mac:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-mac
                        description: 'MAC address of the source.

                          The notation format from RFC 7042 is suggested: Each octet
                          (that is, 8-bit byte) is represented by two [uppercase]
                          hexadecimal digits giving the value of the octet as an unsigned
                          integer. Successive octets are separated by a hyphen.'
                        example: 00-00-5E-00-53-23
                        flat_name: process.entry_leader.parent.entry_meta.source.mac
                        ignore_above: 1024
                        level: core
                        name: mac
                        node_name: mac
                        normalize: []
                        original_fieldset: source
                        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                        short: MAC address of the source.
                        type: keyword
                    nat:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-nat
                        flat_name: process.entry_leader.parent.entry_meta.source.nat
                        intermediate: true
                        name: nat
                        node_name: nat
                        original_fieldset: source
                        type: object
                      fields:
                        ip:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-nat-ip
                            description: 'Translated ip of source based NAT sessions
                              (e.g. internal client to internet)

                              Typically connections traversing load balancers, firewalls,
                              or routers.'
                            flat_name: process.entry_leader.parent.entry_meta.source.nat.ip
                            level: extended
                            name: nat.ip
                            node_name: ip
                            normalize: []
                            original_fieldset: source
                            short: Source NAT ip
                            type: ip
                        port:
                          field_details:
                            dashed_name: process-entry-leader-parent-entry-meta-source-nat-port
                            description: 'Translated port of source based NAT sessions.
                              (e.g. internal client to internet)

                              Typically used with load balancers, firewalls, or routers.'
                            flat_name: process.entry_leader.parent.entry_meta.source.nat.port
                            format: string
                            level: extended
                            name: nat.port
                            node_name: port
                            normalize: []
                            original_fieldset: source
                            short: Source NAT port
                            type: long
                    packets:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-packets
                        description: Packets sent from the source to the destination.
                        example: 12
                        flat_name: process.entry_leader.parent.entry_meta.source.packets
                        level: core
                        name: packets
                        node_name: packets
                        normalize: []
                        original_fieldset: source
                        short: Packets sent from the source to the destination.
                        type: long
                    port:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-port
                        description: Port of the source.
                        flat_name: process.entry_leader.parent.entry_meta.source.port
                        format: string
                        level: core
                        name: port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Port of the source.
                        type: long
                    registered_domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-registered-domain
                        description: 'The highest registered source domain, stripped
                          of the subdomain.

                          For example, the registered domain for "foo.example.com"
                          is "example.com".

                          This value can be determined precisely with a list like
                          the public suffix list (http://publicsuffix.org). Trying
                          to approximate this by simply taking the last two labels
                          will not work well for TLDs such as "co.uk".'
                        example: example.com
                        flat_name: process.entry_leader.parent.entry_meta.source.registered_domain
                        ignore_above: 1024
                        level: extended
                        name: registered_domain
                        node_name: registered_domain
                        normalize: []
                        original_fieldset: source
                        short: The highest registered source domain, stripped of the
                          subdomain.
                        type: keyword
                    subdomain:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-subdomain
                        description: 'The subdomain portion of a fully qualified domain
                          name includes all of the names except the host name under
                          the registered_domain.  In a partially qualified domain,
                          or if the the qualification level of the full name cannot
                          be determined, subdomain contains all of the names below
                          the registered domain.

                          For example the subdomain portion of "www.east.mydomain.co.uk"
                          is "east". If the domain has multiple levels of subdomain,
                          such as "sub2.sub1.example.com", the subdomain field should
                          contain "sub2.sub1", with no trailing period.'
                        example: east
                        flat_name: process.entry_leader.parent.entry_meta.source.subdomain
                        ignore_above: 1024
                        level: extended
                        name: subdomain
                        node_name: subdomain
                        normalize: []
                        original_fieldset: source
                        short: The subdomain of the domain.
                        type: keyword
                    top_level_domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-entry-meta-source-top-level-domain
                        description: 'The effective top level domain (eTLD), also
                          known as the domain suffix, is the last part of the domain
                          name. For example, the top level domain for example.com
                          is "com".

                          This value can be determined precisely with a list like
                          the public suffix list (http://publicsuffix.org). Trying
                          to approximate this by simply taking the last label will
                          not work well for effective TLDs such as "co.uk".'
                        example: co.uk
                        flat_name: process.entry_leader.parent.entry_meta.source.top_level_domain
                        ignore_above: 1024
                        level: extended
                        name: top_level_domain
                        node_name: top_level_domain
                        normalize: []
                        original_fieldset: source
                        short: The effective top level domain (com, org, net, co.uk).
                        type: keyword
                type:
                  field_details:
                    dashed_name: process-entry-leader-parent-entry-meta-type
                    description: 'The entry type for the entry session leader. Values
                      include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                      console

                      Note: This field is only set on process.session_leader.'
                    flat_name: process.entry_leader.parent.entry_meta.type
                    ignore_above: 1024
                    level: extended
                    name: entry_meta.type
                    node_name: type
                    normalize: []
                    original_fieldset: process
                    short: The entry type for the entry session leader.
                    type: keyword
            env_vars:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-parent-env-vars
                description: 'Array of environment variable bindings. Captured from
                  a snapshot of the environment at the time of execution.

                  May be filtered to protect sensitive information.'
                example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
                flat_name: process.entry_leader.parent.env_vars
                ignore_above: 1024
                level: extended
                name: env_vars
                node_name: env_vars
                normalize:
                - array
                original_fieldset: process
                short: Array of environment variable bindings.
                type: keyword
            executable:
              field_details:
                dashed_name: process-entry-leader-parent-executable
                description: Absolute path to the process executable.
                example: /usr/bin/ssh
                flat_name: process.entry_leader.parent.executable
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.parent.executable.text
                  name: text
                  type: match_only_text
                name: executable
                node_name: executable
                normalize: []
                original_fieldset: process
                short: Absolute path to the process executable.
                type: keyword
            exit_code:
              field_details:
                dashed_name: process-entry-leader-parent-exit-code
                description: 'The exit code of the process, if this is a termination
                  event.

                  The field should be absent if there is no exit code for the event
                  (e.g. process start).'
                example: 137
                flat_name: process.entry_leader.parent.exit_code
                level: extended
                name: exit_code
                node_name: exit_code
                normalize: []
                original_fieldset: process
                short: The exit code of the process.
                type: long
            group:
              field_details:
                dashed_name: process-entry-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.parent.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.parent.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-group-name
                    description: Name of the group.
                    flat_name: process.entry_leader.parent.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-entry-leader-parent-hash
                description: 'The hash fields represent different bitwise hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).

                  Note that this fieldset is used for common hashes that may be computed
                  over a range of generic bytes. Entity-specific hashes such as ja3
                  or imphash are placed in the fieldsets to which they relate (tls
                  and pe, respectively).'
                flat_name: process.entry_leader.parent.hash
                intermediate: true
                name: hash
                node_name: hash
                original_fieldset: hash
                short: Hashes, usually file hashes.
                type: group
              fields:
                md5:
                  field_details:
                    dashed_name: process-entry-leader-parent-hash-md5
                    description: MD5 hash.
                    flat_name: process.entry_leader.parent.hash.md5
                    ignore_above: 1024
                    level: extended
                    name: md5
                    node_name: md5
                    normalize: []
                    original_fieldset: hash
                    short: MD5 hash.
                    type: keyword
                sha1:
                  field_details:
                    dashed_name: process-entry-leader-parent-hash-sha1
                    description: SHA1 hash.
                    flat_name: process.entry_leader.parent.hash.sha1
                    ignore_above: 1024
                    level: extended
                    name: sha1
                    node_name: sha1
                    normalize: []
                    original_fieldset: hash
                    short: SHA1 hash.
                    type: keyword
                sha256:
                  field_details:
                    dashed_name: process-entry-leader-parent-hash-sha256
                    description: SHA256 hash.
                    flat_name: process.entry_leader.parent.hash.sha256
                    ignore_above: 1024
                    level: extended
                    name: sha256
                    node_name: sha256
                    normalize: []
                    original_fieldset: hash
                    short: SHA256 hash.
                    type: keyword
                sha384:
                  field_details:
                    dashed_name: process-entry-leader-parent-hash-sha384
                    description: SHA384 hash.
                    flat_name: process.entry_leader.parent.hash.sha384
                    ignore_above: 1024
                    level: extended
                    name: sha384
                    node_name: sha384
                    normalize: []
                    original_fieldset: hash
                    short: SHA384 hash.
                    type: keyword
                sha512:
                  field_details:
                    dashed_name: process-entry-leader-parent-hash-sha512
                    description: SHA512 hash.
                    flat_name: process.entry_leader.parent.hash.sha512
                    ignore_above: 1024
                    level: extended
                    name: sha512
                    node_name: sha512
                    normalize: []
                    original_fieldset: hash
                    short: SHA512 hash.
                    type: keyword
                ssdeep:
                  field_details:
                    dashed_name: process-entry-leader-parent-hash-ssdeep
                    description: SSDEEP hash.
                    flat_name: process.entry_leader.parent.hash.ssdeep
                    ignore_above: 1024
                    level: extended
                    name: ssdeep
                    node_name: ssdeep
                    normalize: []
                    original_fieldset: hash
                    short: SSDEEP hash.
                    type: keyword
                tlsh:
                  field_details:
                    dashed_name: process-entry-leader-parent-hash-tlsh
                    description: TLSH hash.
                    flat_name: process.entry_leader.parent.hash.tlsh
                    ignore_above: 1024
                    level: extended
                    name: tlsh
                    node_name: tlsh
                    normalize: []
                    original_fieldset: hash
                    short: TLSH hash.
                    type: keyword
            interactive:
              field_details:
                dashed_name: process-entry-leader-parent-interactive
                description: 'Whether the process is connected to an interactive shell.

                  Process interactivity is inferred from the processes file descriptors.
                  If the character device for the controlling tty is the same as stdin
                  and stderr for the process, the process is considered interactive.

                  Note: A non-interactive process can belong to an interactive session
                  and is simply one that does not have open file descriptors reading
                  the controlling TTY on FD 0 (stdin) or writing to the controlling
                  TTY on FD 2 (stderr). A backgrounded process is still considered
                  interactive if stdin and stderr are connected to the controlling
                  TTY.'
                example: true
                flat_name: process.entry_leader.parent.interactive
                level: extended
                name: interactive
                node_name: interactive
                normalize: []
                original_fieldset: process
                short: Whether the process is connected to an interactive shell.
                type: boolean
            io:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-parent-io
                description: 'A chunk of input or output (IO) from a single process.

                  This field only appears on the top level process object, which is
                  the process that wrote the output or read the input.'
                flat_name: process.entry_leader.parent.io
                intermediate: false
                level: extended
                name: io
                node_name: io
                normalize: []
                original_fieldset: process
                short: A chunk of input or output (IO) from a single process.
                type: object
              fields:
                bytes_skipped:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-io-bytes-skipped
                    description: An array of byte offsets and lengths denoting where
                      IO data has been skipped.
                    flat_name: process.entry_leader.parent.io.bytes_skipped
                    intermediate: false
                    level: extended
                    name: io.bytes_skipped
                    node_name: bytes_skipped
                    normalize:
                    - array
                    original_fieldset: process
                    short: An array of byte offsets and lengths denoting where IO
                      data has been skipped.
                    type: object
                  fields:
                    length:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-io-bytes-skipped-length
                        description: The length of bytes skipped.
                        flat_name: process.entry_leader.parent.io.bytes_skipped.length
                        level: extended
                        name: io.bytes_skipped.length
                        node_name: length
                        normalize: []
                        original_fieldset: process
                        short: The length of bytes skipped.
                        type: long
                    offset:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-io-bytes-skipped-offset
                        description: The byte offset into this event's io.text (or
                          io.bytes in the future) where length bytes were skipped.
                        flat_name: process.entry_leader.parent.io.bytes_skipped.offset
                        level: extended
                        name: io.bytes_skipped.offset
                        node_name: offset
                        normalize: []
                        original_fieldset: process
                        short: The byte offset into this event's io.text (or io.bytes
                          in the future) where length bytes were skipped.
                        type: long
                max_bytes_per_process_exceeded:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-io-max-bytes-per-process-exceeded
                    description: If true, the process producing the output has exceeded
                      the max_kilobytes_per_process configuration setting.
                    flat_name: process.entry_leader.parent.io.max_bytes_per_process_exceeded
                    level: extended
                    name: io.max_bytes_per_process_exceeded
                    node_name: max_bytes_per_process_exceeded
                    normalize: []
                    original_fieldset: process
                    short: If true, the process producing the output has exceeded
                      the max_kilobytes_per_process configuration setting.
                    type: boolean
                text:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-io-text
                    description: 'A chunk of output or input sanitized to UTF-8.

                      Best efforts are made to ensure complete lines are captured
                      in these events. Assumptions should NOT be made that multiple
                      lines will appear in the same event. TTY output may contain
                      terminal control codes such as for cursor movement, so some
                      string queries may not match due to terminal codes inserted
                      between characters of a word.'
                    flat_name: process.entry_leader.parent.io.text
                    level: extended
                    name: io.text
                    node_name: text
                    normalize: []
                    original_fieldset: process
                    short: A chunk of output or input sanitized to UTF-8.
                    type: wildcard
                total_bytes_captured:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-io-total-bytes-captured
                    description: The total number of bytes captured in this event.
                    flat_name: process.entry_leader.parent.io.total_bytes_captured
                    level: extended
                    name: io.total_bytes_captured
                    node_name: total_bytes_captured
                    normalize: []
                    original_fieldset: process
                    short: The total number of bytes captured in this event.
                    type: long
                total_bytes_skipped:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-io-total-bytes-skipped
                    description: The total number of bytes that were not captured
                      due to implementation restrictions such as buffer size limits.
                      Implementors should strive to ensure this value is always zero
                    flat_name: process.entry_leader.parent.io.total_bytes_skipped
                    level: extended
                    name: io.total_bytes_skipped
                    node_name: total_bytes_skipped
                    normalize: []
                    original_fieldset: process
                    short: The total number of bytes that were not captured due to
                      implementation restrictions such as buffer size limits.
                    type: long
                type:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-io-type
                    description: 'The type of object on which the IO action (read
                      or write) was taken.

                      Currently only ''tty'' is supported. Other types may be added
                      in the future for ''file'' and ''socket'' support.'
                    flat_name: process.entry_leader.parent.io.type
                    ignore_above: 1024
                    level: extended
                    name: io.type
                    node_name: type
                    normalize: []
                    original_fieldset: process
                    short: The type of object on which the IO action (read or write)
                      was taken.
                    type: keyword
            macho:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-entry-leader-parent-macho
                description: These fields contain Mac OS Mach Object file format (Mach-O)
                  metadata.
                flat_name: process.entry_leader.parent.macho
                intermediate: true
                name: macho
                node_name: macho
                original_fieldset: macho
                short: These fields contain Mac OS Mach Object file format (Mach-O)
                  metadata.
                type: group
              fields:
                go_import_hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-go-import-hash
                    description: 'A hash of the Go language imports in a Mach-O file
                      excluding standard library imports. An import hash can be used
                      to fingerprint binaries even after recompilation or other code-level
                      transformations have occurred, which would change more traditional
                      hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.entry_leader.parent.macho.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the Go language imports in a Mach-O file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.entry_leader.parent.macho.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: macho
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.entry_leader.parent.macho.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.entry_leader.parent.macho.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.entry_leader.parent.macho.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: macho
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                import_hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-import-hash
                    description: 'A hash of the imports in a Mach-O file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a synonym for symhash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.entry_leader.parent.macho.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the imports in a Mach-O file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-imports
                    description: List of imported element names and types.
                    flat_name: process.entry_leader.parent.macho.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: macho
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.entry_leader.parent.macho.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.entry_leader.parent.macho.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                sections:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-sections
                    description: 'An array containing an object for each section of
                      the Mach-O file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `macho.sections.*`.'
                    flat_name: process.entry_leader.parent.macho.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: macho
                    short: Section information of the Mach-O file.
                    type: nested
                  fields:
                    entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-macho-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.entry_leader.parent.macho.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: macho
                        short: Shannon entropy calculation from the section.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-macho-sections-name
                        description: Mach-O Section List name.
                        flat_name: process.entry_leader.parent.macho.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List name.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-entry-leader-parent-macho-sections-physical-size
                        description: Mach-O Section List physical size.
                        flat_name: process.entry_leader.parent.macho.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List physical size.
                        type: long
                    var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-macho-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.entry_leader.parent.macho.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-entry-leader-parent-macho-sections-virtual-size
                        description: Mach-O Section List virtual size. This is always
                          the same as `physical_size`.
                        flat_name: process.entry_leader.parent.macho.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List virtual size. This is always the
                          same as `physical_size`.
                        type: long
                symhash:
                  field_details:
                    dashed_name: process-entry-leader-parent-macho-symhash
                    description: 'A hash of the imports in a Mach-O file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a Mach-O implementation of the Windows PE imphash'
                    example: d3ccf195b62a9279c3c19af1080497ec
                    flat_name: process.entry_leader.parent.macho.symhash
                    ignore_above: 1024
                    level: extended
                    name: symhash
                    node_name: symhash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the imports in a Mach-O file.
                    type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-parent-name
                description: 'Process name.

                  Sometimes called program name or similar.'
                example: ssh
                flat_name: process.entry_leader.parent.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.parent.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Process name.
                type: keyword
            pe:
              field_details:
                dashed_name: process-entry-leader-parent-pe
                description: These fields contain Windows Portable Executable (PE)
                  metadata.
                flat_name: process.entry_leader.parent.pe
                intermediate: true
                name: pe
                node_name: pe
                original_fieldset: pe
                short: These fields contain Windows Portable Executable (PE) metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-architecture
                    description: CPU architecture target for the file.
                    example: x64
                    flat_name: process.entry_leader.parent.pe.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: pe
                    short: CPU architecture target for the file.
                    type: keyword
                company:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-company
                    description: Internal company name of the file, provided at compile-time.
                    example: Microsoft Corporation
                    flat_name: process.entry_leader.parent.pe.company
                    ignore_above: 1024
                    level: extended
                    name: company
                    node_name: company
                    normalize: []
                    original_fieldset: pe
                    short: Internal company name of the file, provided at compile-time.
                    type: keyword
                description:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-description
                    description: Internal description of the file, provided at compile-time.
                    example: Paint
                    flat_name: process.entry_leader.parent.pe.description
                    ignore_above: 1024
                    level: extended
                    name: description
                    node_name: description
                    normalize: []
                    original_fieldset: pe
                    short: Internal description of the file, provided at compile-time.
                    type: keyword
                file_version:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-file-version
                    description: Internal version of the file, provided at compile-time.
                    example: 6.3.9600.17415
                    flat_name: process.entry_leader.parent.pe.file_version
                    ignore_above: 1024
                    level: extended
                    name: file_version
                    node_name: file_version
                    normalize: []
                    original_fieldset: pe
                    short: Process name.
                    type: keyword
                go_import_hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-go-import-hash
                    description: 'A hash of the Go language imports in a PE file excluding
                      standard library imports. An import hash can be used to fingerprint
                      binaries even after recompilation or other code-level transformations
                      have occurred, which would change more traditional hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.entry_leader.parent.pe.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the Go language imports in a PE file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.entry_leader.parent.pe.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: pe
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.entry_leader.parent.pe.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.entry_leader.parent.pe.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.entry_leader.parent.pe.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: pe
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                imphash:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-imphash
                    description: 'A hash of the imports in a PE file. An imphash --
                      or import hash -- can be used to fingerprint binaries even after
                      recompilation or other code-level transformations have occurred,
                      which would change more traditional hash values.

                      Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                    example: 0c6803c4e922103c4dca5963aad36ddf
                    flat_name: process.entry_leader.parent.pe.imphash
                    ignore_above: 1024
                    level: extended
                    name: imphash
                    node_name: imphash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                import_hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-import-hash
                    description: 'A hash of the imports in a PE file. An import hash
                      can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a synonym for imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.entry_leader.parent.pe.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-imports
                    description: List of imported element names and types.
                    flat_name: process.entry_leader.parent.pe.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: pe
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.entry_leader.parent.pe.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.entry_leader.parent.pe.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                original_file_name:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-original-file-name
                    description: Internal name of the file, provided at compile-time.
                    example: MSPAINT.EXE
                    flat_name: process.entry_leader.parent.pe.original_file_name
                    ignore_above: 1024
                    level: extended
                    name: original_file_name
                    node_name: original_file_name
                    normalize: []
                    original_fieldset: pe
                    short: Internal name of the file, provided at compile-time.
                    type: keyword
                pehash:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-pehash
                    description: 'A hash of the PE header and data from one or more
                      PE sections. An pehash can be used to cluster files by transforming
                      structural information about a file into a hash value.

                      Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                    example: 73ff189b63cd6be375a7ff25179a38d347651975
                    flat_name: process.entry_leader.parent.pe.pehash
                    ignore_above: 1024
                    level: extended
                    name: pehash
                    node_name: pehash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the PE header and data from one or more PE sections.
                    type: keyword
                product:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-product
                    description: Internal product name of the file, provided at compile-time.
                    example: "Microsoft\xAE Windows\xAE Operating System"
                    flat_name: process.entry_leader.parent.pe.product
                    ignore_above: 1024
                    level: extended
                    name: product
                    node_name: product
                    normalize: []
                    original_fieldset: pe
                    short: Internal product name of the file, provided at compile-time.
                    type: keyword
                sections:
                  field_details:
                    dashed_name: process-entry-leader-parent-pe-sections
                    description: 'An array containing an object for each section of
                      the PE file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `pe.sections.*`.'
                    flat_name: process.entry_leader.parent.pe.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: pe
                    short: Section information of the PE file.
                    type: nested
                  fields:
                    entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-pe-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.entry_leader.parent.pe.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the section.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-pe-sections-name
                        description: PE Section List name.
                        flat_name: process.entry_leader.parent.pe.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List name.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-entry-leader-parent-pe-sections-physical-size
                        description: PE Section List physical size.
                        flat_name: process.entry_leader.parent.pe.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List physical size.
                        type: long
                    var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-pe-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.entry_leader.parent.pe.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-entry-leader-parent-pe-sections-virtual-size
                        description: PE Section List virtual size. This is always
                          the same as `physical_size`.
                        flat_name: process.entry_leader.parent.pe.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List virtual size. This is always the same
                          as `physical_size`.
                        type: long
            pgid:
              field_details:
                dashed_name: process-entry-leader-parent-pgid
                description: 'Deprecated for removal in next major version release.
                  This field is superseded by `process.group_leader.pid`.

                  Identifier of the group of processes the process belongs to.'
                flat_name: process.entry_leader.parent.pgid
                format: string
                level: extended
                name: pgid
                node_name: pgid
                normalize: []
                original_fieldset: process
                short: Deprecated identifier of the group of processes the process
                  belongs to.
                type: long
            pid:
              field_details:
                dashed_name: process-entry-leader-parent-pid
                description: Process id.
                example: 4242
                flat_name: process.entry_leader.parent.pid
                format: string
                level: core
                name: pid
                node_name: pid
                normalize: []
                original_fieldset: process
                short: Process id.
                type: long
            real_group:
              field_details:
                dashed_name: process-entry-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.parent.group
                intermediate: true
                name: real_group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.real_group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.parent.real_group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-group-name
                    description: Name of the group.
                    flat_name: process.entry_leader.parent.real_group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            real_user:
              field_details:
                dashed_name: process-entry-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.entry_leader.parent.user
                intermediate: true
                name: real_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.real_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-email
                    description: User email address.
                    flat_name: process.entry_leader.parent.real_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.entry_leader.parent.real_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.real_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.real_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.real_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.real_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-group-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.real_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.entry_leader.parent.real_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.entry_leader.parent.real_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.entry_leader.parent.real_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.entry_leader.parent.real_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-entry-leader-parent-real-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.entry_leader.parent.real_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.entry_leader.parent.real_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.entry_leader.parent.real_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.entry_leader.parent.real_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.entry_leader.parent.real_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.entry_leader.parent.real_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-real-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.entry_leader.parent.real_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-entry-leader-parent-real-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.entry_leader.parent.real_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            same_as_process:
              field_details:
                dashed_name: process-entry-leader-parent-same-as-process
                description: 'This boolean is used to identify if a leader process
                  is the same as the top level process.

                  For example, if `process.group_leader.same_as_process = true`, it
                  means the process event in question is the leader of its process
                  group. Details under `process.*` like `pid` would be the same under
                  `process.group_leader.*` The same applies for both `process.session_leader`
                  and `process.entry_leader`.

                  This field exists to the benefit of EQL and other rule engines since
                  it''s not possible to compare equality between two fields in a single
                  document. e.g `process.entity_id` = `process.group_leader.entity_id`
                  (top level process is the process group leader) OR `process.entity_id`
                  = `process.entry_leader.entity_id` (top level process is the entry
                  session leader)

                  Instead these rules could be written like: `process.group_leader.same_as_process:
                  true` OR `process.entry_leader.same_as_process: true`

                  Note: This field is only set on `process.entry_leader`, `process.session_leader`
                  and `process.group_leader`.'
                example: true
                flat_name: process.entry_leader.parent.same_as_process
                level: extended
                name: same_as_process
                node_name: same_as_process
                normalize: []
                original_fieldset: process
                short: This boolean is used to identify if a leader process is the
                  same as the top level process.
                type: boolean
            saved_group:
              field_details:
                dashed_name: process-entry-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.parent.group
                intermediate: true
                name: saved_group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.saved_group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.parent.saved_group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-group-name
                    description: Name of the group.
                    flat_name: process.entry_leader.parent.saved_group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            saved_user:
              field_details:
                dashed_name: process-entry-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.entry_leader.parent.user
                intermediate: true
                name: saved_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.saved_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-email
                    description: User email address.
                    flat_name: process.entry_leader.parent.saved_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.entry_leader.parent.saved_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.saved_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.saved_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.saved_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.saved_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-group-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.saved_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.entry_leader.parent.saved_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.entry_leader.parent.saved_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.entry_leader.parent.saved_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.entry_leader.parent.saved_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-entry-leader-parent-saved-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.entry_leader.parent.saved_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.entry_leader.parent.saved_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.entry_leader.parent.saved_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.entry_leader.parent.saved_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.entry_leader.parent.saved_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.entry_leader.parent.saved_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-saved-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.entry_leader.parent.saved_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-entry-leader-parent-saved-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.entry_leader.parent.saved_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            session_leader:
              field_details:
                dashed_name: process-entry-leader-parent-process
                description: 'These fields contain information about a process.

                  These fields can help you correlate metrics information with a process
                  id/name from a log message.  The `process.pid` often stays in the
                  metric itself and is copied to the global field for correlation.'
                flat_name: process.entry_leader.parent.process
                intermediate: true
                name: session_leader
                node_name: process
                original_fieldset: process
                short: These fields contain information about a process.
                type: group
              fields:
                args:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-args
                    description: 'Array of process arguments, starting with the absolute
                      path to the executable.

                      May be filtered to protect sensitive information.'
                    example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
                    flat_name: process.entry_leader.parent.session_leader.args
                    ignore_above: 1024
                    level: extended
                    name: args
                    node_name: args
                    normalize:
                    - array
                    original_fieldset: process
                    short: Array of process arguments.
                    type: keyword
                args_count:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-args-count
                    description: 'Length of the process.args array.

                      This field can be useful for querying or performing bucket analysis
                      on how many arguments were provided to start a process. More
                      arguments may be an indication of suspicious activity.'
                    example: 4
                    flat_name: process.entry_leader.parent.session_leader.args_count
                    level: extended
                    name: args_count
                    node_name: args_count
                    normalize: []
                    original_fieldset: process
                    short: Length of the process.args array.
                    type: long
                attested_groups:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.session_leader.group
                    intermediate: true
                    name: attested_groups
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-groups-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.attested_groups.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-groups-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.session_leader.attested_groups.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-groups-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.session_leader.attested_groups.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                attested_user:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.entry_leader.parent.session_leader.user
                    intermediate: true
                    name: attested_user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.attested_user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-email
                        description: User email address.
                        flat_name: process.entry_leader.parent.session_leader.attested_user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.entry_leader.parent.session_leader.attested_user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.attested_user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.entry_leader.parent.session_leader.attested_user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.entry_leader.parent.session_leader.attested_user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.entry_leader.parent.session_leader.attested_user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-group-name
                            description: Name of the group.
                            flat_name: process.entry_leader.parent.session_leader.attested_user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.entry_leader.parent.session_leader.attested_user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.entry_leader.parent.session_leader.attested_user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.entry_leader.parent.session_leader.attested_user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.attested_user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.entry_leader.parent.session_leader.attested_user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.attested_user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.entry_leader.parent.session_leader.attested_user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.entry_leader.parent.session_leader.attested_user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.attested_user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.entry_leader.parent.session_leader.attested_user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-attested-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.entry_leader.parent.session_leader.attested_user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-attested-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.entry_leader.parent.session_leader.attested_user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                code_signature:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-code-signature
                    description: These fields contain information about binary code
                      signatures.
                    flat_name: process.entry_leader.parent.session_leader.code_signature
                    intermediate: true
                    name: code_signature
                    node_name: code_signature
                    original_fieldset: code_signature
                    short: These fields contain information about binary code signatures.
                    type: group
                  fields:
                    digest_algorithm:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-digest-algorithm
                        description: 'The hashing algorithm used to sign the process.

                          This value can distinguish signatures when a file is signed
                          multiple times by the same signer but with a different digest
                          algorithm.'
                        example: sha256
                        flat_name: process.entry_leader.parent.session_leader.code_signature.digest_algorithm
                        ignore_above: 1024
                        level: extended
                        name: digest_algorithm
                        node_name: digest_algorithm
                        normalize: []
                        original_fieldset: code_signature
                        short: Hashing algorithm used to sign the process.
                        type: keyword
                    exists:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-exists
                        description: Boolean to capture if a signature is present.
                        example: 'true'
                        flat_name: process.entry_leader.parent.session_leader.code_signature.exists
                        level: core
                        name: exists
                        node_name: exists
                        normalize: []
                        original_fieldset: code_signature
                        short: Boolean to capture if a signature is present.
                        type: boolean
                    signing_id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-signing-id
                        description: 'The identifier used to sign the process.

                          This is used to identify the application manufactured by
                          a software vendor. The field is relevant to Apple *OS only.'
                        example: com.apple.xpc.proxy
                        flat_name: process.entry_leader.parent.session_leader.code_signature.signing_id
                        ignore_above: 1024
                        level: extended
                        name: signing_id
                        node_name: signing_id
                        normalize: []
                        original_fieldset: code_signature
                        short: The identifier used to sign the process.
                        type: keyword
                    status:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-status
                        description: 'Additional information about the certificate
                          status.

                          This is useful for logging cryptographic errors with the
                          certificate validity or trust status. Leave unpopulated
                          if the validity or trust of the certificate was unchecked.'
                        example: ERROR_UNTRUSTED_ROOT
                        flat_name: process.entry_leader.parent.session_leader.code_signature.status
                        ignore_above: 1024
                        level: extended
                        name: status
                        node_name: status
                        normalize: []
                        original_fieldset: code_signature
                        short: Additional information about the certificate status.
                        type: keyword
                    subject_name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-subject-name
                        description: Subject name of the code signer
                        example: Microsoft Corporation
                        flat_name: process.entry_leader.parent.session_leader.code_signature.subject_name
                        ignore_above: 1024
                        level: core
                        name: subject_name
                        node_name: subject_name
                        normalize: []
                        original_fieldset: code_signature
                        short: Subject name of the code signer
                        type: keyword
                    team_id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-team-id
                        description: 'The team identifier used to sign the process.

                          This is used to identify the team or vendor of a software
                          product. The field is relevant to Apple *OS only.'
                        example: EQHXZ8M8AV
                        flat_name: process.entry_leader.parent.session_leader.code_signature.team_id
                        ignore_above: 1024
                        level: extended
                        name: team_id
                        node_name: team_id
                        normalize: []
                        original_fieldset: code_signature
                        short: The team identifier used to sign the process.
                        type: keyword
                    timestamp:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-timestamp
                        description: Date and time when the code signature was generated
                          and signed.
                        example: '2021-01-01T12:10:30Z'
                        flat_name: process.entry_leader.parent.session_leader.code_signature.timestamp
                        level: extended
                        name: timestamp
                        node_name: timestamp
                        normalize: []
                        original_fieldset: code_signature
                        short: When the signature was generated and signed.
                        type: date
                    trusted:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-trusted
                        description: 'Stores the trust status of the certificate chain.

                          Validating the trust of the certificate chain may be complicated,
                          and this field should only be populated by tools that actively
                          check the status.'
                        example: 'true'
                        flat_name: process.entry_leader.parent.session_leader.code_signature.trusted
                        level: extended
                        name: trusted
                        node_name: trusted
                        normalize: []
                        original_fieldset: code_signature
                        short: Stores the trust status of the certificate chain.
                        type: boolean
                    valid:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-code-signature-valid
                        description: 'Boolean to capture if the digital signature
                          is verified against the binary content.

                          Leave unpopulated if a certificate was unchecked.'
                        example: 'true'
                        flat_name: process.entry_leader.parent.session_leader.code_signature.valid
                        level: extended
                        name: valid
                        node_name: valid
                        normalize: []
                        original_fieldset: code_signature
                        short: Boolean to capture if the digital signature is verified
                          against the binary content.
                        type: boolean
                command_line:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-command-line
                    description: 'Full command line that started the process, including
                      the absolute path to the executable, and all arguments.

                      Some arguments may be filtered to protect sensitive information.'
                    example: /usr/bin/ssh -l user 10.0.0.16
                    flat_name: process.entry_leader.parent.session_leader.command_line
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.session_leader.command_line.text
                      name: text
                      type: match_only_text
                    name: command_line
                    node_name: command_line
                    normalize: []
                    original_fieldset: process
                    short: Full command line that started the process.
                    type: wildcard
                elf:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-entry-leader-parent-session-leader-elf
                    description: These fields contain Linux Executable Linkable Format
                      (ELF) metadata.
                    flat_name: process.entry_leader.parent.session_leader.elf
                    intermediate: true
                    name: elf
                    node_name: elf
                    original_fieldset: elf
                    short: These fields contain Linux Executable Linkable Format (ELF)
                      metadata.
                    type: group
                  fields:
                    architecture:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-architecture
                        description: Machine architecture of the ELF file.
                        example: x86-64
                        flat_name: process.entry_leader.parent.session_leader.elf.architecture
                        ignore_above: 1024
                        level: extended
                        name: architecture
                        node_name: architecture
                        normalize: []
                        original_fieldset: elf
                        short: Machine architecture of the ELF file.
                        type: keyword
                    byte_order:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-byte-order
                        description: Byte sequence of ELF file.
                        example: Little Endian
                        flat_name: process.entry_leader.parent.session_leader.elf.byte_order
                        ignore_above: 1024
                        level: extended
                        name: byte_order
                        node_name: byte_order
                        normalize: []
                        original_fieldset: elf
                        short: Byte sequence of ELF file.
                        type: keyword
                    cpu_type:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-cpu-type
                        description: CPU type of the ELF file.
                        example: Intel
                        flat_name: process.entry_leader.parent.session_leader.elf.cpu_type
                        ignore_above: 1024
                        level: extended
                        name: cpu_type
                        node_name: cpu_type
                        normalize: []
                        original_fieldset: elf
                        short: CPU type of the ELF file.
                        type: keyword
                    creation_date:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-creation-date
                        description: Extracted when possible from the file's metadata.
                          Indicates when it was built or compiled. It can also be
                          faked by malware creators.
                        flat_name: process.entry_leader.parent.session_leader.elf.creation_date
                        level: extended
                        name: creation_date
                        node_name: creation_date
                        normalize: []
                        original_fieldset: elf
                        short: Build or compile date.
                        type: date
                    exports:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-exports
                        description: List of exported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.elf.exports
                        level: extended
                        name: exports
                        node_name: exports
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of exported element names and types.
                        type: flattened
                    go_import_hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-go-import-hash
                        description: 'A hash of the Go language imports in an ELF
                          file excluding standard library imports. An import hash
                          can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: process.entry_leader.parent.session_leader.elf.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: elf
                        short: A hash of the Go language imports in an ELF file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: process.entry_leader.parent.session_leader.elf.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: elf
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: process.entry_leader.parent.session_leader.elf.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: process.entry_leader.parent.session_leader.elf.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: process.entry_leader.parent.session_leader.elf.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: elf
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    header:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-header
                        flat_name: process.entry_leader.parent.session_leader.elf.header
                        intermediate: true
                        name: header
                        node_name: header
                        original_fieldset: elf
                        type: object
                      fields:
                        abi_version:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-abi-version
                            description: Version of the ELF Application Binary Interface
                              (ABI).
                            flat_name: process.entry_leader.parent.session_leader.elf.header.abi_version
                            ignore_above: 1024
                            level: extended
                            name: header.abi_version
                            node_name: abi_version
                            normalize: []
                            original_fieldset: elf
                            short: Version of the ELF Application Binary Interface
                              (ABI).
                            type: keyword
                        class:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-class
                            description: Header class of the ELF file.
                            flat_name: process.entry_leader.parent.session_leader.elf.header.class
                            ignore_above: 1024
                            level: extended
                            name: header.class
                            node_name: class
                            normalize: []
                            original_fieldset: elf
                            short: Header class of the ELF file.
                            type: keyword
                        data:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-data
                            description: Data table of the ELF header.
                            flat_name: process.entry_leader.parent.session_leader.elf.header.data
                            ignore_above: 1024
                            level: extended
                            name: header.data
                            node_name: data
                            normalize: []
                            original_fieldset: elf
                            short: Data table of the ELF header.
                            type: keyword
                        entrypoint:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-entrypoint
                            description: Header entrypoint of the ELF file.
                            flat_name: process.entry_leader.parent.session_leader.elf.header.entrypoint
                            format: string
                            level: extended
                            name: header.entrypoint
                            node_name: entrypoint
                            normalize: []
                            original_fieldset: elf
                            short: Header entrypoint of the ELF file.
                            type: long
                        object_version:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-object-version
                            description: '"0x1" for original ELF files.'
                            flat_name: process.entry_leader.parent.session_leader.elf.header.object_version
                            ignore_above: 1024
                            level: extended
                            name: header.object_version
                            node_name: object_version
                            normalize: []
                            original_fieldset: elf
                            short: '"0x1" for original ELF files.'
                            type: keyword
                        os_abi:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-os-abi
                            description: Application Binary Interface (ABI) of the
                              Linux OS.
                            flat_name: process.entry_leader.parent.session_leader.elf.header.os_abi
                            ignore_above: 1024
                            level: extended
                            name: header.os_abi
                            node_name: os_abi
                            normalize: []
                            original_fieldset: elf
                            short: Application Binary Interface (ABI) of the Linux
                              OS.
                            type: keyword
                        type:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-type
                            description: Header type of the ELF file.
                            flat_name: process.entry_leader.parent.session_leader.elf.header.type
                            ignore_above: 1024
                            level: extended
                            name: header.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: Header type of the ELF file.
                            type: keyword
                        version:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-header-version
                            description: Version of the ELF header.
                            flat_name: process.entry_leader.parent.session_leader.elf.header.version
                            ignore_above: 1024
                            level: extended
                            name: header.version
                            node_name: version
                            normalize: []
                            original_fieldset: elf
                            short: Version of the ELF header.
                            type: keyword
                    import_hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-import-hash
                        description: 'A hash of the imports in an ELF file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is an ELF implementation of the Windows PE imphash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: process.entry_leader.parent.session_leader.elf.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: elf
                        short: A hash of the imports in an ELF file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-imports
                        description: List of imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.elf.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.elf.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.elf.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    sections:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-sections
                        description: 'An array containing an object for each section
                          of the ELF file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `elf.sections.*`.'
                        flat_name: process.entry_leader.parent.session_leader.elf.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: elf
                        short: Section information of the ELF file.
                        type: nested
                      fields:
                        chi2:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-chi2
                            description: Chi-square probability distribution of the
                              section.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.chi2
                            format: number
                            level: extended
                            name: sections.chi2
                            node_name: chi2
                            normalize: []
                            original_fieldset: elf
                            short: Chi-square probability distribution of the section.
                            type: long
                        entropy:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: elf
                            short: Shannon entropy calculation from the section.
                            type: long
                        flags:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-flags
                            description: ELF Section List flags.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.flags
                            ignore_above: 1024
                            level: extended
                            name: sections.flags
                            node_name: flags
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List flags.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-name
                            description: ELF Section List name.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List name.
                            type: keyword
                        physical_offset:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-physical-offset
                            description: ELF Section List offset.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.physical_offset
                            ignore_above: 1024
                            level: extended
                            name: sections.physical_offset
                            node_name: physical_offset
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List offset.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-physical-size
                            description: ELF Section List physical size.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List physical size.
                            type: long
                        type:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-type
                            description: ELF Section List type.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.type
                            ignore_above: 1024
                            level: extended
                            name: sections.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List type.
                            type: keyword
                        var_entropy:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: elf
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_address:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-virtual-address
                            description: ELF Section List virtual address.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.virtual_address
                            format: string
                            level: extended
                            name: sections.virtual_address
                            node_name: virtual_address
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List virtual address.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-sections-virtual-size
                            description: ELF Section List virtual size.
                            flat_name: process.entry_leader.parent.session_leader.elf.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List virtual size.
                            type: long
                    segments:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-segments
                        description: 'An array containing an object for each segment
                          of the ELF file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `elf.segments.*`.'
                        flat_name: process.entry_leader.parent.session_leader.elf.segments
                        intermediate: false
                        level: extended
                        name: segments
                        node_name: segments
                        normalize:
                        - array
                        original_fieldset: elf
                        short: ELF object segment list.
                        type: nested
                      fields:
                        sections:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-segments-sections
                            description: ELF object segment sections.
                            flat_name: process.entry_leader.parent.session_leader.elf.segments.sections
                            ignore_above: 1024
                            level: extended
                            name: segments.sections
                            node_name: sections
                            normalize: []
                            original_fieldset: elf
                            short: ELF object segment sections.
                            type: keyword
                        type:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-elf-segments-type
                            description: ELF object segment type.
                            flat_name: process.entry_leader.parent.session_leader.elf.segments.type
                            ignore_above: 1024
                            level: extended
                            name: segments.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: ELF object segment type.
                            type: keyword
                    shared_libraries:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-shared-libraries
                        description: List of shared libraries used by this ELF object.
                        flat_name: process.entry_leader.parent.session_leader.elf.shared_libraries
                        ignore_above: 1024
                        level: extended
                        name: shared_libraries
                        node_name: shared_libraries
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of shared libraries used by this ELF object.
                        type: keyword
                    telfhash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-elf-telfhash
                        description: telfhash symbol hash for ELF file.
                        flat_name: process.entry_leader.parent.session_leader.elf.telfhash
                        ignore_above: 1024
                        level: extended
                        name: telfhash
                        node_name: telfhash
                        normalize: []
                        original_fieldset: elf
                        short: telfhash hash for ELF file.
                        type: keyword
                end:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-end
                    description: The time the process ended.
                    example: '2016-05-23T08:05:34.853Z'
                    flat_name: process.entry_leader.parent.session_leader.end
                    level: extended
                    name: end
                    node_name: end
                    normalize: []
                    original_fieldset: process
                    short: The time the process ended.
                    type: date
                entity_id:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-entity-id
                    description: 'Unique identifier for the process.

                      The implementation of this is specified by the data source,
                      but some examples of what could be used here are a process-generated
                      UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying
                      components of a process.

                      Constructing a globally unique identifier is a common practice
                      to mitigate PID reuse as well as to identify a specific process
                      over time, across multiple monitored hosts.'
                    example: c2c455d9f99375d
                    flat_name: process.entry_leader.parent.session_leader.entity_id
                    ignore_above: 1024
                    level: extended
                    name: entity_id
                    node_name: entity_id
                    normalize: []
                    original_fieldset: process
                    short: Unique identifier for the process.
                    type: keyword
                entry_meta:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-entry-meta
                    flat_name: process.entry_leader.parent.session_leader.entry_meta
                    intermediate: true
                    name: entry_meta
                    node_name: entry_meta
                    original_fieldset: process
                    type: object
                  fields:
                    source:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-entry-meta-source
                        description: 'Source fields capture details about the sender
                          of a network exchange/packet. These fields are populated
                          from a network event, packet, or other event containing
                          details of a network transaction.

                          Source fields are usually populated in conjunction with
                          destination fields. The source and destination fields are
                          considered the baseline and should always be filled if an
                          event contains source and destination details from a network
                          transaction. If the event also contains identification of
                          the client and server roles, then the client and server
                          fields should also be populated.'
                        flat_name: process.entry_leader.parent.session_leader.entry_meta.source
                        intermediate: true
                        name: source
                        node_name: source
                        original_fieldset: source
                        short: Fields about the source side of a network connection,
                          used with destination.
                        type: group
                      fields:
                        address:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-address
                            description: 'Some event source addresses are defined
                              ambiguously. The event will sometimes list an IP, a
                              domain or a unix socket.  You should always store the
                              raw address in the `.address` field.

                              Then it should be duplicated to `.ip` or `.domain`,
                              depending on which one it is.'
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.address
                            ignore_above: 1024
                            level: extended
                            name: address
                            node_name: address
                            normalize: []
                            original_fieldset: source
                            short: Source network address.
                            type: keyword
                        as:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-as
                            description: An autonomous system (AS) is a collection
                              of connected Internet Protocol (IP) routing prefixes
                              under the control of one or more network operators on
                              behalf of a single administrative entity or domain that
                              presents a common, clearly defined routing policy to
                              the internet.
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.as
                            intermediate: true
                            name: as
                            node_name: as
                            original_fieldset: as
                            short: Fields describing an Autonomous System (Internet
                              routing prefix).
                            type: group
                          fields:
                            number:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-as-number
                                description: Unique number allocated to the autonomous
                                  system. The autonomous system number (ASN) uniquely
                                  identifies each network on the Internet.
                                example: 15169
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.as.number
                                level: extended
                                name: number
                                node_name: number
                                normalize: []
                                original_fieldset: as
                                short: Unique number allocated to the autonomous system.
                                type: long
                            organization:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-as-organization
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.as.organization
                                intermediate: true
                                name: organization
                                node_name: organization
                                original_fieldset: as
                                type: object
                              fields:
                                name:
                                  field_details:
                                    dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-as-organization-name
                                    description: Organization name.
                                    example: Google LLC
                                    flat_name: process.entry_leader.parent.session_leader.entry_meta.source.as.organization.name
                                    ignore_above: 1024
                                    level: extended
                                    multi_fields:
                                    - flat_name: process.entry_leader.parent.session_leader.entry_meta.source.as.organization.name.text
                                      name: text
                                      type: match_only_text
                                    name: organization.name
                                    node_name: name
                                    normalize: []
                                    original_fieldset: as
                                    short: Organization name.
                                    type: keyword
                        bytes:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-bytes
                            description: Bytes sent from the source to the destination.
                            example: 184
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.bytes
                            format: bytes
                            level: core
                            name: bytes
                            node_name: bytes
                            normalize: []
                            original_fieldset: source
                            short: Bytes sent from the source to the destination.
                            type: long
                        domain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-domain
                            description: 'The domain name of the source system.

                              This value may be a host name, a fully qualified domain
                              name, or another host naming format. The value may derive
                              from the original event or be added from enrichment.'
                            example: foo.example.com
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.domain
                            ignore_above: 1024
                            level: core
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: source
                            short: The domain name of the source.
                            type: keyword
                        geo:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo
                            description: 'Geo fields can carry data about a specific
                              location related to an event.

                              This geolocation information can be derived from techniques
                              such as Geo IP, or be user-supplied.'
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo
                            intermediate: true
                            name: geo
                            node_name: geo
                            original_fieldset: geo
                            short: Fields describing a location.
                            type: group
                          fields:
                            city_name:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-city-name
                                description: City name.
                                example: Montreal
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.city_name
                                ignore_above: 1024
                                level: core
                                name: city_name
                                node_name: city_name
                                normalize: []
                                original_fieldset: geo
                                short: City name.
                                type: keyword
                            continent_code:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-continent-code
                                description: Two-letter code representing continent's
                                  name.
                                example: NA
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.continent_code
                                ignore_above: 1024
                                level: core
                                name: continent_code
                                node_name: continent_code
                                normalize: []
                                original_fieldset: geo
                                short: Continent code.
                                type: keyword
                            continent_name:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-continent-name
                                description: Name of the continent.
                                example: North America
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.continent_name
                                ignore_above: 1024
                                level: core
                                name: continent_name
                                node_name: continent_name
                                normalize: []
                                original_fieldset: geo
                                short: Name of the continent.
                                type: keyword
                            country_iso_code:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-country-iso-code
                                description: Country ISO code.
                                example: CA
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.country_iso_code
                                ignore_above: 1024
                                level: core
                                name: country_iso_code
                                node_name: country_iso_code
                                normalize: []
                                original_fieldset: geo
                                short: Country ISO code.
                                type: keyword
                            country_name:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-country-name
                                description: Country name.
                                example: Canada
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.country_name
                                ignore_above: 1024
                                level: core
                                name: country_name
                                node_name: country_name
                                normalize: []
                                original_fieldset: geo
                                short: Country name.
                                type: keyword
                            location:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-location
                                description: Longitude and latitude.
                                example: '{ "lon": -73.614830, "lat": 45.505918 }'
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.location
                                level: core
                                name: location
                                node_name: location
                                normalize: []
                                original_fieldset: geo
                                short: Longitude and latitude.
                                type: geo_point
                            name:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-name
                                description: 'User-defined description of a location,
                                  at the level of granularity they care about.

                                  Could be the name of their data centers, the floor
                                  number, if this describes a local physical entity,
                                  city names.

                                  Not typically used in automated geolocation.'
                                example: boston-dc
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.name
                                ignore_above: 1024
                                level: extended
                                name: name
                                node_name: name
                                normalize: []
                                original_fieldset: geo
                                short: User-defined description of a location.
                                type: keyword
                            postal_code:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-postal-code
                                description: 'Postal code associated with the location.

                                  Values appropriate for this field may also be known
                                  as a postcode or ZIP code and will vary widely from
                                  country to country.'
                                example: 94040
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.postal_code
                                ignore_above: 1024
                                level: core
                                name: postal_code
                                node_name: postal_code
                                normalize: []
                                original_fieldset: geo
                                short: Postal code.
                                type: keyword
                            region_iso_code:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-region-iso-code
                                description: Region ISO code.
                                example: CA-QC
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.region_iso_code
                                ignore_above: 1024
                                level: core
                                name: region_iso_code
                                node_name: region_iso_code
                                normalize: []
                                original_fieldset: geo
                                short: Region ISO code.
                                type: keyword
                            region_name:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-region-name
                                description: Region name.
                                example: Quebec
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.region_name
                                ignore_above: 1024
                                level: core
                                name: region_name
                                node_name: region_name
                                normalize: []
                                original_fieldset: geo
                                short: Region name.
                                type: keyword
                            timezone:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-geo-timezone
                                description: The time zone of the location, such as
                                  IANA time zone name.
                                example: America/Argentina/Buenos_Aires
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.geo.timezone
                                ignore_above: 1024
                                level: core
                                name: timezone
                                node_name: timezone
                                normalize: []
                                original_fieldset: geo
                                short: Time zone.
                                type: keyword
                        ip:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-ip
                            description: IP address of the source (IPv4 or IPv6).
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.ip
                            level: core
                            name: ip
                            node_name: ip
                            normalize: []
                            original_fieldset: source
                            short: IP address of the source.
                            type: ip
                        mac:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-mac
                            description: 'MAC address of the source.

                              The notation format from RFC 7042 is suggested: Each
                              octet (that is, 8-bit byte) is represented by two [uppercase]
                              hexadecimal digits giving the value of the octet as
                              an unsigned integer. Successive octets are separated
                              by a hyphen.'
                            example: 00-00-5E-00-53-23
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.mac
                            ignore_above: 1024
                            level: core
                            name: mac
                            node_name: mac
                            normalize: []
                            original_fieldset: source
                            pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                            short: MAC address of the source.
                            type: keyword
                        nat:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-nat
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.nat
                            intermediate: true
                            name: nat
                            node_name: nat
                            original_fieldset: source
                            type: object
                          fields:
                            ip:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-nat-ip
                                description: 'Translated ip of source based NAT sessions
                                  (e.g. internal client to internet)

                                  Typically connections traversing load balancers,
                                  firewalls, or routers.'
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.nat.ip
                                level: extended
                                name: nat.ip
                                node_name: ip
                                normalize: []
                                original_fieldset: source
                                short: Source NAT ip
                                type: ip
                            port:
                              field_details:
                                dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-nat-port
                                description: 'Translated port of source based NAT
                                  sessions. (e.g. internal client to internet)

                                  Typically used with load balancers, firewalls, or
                                  routers.'
                                flat_name: process.entry_leader.parent.session_leader.entry_meta.source.nat.port
                                format: string
                                level: extended
                                name: nat.port
                                node_name: port
                                normalize: []
                                original_fieldset: source
                                short: Source NAT port
                                type: long
                        packets:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-packets
                            description: Packets sent from the source to the destination.
                            example: 12
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.packets
                            level: core
                            name: packets
                            node_name: packets
                            normalize: []
                            original_fieldset: source
                            short: Packets sent from the source to the destination.
                            type: long
                        port:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-port
                            description: Port of the source.
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.port
                            format: string
                            level: core
                            name: port
                            node_name: port
                            normalize: []
                            original_fieldset: source
                            short: Port of the source.
                            type: long
                        registered_domain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-registered-domain
                            description: 'The highest registered source domain, stripped
                              of the subdomain.

                              For example, the registered domain for "foo.example.com"
                              is "example.com".

                              This value can be determined precisely with a list like
                              the public suffix list (http://publicsuffix.org). Trying
                              to approximate this by simply taking the last two labels
                              will not work well for TLDs such as "co.uk".'
                            example: example.com
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.registered_domain
                            ignore_above: 1024
                            level: extended
                            name: registered_domain
                            node_name: registered_domain
                            normalize: []
                            original_fieldset: source
                            short: The highest registered source domain, stripped
                              of the subdomain.
                            type: keyword
                        subdomain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-subdomain
                            description: 'The subdomain portion of a fully qualified
                              domain name includes all of the names except the host
                              name under the registered_domain.  In a partially qualified
                              domain, or if the the qualification level of the full
                              name cannot be determined, subdomain contains all of
                              the names below the registered domain.

                              For example the subdomain portion of "www.east.mydomain.co.uk"
                              is "east". If the domain has multiple levels of subdomain,
                              such as "sub2.sub1.example.com", the subdomain field
                              should contain "sub2.sub1", with no trailing period.'
                            example: east
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.subdomain
                            ignore_above: 1024
                            level: extended
                            name: subdomain
                            node_name: subdomain
                            normalize: []
                            original_fieldset: source
                            short: The subdomain of the domain.
                            type: keyword
                        top_level_domain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-entry-meta-source-top-level-domain
                            description: 'The effective top level domain (eTLD), also
                              known as the domain suffix, is the last part of the
                              domain name. For example, the top level domain for example.com
                              is "com".

                              This value can be determined precisely with a list like
                              the public suffix list (http://publicsuffix.org). Trying
                              to approximate this by simply taking the last label
                              will not work well for effective TLDs such as "co.uk".'
                            example: co.uk
                            flat_name: process.entry_leader.parent.session_leader.entry_meta.source.top_level_domain
                            ignore_above: 1024
                            level: extended
                            name: top_level_domain
                            node_name: top_level_domain
                            normalize: []
                            original_fieldset: source
                            short: The effective top level domain (com, org, net,
                              co.uk).
                            type: keyword
                    type:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-entry-meta-type
                        description: 'The entry type for the entry session leader.
                          Values include: init(e.g systemd), sshd, ssm, kubelet, teleport,
                          terminal, console

                          Note: This field is only set on process.session_leader.'
                        flat_name: process.entry_leader.parent.session_leader.entry_meta.type
                        ignore_above: 1024
                        level: extended
                        name: entry_meta.type
                        node_name: type
                        normalize: []
                        original_fieldset: process
                        short: The entry type for the entry session leader.
                        type: keyword
                env_vars:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-session-leader-env-vars
                    description: 'Array of environment variable bindings. Captured
                      from a snapshot of the environment at the time of execution.

                      May be filtered to protect sensitive information.'
                    example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
                    flat_name: process.entry_leader.parent.session_leader.env_vars
                    ignore_above: 1024
                    level: extended
                    name: env_vars
                    node_name: env_vars
                    normalize:
                    - array
                    original_fieldset: process
                    short: Array of environment variable bindings.
                    type: keyword
                executable:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-executable
                    description: Absolute path to the process executable.
                    example: /usr/bin/ssh
                    flat_name: process.entry_leader.parent.session_leader.executable
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.session_leader.executable.text
                      name: text
                      type: match_only_text
                    name: executable
                    node_name: executable
                    normalize: []
                    original_fieldset: process
                    short: Absolute path to the process executable.
                    type: keyword
                exit_code:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-exit-code
                    description: 'The exit code of the process, if this is a termination
                      event.

                      The field should be absent if there is no exit code for the
                      event (e.g. process start).'
                    example: 137
                    flat_name: process.entry_leader.parent.session_leader.exit_code
                    level: extended
                    name: exit_code
                    node_name: exit_code
                    normalize: []
                    original_fieldset: process
                    short: The exit code of the process.
                    type: long
                group:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.session_leader.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.session_leader.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-group-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.session_leader.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-hash
                    description: 'The hash fields represent different bitwise hash
                      algorithms and their values.

                      Field names for common hashes (e.g. MD5, SHA1) are predefined.
                      Add fields for other hashes by lowercasing the hash algorithm
                      name and using underscore separators as appropriate (snake case,
                      e.g. sha3_512).

                      Note that this fieldset is used for common hashes that may be
                      computed over a range of generic bytes. Entity-specific hashes
                      such as ja3 or imphash are placed in the fieldsets to which
                      they relate (tls and pe, respectively).'
                    flat_name: process.entry_leader.parent.session_leader.hash
                    intermediate: true
                    name: hash
                    node_name: hash
                    original_fieldset: hash
                    short: Hashes, usually file hashes.
                    type: group
                  fields:
                    md5:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-hash-md5
                        description: MD5 hash.
                        flat_name: process.entry_leader.parent.session_leader.hash.md5
                        ignore_above: 1024
                        level: extended
                        name: md5
                        node_name: md5
                        normalize: []
                        original_fieldset: hash
                        short: MD5 hash.
                        type: keyword
                    sha1:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-hash-sha1
                        description: SHA1 hash.
                        flat_name: process.entry_leader.parent.session_leader.hash.sha1
                        ignore_above: 1024
                        level: extended
                        name: sha1
                        node_name: sha1
                        normalize: []
                        original_fieldset: hash
                        short: SHA1 hash.
                        type: keyword
                    sha256:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-hash-sha256
                        description: SHA256 hash.
                        flat_name: process.entry_leader.parent.session_leader.hash.sha256
                        ignore_above: 1024
                        level: extended
                        name: sha256
                        node_name: sha256
                        normalize: []
                        original_fieldset: hash
                        short: SHA256 hash.
                        type: keyword
                    sha384:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-hash-sha384
                        description: SHA384 hash.
                        flat_name: process.entry_leader.parent.session_leader.hash.sha384
                        ignore_above: 1024
                        level: extended
                        name: sha384
                        node_name: sha384
                        normalize: []
                        original_fieldset: hash
                        short: SHA384 hash.
                        type: keyword
                    sha512:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-hash-sha512
                        description: SHA512 hash.
                        flat_name: process.entry_leader.parent.session_leader.hash.sha512
                        ignore_above: 1024
                        level: extended
                        name: sha512
                        node_name: sha512
                        normalize: []
                        original_fieldset: hash
                        short: SHA512 hash.
                        type: keyword
                    ssdeep:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-hash-ssdeep
                        description: SSDEEP hash.
                        flat_name: process.entry_leader.parent.session_leader.hash.ssdeep
                        ignore_above: 1024
                        level: extended
                        name: ssdeep
                        node_name: ssdeep
                        normalize: []
                        original_fieldset: hash
                        short: SSDEEP hash.
                        type: keyword
                    tlsh:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-hash-tlsh
                        description: TLSH hash.
                        flat_name: process.entry_leader.parent.session_leader.hash.tlsh
                        ignore_above: 1024
                        level: extended
                        name: tlsh
                        node_name: tlsh
                        normalize: []
                        original_fieldset: hash
                        short: TLSH hash.
                        type: keyword
                interactive:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-interactive
                    description: 'Whether the process is connected to an interactive
                      shell.

                      Process interactivity is inferred from the processes file descriptors.
                      If the character device for the controlling tty is the same
                      as stdin and stderr for the process, the process is considered
                      interactive.

                      Note: A non-interactive process can belong to an interactive
                      session and is simply one that does not have open file descriptors
                      reading the controlling TTY on FD 0 (stdin) or writing to the
                      controlling TTY on FD 2 (stderr). A backgrounded process is
                      still considered interactive if stdin and stderr are connected
                      to the controlling TTY.'
                    example: true
                    flat_name: process.entry_leader.parent.session_leader.interactive
                    level: extended
                    name: interactive
                    node_name: interactive
                    normalize: []
                    original_fieldset: process
                    short: Whether the process is connected to an interactive shell.
                    type: boolean
                io:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-session-leader-io
                    description: 'A chunk of input or output (IO) from a single process.

                      This field only appears on the top level process object, which
                      is the process that wrote the output or read the input.'
                    flat_name: process.entry_leader.parent.session_leader.io
                    intermediate: false
                    level: extended
                    name: io
                    node_name: io
                    normalize: []
                    original_fieldset: process
                    short: A chunk of input or output (IO) from a single process.
                    type: object
                  fields:
                    bytes_skipped:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-io-bytes-skipped
                        description: An array of byte offsets and lengths denoting
                          where IO data has been skipped.
                        flat_name: process.entry_leader.parent.session_leader.io.bytes_skipped
                        intermediate: false
                        level: extended
                        name: io.bytes_skipped
                        node_name: bytes_skipped
                        normalize:
                        - array
                        original_fieldset: process
                        short: An array of byte offsets and lengths denoting where
                          IO data has been skipped.
                        type: object
                      fields:
                        length:
                          field_details:
                            beta: This field is beta and subject to change.
                            dashed_name: process-entry-leader-parent-session-leader-io-bytes-skipped-length
                            description: The length of bytes skipped.
                            flat_name: process.entry_leader.parent.session_leader.io.bytes_skipped.length
                            level: extended
                            name: io.bytes_skipped.length
                            node_name: length
                            normalize: []
                            original_fieldset: process
                            short: The length of bytes skipped.
                            type: long
                        offset:
                          field_details:
                            beta: This field is beta and subject to change.
                            dashed_name: process-entry-leader-parent-session-leader-io-bytes-skipped-offset
                            description: The byte offset into this event's io.text
                              (or io.bytes in the future) where length bytes were
                              skipped.
                            flat_name: process.entry_leader.parent.session_leader.io.bytes_skipped.offset
                            level: extended
                            name: io.bytes_skipped.offset
                            node_name: offset
                            normalize: []
                            original_fieldset: process
                            short: The byte offset into this event's io.text (or io.bytes
                              in the future) where length bytes were skipped.
                            type: long
                    max_bytes_per_process_exceeded:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-io-max-bytes-per-process-exceeded
                        description: If true, the process producing the output has
                          exceeded the max_kilobytes_per_process configuration setting.
                        flat_name: process.entry_leader.parent.session_leader.io.max_bytes_per_process_exceeded
                        level: extended
                        name: io.max_bytes_per_process_exceeded
                        node_name: max_bytes_per_process_exceeded
                        normalize: []
                        original_fieldset: process
                        short: If true, the process producing the output has exceeded
                          the max_kilobytes_per_process configuration setting.
                        type: boolean
                    text:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-io-text
                        description: 'A chunk of output or input sanitized to UTF-8.

                          Best efforts are made to ensure complete lines are captured
                          in these events. Assumptions should NOT be made that multiple
                          lines will appear in the same event. TTY output may contain
                          terminal control codes such as for cursor movement, so some
                          string queries may not match due to terminal codes inserted
                          between characters of a word.'
                        flat_name: process.entry_leader.parent.session_leader.io.text
                        level: extended
                        name: io.text
                        node_name: text
                        normalize: []
                        original_fieldset: process
                        short: A chunk of output or input sanitized to UTF-8.
                        type: wildcard
                    total_bytes_captured:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-io-total-bytes-captured
                        description: The total number of bytes captured in this event.
                        flat_name: process.entry_leader.parent.session_leader.io.total_bytes_captured
                        level: extended
                        name: io.total_bytes_captured
                        node_name: total_bytes_captured
                        normalize: []
                        original_fieldset: process
                        short: The total number of bytes captured in this event.
                        type: long
                    total_bytes_skipped:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-io-total-bytes-skipped
                        description: The total number of bytes that were not captured
                          due to implementation restrictions such as buffer size limits.
                          Implementors should strive to ensure this value is always
                          zero
                        flat_name: process.entry_leader.parent.session_leader.io.total_bytes_skipped
                        level: extended
                        name: io.total_bytes_skipped
                        node_name: total_bytes_skipped
                        normalize: []
                        original_fieldset: process
                        short: The total number of bytes that were not captured due
                          to implementation restrictions such as buffer size limits.
                        type: long
                    type:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-io-type
                        description: 'The type of object on which the IO action (read
                          or write) was taken.

                          Currently only ''tty'' is supported. Other types may be
                          added in the future for ''file'' and ''socket'' support.'
                        flat_name: process.entry_leader.parent.session_leader.io.type
                        ignore_above: 1024
                        level: extended
                        name: io.type
                        node_name: type
                        normalize: []
                        original_fieldset: process
                        short: The type of object on which the IO action (read or
                          write) was taken.
                        type: keyword
                macho:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-entry-leader-parent-session-leader-macho
                    description: These fields contain Mac OS Mach Object file format
                      (Mach-O) metadata.
                    flat_name: process.entry_leader.parent.session_leader.macho
                    intermediate: true
                    name: macho
                    node_name: macho
                    original_fieldset: macho
                    short: These fields contain Mac OS Mach Object file format (Mach-O)
                      metadata.
                    type: group
                  fields:
                    go_import_hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-go-import-hash
                        description: 'A hash of the Go language imports in a Mach-O
                          file excluding standard library imports. An import hash
                          can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: process.entry_leader.parent.session_leader.macho.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: macho
                        short: A hash of the Go language imports in a Mach-O file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: process.entry_leader.parent.session_leader.macho.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: macho
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: process.entry_leader.parent.session_leader.macho.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: process.entry_leader.parent.session_leader.macho.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: process.entry_leader.parent.session_leader.macho.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: macho
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    import_hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-import-hash
                        description: 'A hash of the imports in a Mach-O file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is a synonym for symhash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: process.entry_leader.parent.session_leader.macho.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: macho
                        short: A hash of the imports in a Mach-O file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-imports
                        description: List of imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.macho.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: macho
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.macho.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.macho.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    sections:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-sections
                        description: 'An array containing an object for each section
                          of the Mach-O file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `macho.sections.*`.'
                        flat_name: process.entry_leader.parent.session_leader.macho.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: macho
                        short: Section information of the Mach-O file.
                        type: nested
                      fields:
                        entropy:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-macho-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: process.entry_leader.parent.session_leader.macho.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: macho
                            short: Shannon entropy calculation from the section.
                            type: long
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-macho-sections-name
                            description: Mach-O Section List name.
                            flat_name: process.entry_leader.parent.session_leader.macho.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: macho
                            short: Mach-O Section List name.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-macho-sections-physical-size
                            description: Mach-O Section List physical size.
                            flat_name: process.entry_leader.parent.session_leader.macho.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: macho
                            short: Mach-O Section List physical size.
                            type: long
                        var_entropy:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-macho-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: process.entry_leader.parent.session_leader.macho.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: macho
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-macho-sections-virtual-size
                            description: Mach-O Section List virtual size. This is
                              always the same as `physical_size`.
                            flat_name: process.entry_leader.parent.session_leader.macho.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: macho
                            short: Mach-O Section List virtual size. This is always
                              the same as `physical_size`.
                            type: long
                    symhash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-macho-symhash
                        description: 'A hash of the imports in a Mach-O file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is a Mach-O implementation of the Windows PE imphash'
                        example: d3ccf195b62a9279c3c19af1080497ec
                        flat_name: process.entry_leader.parent.session_leader.macho.symhash
                        ignore_above: 1024
                        level: extended
                        name: symhash
                        node_name: symhash
                        normalize: []
                        original_fieldset: macho
                        short: A hash of the imports in a Mach-O file.
                        type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-name
                    description: 'Process name.

                      Sometimes called program name or similar.'
                    example: ssh
                    flat_name: process.entry_leader.parent.session_leader.name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.session_leader.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: process
                    short: Process name.
                    type: keyword
                pe:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-pe
                    description: These fields contain Windows Portable Executable
                      (PE) metadata.
                    flat_name: process.entry_leader.parent.session_leader.pe
                    intermediate: true
                    name: pe
                    node_name: pe
                    original_fieldset: pe
                    short: These fields contain Windows Portable Executable (PE) metadata.
                    type: group
                  fields:
                    architecture:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-architecture
                        description: CPU architecture target for the file.
                        example: x64
                        flat_name: process.entry_leader.parent.session_leader.pe.architecture
                        ignore_above: 1024
                        level: extended
                        name: architecture
                        node_name: architecture
                        normalize: []
                        original_fieldset: pe
                        short: CPU architecture target for the file.
                        type: keyword
                    company:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-company
                        description: Internal company name of the file, provided at
                          compile-time.
                        example: Microsoft Corporation
                        flat_name: process.entry_leader.parent.session_leader.pe.company
                        ignore_above: 1024
                        level: extended
                        name: company
                        node_name: company
                        normalize: []
                        original_fieldset: pe
                        short: Internal company name of the file, provided at compile-time.
                        type: keyword
                    description:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-description
                        description: Internal description of the file, provided at
                          compile-time.
                        example: Paint
                        flat_name: process.entry_leader.parent.session_leader.pe.description
                        ignore_above: 1024
                        level: extended
                        name: description
                        node_name: description
                        normalize: []
                        original_fieldset: pe
                        short: Internal description of the file, provided at compile-time.
                        type: keyword
                    file_version:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-file-version
                        description: Internal version of the file, provided at compile-time.
                        example: 6.3.9600.17415
                        flat_name: process.entry_leader.parent.session_leader.pe.file_version
                        ignore_above: 1024
                        level: extended
                        name: file_version
                        node_name: file_version
                        normalize: []
                        original_fieldset: pe
                        short: Process name.
                        type: keyword
                    go_import_hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-go-import-hash
                        description: 'A hash of the Go language imports in a PE file
                          excluding standard library imports. An import hash can be
                          used to fingerprint binaries even after recompilation or
                          other code-level transformations have occurred, which would
                          change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: process.entry_leader.parent.session_leader.pe.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the Go language imports in a PE file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: process.entry_leader.parent.session_leader.pe.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: pe
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: process.entry_leader.parent.session_leader.pe.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: process.entry_leader.parent.session_leader.pe.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: process.entry_leader.parent.session_leader.pe.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: pe
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    imphash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-imphash
                        description: 'A hash of the imports in a PE file. An imphash
                          -- or import hash -- can be used to fingerprint binaries
                          even after recompilation or other code-level transformations
                          have occurred, which would change more traditional hash
                          values.

                          Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                        example: 0c6803c4e922103c4dca5963aad36ddf
                        flat_name: process.entry_leader.parent.session_leader.pe.imphash
                        ignore_above: 1024
                        level: extended
                        name: imphash
                        node_name: imphash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the imports in a PE file.
                        type: keyword
                    import_hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-import-hash
                        description: 'A hash of the imports in a PE file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is a synonym for imphash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: process.entry_leader.parent.session_leader.pe.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the imports in a PE file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-imports
                        description: List of imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.pe.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: pe
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.pe.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: process.entry_leader.parent.session_leader.pe.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    original_file_name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-original-file-name
                        description: Internal name of the file, provided at compile-time.
                        example: MSPAINT.EXE
                        flat_name: process.entry_leader.parent.session_leader.pe.original_file_name
                        ignore_above: 1024
                        level: extended
                        name: original_file_name
                        node_name: original_file_name
                        normalize: []
                        original_fieldset: pe
                        short: Internal name of the file, provided at compile-time.
                        type: keyword
                    pehash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-pehash
                        description: 'A hash of the PE header and data from one or
                          more PE sections. An pehash can be used to cluster files
                          by transforming structural information about a file into
                          a hash value.

                          Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                        example: 73ff189b63cd6be375a7ff25179a38d347651975
                        flat_name: process.entry_leader.parent.session_leader.pe.pehash
                        ignore_above: 1024
                        level: extended
                        name: pehash
                        node_name: pehash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the PE header and data from one or more PE
                          sections.
                        type: keyword
                    product:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-product
                        description: Internal product name of the file, provided at
                          compile-time.
                        example: "Microsoft\xAE Windows\xAE Operating System"
                        flat_name: process.entry_leader.parent.session_leader.pe.product
                        ignore_above: 1024
                        level: extended
                        name: product
                        node_name: product
                        normalize: []
                        original_fieldset: pe
                        short: Internal product name of the file, provided at compile-time.
                        type: keyword
                    sections:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-pe-sections
                        description: 'An array containing an object for each section
                          of the PE file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `pe.sections.*`.'
                        flat_name: process.entry_leader.parent.session_leader.pe.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: pe
                        short: Section information of the PE file.
                        type: nested
                      fields:
                        entropy:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-pe-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: process.entry_leader.parent.session_leader.pe.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: pe
                            short: Shannon entropy calculation from the section.
                            type: long
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-pe-sections-name
                            description: PE Section List name.
                            flat_name: process.entry_leader.parent.session_leader.pe.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List name.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-pe-sections-physical-size
                            description: PE Section List physical size.
                            flat_name: process.entry_leader.parent.session_leader.pe.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List physical size.
                            type: long
                        var_entropy:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-pe-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: process.entry_leader.parent.session_leader.pe.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: pe
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-pe-sections-virtual-size
                            description: PE Section List virtual size. This is always
                              the same as `physical_size`.
                            flat_name: process.entry_leader.parent.session_leader.pe.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List virtual size. This is always the
                              same as `physical_size`.
                            type: long
                pgid:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-pgid
                    description: 'Deprecated for removal in next major version release.
                      This field is superseded by `process.group_leader.pid`.

                      Identifier of the group of processes the process belongs to.'
                    flat_name: process.entry_leader.parent.session_leader.pgid
                    format: string
                    level: extended
                    name: pgid
                    node_name: pgid
                    normalize: []
                    original_fieldset: process
                    short: Deprecated identifier of the group of processes the process
                      belongs to.
                    type: long
                pid:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-pid
                    description: Process id.
                    example: 4242
                    flat_name: process.entry_leader.parent.session_leader.pid
                    format: string
                    level: core
                    name: pid
                    node_name: pid
                    normalize: []
                    original_fieldset: process
                    short: Process id.
                    type: long
                real_group:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.session_leader.group
                    intermediate: true
                    name: real_group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.real_group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.session_leader.real_group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-group-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.session_leader.real_group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                real_user:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.entry_leader.parent.session_leader.user
                    intermediate: true
                    name: real_user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.real_user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-email
                        description: User email address.
                        flat_name: process.entry_leader.parent.session_leader.real_user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.entry_leader.parent.session_leader.real_user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.real_user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.entry_leader.parent.session_leader.real_user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.entry_leader.parent.session_leader.real_user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.entry_leader.parent.session_leader.real_user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-group-name
                            description: Name of the group.
                            flat_name: process.entry_leader.parent.session_leader.real_user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.entry_leader.parent.session_leader.real_user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.entry_leader.parent.session_leader.real_user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.entry_leader.parent.session_leader.real_user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.real_user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-real-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.entry_leader.parent.session_leader.real_user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.real_user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.entry_leader.parent.session_leader.real_user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.entry_leader.parent.session_leader.real_user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.real_user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.entry_leader.parent.session_leader.real_user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-real-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.entry_leader.parent.session_leader.real_user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-real-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.entry_leader.parent.session_leader.real_user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                same_as_process:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-same-as-process
                    description: 'This boolean is used to identify if a leader process
                      is the same as the top level process.

                      For example, if `process.group_leader.same_as_process = true`,
                      it means the process event in question is the leader of its
                      process group. Details under `process.*` like `pid` would be
                      the same under `process.group_leader.*` The same applies for
                      both `process.session_leader` and `process.entry_leader`.

                      This field exists to the benefit of EQL and other rule engines
                      since it''s not possible to compare equality between two fields
                      in a single document. e.g `process.entity_id` = `process.group_leader.entity_id`
                      (top level process is the process group leader) OR `process.entity_id`
                      = `process.entry_leader.entity_id` (top level process is the
                      entry session leader)

                      Instead these rules could be written like: `process.group_leader.same_as_process:
                      true` OR `process.entry_leader.same_as_process: true`

                      Note: This field is only set on `process.entry_leader`, `process.session_leader`
                      and `process.group_leader`.'
                    example: true
                    flat_name: process.entry_leader.parent.session_leader.same_as_process
                    level: extended
                    name: same_as_process
                    node_name: same_as_process
                    normalize: []
                    original_fieldset: process
                    short: This boolean is used to identify if a leader process is
                      the same as the top level process.
                    type: boolean
                saved_group:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.session_leader.group
                    intermediate: true
                    name: saved_group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.saved_group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.session_leader.saved_group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-group-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.session_leader.saved_group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                saved_user:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.entry_leader.parent.session_leader.user
                    intermediate: true
                    name: saved_user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.saved_user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-email
                        description: User email address.
                        flat_name: process.entry_leader.parent.session_leader.saved_user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.entry_leader.parent.session_leader.saved_user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.saved_user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.entry_leader.parent.session_leader.saved_user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.entry_leader.parent.session_leader.saved_user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.entry_leader.parent.session_leader.saved_user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-group-name
                            description: Name of the group.
                            flat_name: process.entry_leader.parent.session_leader.saved_user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.entry_leader.parent.session_leader.saved_user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.entry_leader.parent.session_leader.saved_user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.entry_leader.parent.session_leader.saved_user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.saved_user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.entry_leader.parent.session_leader.saved_user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.saved_user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.entry_leader.parent.session_leader.saved_user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.entry_leader.parent.session_leader.saved_user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.saved_user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.entry_leader.parent.session_leader.saved_user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-saved-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.entry_leader.parent.session_leader.saved_user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-saved-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.entry_leader.parent.session_leader.saved_user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                start:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-start
                    description: The time the process started.
                    example: '2016-05-23T08:05:34.853Z'
                    flat_name: process.entry_leader.parent.session_leader.start
                    level: extended
                    name: start
                    node_name: start
                    normalize: []
                    original_fieldset: process
                    short: The time the process started.
                    type: date
                supplemental_groups:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.session_leader.group
                    intermediate: true
                    name: supplemental_groups
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-supplemental-groups-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.supplemental_groups.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-supplemental-groups-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.session_leader.supplemental_groups.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-supplemental-groups-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.session_leader.supplemental_groups.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                thread:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-thread
                    flat_name: process.entry_leader.parent.session_leader.thread
                    intermediate: true
                    name: thread
                    node_name: thread
                    original_fieldset: process
                    type: object
                  fields:
                    capabilities:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-thread-capabilities
                        flat_name: process.entry_leader.parent.session_leader.thread.capabilities
                        intermediate: true
                        name: thread.capabilities
                        node_name: capabilities
                        original_fieldset: process
                        type: object
                      fields:
                        effective:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-thread-capabilities-effective
                            description: This is the set of capabilities used by the
                              kernel to perform permission checks for the thread.
                            example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                            flat_name: process.entry_leader.parent.session_leader.thread.capabilities.effective
                            ignore_above: 1024
                            level: extended
                            name: thread.capabilities.effective
                            node_name: effective
                            normalize:
                            - array
                            original_fieldset: process
                            pattern: ^(CAP_[A-Z_]+|\d+)$
                            short: Array of capabilities used for permission checks.
                            type: keyword
                        permitted:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-thread-capabilities-permitted
                            description: This is a limiting superset for the effective
                              capabilities that the thread may assume.
                            example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                            flat_name: process.entry_leader.parent.session_leader.thread.capabilities.permitted
                            ignore_above: 1024
                            level: extended
                            name: thread.capabilities.permitted
                            node_name: permitted
                            normalize:
                            - array
                            original_fieldset: process
                            pattern: ^(CAP_[A-Z_]+|\d+)$
                            short: Array of capabilities a thread could assume.
                            type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-thread-id
                        description: Thread ID.
                        example: 4242
                        flat_name: process.entry_leader.parent.session_leader.thread.id
                        format: string
                        level: extended
                        name: thread.id
                        node_name: id
                        normalize: []
                        original_fieldset: process
                        short: Thread ID.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-thread-name
                        description: Thread name.
                        example: thread-0
                        flat_name: process.entry_leader.parent.session_leader.thread.name
                        ignore_above: 1024
                        level: extended
                        name: thread.name
                        node_name: name
                        normalize: []
                        original_fieldset: process
                        short: Thread name.
                        type: keyword
                title:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-title
                    description: 'Process title.

                      The proctitle, some times the same as process name. Can also
                      be different: for example a browser setting its title to the
                      web page currently opened.'
                    flat_name: process.entry_leader.parent.session_leader.title
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.session_leader.title.text
                      name: text
                      type: match_only_text
                    name: title
                    node_name: title
                    normalize: []
                    original_fieldset: process
                    short: Process title.
                    type: keyword
                tty:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-tty
                    description: Information about the controlling TTY device. If
                      set, the process belongs to an interactive session.
                    flat_name: process.entry_leader.parent.session_leader.tty
                    intermediate: false
                    level: extended
                    name: tty
                    node_name: tty
                    normalize: []
                    original_fieldset: process
                    short: Information about the controlling TTY device.
                    type: object
                  fields:
                    char_device:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-tty-char-device
                        flat_name: process.entry_leader.parent.session_leader.tty.char_device
                        intermediate: true
                        name: tty.char_device
                        node_name: char_device
                        original_fieldset: process
                        type: object
                      fields:
                        major:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-tty-char-device-major
                            description: The major number identifies the driver associated
                              with the device. The character device's major and minor
                              numbers can be algorithmically combined to produce the
                              more familiar terminal identifiers such as "ttyS0" and
                              "pts/0". For more details, please refer to the Linux
                              kernel documentation.
                            example: 4
                            flat_name: process.entry_leader.parent.session_leader.tty.char_device.major
                            level: extended
                            name: tty.char_device.major
                            node_name: major
                            normalize: []
                            original_fieldset: process
                            short: The TTY character device's major number.
                            type: long
                        minor:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-tty-char-device-minor
                            description: "The minor number is used only by the driver\
                              \ specified by the major number; other parts of the\
                              \ kernel don\u2019t use it, and merely pass it along\
                              \ to the driver. It is common for a driver to control\
                              \ several devices; the minor number provides a way for\
                              \ the driver to differentiate among them."
                            example: 1
                            flat_name: process.entry_leader.parent.session_leader.tty.char_device.minor
                            level: extended
                            name: tty.char_device.minor
                            node_name: minor
                            normalize: []
                            original_fieldset: process
                            short: The TTY character device's minor number.
                            type: long
                    columns:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-tty-columns
                        description: 'The number of character columns per line. e.g
                          terminal width

                          Terminal sizes can change, so this value reflects the maximum
                          value for a given IO event. i.e. where event.action = ''text_output'''
                        example: 80
                        flat_name: process.entry_leader.parent.session_leader.tty.columns
                        level: extended
                        name: tty.columns
                        node_name: columns
                        normalize: []
                        original_fieldset: process
                        short: The number of character columns per line. e.g terminal
                          width
                        type: long
                    rows:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-tty-rows
                        description: 'The number of character rows in the terminal.
                          e.g terminal height

                          Terminal sizes can change, so this value reflects the maximum
                          value for a given IO event. i.e. where event.action = ''text_output'''
                        example: 24
                        flat_name: process.entry_leader.parent.session_leader.tty.rows
                        level: extended
                        name: tty.rows
                        node_name: rows
                        normalize: []
                        original_fieldset: process
                        short: The number of character rows in the terminal. e.g terminal
                          height
                        type: long
                uptime:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-uptime
                    description: Seconds the process has been up.
                    example: 1325
                    flat_name: process.entry_leader.parent.session_leader.uptime
                    level: extended
                    name: uptime
                    node_name: uptime
                    normalize: []
                    original_fieldset: process
                    short: Seconds the process has been up.
                    type: long
                user:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.entry_leader.parent.session_leader.user
                    intermediate: true
                    name: user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.session_leader.user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-email
                        description: User email address.
                        flat_name: process.entry_leader.parent.session_leader.user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.entry_leader.parent.session_leader.user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.entry_leader.parent.session_leader.user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.entry_leader.parent.session_leader.user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.entry_leader.parent.session_leader.user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-group-name
                            description: Name of the group.
                            flat_name: process.entry_leader.parent.session_leader.user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.entry_leader.parent.session_leader.user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.entry_leader.parent.session_leader.user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.entry_leader.parent.session_leader.user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.entry_leader.parent.session_leader.user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-entry-leader-parent-session-leader-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.entry_leader.parent.session_leader.user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.entry_leader.parent.session_leader.user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.entry_leader.parent.session_leader.user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.entry_leader.parent.session_leader.user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.entry_leader.parent.session_leader.user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-entry-leader-parent-session-leader-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.entry_leader.parent.session_leader.user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-entry-leader-parent-session-leader-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.entry_leader.parent.session_leader.user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                vpid:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-vpid
                    description: 'Virtual process id.

                      The process id within a pid namespace. This is not necessarily
                      unique across all processes on the host but it is unique within
                      the process namespace that the process exists within.'
                    example: 4242
                    flat_name: process.entry_leader.parent.session_leader.vpid
                    format: string
                    level: core
                    name: vpid
                    node_name: vpid
                    normalize: []
                    original_fieldset: process
                    short: Virtual process id.
                    type: long
                working_directory:
                  field_details:
                    dashed_name: process-entry-leader-parent-session-leader-working-directory
                    description: The working directory of the process.
                    example: /home/alice
                    flat_name: process.entry_leader.parent.session_leader.working_directory
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.session_leader.working_directory.text
                      name: text
                      type: match_only_text
                    name: working_directory
                    node_name: working_directory
                    normalize: []
                    original_fieldset: process
                    short: The working directory of the process.
                    type: keyword
            start:
              field_details:
                dashed_name: process-entry-leader-parent-start
                description: The time the process started.
                example: '2016-05-23T08:05:34.853Z'
                flat_name: process.entry_leader.parent.start
                level: extended
                name: start
                node_name: start
                normalize: []
                original_fieldset: process
                short: The time the process started.
                type: date
            supplemental_groups:
              field_details:
                dashed_name: process-entry-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.parent.group
                intermediate: true
                name: supplemental_groups
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-supplemental-groups-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.supplemental_groups.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-supplemental-groups-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.parent.supplemental_groups.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-supplemental-groups-name
                    description: Name of the group.
                    flat_name: process.entry_leader.parent.supplemental_groups.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            thread:
              field_details:
                dashed_name: process-entry-leader-parent-thread
                flat_name: process.entry_leader.parent.thread
                intermediate: true
                name: thread
                node_name: thread
                original_fieldset: process
                type: object
              fields:
                capabilities:
                  field_details:
                    dashed_name: process-entry-leader-parent-thread-capabilities
                    flat_name: process.entry_leader.parent.thread.capabilities
                    intermediate: true
                    name: thread.capabilities
                    node_name: capabilities
                    original_fieldset: process
                    type: object
                  fields:
                    effective:
                      field_details:
                        dashed_name: process-entry-leader-parent-thread-capabilities-effective
                        description: This is the set of capabilities used by the kernel
                          to perform permission checks for the thread.
                        example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                        flat_name: process.entry_leader.parent.thread.capabilities.effective
                        ignore_above: 1024
                        level: extended
                        name: thread.capabilities.effective
                        node_name: effective
                        normalize:
                        - array
                        original_fieldset: process
                        pattern: ^(CAP_[A-Z_]+|\d+)$
                        short: Array of capabilities used for permission checks.
                        type: keyword
                    permitted:
                      field_details:
                        dashed_name: process-entry-leader-parent-thread-capabilities-permitted
                        description: This is a limiting superset for the effective
                          capabilities that the thread may assume.
                        example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                        flat_name: process.entry_leader.parent.thread.capabilities.permitted
                        ignore_above: 1024
                        level: extended
                        name: thread.capabilities.permitted
                        node_name: permitted
                        normalize:
                        - array
                        original_fieldset: process
                        pattern: ^(CAP_[A-Z_]+|\d+)$
                        short: Array of capabilities a thread could assume.
                        type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-thread-id
                    description: Thread ID.
                    example: 4242
                    flat_name: process.entry_leader.parent.thread.id
                    format: string
                    level: extended
                    name: thread.id
                    node_name: id
                    normalize: []
                    original_fieldset: process
                    short: Thread ID.
                    type: long
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-thread-name
                    description: Thread name.
                    example: thread-0
                    flat_name: process.entry_leader.parent.thread.name
                    ignore_above: 1024
                    level: extended
                    name: thread.name
                    node_name: name
                    normalize: []
                    original_fieldset: process
                    short: Thread name.
                    type: keyword
            title:
              field_details:
                dashed_name: process-entry-leader-parent-title
                description: 'Process title.

                  The proctitle, some times the same as process name. Can also be
                  different: for example a browser setting its title to the web page
                  currently opened.'
                flat_name: process.entry_leader.parent.title
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.parent.title.text
                  name: text
                  type: match_only_text
                name: title
                node_name: title
                normalize: []
                original_fieldset: process
                short: Process title.
                type: keyword
            tty:
              field_details:
                dashed_name: process-entry-leader-parent-tty
                description: Information about the controlling TTY device. If set,
                  the process belongs to an interactive session.
                flat_name: process.entry_leader.parent.tty
                intermediate: false
                level: extended
                name: tty
                node_name: tty
                normalize: []
                original_fieldset: process
                short: Information about the controlling TTY device.
                type: object
              fields:
                char_device:
                  field_details:
                    dashed_name: process-entry-leader-parent-tty-char-device
                    flat_name: process.entry_leader.parent.tty.char_device
                    intermediate: true
                    name: tty.char_device
                    node_name: char_device
                    original_fieldset: process
                    type: object
                  fields:
                    major:
                      field_details:
                        dashed_name: process-entry-leader-parent-tty-char-device-major
                        description: The major number identifies the driver associated
                          with the device. The character device's major and minor
                          numbers can be algorithmically combined to produce the more
                          familiar terminal identifiers such as "ttyS0" and "pts/0".
                          For more details, please refer to the Linux kernel documentation.
                        example: 4
                        flat_name: process.entry_leader.parent.tty.char_device.major
                        level: extended
                        name: tty.char_device.major
                        node_name: major
                        normalize: []
                        original_fieldset: process
                        short: The TTY character device's major number.
                        type: long
                    minor:
                      field_details:
                        dashed_name: process-entry-leader-parent-tty-char-device-minor
                        description: "The minor number is used only by the driver\
                          \ specified by the major number; other parts of the kernel\
                          \ don\u2019t use it, and merely pass it along to the driver.\
                          \ It is common for a driver to control several devices;\
                          \ the minor number provides a way for the driver to differentiate\
                          \ among them."
                        example: 1
                        flat_name: process.entry_leader.parent.tty.char_device.minor
                        level: extended
                        name: tty.char_device.minor
                        node_name: minor
                        normalize: []
                        original_fieldset: process
                        short: The TTY character device's minor number.
                        type: long
                columns:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-tty-columns
                    description: 'The number of character columns per line. e.g terminal
                      width

                      Terminal sizes can change, so this value reflects the maximum
                      value for a given IO event. i.e. where event.action = ''text_output'''
                    example: 80
                    flat_name: process.entry_leader.parent.tty.columns
                    level: extended
                    name: tty.columns
                    node_name: columns
                    normalize: []
                    original_fieldset: process
                    short: The number of character columns per line. e.g terminal
                      width
                    type: long
                rows:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-entry-leader-parent-tty-rows
                    description: 'The number of character rows in the terminal. e.g
                      terminal height

                      Terminal sizes can change, so this value reflects the maximum
                      value for a given IO event. i.e. where event.action = ''text_output'''
                    example: 24
                    flat_name: process.entry_leader.parent.tty.rows
                    level: extended
                    name: tty.rows
                    node_name: rows
                    normalize: []
                    original_fieldset: process
                    short: The number of character rows in the terminal. e.g terminal
                      height
                    type: long
            uptime:
              field_details:
                dashed_name: process-entry-leader-parent-uptime
                description: Seconds the process has been up.
                example: 1325
                flat_name: process.entry_leader.parent.uptime
                level: extended
                name: uptime
                node_name: uptime
                normalize: []
                original_fieldset: process
                short: Seconds the process has been up.
                type: long
            user:
              field_details:
                dashed_name: process-entry-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.entry_leader.parent.user
                intermediate: true
                name: user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.parent.user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-email
                    description: User email address.
                    flat_name: process.entry_leader.parent.user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.entry_leader.parent.user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.entry_leader.parent.user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.entry_leader.parent.user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.entry_leader.parent.user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.entry_leader.parent.user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-group-name
                        description: Name of the group.
                        flat_name: process.entry_leader.parent.user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.entry_leader.parent.user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.entry_leader.parent.user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.entry_leader.parent.user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.entry_leader.parent.user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-entry-leader-parent-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.entry_leader.parent.user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.entry_leader.parent.user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.entry_leader.parent.user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.entry_leader.parent.user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.entry_leader.parent.user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.entry_leader.parent.user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-entry-leader-parent-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.entry_leader.parent.user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-entry-leader-parent-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.entry_leader.parent.user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            vpid:
              field_details:
                dashed_name: process-entry-leader-parent-vpid
                description: 'Virtual process id.

                  The process id within a pid namespace. This is not necessarily unique
                  across all processes on the host but it is unique within the process
                  namespace that the process exists within.'
                example: 4242
                flat_name: process.entry_leader.parent.vpid
                format: string
                level: core
                name: vpid
                node_name: vpid
                normalize: []
                original_fieldset: process
                short: Virtual process id.
                type: long
            working_directory:
              field_details:
                dashed_name: process-entry-leader-parent-working-directory
                description: The working directory of the process.
                example: /home/alice
                flat_name: process.entry_leader.parent.working_directory
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.parent.working_directory.text
                  name: text
                  type: match_only_text
                name: working_directory
                node_name: working_directory
                normalize: []
                original_fieldset: process
                short: The working directory of the process.
                type: keyword
        pe:
          field_details:
            dashed_name: process-entry-leader-pe
            description: These fields contain Windows Portable Executable (PE) metadata.
            flat_name: process.entry_leader.pe
            intermediate: true
            name: pe
            node_name: pe
            original_fieldset: pe
            short: These fields contain Windows Portable Executable (PE) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-entry-leader-pe-architecture
                description: CPU architecture target for the file.
                example: x64
                flat_name: process.entry_leader.pe.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: pe
                short: CPU architecture target for the file.
                type: keyword
            company:
              field_details:
                dashed_name: process-entry-leader-pe-company
                description: Internal company name of the file, provided at compile-time.
                example: Microsoft Corporation
                flat_name: process.entry_leader.pe.company
                ignore_above: 1024
                level: extended
                name: company
                node_name: company
                normalize: []
                original_fieldset: pe
                short: Internal company name of the file, provided at compile-time.
                type: keyword
            description:
              field_details:
                dashed_name: process-entry-leader-pe-description
                description: Internal description of the file, provided at compile-time.
                example: Paint
                flat_name: process.entry_leader.pe.description
                ignore_above: 1024
                level: extended
                name: description
                node_name: description
                normalize: []
                original_fieldset: pe
                short: Internal description of the file, provided at compile-time.
                type: keyword
            file_version:
              field_details:
                dashed_name: process-entry-leader-pe-file-version
                description: Internal version of the file, provided at compile-time.
                example: 6.3.9600.17415
                flat_name: process.entry_leader.pe.file_version
                ignore_above: 1024
                level: extended
                name: file_version
                node_name: file_version
                normalize: []
                original_fieldset: pe
                short: Process name.
                type: keyword
            go_import_hash:
              field_details:
                dashed_name: process-entry-leader-pe-go-import-hash
                description: 'A hash of the Go language imports in a PE file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.entry_leader.pe.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the Go language imports in a PE file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-entry-leader-pe-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.entry_leader.pe.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: pe
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-entry-leader-pe-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.entry_leader.pe.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-entry-leader-pe-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.entry_leader.pe.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-entry-leader-pe-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.entry_leader.pe.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: pe
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            imphash:
              field_details:
                dashed_name: process-entry-leader-pe-imphash
                description: 'A hash of the imports in a PE file. An imphash -- or
                  import hash -- can be used to fingerprint binaries even after recompilation
                  or other code-level transformations have occurred, which would change
                  more traditional hash values.

                  Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                example: 0c6803c4e922103c4dca5963aad36ddf
                flat_name: process.entry_leader.pe.imphash
                ignore_above: 1024
                level: extended
                name: imphash
                node_name: imphash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            import_hash:
              field_details:
                dashed_name: process-entry-leader-pe-import-hash
                description: 'A hash of the imports in a PE file. An import hash can
                  be used to fingerprint binaries even after recompilation or other
                  code-level transformations have occurred, which would change more
                  traditional hash values.

                  This is a synonym for imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.entry_leader.pe.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-entry-leader-pe-imports
                description: List of imported element names and types.
                flat_name: process.entry_leader.pe.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: pe
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-entry-leader-pe-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.entry_leader.pe.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-entry-leader-pe-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.entry_leader.pe.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            original_file_name:
              field_details:
                dashed_name: process-entry-leader-pe-original-file-name
                description: Internal name of the file, provided at compile-time.
                example: MSPAINT.EXE
                flat_name: process.entry_leader.pe.original_file_name
                ignore_above: 1024
                level: extended
                name: original_file_name
                node_name: original_file_name
                normalize: []
                original_fieldset: pe
                short: Internal name of the file, provided at compile-time.
                type: keyword
            pehash:
              field_details:
                dashed_name: process-entry-leader-pe-pehash
                description: 'A hash of the PE header and data from one or more PE
                  sections. An pehash can be used to cluster files by transforming
                  structural information about a file into a hash value.

                  Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                example: 73ff189b63cd6be375a7ff25179a38d347651975
                flat_name: process.entry_leader.pe.pehash
                ignore_above: 1024
                level: extended
                name: pehash
                node_name: pehash
                normalize: []
                original_fieldset: pe
                short: A hash of the PE header and data from one or more PE sections.
                type: keyword
            product:
              field_details:
                dashed_name: process-entry-leader-pe-product
                description: Internal product name of the file, provided at compile-time.
                example: "Microsoft\xAE Windows\xAE Operating System"
                flat_name: process.entry_leader.pe.product
                ignore_above: 1024
                level: extended
                name: product
                node_name: product
                normalize: []
                original_fieldset: pe
                short: Internal product name of the file, provided at compile-time.
                type: keyword
            sections:
              field_details:
                dashed_name: process-entry-leader-pe-sections
                description: 'An array containing an object for each section of the
                  PE file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `pe.sections.*`.'
                flat_name: process.entry_leader.pe.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: pe
                short: Section information of the PE file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-entry-leader-pe-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.entry_leader.pe.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-entry-leader-pe-sections-name
                    description: PE Section List name.
                    flat_name: process.entry_leader.pe.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-entry-leader-pe-sections-physical-size
                    description: PE Section List physical size.
                    flat_name: process.entry_leader.pe.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-entry-leader-pe-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.entry_leader.pe.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-entry-leader-pe-sections-virtual-size
                    description: PE Section List virtual size. This is always the
                      same as `physical_size`.
                    flat_name: process.entry_leader.pe.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List virtual size. This is always the same as
                      `physical_size`.
                    type: long
        pgid:
          field_details:
            dashed_name: process-entry-leader-pgid
            description: 'Deprecated for removal in next major version release. This
              field is superseded by `process.group_leader.pid`.

              Identifier of the group of processes the process belongs to.'
            flat_name: process.entry_leader.pgid
            format: string
            level: extended
            name: pgid
            node_name: pgid
            normalize: []
            original_fieldset: process
            short: Deprecated identifier of the group of processes the process belongs
              to.
            type: long
        pid:
          field_details:
            dashed_name: process-entry-leader-pid
            description: Process id.
            example: 4242
            flat_name: process.entry_leader.pid
            format: string
            level: core
            name: pid
            node_name: pid
            normalize: []
            original_fieldset: process
            short: Process id.
            type: long
        real_group:
          field_details:
            dashed_name: process-entry-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.entry_leader.group
            intermediate: true
            name: real_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-real-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.real_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-real-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.entry_leader.real_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-real-group-name
                description: Name of the group.
                flat_name: process.entry_leader.real_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        real_user:
          field_details:
            dashed_name: process-entry-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.entry_leader.user
            intermediate: true
            name: real_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-real-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.real_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-entry-leader-real-user-email
                description: User email address.
                flat_name: process.entry_leader.real_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-entry-leader-real-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.entry_leader.real_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.real_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-entry-leader-real-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.real_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-real-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.real_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-real-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.real_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-real-user-group-name
                    description: Name of the group.
                    flat_name: process.entry_leader.real_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-entry-leader-real-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.entry_leader.real_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-real-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.entry_leader.real_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-real-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.entry_leader.real_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.entry_leader.real_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-entry-leader-real-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.entry_leader.real_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-entry-leader-real-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.entry_leader.real_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-entry-leader-real-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.entry_leader.real_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-real-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.entry_leader.real_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-entry-leader-real-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.entry_leader.real_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-entry-leader-real-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.entry_leader.real_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-real-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.entry_leader.real_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-entry-leader-real-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.entry_leader.real_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        same_as_process:
          field_details:
            dashed_name: process-entry-leader-same-as-process
            description: 'This boolean is used to identify if a leader process is
              the same as the top level process.

              For example, if `process.group_leader.same_as_process = true`, it means
              the process event in question is the leader of its process group. Details
              under `process.*` like `pid` would be the same under `process.group_leader.*`
              The same applies for both `process.session_leader` and `process.entry_leader`.

              This field exists to the benefit of EQL and other rule engines since
              it''s not possible to compare equality between two fields in a single
              document. e.g `process.entity_id` = `process.group_leader.entity_id`
              (top level process is the process group leader) OR `process.entity_id`
              = `process.entry_leader.entity_id` (top level process is the entry session
              leader)

              Instead these rules could be written like: `process.group_leader.same_as_process:
              true` OR `process.entry_leader.same_as_process: true`

              Note: This field is only set on `process.entry_leader`, `process.session_leader`
              and `process.group_leader`.'
            example: true
            flat_name: process.entry_leader.same_as_process
            level: extended
            name: same_as_process
            node_name: same_as_process
            normalize: []
            original_fieldset: process
            short: This boolean is used to identify if a leader process is the same
              as the top level process.
            type: boolean
        saved_group:
          field_details:
            dashed_name: process-entry-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.entry_leader.group
            intermediate: true
            name: saved_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-saved-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.saved_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-saved-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.entry_leader.saved_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-saved-group-name
                description: Name of the group.
                flat_name: process.entry_leader.saved_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        saved_user:
          field_details:
            dashed_name: process-entry-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.entry_leader.user
            intermediate: true
            name: saved_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-saved-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.saved_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-entry-leader-saved-user-email
                description: User email address.
                flat_name: process.entry_leader.saved_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-entry-leader-saved-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.entry_leader.saved_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.saved_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-entry-leader-saved-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.saved_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.saved_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.saved_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-group-name
                    description: Name of the group.
                    flat_name: process.entry_leader.saved_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-entry-leader-saved-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.entry_leader.saved_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-saved-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.entry_leader.saved_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-saved-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.entry_leader.saved_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.entry_leader.saved_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-entry-leader-saved-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.entry_leader.saved_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.entry_leader.saved_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.entry_leader.saved_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.entry_leader.saved_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.entry_leader.saved_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.entry_leader.saved_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-saved-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.entry_leader.saved_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-entry-leader-saved-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.entry_leader.saved_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        start:
          field_details:
            dashed_name: process-entry-leader-start
            description: The time the process started.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.entry_leader.start
            level: extended
            name: start
            node_name: start
            normalize: []
            original_fieldset: process
            short: The time the process started.
            type: date
        supplemental_groups:
          field_details:
            dashed_name: process-entry-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.entry_leader.group
            intermediate: true
            name: supplemental_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-supplemental-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.supplemental_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-supplemental-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.entry_leader.supplemental_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-supplemental-groups-name
                description: Name of the group.
                flat_name: process.entry_leader.supplemental_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        thread:
          field_details:
            dashed_name: process-entry-leader-thread
            flat_name: process.entry_leader.thread
            intermediate: true
            name: thread
            node_name: thread
            original_fieldset: process
            type: object
          fields:
            capabilities:
              field_details:
                dashed_name: process-entry-leader-thread-capabilities
                flat_name: process.entry_leader.thread.capabilities
                intermediate: true
                name: thread.capabilities
                node_name: capabilities
                original_fieldset: process
                type: object
              fields:
                effective:
                  field_details:
                    dashed_name: process-entry-leader-thread-capabilities-effective
                    description: This is the set of capabilities used by the kernel
                      to perform permission checks for the thread.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.entry_leader.thread.capabilities.effective
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.effective
                    node_name: effective
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities used for permission checks.
                    type: keyword
                permitted:
                  field_details:
                    dashed_name: process-entry-leader-thread-capabilities-permitted
                    description: This is a limiting superset for the effective capabilities
                      that the thread may assume.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.entry_leader.thread.capabilities.permitted
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.permitted
                    node_name: permitted
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities a thread could assume.
                    type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-thread-id
                description: Thread ID.
                example: 4242
                flat_name: process.entry_leader.thread.id
                format: string
                level: extended
                name: thread.id
                node_name: id
                normalize: []
                original_fieldset: process
                short: Thread ID.
                type: long
            name:
              field_details:
                dashed_name: process-entry-leader-thread-name
                description: Thread name.
                example: thread-0
                flat_name: process.entry_leader.thread.name
                ignore_above: 1024
                level: extended
                name: thread.name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Thread name.
                type: keyword
        title:
          field_details:
            dashed_name: process-entry-leader-title
            description: 'Process title.

              The proctitle, some times the same as process name. Can also be different:
              for example a browser setting its title to the web page currently opened.'
            flat_name: process.entry_leader.title
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.entry_leader.title.text
              name: text
              type: match_only_text
            name: title
            node_name: title
            normalize: []
            original_fieldset: process
            short: Process title.
            type: keyword
        tty:
          field_details:
            dashed_name: process-entry-leader-tty
            description: Information about the controlling TTY device. If set, the
              process belongs to an interactive session.
            flat_name: process.entry_leader.tty
            intermediate: false
            level: extended
            name: tty
            node_name: tty
            normalize: []
            original_fieldset: process
            short: Information about the controlling TTY device.
            type: object
          fields:
            char_device:
              field_details:
                dashed_name: process-entry-leader-tty-char-device
                flat_name: process.entry_leader.tty.char_device
                intermediate: true
                name: tty.char_device
                node_name: char_device
                original_fieldset: process
                type: object
              fields:
                major:
                  field_details:
                    dashed_name: process-entry-leader-tty-char-device-major
                    description: The major number identifies the driver associated
                      with the device. The character device's major and minor numbers
                      can be algorithmically combined to produce the more familiar
                      terminal identifiers such as "ttyS0" and "pts/0". For more details,
                      please refer to the Linux kernel documentation.
                    example: 4
                    flat_name: process.entry_leader.tty.char_device.major
                    level: extended
                    name: tty.char_device.major
                    node_name: major
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's major number.
                    type: long
                minor:
                  field_details:
                    dashed_name: process-entry-leader-tty-char-device-minor
                    description: "The minor number is used only by the driver specified\
                      \ by the major number; other parts of the kernel don\u2019t\
                      \ use it, and merely pass it along to the driver. It is common\
                      \ for a driver to control several devices; the minor number\
                      \ provides a way for the driver to differentiate among them."
                    example: 1
                    flat_name: process.entry_leader.tty.char_device.minor
                    level: extended
                    name: tty.char_device.minor
                    node_name: minor
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's minor number.
                    type: long
            columns:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-tty-columns
                description: 'The number of character columns per line. e.g terminal
                  width

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 80
                flat_name: process.entry_leader.tty.columns
                level: extended
                name: tty.columns
                node_name: columns
                normalize: []
                original_fieldset: process
                short: The number of character columns per line. e.g terminal width
                type: long
            rows:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-entry-leader-tty-rows
                description: 'The number of character rows in the terminal. e.g terminal
                  height

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 24
                flat_name: process.entry_leader.tty.rows
                level: extended
                name: tty.rows
                node_name: rows
                normalize: []
                original_fieldset: process
                short: The number of character rows in the terminal. e.g terminal
                  height
                type: long
        uptime:
          field_details:
            dashed_name: process-entry-leader-uptime
            description: Seconds the process has been up.
            example: 1325
            flat_name: process.entry_leader.uptime
            level: extended
            name: uptime
            node_name: uptime
            normalize: []
            original_fieldset: process
            short: Seconds the process has been up.
            type: long
        user:
          field_details:
            dashed_name: process-entry-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.entry_leader.user
            intermediate: true
            name: user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-entry-leader-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.entry_leader.user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-entry-leader-user-email
                description: User email address.
                flat_name: process.entry_leader.user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-entry-leader-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.entry_leader.user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.entry_leader.user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-entry-leader-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.entry_leader.user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-entry-leader-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.entry_leader.user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-entry-leader-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.entry_leader.user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-entry-leader-user-group-name
                    description: Name of the group.
                    flat_name: process.entry_leader.user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-entry-leader-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.entry_leader.user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-entry-leader-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.entry_leader.user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-entry-leader-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.entry_leader.user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.entry_leader.user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-entry-leader-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.entry_leader.user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-entry-leader-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.entry_leader.user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-entry-leader-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.entry_leader.user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.entry_leader.user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-entry-leader-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.entry_leader.user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-entry-leader-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.entry_leader.user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-entry-leader-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.entry_leader.user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-entry-leader-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.entry_leader.user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        vpid:
          field_details:
            dashed_name: process-entry-leader-vpid
            description: 'Virtual process id.

              The process id within a pid namespace. This is not necessarily unique
              across all processes on the host but it is unique within the process
              namespace that the process exists within.'
            example: 4242
            flat_name: process.entry_leader.vpid
            format: string
            level: core
            name: vpid
            node_name: vpid
            normalize: []
            original_fieldset: process
            short: Virtual process id.
            type: long
        working_directory:
          field_details:
            dashed_name: process-entry-leader-working-directory
            description: The working directory of the process.
            example: /home/alice
            flat_name: process.entry_leader.working_directory
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.entry_leader.working_directory.text
              name: text
              type: match_only_text
            name: working_directory
            node_name: working_directory
            normalize: []
            original_fieldset: process
            short: The working directory of the process.
            type: keyword
    entry_meta:
      field_details:
        dashed_name: process-entry-meta
        flat_name: process.entry_meta
        intermediate: true
        name: entry_meta
        node_name: entry_meta
        type: object
      fields:
        source:
          field_details:
            dashed_name: process-entry-meta-source
            description: 'Source fields capture details about the sender of a network
              exchange/packet. These fields are populated from a network event, packet,
              or other event containing details of a network transaction.

              Source fields are usually populated in conjunction with destination
              fields. The source and destination fields are considered the baseline
              and should always be filled if an event contains source and destination
              details from a network transaction. If the event also contains identification
              of the client and server roles, then the client and server fields should
              also be populated.'
            flat_name: process.entry_meta.source
            intermediate: true
            name: source
            node_name: source
            original_fieldset: source
            short: Fields about the source side of a network connection, used with
              destination.
            type: group
          fields:
            address:
              field_details:
                dashed_name: process-entry-meta-source-address
                description: 'Some event source addresses are defined ambiguously.
                  The event will sometimes list an IP, a domain or a unix socket.  You
                  should always store the raw address in the `.address` field.

                  Then it should be duplicated to `.ip` or `.domain`, depending on
                  which one it is.'
                flat_name: process.entry_meta.source.address
                ignore_above: 1024
                level: extended
                name: address
                node_name: address
                normalize: []
                original_fieldset: source
                short: Source network address.
                type: keyword
            as:
              field_details:
                dashed_name: process-entry-meta-source-as
                description: An autonomous system (AS) is a collection of connected
                  Internet Protocol (IP) routing prefixes under the control of one
                  or more network operators on behalf of a single administrative entity
                  or domain that presents a common, clearly defined routing policy
                  to the internet.
                flat_name: process.entry_meta.source.as
                intermediate: true
                name: as
                node_name: as
                original_fieldset: as
                short: Fields describing an Autonomous System (Internet routing prefix).
                type: group
              fields:
                number:
                  field_details:
                    dashed_name: process-entry-meta-source-as-number
                    description: Unique number allocated to the autonomous system.
                      The autonomous system number (ASN) uniquely identifies each
                      network on the Internet.
                    example: 15169
                    flat_name: process.entry_meta.source.as.number
                    level: extended
                    name: number
                    node_name: number
                    normalize: []
                    original_fieldset: as
                    short: Unique number allocated to the autonomous system.
                    type: long
                organization:
                  field_details:
                    dashed_name: process-entry-meta-source-as-organization
                    flat_name: process.entry_meta.source.as.organization
                    intermediate: true
                    name: organization
                    node_name: organization
                    original_fieldset: as
                    type: object
                  fields:
                    name:
                      field_details:
                        dashed_name: process-entry-meta-source-as-organization-name
                        description: Organization name.
                        example: Google LLC
                        flat_name: process.entry_meta.source.as.organization.name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.entry_meta.source.as.organization.name.text
                          name: text
                          type: match_only_text
                        name: organization.name
                        node_name: name
                        normalize: []
                        original_fieldset: as
                        short: Organization name.
                        type: keyword
            bytes:
              field_details:
                dashed_name: process-entry-meta-source-bytes
                description: Bytes sent from the source to the destination.
                example: 184
                flat_name: process.entry_meta.source.bytes
                format: bytes
                level: core
                name: bytes
                node_name: bytes
                normalize: []
                original_fieldset: source
                short: Bytes sent from the source to the destination.
                type: long
            domain:
              field_details:
                dashed_name: process-entry-meta-source-domain
                description: 'The domain name of the source system.

                  This value may be a host name, a fully qualified domain name, or
                  another host naming format. The value may derive from the original
                  event or be added from enrichment.'
                example: foo.example.com
                flat_name: process.entry_meta.source.domain
                ignore_above: 1024
                level: core
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: source
                short: The domain name of the source.
                type: keyword
            geo:
              field_details:
                dashed_name: process-entry-meta-source-geo
                description: 'Geo fields can carry data about a specific location
                  related to an event.

                  This geolocation information can be derived from techniques such
                  as Geo IP, or be user-supplied.'
                flat_name: process.entry_meta.source.geo
                intermediate: true
                name: geo
                node_name: geo
                original_fieldset: geo
                short: Fields describing a location.
                type: group
              fields:
                city_name:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-city-name
                    description: City name.
                    example: Montreal
                    flat_name: process.entry_meta.source.geo.city_name
                    ignore_above: 1024
                    level: core
                    name: city_name
                    node_name: city_name
                    normalize: []
                    original_fieldset: geo
                    short: City name.
                    type: keyword
                continent_code:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-continent-code
                    description: Two-letter code representing continent's name.
                    example: NA
                    flat_name: process.entry_meta.source.geo.continent_code
                    ignore_above: 1024
                    level: core
                    name: continent_code
                    node_name: continent_code
                    normalize: []
                    original_fieldset: geo
                    short: Continent code.
                    type: keyword
                continent_name:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-continent-name
                    description: Name of the continent.
                    example: North America
                    flat_name: process.entry_meta.source.geo.continent_name
                    ignore_above: 1024
                    level: core
                    name: continent_name
                    node_name: continent_name
                    normalize: []
                    original_fieldset: geo
                    short: Name of the continent.
                    type: keyword
                country_iso_code:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-country-iso-code
                    description: Country ISO code.
                    example: CA
                    flat_name: process.entry_meta.source.geo.country_iso_code
                    ignore_above: 1024
                    level: core
                    name: country_iso_code
                    node_name: country_iso_code
                    normalize: []
                    original_fieldset: geo
                    short: Country ISO code.
                    type: keyword
                country_name:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-country-name
                    description: Country name.
                    example: Canada
                    flat_name: process.entry_meta.source.geo.country_name
                    ignore_above: 1024
                    level: core
                    name: country_name
                    node_name: country_name
                    normalize: []
                    original_fieldset: geo
                    short: Country name.
                    type: keyword
                location:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-location
                    description: Longitude and latitude.
                    example: '{ "lon": -73.614830, "lat": 45.505918 }'
                    flat_name: process.entry_meta.source.geo.location
                    level: core
                    name: location
                    node_name: location
                    normalize: []
                    original_fieldset: geo
                    short: Longitude and latitude.
                    type: geo_point
                name:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-name
                    description: 'User-defined description of a location, at the level
                      of granularity they care about.

                      Could be the name of their data centers, the floor number, if
                      this describes a local physical entity, city names.

                      Not typically used in automated geolocation.'
                    example: boston-dc
                    flat_name: process.entry_meta.source.geo.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: geo
                    short: User-defined description of a location.
                    type: keyword
                postal_code:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-postal-code
                    description: 'Postal code associated with the location.

                      Values appropriate for this field may also be known as a postcode
                      or ZIP code and will vary widely from country to country.'
                    example: 94040
                    flat_name: process.entry_meta.source.geo.postal_code
                    ignore_above: 1024
                    level: core
                    name: postal_code
                    node_name: postal_code
                    normalize: []
                    original_fieldset: geo
                    short: Postal code.
                    type: keyword
                region_iso_code:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-region-iso-code
                    description: Region ISO code.
                    example: CA-QC
                    flat_name: process.entry_meta.source.geo.region_iso_code
                    ignore_above: 1024
                    level: core
                    name: region_iso_code
                    node_name: region_iso_code
                    normalize: []
                    original_fieldset: geo
                    short: Region ISO code.
                    type: keyword
                region_name:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-region-name
                    description: Region name.
                    example: Quebec
                    flat_name: process.entry_meta.source.geo.region_name
                    ignore_above: 1024
                    level: core
                    name: region_name
                    node_name: region_name
                    normalize: []
                    original_fieldset: geo
                    short: Region name.
                    type: keyword
                timezone:
                  field_details:
                    dashed_name: process-entry-meta-source-geo-timezone
                    description: The time zone of the location, such as IANA time
                      zone name.
                    example: America/Argentina/Buenos_Aires
                    flat_name: process.entry_meta.source.geo.timezone
                    ignore_above: 1024
                    level: core
                    name: timezone
                    node_name: timezone
                    normalize: []
                    original_fieldset: geo
                    short: Time zone.
                    type: keyword
            ip:
              field_details:
                dashed_name: process-entry-meta-source-ip
                description: IP address of the source (IPv4 or IPv6).
                flat_name: process.entry_meta.source.ip
                level: core
                name: ip
                node_name: ip
                normalize: []
                original_fieldset: source
                short: IP address of the source.
                type: ip
            mac:
              field_details:
                dashed_name: process-entry-meta-source-mac
                description: 'MAC address of the source.

                  The notation format from RFC 7042 is suggested: Each octet (that
                  is, 8-bit byte) is represented by two [uppercase] hexadecimal digits
                  giving the value of the octet as an unsigned integer. Successive
                  octets are separated by a hyphen.'
                example: 00-00-5E-00-53-23
                flat_name: process.entry_meta.source.mac
                ignore_above: 1024
                level: core
                name: mac
                node_name: mac
                normalize: []
                original_fieldset: source
                pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                short: MAC address of the source.
                type: keyword
            nat:
              field_details:
                dashed_name: process-entry-meta-source-nat
                flat_name: process.entry_meta.source.nat
                intermediate: true
                name: nat
                node_name: nat
                original_fieldset: source
                type: object
              fields:
                ip:
                  field_details:
                    dashed_name: process-entry-meta-source-nat-ip
                    description: 'Translated ip of source based NAT sessions (e.g.
                      internal client to internet)

                      Typically connections traversing load balancers, firewalls,
                      or routers.'
                    flat_name: process.entry_meta.source.nat.ip
                    level: extended
                    name: nat.ip
                    node_name: ip
                    normalize: []
                    original_fieldset: source
                    short: Source NAT ip
                    type: ip
                port:
                  field_details:
                    dashed_name: process-entry-meta-source-nat-port
                    description: 'Translated port of source based NAT sessions. (e.g.
                      internal client to internet)

                      Typically used with load balancers, firewalls, or routers.'
                    flat_name: process.entry_meta.source.nat.port
                    format: string
                    level: extended
                    name: nat.port
                    node_name: port
                    normalize: []
                    original_fieldset: source
                    short: Source NAT port
                    type: long
            packets:
              field_details:
                dashed_name: process-entry-meta-source-packets
                description: Packets sent from the source to the destination.
                example: 12
                flat_name: process.entry_meta.source.packets
                level: core
                name: packets
                node_name: packets
                normalize: []
                original_fieldset: source
                short: Packets sent from the source to the destination.
                type: long
            port:
              field_details:
                dashed_name: process-entry-meta-source-port
                description: Port of the source.
                flat_name: process.entry_meta.source.port
                format: string
                level: core
                name: port
                node_name: port
                normalize: []
                original_fieldset: source
                short: Port of the source.
                type: long
            registered_domain:
              field_details:
                dashed_name: process-entry-meta-source-registered-domain
                description: 'The highest registered source domain, stripped of the
                  subdomain.

                  For example, the registered domain for "foo.example.com" is "example.com".

                  This value can be determined precisely with a list like the public
                  suffix list (http://publicsuffix.org). Trying to approximate this
                  by simply taking the last two labels will not work well for TLDs
                  such as "co.uk".'
                example: example.com
                flat_name: process.entry_meta.source.registered_domain
                ignore_above: 1024
                level: extended
                name: registered_domain
                node_name: registered_domain
                normalize: []
                original_fieldset: source
                short: The highest registered source domain, stripped of the subdomain.
                type: keyword
            subdomain:
              field_details:
                dashed_name: process-entry-meta-source-subdomain
                description: 'The subdomain portion of a fully qualified domain name
                  includes all of the names except the host name under the registered_domain.  In
                  a partially qualified domain, or if the the qualification level
                  of the full name cannot be determined, subdomain contains all of
                  the names below the registered domain.

                  For example the subdomain portion of "www.east.mydomain.co.uk" is
                  "east". If the domain has multiple levels of subdomain, such as
                  "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1",
                  with no trailing period.'
                example: east
                flat_name: process.entry_meta.source.subdomain
                ignore_above: 1024
                level: extended
                name: subdomain
                node_name: subdomain
                normalize: []
                original_fieldset: source
                short: The subdomain of the domain.
                type: keyword
            top_level_domain:
              field_details:
                dashed_name: process-entry-meta-source-top-level-domain
                description: 'The effective top level domain (eTLD), also known as
                  the domain suffix, is the last part of the domain name. For example,
                  the top level domain for example.com is "com".

                  This value can be determined precisely with a list like the public
                  suffix list (http://publicsuffix.org). Trying to approximate this
                  by simply taking the last label will not work well for effective
                  TLDs such as "co.uk".'
                example: co.uk
                flat_name: process.entry_meta.source.top_level_domain
                ignore_above: 1024
                level: extended
                name: top_level_domain
                node_name: top_level_domain
                normalize: []
                original_fieldset: source
                short: The effective top level domain (com, org, net, co.uk).
                type: keyword
        type:
          field_details:
            dashed_name: process-entry-meta-type
            description: 'The entry type for the entry session leader. Values include:
              init(e.g systemd), sshd, ssm, kubelet, teleport, terminal, console

              Note: This field is only set on process.session_leader.'
            flat_name: process.entry_meta.type
            ignore_above: 1024
            level: extended
            name: entry_meta.type
            node_name: type
            normalize: []
            short: The entry type for the entry session leader.
            type: keyword
    env_vars:
      field_details:
        beta: This field is beta and subject to change.
        dashed_name: process-env-vars
        description: 'Array of environment variable bindings. Captured from a snapshot
          of the environment at the time of execution.

          May be filtered to protect sensitive information.'
        example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
        flat_name: process.env_vars
        ignore_above: 1024
        level: extended
        name: env_vars
        node_name: env_vars
        normalize:
        - array
        short: Array of environment variable bindings.
        type: keyword
    executable:
      field_details:
        dashed_name: process-executable
        description: Absolute path to the process executable.
        example: /usr/bin/ssh
        flat_name: process.executable
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: process.executable.text
          name: text
          type: match_only_text
        name: executable
        node_name: executable
        normalize: []
        short: Absolute path to the process executable.
        type: keyword
    exit_code:
      field_details:
        dashed_name: process-exit-code
        description: 'The exit code of the process, if this is a termination event.

          The field should be absent if there is no exit code for the event (e.g.
          process start).'
        example: 137
        flat_name: process.exit_code
        level: extended
        name: exit_code
        node_name: exit_code
        normalize: []
        short: The exit code of the process.
        type: long
    group:
      field_details:
        dashed_name: process-group
        description: The group fields are meant to represent groups that are relevant
          to the event.
        flat_name: process.group
        intermediate: true
        name: group
        node_name: group
        original_fieldset: group
        short: User's group relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-group-domain
            description: 'Name of the directory the group is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.group.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: group
            short: Name of the directory the group is a member of.
            type: keyword
        id:
          field_details:
            dashed_name: process-group-id
            description: Unique identifier for the group on the system/platform.
            flat_name: process.group.id
            ignore_above: 1024
            level: extended
            name: id
            node_name: id
            normalize: []
            original_fieldset: group
            short: Unique identifier for the group on the system/platform.
            type: keyword
        name:
          field_details:
            dashed_name: process-group-name
            description: Name of the group.
            flat_name: process.group.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: group
            short: Name of the group.
            type: keyword
    group_leader:
      field_details:
        dashed_name: process-process
        description: 'These fields contain information about a process.

          These fields can help you correlate metrics information with a process id/name
          from a log message.  The `process.pid` often stays in the metric itself
          and is copied to the global field for correlation.'
        flat_name: process.process
        intermediate: true
        name: group_leader
        node_name: process
        original_fieldset: process
        short: These fields contain information about a process.
        type: group
      fields:
        args:
          field_details:
            dashed_name: process-group-leader-args
            description: 'Array of process arguments, starting with the absolute path
              to the executable.

              May be filtered to protect sensitive information.'
            example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
            flat_name: process.group_leader.args
            ignore_above: 1024
            level: extended
            name: args
            node_name: args
            normalize:
            - array
            original_fieldset: process
            short: Array of process arguments.
            type: keyword
        args_count:
          field_details:
            dashed_name: process-group-leader-args-count
            description: 'Length of the process.args array.

              This field can be useful for querying or performing bucket analysis
              on how many arguments were provided to start a process. More arguments
              may be an indication of suspicious activity.'
            example: 4
            flat_name: process.group_leader.args_count
            level: extended
            name: args_count
            node_name: args_count
            normalize: []
            original_fieldset: process
            short: Length of the process.args array.
            type: long
        attested_groups:
          field_details:
            dashed_name: process-group-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.group_leader.group
            intermediate: true
            name: attested_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-attested-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.attested_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-attested-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.group_leader.attested_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-attested-groups-name
                description: Name of the group.
                flat_name: process.group_leader.attested_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        attested_user:
          field_details:
            dashed_name: process-group-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.group_leader.user
            intermediate: true
            name: attested_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-attested-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.attested_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-group-leader-attested-user-email
                description: User email address.
                flat_name: process.group_leader.attested_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-group-leader-attested-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.group_leader.attested_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.group_leader.attested_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-group-leader-attested-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.group_leader.attested_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-group-leader-attested-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.group_leader.attested_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-group-leader-attested-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.group_leader.attested_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-group-leader-attested-user-group-name
                    description: Name of the group.
                    flat_name: process.group_leader.attested_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-group-leader-attested-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.group_leader.attested_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-attested-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.group_leader.attested_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-attested-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.group_leader.attested_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.group_leader.attested_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-group-leader-attested-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.group_leader.attested_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-group-leader-attested-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.group_leader.attested_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-group-leader-attested-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.group_leader.attested_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-group-leader-attested-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.group_leader.attested_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-group-leader-attested-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.group_leader.attested_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-group-leader-attested-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.group_leader.attested_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-group-leader-attested-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.group_leader.attested_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-group-leader-attested-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.group_leader.attested_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        code_signature:
          field_details:
            dashed_name: process-group-leader-code-signature
            description: These fields contain information about binary code signatures.
            flat_name: process.group_leader.code_signature
            intermediate: true
            name: code_signature
            node_name: code_signature
            original_fieldset: code_signature
            short: These fields contain information about binary code signatures.
            type: group
          fields:
            digest_algorithm:
              field_details:
                dashed_name: process-group-leader-code-signature-digest-algorithm
                description: 'The hashing algorithm used to sign the process.

                  This value can distinguish signatures when a file is signed multiple
                  times by the same signer but with a different digest algorithm.'
                example: sha256
                flat_name: process.group_leader.code_signature.digest_algorithm
                ignore_above: 1024
                level: extended
                name: digest_algorithm
                node_name: digest_algorithm
                normalize: []
                original_fieldset: code_signature
                short: Hashing algorithm used to sign the process.
                type: keyword
            exists:
              field_details:
                dashed_name: process-group-leader-code-signature-exists
                description: Boolean to capture if a signature is present.
                example: 'true'
                flat_name: process.group_leader.code_signature.exists
                level: core
                name: exists
                node_name: exists
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if a signature is present.
                type: boolean
            signing_id:
              field_details:
                dashed_name: process-group-leader-code-signature-signing-id
                description: 'The identifier used to sign the process.

                  This is used to identify the application manufactured by a software
                  vendor. The field is relevant to Apple *OS only.'
                example: com.apple.xpc.proxy
                flat_name: process.group_leader.code_signature.signing_id
                ignore_above: 1024
                level: extended
                name: signing_id
                node_name: signing_id
                normalize: []
                original_fieldset: code_signature
                short: The identifier used to sign the process.
                type: keyword
            status:
              field_details:
                dashed_name: process-group-leader-code-signature-status
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT
                flat_name: process.group_leader.code_signature.status
                ignore_above: 1024
                level: extended
                name: status
                node_name: status
                normalize: []
                original_fieldset: code_signature
                short: Additional information about the certificate status.
                type: keyword
            subject_name:
              field_details:
                dashed_name: process-group-leader-code-signature-subject-name
                description: Subject name of the code signer
                example: Microsoft Corporation
                flat_name: process.group_leader.code_signature.subject_name
                ignore_above: 1024
                level: core
                name: subject_name
                node_name: subject_name
                normalize: []
                original_fieldset: code_signature
                short: Subject name of the code signer
                type: keyword
            team_id:
              field_details:
                dashed_name: process-group-leader-code-signature-team-id
                description: 'The team identifier used to sign the process.

                  This is used to identify the team or vendor of a software product.
                  The field is relevant to Apple *OS only.'
                example: EQHXZ8M8AV
                flat_name: process.group_leader.code_signature.team_id
                ignore_above: 1024
                level: extended
                name: team_id
                node_name: team_id
                normalize: []
                original_fieldset: code_signature
                short: The team identifier used to sign the process.
                type: keyword
            timestamp:
              field_details:
                dashed_name: process-group-leader-code-signature-timestamp
                description: Date and time when the code signature was generated and
                  signed.
                example: '2021-01-01T12:10:30Z'
                flat_name: process.group_leader.code_signature.timestamp
                level: extended
                name: timestamp
                node_name: timestamp
                normalize: []
                original_fieldset: code_signature
                short: When the signature was generated and signed.
                type: date
            trusted:
              field_details:
                dashed_name: process-group-leader-code-signature-trusted
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'
                flat_name: process.group_leader.code_signature.trusted
                level: extended
                name: trusted
                node_name: trusted
                normalize: []
                original_fieldset: code_signature
                short: Stores the trust status of the certificate chain.
                type: boolean
            valid:
              field_details:
                dashed_name: process-group-leader-code-signature-valid
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'
                flat_name: process.group_leader.code_signature.valid
                level: extended
                name: valid
                node_name: valid
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if the digital signature is verified against
                  the binary content.
                type: boolean
        command_line:
          field_details:
            dashed_name: process-group-leader-command-line
            description: 'Full command line that started the process, including the
              absolute path to the executable, and all arguments.

              Some arguments may be filtered to protect sensitive information.'
            example: /usr/bin/ssh -l user 10.0.0.16
            flat_name: process.group_leader.command_line
            level: extended
            multi_fields:
            - flat_name: process.group_leader.command_line.text
              name: text
              type: match_only_text
            name: command_line
            node_name: command_line
            normalize: []
            original_fieldset: process
            short: Full command line that started the process.
            type: wildcard
        elf:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-group-leader-elf
            description: These fields contain Linux Executable Linkable Format (ELF)
              metadata.
            flat_name: process.group_leader.elf
            intermediate: true
            name: elf
            node_name: elf
            original_fieldset: elf
            short: These fields contain Linux Executable Linkable Format (ELF) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-group-leader-elf-architecture
                description: Machine architecture of the ELF file.
                example: x86-64
                flat_name: process.group_leader.elf.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: elf
                short: Machine architecture of the ELF file.
                type: keyword
            byte_order:
              field_details:
                dashed_name: process-group-leader-elf-byte-order
                description: Byte sequence of ELF file.
                example: Little Endian
                flat_name: process.group_leader.elf.byte_order
                ignore_above: 1024
                level: extended
                name: byte_order
                node_name: byte_order
                normalize: []
                original_fieldset: elf
                short: Byte sequence of ELF file.
                type: keyword
            cpu_type:
              field_details:
                dashed_name: process-group-leader-elf-cpu-type
                description: CPU type of the ELF file.
                example: Intel
                flat_name: process.group_leader.elf.cpu_type
                ignore_above: 1024
                level: extended
                name: cpu_type
                node_name: cpu_type
                normalize: []
                original_fieldset: elf
                short: CPU type of the ELF file.
                type: keyword
            creation_date:
              field_details:
                dashed_name: process-group-leader-elf-creation-date
                description: Extracted when possible from the file's metadata. Indicates
                  when it was built or compiled. It can also be faked by malware creators.
                flat_name: process.group_leader.elf.creation_date
                level: extended
                name: creation_date
                node_name: creation_date
                normalize: []
                original_fieldset: elf
                short: Build or compile date.
                type: date
            exports:
              field_details:
                dashed_name: process-group-leader-elf-exports
                description: List of exported element names and types.
                flat_name: process.group_leader.elf.exports
                level: extended
                name: exports
                node_name: exports
                normalize:
                - array
                original_fieldset: elf
                short: List of exported element names and types.
                type: flattened
            go_import_hash:
              field_details:
                dashed_name: process-group-leader-elf-go-import-hash
                description: 'A hash of the Go language imports in an ELF file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.group_leader.elf.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the Go language imports in an ELF file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-group-leader-elf-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.group_leader.elf.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: elf
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-group-leader-elf-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.group_leader.elf.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-group-leader-elf-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.group_leader.elf.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-group-leader-elf-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.group_leader.elf.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: elf
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            header:
              field_details:
                dashed_name: process-group-leader-elf-header
                flat_name: process.group_leader.elf.header
                intermediate: true
                name: header
                node_name: header
                original_fieldset: elf
                type: object
              fields:
                abi_version:
                  field_details:
                    dashed_name: process-group-leader-elf-header-abi-version
                    description: Version of the ELF Application Binary Interface (ABI).
                    flat_name: process.group_leader.elf.header.abi_version
                    ignore_above: 1024
                    level: extended
                    name: header.abi_version
                    node_name: abi_version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF Application Binary Interface (ABI).
                    type: keyword
                class:
                  field_details:
                    dashed_name: process-group-leader-elf-header-class
                    description: Header class of the ELF file.
                    flat_name: process.group_leader.elf.header.class
                    ignore_above: 1024
                    level: extended
                    name: header.class
                    node_name: class
                    normalize: []
                    original_fieldset: elf
                    short: Header class of the ELF file.
                    type: keyword
                data:
                  field_details:
                    dashed_name: process-group-leader-elf-header-data
                    description: Data table of the ELF header.
                    flat_name: process.group_leader.elf.header.data
                    ignore_above: 1024
                    level: extended
                    name: header.data
                    node_name: data
                    normalize: []
                    original_fieldset: elf
                    short: Data table of the ELF header.
                    type: keyword
                entrypoint:
                  field_details:
                    dashed_name: process-group-leader-elf-header-entrypoint
                    description: Header entrypoint of the ELF file.
                    flat_name: process.group_leader.elf.header.entrypoint
                    format: string
                    level: extended
                    name: header.entrypoint
                    node_name: entrypoint
                    normalize: []
                    original_fieldset: elf
                    short: Header entrypoint of the ELF file.
                    type: long
                object_version:
                  field_details:
                    dashed_name: process-group-leader-elf-header-object-version
                    description: '"0x1" for original ELF files.'
                    flat_name: process.group_leader.elf.header.object_version
                    ignore_above: 1024
                    level: extended
                    name: header.object_version
                    node_name: object_version
                    normalize: []
                    original_fieldset: elf
                    short: '"0x1" for original ELF files.'
                    type: keyword
                os_abi:
                  field_details:
                    dashed_name: process-group-leader-elf-header-os-abi
                    description: Application Binary Interface (ABI) of the Linux OS.
                    flat_name: process.group_leader.elf.header.os_abi
                    ignore_above: 1024
                    level: extended
                    name: header.os_abi
                    node_name: os_abi
                    normalize: []
                    original_fieldset: elf
                    short: Application Binary Interface (ABI) of the Linux OS.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-group-leader-elf-header-type
                    description: Header type of the ELF file.
                    flat_name: process.group_leader.elf.header.type
                    ignore_above: 1024
                    level: extended
                    name: header.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: Header type of the ELF file.
                    type: keyword
                version:
                  field_details:
                    dashed_name: process-group-leader-elf-header-version
                    description: Version of the ELF header.
                    flat_name: process.group_leader.elf.header.version
                    ignore_above: 1024
                    level: extended
                    name: header.version
                    node_name: version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF header.
                    type: keyword
            import_hash:
              field_details:
                dashed_name: process-group-leader-elf-import-hash
                description: 'A hash of the imports in an ELF file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is an ELF implementation of the Windows PE imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.group_leader.elf.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the imports in an ELF file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-group-leader-elf-imports
                description: List of imported element names and types.
                flat_name: process.group_leader.elf.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: elf
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-group-leader-elf-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.group_leader.elf.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-group-leader-elf-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.group_leader.elf.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-group-leader-elf-sections
                description: 'An array containing an object for each section of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.sections.*`.'
                flat_name: process.group_leader.elf.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: elf
                short: Section information of the ELF file.
                type: nested
              fields:
                chi2:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-chi2
                    description: Chi-square probability distribution of the section.
                    flat_name: process.group_leader.elf.sections.chi2
                    format: number
                    level: extended
                    name: sections.chi2
                    node_name: chi2
                    normalize: []
                    original_fieldset: elf
                    short: Chi-square probability distribution of the section.
                    type: long
                entropy:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.group_leader.elf.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the section.
                    type: long
                flags:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-flags
                    description: ELF Section List flags.
                    flat_name: process.group_leader.elf.sections.flags
                    ignore_above: 1024
                    level: extended
                    name: sections.flags
                    node_name: flags
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List flags.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-name
                    description: ELF Section List name.
                    flat_name: process.group_leader.elf.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List name.
                    type: keyword
                physical_offset:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-physical-offset
                    description: ELF Section List offset.
                    flat_name: process.group_leader.elf.sections.physical_offset
                    ignore_above: 1024
                    level: extended
                    name: sections.physical_offset
                    node_name: physical_offset
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List offset.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-physical-size
                    description: ELF Section List physical size.
                    flat_name: process.group_leader.elf.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List physical size.
                    type: long
                type:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-type
                    description: ELF Section List type.
                    flat_name: process.group_leader.elf.sections.type
                    ignore_above: 1024
                    level: extended
                    name: sections.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List type.
                    type: keyword
                var_entropy:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.group_leader.elf.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_address:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-virtual-address
                    description: ELF Section List virtual address.
                    flat_name: process.group_leader.elf.sections.virtual_address
                    format: string
                    level: extended
                    name: sections.virtual_address
                    node_name: virtual_address
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual address.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-group-leader-elf-sections-virtual-size
                    description: ELF Section List virtual size.
                    flat_name: process.group_leader.elf.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual size.
                    type: long
            segments:
              field_details:
                dashed_name: process-group-leader-elf-segments
                description: 'An array containing an object for each segment of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.segments.*`.'
                flat_name: process.group_leader.elf.segments
                intermediate: false
                level: extended
                name: segments
                node_name: segments
                normalize:
                - array
                original_fieldset: elf
                short: ELF object segment list.
                type: nested
              fields:
                sections:
                  field_details:
                    dashed_name: process-group-leader-elf-segments-sections
                    description: ELF object segment sections.
                    flat_name: process.group_leader.elf.segments.sections
                    ignore_above: 1024
                    level: extended
                    name: segments.sections
                    node_name: sections
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment sections.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-group-leader-elf-segments-type
                    description: ELF object segment type.
                    flat_name: process.group_leader.elf.segments.type
                    ignore_above: 1024
                    level: extended
                    name: segments.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment type.
                    type: keyword
            shared_libraries:
              field_details:
                dashed_name: process-group-leader-elf-shared-libraries
                description: List of shared libraries used by this ELF object.
                flat_name: process.group_leader.elf.shared_libraries
                ignore_above: 1024
                level: extended
                name: shared_libraries
                node_name: shared_libraries
                normalize:
                - array
                original_fieldset: elf
                short: List of shared libraries used by this ELF object.
                type: keyword
            telfhash:
              field_details:
                dashed_name: process-group-leader-elf-telfhash
                description: telfhash symbol hash for ELF file.
                flat_name: process.group_leader.elf.telfhash
                ignore_above: 1024
                level: extended
                name: telfhash
                node_name: telfhash
                normalize: []
                original_fieldset: elf
                short: telfhash hash for ELF file.
                type: keyword
        end:
          field_details:
            dashed_name: process-group-leader-end
            description: The time the process ended.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.group_leader.end
            level: extended
            name: end
            node_name: end
            normalize: []
            original_fieldset: process
            short: The time the process ended.
            type: date
        entity_id:
          field_details:
            dashed_name: process-group-leader-entity-id
            description: 'Unique identifier for the process.

              The implementation of this is specified by the data source, but some
              examples of what could be used here are a process-generated UUID, Sysmon
              Process GUIDs, or a hash of some uniquely identifying components of
              a process.

              Constructing a globally unique identifier is a common practice to mitigate
              PID reuse as well as to identify a specific process over time, across
              multiple monitored hosts.'
            example: c2c455d9f99375d
            flat_name: process.group_leader.entity_id
            ignore_above: 1024
            level: extended
            name: entity_id
            node_name: entity_id
            normalize: []
            original_fieldset: process
            short: Unique identifier for the process.
            type: keyword
        entry_meta:
          field_details:
            dashed_name: process-group-leader-entry-meta
            flat_name: process.group_leader.entry_meta
            intermediate: true
            name: entry_meta
            node_name: entry_meta
            original_fieldset: process
            type: object
          fields:
            source:
              field_details:
                dashed_name: process-group-leader-entry-meta-source
                description: 'Source fields capture details about the sender of a
                  network exchange/packet. These fields are populated from a network
                  event, packet, or other event containing details of a network transaction.

                  Source fields are usually populated in conjunction with destination
                  fields. The source and destination fields are considered the baseline
                  and should always be filled if an event contains source and destination
                  details from a network transaction. If the event also contains identification
                  of the client and server roles, then the client and server fields
                  should also be populated.'
                flat_name: process.group_leader.entry_meta.source
                intermediate: true
                name: source
                node_name: source
                original_fieldset: source
                short: Fields about the source side of a network connection, used
                  with destination.
                type: group
              fields:
                address:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-address
                    description: 'Some event source addresses are defined ambiguously.
                      The event will sometimes list an IP, a domain or a unix socket.  You
                      should always store the raw address in the `.address` field.

                      Then it should be duplicated to `.ip` or `.domain`, depending
                      on which one it is.'
                    flat_name: process.group_leader.entry_meta.source.address
                    ignore_above: 1024
                    level: extended
                    name: address
                    node_name: address
                    normalize: []
                    original_fieldset: source
                    short: Source network address.
                    type: keyword
                as:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-as
                    description: An autonomous system (AS) is a collection of connected
                      Internet Protocol (IP) routing prefixes under the control of
                      one or more network operators on behalf of a single administrative
                      entity or domain that presents a common, clearly defined routing
                      policy to the internet.
                    flat_name: process.group_leader.entry_meta.source.as
                    intermediate: true
                    name: as
                    node_name: as
                    original_fieldset: as
                    short: Fields describing an Autonomous System (Internet routing
                      prefix).
                    type: group
                  fields:
                    number:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-as-number
                        description: Unique number allocated to the autonomous system.
                          The autonomous system number (ASN) uniquely identifies each
                          network on the Internet.
                        example: 15169
                        flat_name: process.group_leader.entry_meta.source.as.number
                        level: extended
                        name: number
                        node_name: number
                        normalize: []
                        original_fieldset: as
                        short: Unique number allocated to the autonomous system.
                        type: long
                    organization:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-as-organization
                        flat_name: process.group_leader.entry_meta.source.as.organization
                        intermediate: true
                        name: organization
                        node_name: organization
                        original_fieldset: as
                        type: object
                      fields:
                        name:
                          field_details:
                            dashed_name: process-group-leader-entry-meta-source-as-organization-name
                            description: Organization name.
                            example: Google LLC
                            flat_name: process.group_leader.entry_meta.source.as.organization.name
                            ignore_above: 1024
                            level: extended
                            multi_fields:
                            - flat_name: process.group_leader.entry_meta.source.as.organization.name.text
                              name: text
                              type: match_only_text
                            name: organization.name
                            node_name: name
                            normalize: []
                            original_fieldset: as
                            short: Organization name.
                            type: keyword
                bytes:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-bytes
                    description: Bytes sent from the source to the destination.
                    example: 184
                    flat_name: process.group_leader.entry_meta.source.bytes
                    format: bytes
                    level: core
                    name: bytes
                    node_name: bytes
                    normalize: []
                    original_fieldset: source
                    short: Bytes sent from the source to the destination.
                    type: long
                domain:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-domain
                    description: 'The domain name of the source system.

                      This value may be a host name, a fully qualified domain name,
                      or another host naming format. The value may derive from the
                      original event or be added from enrichment.'
                    example: foo.example.com
                    flat_name: process.group_leader.entry_meta.source.domain
                    ignore_above: 1024
                    level: core
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: source
                    short: The domain name of the source.
                    type: keyword
                geo:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-geo
                    description: 'Geo fields can carry data about a specific location
                      related to an event.

                      This geolocation information can be derived from techniques
                      such as Geo IP, or be user-supplied.'
                    flat_name: process.group_leader.entry_meta.source.geo
                    intermediate: true
                    name: geo
                    node_name: geo
                    original_fieldset: geo
                    short: Fields describing a location.
                    type: group
                  fields:
                    city_name:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-city-name
                        description: City name.
                        example: Montreal
                        flat_name: process.group_leader.entry_meta.source.geo.city_name
                        ignore_above: 1024
                        level: core
                        name: city_name
                        node_name: city_name
                        normalize: []
                        original_fieldset: geo
                        short: City name.
                        type: keyword
                    continent_code:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-continent-code
                        description: Two-letter code representing continent's name.
                        example: NA
                        flat_name: process.group_leader.entry_meta.source.geo.continent_code
                        ignore_above: 1024
                        level: core
                        name: continent_code
                        node_name: continent_code
                        normalize: []
                        original_fieldset: geo
                        short: Continent code.
                        type: keyword
                    continent_name:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-continent-name
                        description: Name of the continent.
                        example: North America
                        flat_name: process.group_leader.entry_meta.source.geo.continent_name
                        ignore_above: 1024
                        level: core
                        name: continent_name
                        node_name: continent_name
                        normalize: []
                        original_fieldset: geo
                        short: Name of the continent.
                        type: keyword
                    country_iso_code:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-country-iso-code
                        description: Country ISO code.
                        example: CA
                        flat_name: process.group_leader.entry_meta.source.geo.country_iso_code
                        ignore_above: 1024
                        level: core
                        name: country_iso_code
                        node_name: country_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Country ISO code.
                        type: keyword
                    country_name:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-country-name
                        description: Country name.
                        example: Canada
                        flat_name: process.group_leader.entry_meta.source.geo.country_name
                        ignore_above: 1024
                        level: core
                        name: country_name
                        node_name: country_name
                        normalize: []
                        original_fieldset: geo
                        short: Country name.
                        type: keyword
                    location:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-location
                        description: Longitude and latitude.
                        example: '{ "lon": -73.614830, "lat": 45.505918 }'
                        flat_name: process.group_leader.entry_meta.source.geo.location
                        level: core
                        name: location
                        node_name: location
                        normalize: []
                        original_fieldset: geo
                        short: Longitude and latitude.
                        type: geo_point
                    name:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-name
                        description: 'User-defined description of a location, at the
                          level of granularity they care about.

                          Could be the name of their data centers, the floor number,
                          if this describes a local physical entity, city names.

                          Not typically used in automated geolocation.'
                        example: boston-dc
                        flat_name: process.group_leader.entry_meta.source.geo.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: geo
                        short: User-defined description of a location.
                        type: keyword
                    postal_code:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-postal-code
                        description: 'Postal code associated with the location.

                          Values appropriate for this field may also be known as a
                          postcode or ZIP code and will vary widely from country to
                          country.'
                        example: 94040
                        flat_name: process.group_leader.entry_meta.source.geo.postal_code
                        ignore_above: 1024
                        level: core
                        name: postal_code
                        node_name: postal_code
                        normalize: []
                        original_fieldset: geo
                        short: Postal code.
                        type: keyword
                    region_iso_code:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-region-iso-code
                        description: Region ISO code.
                        example: CA-QC
                        flat_name: process.group_leader.entry_meta.source.geo.region_iso_code
                        ignore_above: 1024
                        level: core
                        name: region_iso_code
                        node_name: region_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Region ISO code.
                        type: keyword
                    region_name:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-region-name
                        description: Region name.
                        example: Quebec
                        flat_name: process.group_leader.entry_meta.source.geo.region_name
                        ignore_above: 1024
                        level: core
                        name: region_name
                        node_name: region_name
                        normalize: []
                        original_fieldset: geo
                        short: Region name.
                        type: keyword
                    timezone:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-geo-timezone
                        description: The time zone of the location, such as IANA time
                          zone name.
                        example: America/Argentina/Buenos_Aires
                        flat_name: process.group_leader.entry_meta.source.geo.timezone
                        ignore_above: 1024
                        level: core
                        name: timezone
                        node_name: timezone
                        normalize: []
                        original_fieldset: geo
                        short: Time zone.
                        type: keyword
                ip:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-ip
                    description: IP address of the source (IPv4 or IPv6).
                    flat_name: process.group_leader.entry_meta.source.ip
                    level: core
                    name: ip
                    node_name: ip
                    normalize: []
                    original_fieldset: source
                    short: IP address of the source.
                    type: ip
                mac:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-mac
                    description: 'MAC address of the source.

                      The notation format from RFC 7042 is suggested: Each octet (that
                      is, 8-bit byte) is represented by two [uppercase] hexadecimal
                      digits giving the value of the octet as an unsigned integer.
                      Successive octets are separated by a hyphen.'
                    example: 00-00-5E-00-53-23
                    flat_name: process.group_leader.entry_meta.source.mac
                    ignore_above: 1024
                    level: core
                    name: mac
                    node_name: mac
                    normalize: []
                    original_fieldset: source
                    pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                    short: MAC address of the source.
                    type: keyword
                nat:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-nat
                    flat_name: process.group_leader.entry_meta.source.nat
                    intermediate: true
                    name: nat
                    node_name: nat
                    original_fieldset: source
                    type: object
                  fields:
                    ip:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-nat-ip
                        description: 'Translated ip of source based NAT sessions (e.g.
                          internal client to internet)

                          Typically connections traversing load balancers, firewalls,
                          or routers.'
                        flat_name: process.group_leader.entry_meta.source.nat.ip
                        level: extended
                        name: nat.ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: Source NAT ip
                        type: ip
                    port:
                      field_details:
                        dashed_name: process-group-leader-entry-meta-source-nat-port
                        description: 'Translated port of source based NAT sessions.
                          (e.g. internal client to internet)

                          Typically used with load balancers, firewalls, or routers.'
                        flat_name: process.group_leader.entry_meta.source.nat.port
                        format: string
                        level: extended
                        name: nat.port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Source NAT port
                        type: long
                packets:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-packets
                    description: Packets sent from the source to the destination.
                    example: 12
                    flat_name: process.group_leader.entry_meta.source.packets
                    level: core
                    name: packets
                    node_name: packets
                    normalize: []
                    original_fieldset: source
                    short: Packets sent from the source to the destination.
                    type: long
                port:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-port
                    description: Port of the source.
                    flat_name: process.group_leader.entry_meta.source.port
                    format: string
                    level: core
                    name: port
                    node_name: port
                    normalize: []
                    original_fieldset: source
                    short: Port of the source.
                    type: long
                registered_domain:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-registered-domain
                    description: 'The highest registered source domain, stripped of
                      the subdomain.

                      For example, the registered domain for "foo.example.com" is
                      "example.com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last two labels will not work well
                      for TLDs such as "co.uk".'
                    example: example.com
                    flat_name: process.group_leader.entry_meta.source.registered_domain
                    ignore_above: 1024
                    level: extended
                    name: registered_domain
                    node_name: registered_domain
                    normalize: []
                    original_fieldset: source
                    short: The highest registered source domain, stripped of the subdomain.
                    type: keyword
                subdomain:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-subdomain
                    description: 'The subdomain portion of a fully qualified domain
                      name includes all of the names except the host name under the
                      registered_domain.  In a partially qualified domain, or if the
                      the qualification level of the full name cannot be determined,
                      subdomain contains all of the names below the registered domain.

                      For example the subdomain portion of "www.east.mydomain.co.uk"
                      is "east". If the domain has multiple levels of subdomain, such
                      as "sub2.sub1.example.com", the subdomain field should contain
                      "sub2.sub1", with no trailing period.'
                    example: east
                    flat_name: process.group_leader.entry_meta.source.subdomain
                    ignore_above: 1024
                    level: extended
                    name: subdomain
                    node_name: subdomain
                    normalize: []
                    original_fieldset: source
                    short: The subdomain of the domain.
                    type: keyword
                top_level_domain:
                  field_details:
                    dashed_name: process-group-leader-entry-meta-source-top-level-domain
                    description: 'The effective top level domain (eTLD), also known
                      as the domain suffix, is the last part of the domain name. For
                      example, the top level domain for example.com is "com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last label will not work well for
                      effective TLDs such as "co.uk".'
                    example: co.uk
                    flat_name: process.group_leader.entry_meta.source.top_level_domain
                    ignore_above: 1024
                    level: extended
                    name: top_level_domain
                    node_name: top_level_domain
                    normalize: []
                    original_fieldset: source
                    short: The effective top level domain (com, org, net, co.uk).
                    type: keyword
            type:
              field_details:
                dashed_name: process-group-leader-entry-meta-type
                description: 'The entry type for the entry session leader. Values
                  include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                  console

                  Note: This field is only set on process.session_leader.'
                flat_name: process.group_leader.entry_meta.type
                ignore_above: 1024
                level: extended
                name: entry_meta.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The entry type for the entry session leader.
                type: keyword
        env_vars:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-group-leader-env-vars
            description: 'Array of environment variable bindings. Captured from a
              snapshot of the environment at the time of execution.

              May be filtered to protect sensitive information.'
            example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
            flat_name: process.group_leader.env_vars
            ignore_above: 1024
            level: extended
            name: env_vars
            node_name: env_vars
            normalize:
            - array
            original_fieldset: process
            short: Array of environment variable bindings.
            type: keyword
        executable:
          field_details:
            dashed_name: process-group-leader-executable
            description: Absolute path to the process executable.
            example: /usr/bin/ssh
            flat_name: process.group_leader.executable
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.group_leader.executable.text
              name: text
              type: match_only_text
            name: executable
            node_name: executable
            normalize: []
            original_fieldset: process
            short: Absolute path to the process executable.
            type: keyword
        exit_code:
          field_details:
            dashed_name: process-group-leader-exit-code
            description: 'The exit code of the process, if this is a termination event.

              The field should be absent if there is no exit code for the event (e.g.
              process start).'
            example: 137
            flat_name: process.group_leader.exit_code
            level: extended
            name: exit_code
            node_name: exit_code
            normalize: []
            original_fieldset: process
            short: The exit code of the process.
            type: long
        group:
          field_details:
            dashed_name: process-group-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.group_leader.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.group_leader.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-group-name
                description: Name of the group.
                flat_name: process.group_leader.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-group-leader-hash
            description: 'The hash fields represent different bitwise hash algorithms
              and their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).

              Note that this fieldset is used for common hashes that may be computed
              over a range of generic bytes. Entity-specific hashes such as ja3 or
              imphash are placed in the fieldsets to which they relate (tls and pe,
              respectively).'
            flat_name: process.group_leader.hash
            intermediate: true
            name: hash
            node_name: hash
            original_fieldset: hash
            short: Hashes, usually file hashes.
            type: group
          fields:
            md5:
              field_details:
                dashed_name: process-group-leader-hash-md5
                description: MD5 hash.
                flat_name: process.group_leader.hash.md5
                ignore_above: 1024
                level: extended
                name: md5
                node_name: md5
                normalize: []
                original_fieldset: hash
                short: MD5 hash.
                type: keyword
            sha1:
              field_details:
                dashed_name: process-group-leader-hash-sha1
                description: SHA1 hash.
                flat_name: process.group_leader.hash.sha1
                ignore_above: 1024
                level: extended
                name: sha1
                node_name: sha1
                normalize: []
                original_fieldset: hash
                short: SHA1 hash.
                type: keyword
            sha256:
              field_details:
                dashed_name: process-group-leader-hash-sha256
                description: SHA256 hash.
                flat_name: process.group_leader.hash.sha256
                ignore_above: 1024
                level: extended
                name: sha256
                node_name: sha256
                normalize: []
                original_fieldset: hash
                short: SHA256 hash.
                type: keyword
            sha384:
              field_details:
                dashed_name: process-group-leader-hash-sha384
                description: SHA384 hash.
                flat_name: process.group_leader.hash.sha384
                ignore_above: 1024
                level: extended
                name: sha384
                node_name: sha384
                normalize: []
                original_fieldset: hash
                short: SHA384 hash.
                type: keyword
            sha512:
              field_details:
                dashed_name: process-group-leader-hash-sha512
                description: SHA512 hash.
                flat_name: process.group_leader.hash.sha512
                ignore_above: 1024
                level: extended
                name: sha512
                node_name: sha512
                normalize: []
                original_fieldset: hash
                short: SHA512 hash.
                type: keyword
            ssdeep:
              field_details:
                dashed_name: process-group-leader-hash-ssdeep
                description: SSDEEP hash.
                flat_name: process.group_leader.hash.ssdeep
                ignore_above: 1024
                level: extended
                name: ssdeep
                node_name: ssdeep
                normalize: []
                original_fieldset: hash
                short: SSDEEP hash.
                type: keyword
            tlsh:
              field_details:
                dashed_name: process-group-leader-hash-tlsh
                description: TLSH hash.
                flat_name: process.group_leader.hash.tlsh
                ignore_above: 1024
                level: extended
                name: tlsh
                node_name: tlsh
                normalize: []
                original_fieldset: hash
                short: TLSH hash.
                type: keyword
        interactive:
          field_details:
            dashed_name: process-group-leader-interactive
            description: 'Whether the process is connected to an interactive shell.

              Process interactivity is inferred from the processes file descriptors.
              If the character device for the controlling tty is the same as stdin
              and stderr for the process, the process is considered interactive.

              Note: A non-interactive process can belong to an interactive session
              and is simply one that does not have open file descriptors reading the
              controlling TTY on FD 0 (stdin) or writing to the controlling TTY on
              FD 2 (stderr). A backgrounded process is still considered interactive
              if stdin and stderr are connected to the controlling TTY.'
            example: true
            flat_name: process.group_leader.interactive
            level: extended
            name: interactive
            node_name: interactive
            normalize: []
            original_fieldset: process
            short: Whether the process is connected to an interactive shell.
            type: boolean
        io:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-group-leader-io
            description: 'A chunk of input or output (IO) from a single process.

              This field only appears on the top level process object, which is the
              process that wrote the output or read the input.'
            flat_name: process.group_leader.io
            intermediate: false
            level: extended
            name: io
            node_name: io
            normalize: []
            original_fieldset: process
            short: A chunk of input or output (IO) from a single process.
            type: object
          fields:
            bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-io-bytes-skipped
                description: An array of byte offsets and lengths denoting where IO
                  data has been skipped.
                flat_name: process.group_leader.io.bytes_skipped
                intermediate: false
                level: extended
                name: io.bytes_skipped
                node_name: bytes_skipped
                normalize:
                - array
                original_fieldset: process
                short: An array of byte offsets and lengths denoting where IO data
                  has been skipped.
                type: object
              fields:
                length:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-group-leader-io-bytes-skipped-length
                    description: The length of bytes skipped.
                    flat_name: process.group_leader.io.bytes_skipped.length
                    level: extended
                    name: io.bytes_skipped.length
                    node_name: length
                    normalize: []
                    original_fieldset: process
                    short: The length of bytes skipped.
                    type: long
                offset:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-group-leader-io-bytes-skipped-offset
                    description: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    flat_name: process.group_leader.io.bytes_skipped.offset
                    level: extended
                    name: io.bytes_skipped.offset
                    node_name: offset
                    normalize: []
                    original_fieldset: process
                    short: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    type: long
            max_bytes_per_process_exceeded:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-io-max-bytes-per-process-exceeded
                description: If true, the process producing the output has exceeded
                  the max_kilobytes_per_process configuration setting.
                flat_name: process.group_leader.io.max_bytes_per_process_exceeded
                level: extended
                name: io.max_bytes_per_process_exceeded
                node_name: max_bytes_per_process_exceeded
                normalize: []
                original_fieldset: process
                short: If true, the process producing the output has exceeded the
                  max_kilobytes_per_process configuration setting.
                type: boolean
            text:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-io-text
                description: 'A chunk of output or input sanitized to UTF-8.

                  Best efforts are made to ensure complete lines are captured in these
                  events. Assumptions should NOT be made that multiple lines will
                  appear in the same event. TTY output may contain terminal control
                  codes such as for cursor movement, so some string queries may not
                  match due to terminal codes inserted between characters of a word.'
                flat_name: process.group_leader.io.text
                level: extended
                name: io.text
                node_name: text
                normalize: []
                original_fieldset: process
                short: A chunk of output or input sanitized to UTF-8.
                type: wildcard
            total_bytes_captured:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-io-total-bytes-captured
                description: The total number of bytes captured in this event.
                flat_name: process.group_leader.io.total_bytes_captured
                level: extended
                name: io.total_bytes_captured
                node_name: total_bytes_captured
                normalize: []
                original_fieldset: process
                short: The total number of bytes captured in this event.
                type: long
            total_bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-io-total-bytes-skipped
                description: The total number of bytes that were not captured due
                  to implementation restrictions such as buffer size limits. Implementors
                  should strive to ensure this value is always zero
                flat_name: process.group_leader.io.total_bytes_skipped
                level: extended
                name: io.total_bytes_skipped
                node_name: total_bytes_skipped
                normalize: []
                original_fieldset: process
                short: The total number of bytes that were not captured due to implementation
                  restrictions such as buffer size limits.
                type: long
            type:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-io-type
                description: 'The type of object on which the IO action (read or write)
                  was taken.

                  Currently only ''tty'' is supported. Other types may be added in
                  the future for ''file'' and ''socket'' support.'
                flat_name: process.group_leader.io.type
                ignore_above: 1024
                level: extended
                name: io.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The type of object on which the IO action (read or write) was
                  taken.
                type: keyword
        macho:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-group-leader-macho
            description: These fields contain Mac OS Mach Object file format (Mach-O)
              metadata.
            flat_name: process.group_leader.macho
            intermediate: true
            name: macho
            node_name: macho
            original_fieldset: macho
            short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
            type: group
          fields:
            go_import_hash:
              field_details:
                dashed_name: process-group-leader-macho-go-import-hash
                description: 'A hash of the Go language imports in a Mach-O file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.group_leader.macho.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the Go language imports in a Mach-O file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-group-leader-macho-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.group_leader.macho.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: macho
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-group-leader-macho-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.group_leader.macho.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-group-leader-macho-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.group_leader.macho.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-group-leader-macho-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.group_leader.macho.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: macho
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            import_hash:
              field_details:
                dashed_name: process-group-leader-macho-import-hash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a synonym for symhash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.group_leader.macho.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-group-leader-macho-imports
                description: List of imported element names and types.
                flat_name: process.group_leader.macho.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: macho
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-group-leader-macho-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.group_leader.macho.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-group-leader-macho-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.group_leader.macho.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-group-leader-macho-sections
                description: 'An array containing an object for each section of the
                  Mach-O file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `macho.sections.*`.'
                flat_name: process.group_leader.macho.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: macho
                short: Section information of the Mach-O file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-group-leader-macho-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.group_leader.macho.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-group-leader-macho-sections-name
                    description: Mach-O Section List name.
                    flat_name: process.group_leader.macho.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-group-leader-macho-sections-physical-size
                    description: Mach-O Section List physical size.
                    flat_name: process.group_leader.macho.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-group-leader-macho-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.group_leader.macho.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-group-leader-macho-sections-virtual-size
                    description: Mach-O Section List virtual size. This is always
                      the same as `physical_size`.
                    flat_name: process.group_leader.macho.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List virtual size. This is always the same
                      as `physical_size`.
                    type: long
            symhash:
              field_details:
                dashed_name: process-group-leader-macho-symhash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a Mach-O implementation of the Windows PE imphash'
                example: d3ccf195b62a9279c3c19af1080497ec
                flat_name: process.group_leader.macho.symhash
                ignore_above: 1024
                level: extended
                name: symhash
                node_name: symhash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
        name:
          field_details:
            dashed_name: process-group-leader-name
            description: 'Process name.

              Sometimes called program name or similar.'
            example: ssh
            flat_name: process.group_leader.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.group_leader.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: process
            short: Process name.
            type: keyword
        pe:
          field_details:
            dashed_name: process-group-leader-pe
            description: These fields contain Windows Portable Executable (PE) metadata.
            flat_name: process.group_leader.pe
            intermediate: true
            name: pe
            node_name: pe
            original_fieldset: pe
            short: These fields contain Windows Portable Executable (PE) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-group-leader-pe-architecture
                description: CPU architecture target for the file.
                example: x64
                flat_name: process.group_leader.pe.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: pe
                short: CPU architecture target for the file.
                type: keyword
            company:
              field_details:
                dashed_name: process-group-leader-pe-company
                description: Internal company name of the file, provided at compile-time.
                example: Microsoft Corporation
                flat_name: process.group_leader.pe.company
                ignore_above: 1024
                level: extended
                name: company
                node_name: company
                normalize: []
                original_fieldset: pe
                short: Internal company name of the file, provided at compile-time.
                type: keyword
            description:
              field_details:
                dashed_name: process-group-leader-pe-description
                description: Internal description of the file, provided at compile-time.
                example: Paint
                flat_name: process.group_leader.pe.description
                ignore_above: 1024
                level: extended
                name: description
                node_name: description
                normalize: []
                original_fieldset: pe
                short: Internal description of the file, provided at compile-time.
                type: keyword
            file_version:
              field_details:
                dashed_name: process-group-leader-pe-file-version
                description: Internal version of the file, provided at compile-time.
                example: 6.3.9600.17415
                flat_name: process.group_leader.pe.file_version
                ignore_above: 1024
                level: extended
                name: file_version
                node_name: file_version
                normalize: []
                original_fieldset: pe
                short: Process name.
                type: keyword
            go_import_hash:
              field_details:
                dashed_name: process-group-leader-pe-go-import-hash
                description: 'A hash of the Go language imports in a PE file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.group_leader.pe.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the Go language imports in a PE file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-group-leader-pe-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.group_leader.pe.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: pe
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-group-leader-pe-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.group_leader.pe.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-group-leader-pe-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.group_leader.pe.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-group-leader-pe-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.group_leader.pe.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: pe
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            imphash:
              field_details:
                dashed_name: process-group-leader-pe-imphash
                description: 'A hash of the imports in a PE file. An imphash -- or
                  import hash -- can be used to fingerprint binaries even after recompilation
                  or other code-level transformations have occurred, which would change
                  more traditional hash values.

                  Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                example: 0c6803c4e922103c4dca5963aad36ddf
                flat_name: process.group_leader.pe.imphash
                ignore_above: 1024
                level: extended
                name: imphash
                node_name: imphash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            import_hash:
              field_details:
                dashed_name: process-group-leader-pe-import-hash
                description: 'A hash of the imports in a PE file. An import hash can
                  be used to fingerprint binaries even after recompilation or other
                  code-level transformations have occurred, which would change more
                  traditional hash values.

                  This is a synonym for imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.group_leader.pe.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-group-leader-pe-imports
                description: List of imported element names and types.
                flat_name: process.group_leader.pe.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: pe
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-group-leader-pe-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.group_leader.pe.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-group-leader-pe-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.group_leader.pe.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            original_file_name:
              field_details:
                dashed_name: process-group-leader-pe-original-file-name
                description: Internal name of the file, provided at compile-time.
                example: MSPAINT.EXE
                flat_name: process.group_leader.pe.original_file_name
                ignore_above: 1024
                level: extended
                name: original_file_name
                node_name: original_file_name
                normalize: []
                original_fieldset: pe
                short: Internal name of the file, provided at compile-time.
                type: keyword
            pehash:
              field_details:
                dashed_name: process-group-leader-pe-pehash
                description: 'A hash of the PE header and data from one or more PE
                  sections. An pehash can be used to cluster files by transforming
                  structural information about a file into a hash value.

                  Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                example: 73ff189b63cd6be375a7ff25179a38d347651975
                flat_name: process.group_leader.pe.pehash
                ignore_above: 1024
                level: extended
                name: pehash
                node_name: pehash
                normalize: []
                original_fieldset: pe
                short: A hash of the PE header and data from one or more PE sections.
                type: keyword
            product:
              field_details:
                dashed_name: process-group-leader-pe-product
                description: Internal product name of the file, provided at compile-time.
                example: "Microsoft\xAE Windows\xAE Operating System"
                flat_name: process.group_leader.pe.product
                ignore_above: 1024
                level: extended
                name: product
                node_name: product
                normalize: []
                original_fieldset: pe
                short: Internal product name of the file, provided at compile-time.
                type: keyword
            sections:
              field_details:
                dashed_name: process-group-leader-pe-sections
                description: 'An array containing an object for each section of the
                  PE file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `pe.sections.*`.'
                flat_name: process.group_leader.pe.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: pe
                short: Section information of the PE file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-group-leader-pe-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.group_leader.pe.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-group-leader-pe-sections-name
                    description: PE Section List name.
                    flat_name: process.group_leader.pe.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-group-leader-pe-sections-physical-size
                    description: PE Section List physical size.
                    flat_name: process.group_leader.pe.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-group-leader-pe-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.group_leader.pe.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-group-leader-pe-sections-virtual-size
                    description: PE Section List virtual size. This is always the
                      same as `physical_size`.
                    flat_name: process.group_leader.pe.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List virtual size. This is always the same as
                      `physical_size`.
                    type: long
        pgid:
          field_details:
            dashed_name: process-group-leader-pgid
            description: 'Deprecated for removal in next major version release. This
              field is superseded by `process.group_leader.pid`.

              Identifier of the group of processes the process belongs to.'
            flat_name: process.group_leader.pgid
            format: string
            level: extended
            name: pgid
            node_name: pgid
            normalize: []
            original_fieldset: process
            short: Deprecated identifier of the group of processes the process belongs
              to.
            type: long
        pid:
          field_details:
            dashed_name: process-group-leader-pid
            description: Process id.
            example: 4242
            flat_name: process.group_leader.pid
            format: string
            level: core
            name: pid
            node_name: pid
            normalize: []
            original_fieldset: process
            short: Process id.
            type: long
        real_group:
          field_details:
            dashed_name: process-group-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.group_leader.group
            intermediate: true
            name: real_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-real-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.real_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-real-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.group_leader.real_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-real-group-name
                description: Name of the group.
                flat_name: process.group_leader.real_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        real_user:
          field_details:
            dashed_name: process-group-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.group_leader.user
            intermediate: true
            name: real_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-real-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.real_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-group-leader-real-user-email
                description: User email address.
                flat_name: process.group_leader.real_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-group-leader-real-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.group_leader.real_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.group_leader.real_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-group-leader-real-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.group_leader.real_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-group-leader-real-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.group_leader.real_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-group-leader-real-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.group_leader.real_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-group-leader-real-user-group-name
                    description: Name of the group.
                    flat_name: process.group_leader.real_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-group-leader-real-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.group_leader.real_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-real-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.group_leader.real_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-real-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.group_leader.real_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.group_leader.real_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-group-leader-real-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.group_leader.real_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-group-leader-real-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.group_leader.real_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-group-leader-real-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.group_leader.real_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-group-leader-real-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.group_leader.real_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-group-leader-real-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.group_leader.real_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-group-leader-real-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.group_leader.real_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-group-leader-real-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.group_leader.real_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-group-leader-real-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.group_leader.real_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        same_as_process:
          field_details:
            dashed_name: process-group-leader-same-as-process
            description: 'This boolean is used to identify if a leader process is
              the same as the top level process.

              For example, if `process.group_leader.same_as_process = true`, it means
              the process event in question is the leader of its process group. Details
              under `process.*` like `pid` would be the same under `process.group_leader.*`
              The same applies for both `process.session_leader` and `process.entry_leader`.

              This field exists to the benefit of EQL and other rule engines since
              it''s not possible to compare equality between two fields in a single
              document. e.g `process.entity_id` = `process.group_leader.entity_id`
              (top level process is the process group leader) OR `process.entity_id`
              = `process.entry_leader.entity_id` (top level process is the entry session
              leader)

              Instead these rules could be written like: `process.group_leader.same_as_process:
              true` OR `process.entry_leader.same_as_process: true`

              Note: This field is only set on `process.entry_leader`, `process.session_leader`
              and `process.group_leader`.'
            example: true
            flat_name: process.group_leader.same_as_process
            level: extended
            name: same_as_process
            node_name: same_as_process
            normalize: []
            original_fieldset: process
            short: This boolean is used to identify if a leader process is the same
              as the top level process.
            type: boolean
        saved_group:
          field_details:
            dashed_name: process-group-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.group_leader.group
            intermediate: true
            name: saved_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-saved-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.saved_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-saved-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.group_leader.saved_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-saved-group-name
                description: Name of the group.
                flat_name: process.group_leader.saved_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        saved_user:
          field_details:
            dashed_name: process-group-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.group_leader.user
            intermediate: true
            name: saved_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-saved-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.saved_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-group-leader-saved-user-email
                description: User email address.
                flat_name: process.group_leader.saved_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-group-leader-saved-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.group_leader.saved_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.group_leader.saved_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-group-leader-saved-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.group_leader.saved_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-group-leader-saved-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.group_leader.saved_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-group-leader-saved-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.group_leader.saved_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-group-leader-saved-user-group-name
                    description: Name of the group.
                    flat_name: process.group_leader.saved_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-group-leader-saved-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.group_leader.saved_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-saved-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.group_leader.saved_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-saved-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.group_leader.saved_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.group_leader.saved_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-group-leader-saved-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.group_leader.saved_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-group-leader-saved-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.group_leader.saved_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-group-leader-saved-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.group_leader.saved_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-group-leader-saved-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.group_leader.saved_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-group-leader-saved-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.group_leader.saved_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-group-leader-saved-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.group_leader.saved_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-group-leader-saved-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.group_leader.saved_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-group-leader-saved-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.group_leader.saved_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        start:
          field_details:
            dashed_name: process-group-leader-start
            description: The time the process started.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.group_leader.start
            level: extended
            name: start
            node_name: start
            normalize: []
            original_fieldset: process
            short: The time the process started.
            type: date
        supplemental_groups:
          field_details:
            dashed_name: process-group-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.group_leader.group
            intermediate: true
            name: supplemental_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-supplemental-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.supplemental_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-supplemental-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.group_leader.supplemental_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-supplemental-groups-name
                description: Name of the group.
                flat_name: process.group_leader.supplemental_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        thread:
          field_details:
            dashed_name: process-group-leader-thread
            flat_name: process.group_leader.thread
            intermediate: true
            name: thread
            node_name: thread
            original_fieldset: process
            type: object
          fields:
            capabilities:
              field_details:
                dashed_name: process-group-leader-thread-capabilities
                flat_name: process.group_leader.thread.capabilities
                intermediate: true
                name: thread.capabilities
                node_name: capabilities
                original_fieldset: process
                type: object
              fields:
                effective:
                  field_details:
                    dashed_name: process-group-leader-thread-capabilities-effective
                    description: This is the set of capabilities used by the kernel
                      to perform permission checks for the thread.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.group_leader.thread.capabilities.effective
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.effective
                    node_name: effective
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities used for permission checks.
                    type: keyword
                permitted:
                  field_details:
                    dashed_name: process-group-leader-thread-capabilities-permitted
                    description: This is a limiting superset for the effective capabilities
                      that the thread may assume.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.group_leader.thread.capabilities.permitted
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.permitted
                    node_name: permitted
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities a thread could assume.
                    type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-thread-id
                description: Thread ID.
                example: 4242
                flat_name: process.group_leader.thread.id
                format: string
                level: extended
                name: thread.id
                node_name: id
                normalize: []
                original_fieldset: process
                short: Thread ID.
                type: long
            name:
              field_details:
                dashed_name: process-group-leader-thread-name
                description: Thread name.
                example: thread-0
                flat_name: process.group_leader.thread.name
                ignore_above: 1024
                level: extended
                name: thread.name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Thread name.
                type: keyword
        title:
          field_details:
            dashed_name: process-group-leader-title
            description: 'Process title.

              The proctitle, some times the same as process name. Can also be different:
              for example a browser setting its title to the web page currently opened.'
            flat_name: process.group_leader.title
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.group_leader.title.text
              name: text
              type: match_only_text
            name: title
            node_name: title
            normalize: []
            original_fieldset: process
            short: Process title.
            type: keyword
        tty:
          field_details:
            dashed_name: process-group-leader-tty
            description: Information about the controlling TTY device. If set, the
              process belongs to an interactive session.
            flat_name: process.group_leader.tty
            intermediate: false
            level: extended
            name: tty
            node_name: tty
            normalize: []
            original_fieldset: process
            short: Information about the controlling TTY device.
            type: object
          fields:
            char_device:
              field_details:
                dashed_name: process-group-leader-tty-char-device
                flat_name: process.group_leader.tty.char_device
                intermediate: true
                name: tty.char_device
                node_name: char_device
                original_fieldset: process
                type: object
              fields:
                major:
                  field_details:
                    dashed_name: process-group-leader-tty-char-device-major
                    description: The major number identifies the driver associated
                      with the device. The character device's major and minor numbers
                      can be algorithmically combined to produce the more familiar
                      terminal identifiers such as "ttyS0" and "pts/0". For more details,
                      please refer to the Linux kernel documentation.
                    example: 4
                    flat_name: process.group_leader.tty.char_device.major
                    level: extended
                    name: tty.char_device.major
                    node_name: major
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's major number.
                    type: long
                minor:
                  field_details:
                    dashed_name: process-group-leader-tty-char-device-minor
                    description: "The minor number is used only by the driver specified\
                      \ by the major number; other parts of the kernel don\u2019t\
                      \ use it, and merely pass it along to the driver. It is common\
                      \ for a driver to control several devices; the minor number\
                      \ provides a way for the driver to differentiate among them."
                    example: 1
                    flat_name: process.group_leader.tty.char_device.minor
                    level: extended
                    name: tty.char_device.minor
                    node_name: minor
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's minor number.
                    type: long
            columns:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-tty-columns
                description: 'The number of character columns per line. e.g terminal
                  width

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 80
                flat_name: process.group_leader.tty.columns
                level: extended
                name: tty.columns
                node_name: columns
                normalize: []
                original_fieldset: process
                short: The number of character columns per line. e.g terminal width
                type: long
            rows:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-group-leader-tty-rows
                description: 'The number of character rows in the terminal. e.g terminal
                  height

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 24
                flat_name: process.group_leader.tty.rows
                level: extended
                name: tty.rows
                node_name: rows
                normalize: []
                original_fieldset: process
                short: The number of character rows in the terminal. e.g terminal
                  height
                type: long
        uptime:
          field_details:
            dashed_name: process-group-leader-uptime
            description: Seconds the process has been up.
            example: 1325
            flat_name: process.group_leader.uptime
            level: extended
            name: uptime
            node_name: uptime
            normalize: []
            original_fieldset: process
            short: Seconds the process has been up.
            type: long
        user:
          field_details:
            dashed_name: process-group-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.group_leader.user
            intermediate: true
            name: user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-group-leader-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.group_leader.user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-group-leader-user-email
                description: User email address.
                flat_name: process.group_leader.user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-group-leader-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.group_leader.user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.group_leader.user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-group-leader-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.group_leader.user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-group-leader-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.group_leader.user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-group-leader-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.group_leader.user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-group-leader-user-group-name
                    description: Name of the group.
                    flat_name: process.group_leader.user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-group-leader-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.group_leader.user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-group-leader-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.group_leader.user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-group-leader-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.group_leader.user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.group_leader.user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-group-leader-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.group_leader.user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-group-leader-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.group_leader.user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-group-leader-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.group_leader.user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-group-leader-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.group_leader.user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-group-leader-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.group_leader.user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-group-leader-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.group_leader.user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-group-leader-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.group_leader.user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-group-leader-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.group_leader.user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        vpid:
          field_details:
            dashed_name: process-group-leader-vpid
            description: 'Virtual process id.

              The process id within a pid namespace. This is not necessarily unique
              across all processes on the host but it is unique within the process
              namespace that the process exists within.'
            example: 4242
            flat_name: process.group_leader.vpid
            format: string
            level: core
            name: vpid
            node_name: vpid
            normalize: []
            original_fieldset: process
            short: Virtual process id.
            type: long
        working_directory:
          field_details:
            dashed_name: process-group-leader-working-directory
            description: The working directory of the process.
            example: /home/alice
            flat_name: process.group_leader.working_directory
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.group_leader.working_directory.text
              name: text
              type: match_only_text
            name: working_directory
            node_name: working_directory
            normalize: []
            original_fieldset: process
            short: The working directory of the process.
            type: keyword
    hash:
      field_details:
        dashed_name: process-hash
        description: 'The hash fields represent different bitwise hash algorithms
          and their values.

          Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
          for other hashes by lowercasing the hash algorithm name and using underscore
          separators as appropriate (snake case, e.g. sha3_512).

          Note that this fieldset is used for common hashes that may be computed over
          a range of generic bytes. Entity-specific hashes such as ja3 or imphash
          are placed in the fieldsets to which they relate (tls and pe, respectively).'
        flat_name: process.hash
        intermediate: true
        name: hash
        node_name: hash
        original_fieldset: hash
        short: Hashes, usually file hashes.
        type: group
      fields:
        md5:
          field_details:
            dashed_name: process-hash-md5
            description: MD5 hash.
            flat_name: process.hash.md5
            ignore_above: 1024
            level: extended
            name: md5
            node_name: md5
            normalize: []
            original_fieldset: hash
            short: MD5 hash.
            type: keyword
        sha1:
          field_details:
            dashed_name: process-hash-sha1
            description: SHA1 hash.
            flat_name: process.hash.sha1
            ignore_above: 1024
            level: extended
            name: sha1
            node_name: sha1
            normalize: []
            original_fieldset: hash
            short: SHA1 hash.
            type: keyword
        sha256:
          field_details:
            dashed_name: process-hash-sha256
            description: SHA256 hash.
            flat_name: process.hash.sha256
            ignore_above: 1024
            level: extended
            name: sha256
            node_name: sha256
            normalize: []
            original_fieldset: hash
            short: SHA256 hash.
            type: keyword
        sha384:
          field_details:
            dashed_name: process-hash-sha384
            description: SHA384 hash.
            flat_name: process.hash.sha384
            ignore_above: 1024
            level: extended
            name: sha384
            node_name: sha384
            normalize: []
            original_fieldset: hash
            short: SHA384 hash.
            type: keyword
        sha512:
          field_details:
            dashed_name: process-hash-sha512
            description: SHA512 hash.
            flat_name: process.hash.sha512
            ignore_above: 1024
            level: extended
            name: sha512
            node_name: sha512
            normalize: []
            original_fieldset: hash
            short: SHA512 hash.
            type: keyword
        ssdeep:
          field_details:
            dashed_name: process-hash-ssdeep
            description: SSDEEP hash.
            flat_name: process.hash.ssdeep
            ignore_above: 1024
            level: extended
            name: ssdeep
            node_name: ssdeep
            normalize: []
            original_fieldset: hash
            short: SSDEEP hash.
            type: keyword
        tlsh:
          field_details:
            dashed_name: process-hash-tlsh
            description: TLSH hash.
            flat_name: process.hash.tlsh
            ignore_above: 1024
            level: extended
            name: tlsh
            node_name: tlsh
            normalize: []
            original_fieldset: hash
            short: TLSH hash.
            type: keyword
    interactive:
      field_details:
        dashed_name: process-interactive
        description: 'Whether the process is connected to an interactive shell.

          Process interactivity is inferred from the processes file descriptors. If
          the character device for the controlling tty is the same as stdin and stderr
          for the process, the process is considered interactive.

          Note: A non-interactive process can belong to an interactive session and
          is simply one that does not have open file descriptors reading the controlling
          TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr).
          A backgrounded process is still considered interactive if stdin and stderr
          are connected to the controlling TTY.'
        example: true
        flat_name: process.interactive
        level: extended
        name: interactive
        node_name: interactive
        normalize: []
        short: Whether the process is connected to an interactive shell.
        type: boolean
    io:
      field_details:
        beta: This field is beta and subject to change.
        dashed_name: process-io
        description: 'A chunk of input or output (IO) from a single process.

          This field only appears on the top level process object, which is the process
          that wrote the output or read the input.'
        flat_name: process.io
        intermediate: false
        level: extended
        name: io
        node_name: io
        normalize: []
        short: A chunk of input or output (IO) from a single process.
        type: object
      fields:
        bytes_skipped:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-io-bytes-skipped
            description: An array of byte offsets and lengths denoting where IO data
              has been skipped.
            flat_name: process.io.bytes_skipped
            intermediate: false
            level: extended
            name: io.bytes_skipped
            node_name: bytes_skipped
            normalize:
            - array
            short: An array of byte offsets and lengths denoting where IO data has
              been skipped.
            type: object
          fields:
            length:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-io-bytes-skipped-length
                description: The length of bytes skipped.
                flat_name: process.io.bytes_skipped.length
                level: extended
                name: io.bytes_skipped.length
                node_name: length
                normalize: []
                short: The length of bytes skipped.
                type: long
            offset:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-io-bytes-skipped-offset
                description: The byte offset into this event's io.text (or io.bytes
                  in the future) where length bytes were skipped.
                flat_name: process.io.bytes_skipped.offset
                level: extended
                name: io.bytes_skipped.offset
                node_name: offset
                normalize: []
                short: The byte offset into this event's io.text (or io.bytes in the
                  future) where length bytes were skipped.
                type: long
        max_bytes_per_process_exceeded:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-io-max-bytes-per-process-exceeded
            description: If true, the process producing the output has exceeded the
              max_kilobytes_per_process configuration setting.
            flat_name: process.io.max_bytes_per_process_exceeded
            level: extended
            name: io.max_bytes_per_process_exceeded
            node_name: max_bytes_per_process_exceeded
            normalize: []
            short: If true, the process producing the output has exceeded the max_kilobytes_per_process
              configuration setting.
            type: boolean
        text:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-io-text
            description: 'A chunk of output or input sanitized to UTF-8.

              Best efforts are made to ensure complete lines are captured in these
              events. Assumptions should NOT be made that multiple lines will appear
              in the same event. TTY output may contain terminal control codes such
              as for cursor movement, so some string queries may not match due to
              terminal codes inserted between characters of a word.'
            flat_name: process.io.text
            level: extended
            name: io.text
            node_name: text
            normalize: []
            short: A chunk of output or input sanitized to UTF-8.
            type: wildcard
        total_bytes_captured:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-io-total-bytes-captured
            description: The total number of bytes captured in this event.
            flat_name: process.io.total_bytes_captured
            level: extended
            name: io.total_bytes_captured
            node_name: total_bytes_captured
            normalize: []
            short: The total number of bytes captured in this event.
            type: long
        total_bytes_skipped:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-io-total-bytes-skipped
            description: The total number of bytes that were not captured due to implementation
              restrictions such as buffer size limits. Implementors should strive
              to ensure this value is always zero
            flat_name: process.io.total_bytes_skipped
            level: extended
            name: io.total_bytes_skipped
            node_name: total_bytes_skipped
            normalize: []
            short: The total number of bytes that were not captured due to implementation
              restrictions such as buffer size limits.
            type: long
        type:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-io-type
            description: 'The type of object on which the IO action (read or write)
              was taken.

              Currently only ''tty'' is supported. Other types may be added in the
              future for ''file'' and ''socket'' support.'
            flat_name: process.io.type
            ignore_above: 1024
            level: extended
            name: io.type
            node_name: type
            normalize: []
            short: The type of object on which the IO action (read or write) was taken.
            type: keyword
    macho:
      field_details:
        beta: These fields are in beta and are subject to change.
        dashed_name: process-macho
        description: These fields contain Mac OS Mach Object file format (Mach-O)
          metadata.
        flat_name: process.macho
        intermediate: true
        name: macho
        node_name: macho
        original_fieldset: macho
        short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
        type: group
      fields:
        go_import_hash:
          field_details:
            dashed_name: process-macho-go-import-hash
            description: 'A hash of the Go language imports in a Mach-O file excluding
              standard library imports. An import hash can be used to fingerprint
              binaries even after recompilation or other code-level transformations
              have occurred, which would change more traditional hash values.

              The algorithm used to calculate the Go symbol hash and a reference implementation
              are available [here](https://github.com/elastic/toutoumomoma).'
            example: 10bddcb4cee42080f76c88d9ff964491
            flat_name: process.macho.go_import_hash
            ignore_above: 1024
            level: extended
            name: go_import_hash
            node_name: go_import_hash
            normalize: []
            original_fieldset: macho
            short: A hash of the Go language imports in a Mach-O file.
            type: keyword
        go_imports:
          field_details:
            dashed_name: process-macho-go-imports
            description: List of imported Go language element names and types.
            flat_name: process.macho.go_imports
            level: extended
            name: go_imports
            node_name: go_imports
            normalize: []
            original_fieldset: macho
            short: List of imported Go language element names and types.
            type: flattened
        go_imports_names_entropy:
          field_details:
            dashed_name: process-macho-go-imports-names-entropy
            description: Shannon entropy calculation from the list of Go imports.
            flat_name: process.macho.go_imports_names_entropy
            format: number
            level: extended
            name: go_imports_names_entropy
            node_name: go_imports_names_entropy
            normalize: []
            original_fieldset: macho
            short: Shannon entropy calculation from the list of Go imports.
            type: long
        go_imports_names_var_entropy:
          field_details:
            dashed_name: process-macho-go-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              Go imports.
            flat_name: process.macho.go_imports_names_var_entropy
            format: number
            level: extended
            name: go_imports_names_var_entropy
            node_name: go_imports_names_var_entropy
            normalize: []
            original_fieldset: macho
            short: Variance for Shannon entropy calculation from the list of Go imports.
            type: long
        go_stripped:
          field_details:
            dashed_name: process-macho-go-stripped
            description: Set to true if the file is a Go executable that has had its
              symbols stripped or obfuscated and false if an unobfuscated Go executable.
            flat_name: process.macho.go_stripped
            level: extended
            name: go_stripped
            node_name: go_stripped
            normalize: []
            original_fieldset: macho
            short: Whether the file is a stripped or obfuscated Go executable.
            type: boolean
        import_hash:
          field_details:
            dashed_name: process-macho-import-hash
            description: 'A hash of the imports in a Mach-O file. An import hash can
              be used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is a synonym for symhash.'
            example: d41d8cd98f00b204e9800998ecf8427e
            flat_name: process.macho.import_hash
            ignore_above: 1024
            level: extended
            name: import_hash
            node_name: import_hash
            normalize: []
            original_fieldset: macho
            short: A hash of the imports in a Mach-O file.
            type: keyword
        imports:
          field_details:
            dashed_name: process-macho-imports
            description: List of imported element names and types.
            flat_name: process.macho.imports
            level: extended
            name: imports
            node_name: imports
            normalize:
            - array
            original_fieldset: macho
            short: List of imported element names and types.
            type: flattened
        imports_names_entropy:
          field_details:
            dashed_name: process-macho-imports-names-entropy
            description: Shannon entropy calculation from the list of imported element
              names and types.
            flat_name: process.macho.imports_names_entropy
            format: number
            level: extended
            name: imports_names_entropy
            node_name: imports_names_entropy
            normalize: []
            original_fieldset: macho
            short: Shannon entropy calculation from the list of imported element names
              and types.
            type: long
        imports_names_var_entropy:
          field_details:
            dashed_name: process-macho-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              imported element names and types.
            flat_name: process.macho.imports_names_var_entropy
            format: number
            level: extended
            name: imports_names_var_entropy
            node_name: imports_names_var_entropy
            normalize: []
            original_fieldset: macho
            short: Variance for Shannon entropy calculation from the list of imported
              element names and types.
            type: long
        sections:
          field_details:
            dashed_name: process-macho-sections
            description: 'An array containing an object for each section of the Mach-O
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `macho.sections.*`.'
            flat_name: process.macho.sections
            intermediate: false
            level: extended
            name: sections
            node_name: sections
            normalize:
            - array
            original_fieldset: macho
            short: Section information of the Mach-O file.
            type: nested
          fields:
            entropy:
              field_details:
                dashed_name: process-macho-sections-entropy
                description: Shannon entropy calculation from the section.
                flat_name: process.macho.sections.entropy
                format: number
                level: extended
                name: sections.entropy
                node_name: entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the section.
                type: long
            name:
              field_details:
                dashed_name: process-macho-sections-name
                description: Mach-O Section List name.
                flat_name: process.macho.sections.name
                ignore_above: 1024
                level: extended
                name: sections.name
                node_name: name
                normalize: []
                original_fieldset: macho
                short: Mach-O Section List name.
                type: keyword
            physical_size:
              field_details:
                dashed_name: process-macho-sections-physical-size
                description: Mach-O Section List physical size.
                flat_name: process.macho.sections.physical_size
                format: bytes
                level: extended
                name: sections.physical_size
                node_name: physical_size
                normalize: []
                original_fieldset: macho
                short: Mach-O Section List physical size.
                type: long
            var_entropy:
              field_details:
                dashed_name: process-macho-sections-var-entropy
                description: Variance for Shannon entropy calculation from the section.
                flat_name: process.macho.sections.var_entropy
                format: number
                level: extended
                name: sections.var_entropy
                node_name: var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the section.
                type: long
            virtual_size:
              field_details:
                dashed_name: process-macho-sections-virtual-size
                description: Mach-O Section List virtual size. This is always the
                  same as `physical_size`.
                flat_name: process.macho.sections.virtual_size
                format: string
                level: extended
                name: sections.virtual_size
                node_name: virtual_size
                normalize: []
                original_fieldset: macho
                short: Mach-O Section List virtual size. This is always the same as
                  `physical_size`.
                type: long
        symhash:
          field_details:
            dashed_name: process-macho-symhash
            description: 'A hash of the imports in a Mach-O file. An import hash can
              be used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is a Mach-O implementation of the Windows PE imphash'
            example: d3ccf195b62a9279c3c19af1080497ec
            flat_name: process.macho.symhash
            ignore_above: 1024
            level: extended
            name: symhash
            node_name: symhash
            normalize: []
            original_fieldset: macho
            short: A hash of the imports in a Mach-O file.
            type: keyword
    name:
      field_details:
        dashed_name: process-name
        description: 'Process name.

          Sometimes called program name or similar.'
        example: ssh
        flat_name: process.name
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: process.name.text
          name: text
          type: match_only_text
        name: name
        node_name: name
        normalize: []
        short: Process name.
        type: keyword
    parent:
      field_details:
        dashed_name: process-process
        description: 'These fields contain information about a process.

          These fields can help you correlate metrics information with a process id/name
          from a log message.  The `process.pid` often stays in the metric itself
          and is copied to the global field for correlation.'
        flat_name: process.process
        intermediate: true
        name: parent
        node_name: process
        original_fieldset: process
        short: These fields contain information about a process.
        type: group
      fields:
        args:
          field_details:
            dashed_name: process-parent-args
            description: 'Array of process arguments, starting with the absolute path
              to the executable.

              May be filtered to protect sensitive information.'
            example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
            flat_name: process.parent.args
            ignore_above: 1024
            level: extended
            name: args
            node_name: args
            normalize:
            - array
            original_fieldset: process
            short: Array of process arguments.
            type: keyword
        args_count:
          field_details:
            dashed_name: process-parent-args-count
            description: 'Length of the process.args array.

              This field can be useful for querying or performing bucket analysis
              on how many arguments were provided to start a process. More arguments
              may be an indication of suspicious activity.'
            example: 4
            flat_name: process.parent.args_count
            level: extended
            name: args_count
            node_name: args_count
            normalize: []
            original_fieldset: process
            short: Length of the process.args array.
            type: long
        attested_groups:
          field_details:
            dashed_name: process-parent-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.parent.group
            intermediate: true
            name: attested_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-attested-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.attested_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-attested-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.parent.attested_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-attested-groups-name
                description: Name of the group.
                flat_name: process.parent.attested_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        attested_user:
          field_details:
            dashed_name: process-parent-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.parent.user
            intermediate: true
            name: attested_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-attested-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.attested_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-parent-attested-user-email
                description: User email address.
                flat_name: process.parent.attested_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-parent-attested-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.parent.attested_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.attested_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-parent-attested-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.attested_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-attested-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.attested_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-attested-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.attested_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-attested-user-group-name
                    description: Name of the group.
                    flat_name: process.parent.attested_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-parent-attested-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.parent.attested_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-attested-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.parent.attested_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-attested-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.parent.attested_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.parent.attested_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-parent-attested-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.parent.attested_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-parent-attested-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.parent.attested_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-parent-attested-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.parent.attested_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-parent-attested-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.parent.attested_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-parent-attested-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.parent.attested_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-parent-attested-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.parent.attested_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-parent-attested-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.parent.attested_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-parent-attested-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.parent.attested_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        code_signature:
          field_details:
            dashed_name: process-parent-code-signature
            description: These fields contain information about binary code signatures.
            flat_name: process.parent.code_signature
            intermediate: true
            name: code_signature
            node_name: code_signature
            original_fieldset: code_signature
            short: These fields contain information about binary code signatures.
            type: group
          fields:
            digest_algorithm:
              field_details:
                dashed_name: process-parent-code-signature-digest-algorithm
                description: 'The hashing algorithm used to sign the process.

                  This value can distinguish signatures when a file is signed multiple
                  times by the same signer but with a different digest algorithm.'
                example: sha256
                flat_name: process.parent.code_signature.digest_algorithm
                ignore_above: 1024
                level: extended
                name: digest_algorithm
                node_name: digest_algorithm
                normalize: []
                original_fieldset: code_signature
                short: Hashing algorithm used to sign the process.
                type: keyword
            exists:
              field_details:
                dashed_name: process-parent-code-signature-exists
                description: Boolean to capture if a signature is present.
                example: 'true'
                flat_name: process.parent.code_signature.exists
                level: core
                name: exists
                node_name: exists
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if a signature is present.
                type: boolean
            signing_id:
              field_details:
                dashed_name: process-parent-code-signature-signing-id
                description: 'The identifier used to sign the process.

                  This is used to identify the application manufactured by a software
                  vendor. The field is relevant to Apple *OS only.'
                example: com.apple.xpc.proxy
                flat_name: process.parent.code_signature.signing_id
                ignore_above: 1024
                level: extended
                name: signing_id
                node_name: signing_id
                normalize: []
                original_fieldset: code_signature
                short: The identifier used to sign the process.
                type: keyword
            status:
              field_details:
                dashed_name: process-parent-code-signature-status
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT
                flat_name: process.parent.code_signature.status
                ignore_above: 1024
                level: extended
                name: status
                node_name: status
                normalize: []
                original_fieldset: code_signature
                short: Additional information about the certificate status.
                type: keyword
            subject_name:
              field_details:
                dashed_name: process-parent-code-signature-subject-name
                description: Subject name of the code signer
                example: Microsoft Corporation
                flat_name: process.parent.code_signature.subject_name
                ignore_above: 1024
                level: core
                name: subject_name
                node_name: subject_name
                normalize: []
                original_fieldset: code_signature
                short: Subject name of the code signer
                type: keyword
            team_id:
              field_details:
                dashed_name: process-parent-code-signature-team-id
                description: 'The team identifier used to sign the process.

                  This is used to identify the team or vendor of a software product.
                  The field is relevant to Apple *OS only.'
                example: EQHXZ8M8AV
                flat_name: process.parent.code_signature.team_id
                ignore_above: 1024
                level: extended
                name: team_id
                node_name: team_id
                normalize: []
                original_fieldset: code_signature
                short: The team identifier used to sign the process.
                type: keyword
            timestamp:
              field_details:
                dashed_name: process-parent-code-signature-timestamp
                description: Date and time when the code signature was generated and
                  signed.
                example: '2021-01-01T12:10:30Z'
                flat_name: process.parent.code_signature.timestamp
                level: extended
                name: timestamp
                node_name: timestamp
                normalize: []
                original_fieldset: code_signature
                short: When the signature was generated and signed.
                type: date
            trusted:
              field_details:
                dashed_name: process-parent-code-signature-trusted
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'
                flat_name: process.parent.code_signature.trusted
                level: extended
                name: trusted
                node_name: trusted
                normalize: []
                original_fieldset: code_signature
                short: Stores the trust status of the certificate chain.
                type: boolean
            valid:
              field_details:
                dashed_name: process-parent-code-signature-valid
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'
                flat_name: process.parent.code_signature.valid
                level: extended
                name: valid
                node_name: valid
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if the digital signature is verified against
                  the binary content.
                type: boolean
        command_line:
          field_details:
            dashed_name: process-parent-command-line
            description: 'Full command line that started the process, including the
              absolute path to the executable, and all arguments.

              Some arguments may be filtered to protect sensitive information.'
            example: /usr/bin/ssh -l user 10.0.0.16
            flat_name: process.parent.command_line
            level: extended
            multi_fields:
            - flat_name: process.parent.command_line.text
              name: text
              type: match_only_text
            name: command_line
            node_name: command_line
            normalize: []
            original_fieldset: process
            short: Full command line that started the process.
            type: wildcard
        elf:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-parent-elf
            description: These fields contain Linux Executable Linkable Format (ELF)
              metadata.
            flat_name: process.parent.elf
            intermediate: true
            name: elf
            node_name: elf
            original_fieldset: elf
            short: These fields contain Linux Executable Linkable Format (ELF) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-parent-elf-architecture
                description: Machine architecture of the ELF file.
                example: x86-64
                flat_name: process.parent.elf.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: elf
                short: Machine architecture of the ELF file.
                type: keyword
            byte_order:
              field_details:
                dashed_name: process-parent-elf-byte-order
                description: Byte sequence of ELF file.
                example: Little Endian
                flat_name: process.parent.elf.byte_order
                ignore_above: 1024
                level: extended
                name: byte_order
                node_name: byte_order
                normalize: []
                original_fieldset: elf
                short: Byte sequence of ELF file.
                type: keyword
            cpu_type:
              field_details:
                dashed_name: process-parent-elf-cpu-type
                description: CPU type of the ELF file.
                example: Intel
                flat_name: process.parent.elf.cpu_type
                ignore_above: 1024
                level: extended
                name: cpu_type
                node_name: cpu_type
                normalize: []
                original_fieldset: elf
                short: CPU type of the ELF file.
                type: keyword
            creation_date:
              field_details:
                dashed_name: process-parent-elf-creation-date
                description: Extracted when possible from the file's metadata. Indicates
                  when it was built or compiled. It can also be faked by malware creators.
                flat_name: process.parent.elf.creation_date
                level: extended
                name: creation_date
                node_name: creation_date
                normalize: []
                original_fieldset: elf
                short: Build or compile date.
                type: date
            exports:
              field_details:
                dashed_name: process-parent-elf-exports
                description: List of exported element names and types.
                flat_name: process.parent.elf.exports
                level: extended
                name: exports
                node_name: exports
                normalize:
                - array
                original_fieldset: elf
                short: List of exported element names and types.
                type: flattened
            go_import_hash:
              field_details:
                dashed_name: process-parent-elf-go-import-hash
                description: 'A hash of the Go language imports in an ELF file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.parent.elf.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the Go language imports in an ELF file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-parent-elf-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.parent.elf.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: elf
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-parent-elf-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.parent.elf.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-parent-elf-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.parent.elf.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-parent-elf-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.parent.elf.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: elf
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            header:
              field_details:
                dashed_name: process-parent-elf-header
                flat_name: process.parent.elf.header
                intermediate: true
                name: header
                node_name: header
                original_fieldset: elf
                type: object
              fields:
                abi_version:
                  field_details:
                    dashed_name: process-parent-elf-header-abi-version
                    description: Version of the ELF Application Binary Interface (ABI).
                    flat_name: process.parent.elf.header.abi_version
                    ignore_above: 1024
                    level: extended
                    name: header.abi_version
                    node_name: abi_version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF Application Binary Interface (ABI).
                    type: keyword
                class:
                  field_details:
                    dashed_name: process-parent-elf-header-class
                    description: Header class of the ELF file.
                    flat_name: process.parent.elf.header.class
                    ignore_above: 1024
                    level: extended
                    name: header.class
                    node_name: class
                    normalize: []
                    original_fieldset: elf
                    short: Header class of the ELF file.
                    type: keyword
                data:
                  field_details:
                    dashed_name: process-parent-elf-header-data
                    description: Data table of the ELF header.
                    flat_name: process.parent.elf.header.data
                    ignore_above: 1024
                    level: extended
                    name: header.data
                    node_name: data
                    normalize: []
                    original_fieldset: elf
                    short: Data table of the ELF header.
                    type: keyword
                entrypoint:
                  field_details:
                    dashed_name: process-parent-elf-header-entrypoint
                    description: Header entrypoint of the ELF file.
                    flat_name: process.parent.elf.header.entrypoint
                    format: string
                    level: extended
                    name: header.entrypoint
                    node_name: entrypoint
                    normalize: []
                    original_fieldset: elf
                    short: Header entrypoint of the ELF file.
                    type: long
                object_version:
                  field_details:
                    dashed_name: process-parent-elf-header-object-version
                    description: '"0x1" for original ELF files.'
                    flat_name: process.parent.elf.header.object_version
                    ignore_above: 1024
                    level: extended
                    name: header.object_version
                    node_name: object_version
                    normalize: []
                    original_fieldset: elf
                    short: '"0x1" for original ELF files.'
                    type: keyword
                os_abi:
                  field_details:
                    dashed_name: process-parent-elf-header-os-abi
                    description: Application Binary Interface (ABI) of the Linux OS.
                    flat_name: process.parent.elf.header.os_abi
                    ignore_above: 1024
                    level: extended
                    name: header.os_abi
                    node_name: os_abi
                    normalize: []
                    original_fieldset: elf
                    short: Application Binary Interface (ABI) of the Linux OS.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-parent-elf-header-type
                    description: Header type of the ELF file.
                    flat_name: process.parent.elf.header.type
                    ignore_above: 1024
                    level: extended
                    name: header.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: Header type of the ELF file.
                    type: keyword
                version:
                  field_details:
                    dashed_name: process-parent-elf-header-version
                    description: Version of the ELF header.
                    flat_name: process.parent.elf.header.version
                    ignore_above: 1024
                    level: extended
                    name: header.version
                    node_name: version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF header.
                    type: keyword
            import_hash:
              field_details:
                dashed_name: process-parent-elf-import-hash
                description: 'A hash of the imports in an ELF file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is an ELF implementation of the Windows PE imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.parent.elf.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the imports in an ELF file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-parent-elf-imports
                description: List of imported element names and types.
                flat_name: process.parent.elf.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: elf
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-parent-elf-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.parent.elf.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-parent-elf-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.parent.elf.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-parent-elf-sections
                description: 'An array containing an object for each section of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.sections.*`.'
                flat_name: process.parent.elf.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: elf
                short: Section information of the ELF file.
                type: nested
              fields:
                chi2:
                  field_details:
                    dashed_name: process-parent-elf-sections-chi2
                    description: Chi-square probability distribution of the section.
                    flat_name: process.parent.elf.sections.chi2
                    format: number
                    level: extended
                    name: sections.chi2
                    node_name: chi2
                    normalize: []
                    original_fieldset: elf
                    short: Chi-square probability distribution of the section.
                    type: long
                entropy:
                  field_details:
                    dashed_name: process-parent-elf-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.parent.elf.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the section.
                    type: long
                flags:
                  field_details:
                    dashed_name: process-parent-elf-sections-flags
                    description: ELF Section List flags.
                    flat_name: process.parent.elf.sections.flags
                    ignore_above: 1024
                    level: extended
                    name: sections.flags
                    node_name: flags
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List flags.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-elf-sections-name
                    description: ELF Section List name.
                    flat_name: process.parent.elf.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List name.
                    type: keyword
                physical_offset:
                  field_details:
                    dashed_name: process-parent-elf-sections-physical-offset
                    description: ELF Section List offset.
                    flat_name: process.parent.elf.sections.physical_offset
                    ignore_above: 1024
                    level: extended
                    name: sections.physical_offset
                    node_name: physical_offset
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List offset.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-parent-elf-sections-physical-size
                    description: ELF Section List physical size.
                    flat_name: process.parent.elf.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List physical size.
                    type: long
                type:
                  field_details:
                    dashed_name: process-parent-elf-sections-type
                    description: ELF Section List type.
                    flat_name: process.parent.elf.sections.type
                    ignore_above: 1024
                    level: extended
                    name: sections.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List type.
                    type: keyword
                var_entropy:
                  field_details:
                    dashed_name: process-parent-elf-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.parent.elf.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_address:
                  field_details:
                    dashed_name: process-parent-elf-sections-virtual-address
                    description: ELF Section List virtual address.
                    flat_name: process.parent.elf.sections.virtual_address
                    format: string
                    level: extended
                    name: sections.virtual_address
                    node_name: virtual_address
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual address.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-parent-elf-sections-virtual-size
                    description: ELF Section List virtual size.
                    flat_name: process.parent.elf.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual size.
                    type: long
            segments:
              field_details:
                dashed_name: process-parent-elf-segments
                description: 'An array containing an object for each segment of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.segments.*`.'
                flat_name: process.parent.elf.segments
                intermediate: false
                level: extended
                name: segments
                node_name: segments
                normalize:
                - array
                original_fieldset: elf
                short: ELF object segment list.
                type: nested
              fields:
                sections:
                  field_details:
                    dashed_name: process-parent-elf-segments-sections
                    description: ELF object segment sections.
                    flat_name: process.parent.elf.segments.sections
                    ignore_above: 1024
                    level: extended
                    name: segments.sections
                    node_name: sections
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment sections.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-parent-elf-segments-type
                    description: ELF object segment type.
                    flat_name: process.parent.elf.segments.type
                    ignore_above: 1024
                    level: extended
                    name: segments.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment type.
                    type: keyword
            shared_libraries:
              field_details:
                dashed_name: process-parent-elf-shared-libraries
                description: List of shared libraries used by this ELF object.
                flat_name: process.parent.elf.shared_libraries
                ignore_above: 1024
                level: extended
                name: shared_libraries
                node_name: shared_libraries
                normalize:
                - array
                original_fieldset: elf
                short: List of shared libraries used by this ELF object.
                type: keyword
            telfhash:
              field_details:
                dashed_name: process-parent-elf-telfhash
                description: telfhash symbol hash for ELF file.
                flat_name: process.parent.elf.telfhash
                ignore_above: 1024
                level: extended
                name: telfhash
                node_name: telfhash
                normalize: []
                original_fieldset: elf
                short: telfhash hash for ELF file.
                type: keyword
        end:
          field_details:
            dashed_name: process-parent-end
            description: The time the process ended.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.parent.end
            level: extended
            name: end
            node_name: end
            normalize: []
            original_fieldset: process
            short: The time the process ended.
            type: date
        entity_id:
          field_details:
            dashed_name: process-parent-entity-id
            description: 'Unique identifier for the process.

              The implementation of this is specified by the data source, but some
              examples of what could be used here are a process-generated UUID, Sysmon
              Process GUIDs, or a hash of some uniquely identifying components of
              a process.

              Constructing a globally unique identifier is a common practice to mitigate
              PID reuse as well as to identify a specific process over time, across
              multiple monitored hosts.'
            example: c2c455d9f99375d
            flat_name: process.parent.entity_id
            ignore_above: 1024
            level: extended
            name: entity_id
            node_name: entity_id
            normalize: []
            original_fieldset: process
            short: Unique identifier for the process.
            type: keyword
        entry_meta:
          field_details:
            dashed_name: process-parent-entry-meta
            flat_name: process.parent.entry_meta
            intermediate: true
            name: entry_meta
            node_name: entry_meta
            original_fieldset: process
            type: object
          fields:
            source:
              field_details:
                dashed_name: process-parent-entry-meta-source
                description: 'Source fields capture details about the sender of a
                  network exchange/packet. These fields are populated from a network
                  event, packet, or other event containing details of a network transaction.

                  Source fields are usually populated in conjunction with destination
                  fields. The source and destination fields are considered the baseline
                  and should always be filled if an event contains source and destination
                  details from a network transaction. If the event also contains identification
                  of the client and server roles, then the client and server fields
                  should also be populated.'
                flat_name: process.parent.entry_meta.source
                intermediate: true
                name: source
                node_name: source
                original_fieldset: source
                short: Fields about the source side of a network connection, used
                  with destination.
                type: group
              fields:
                address:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-address
                    description: 'Some event source addresses are defined ambiguously.
                      The event will sometimes list an IP, a domain or a unix socket.  You
                      should always store the raw address in the `.address` field.

                      Then it should be duplicated to `.ip` or `.domain`, depending
                      on which one it is.'
                    flat_name: process.parent.entry_meta.source.address
                    ignore_above: 1024
                    level: extended
                    name: address
                    node_name: address
                    normalize: []
                    original_fieldset: source
                    short: Source network address.
                    type: keyword
                as:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-as
                    description: An autonomous system (AS) is a collection of connected
                      Internet Protocol (IP) routing prefixes under the control of
                      one or more network operators on behalf of a single administrative
                      entity or domain that presents a common, clearly defined routing
                      policy to the internet.
                    flat_name: process.parent.entry_meta.source.as
                    intermediate: true
                    name: as
                    node_name: as
                    original_fieldset: as
                    short: Fields describing an Autonomous System (Internet routing
                      prefix).
                    type: group
                  fields:
                    number:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-as-number
                        description: Unique number allocated to the autonomous system.
                          The autonomous system number (ASN) uniquely identifies each
                          network on the Internet.
                        example: 15169
                        flat_name: process.parent.entry_meta.source.as.number
                        level: extended
                        name: number
                        node_name: number
                        normalize: []
                        original_fieldset: as
                        short: Unique number allocated to the autonomous system.
                        type: long
                    organization:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-as-organization
                        flat_name: process.parent.entry_meta.source.as.organization
                        intermediate: true
                        name: organization
                        node_name: organization
                        original_fieldset: as
                        type: object
                      fields:
                        name:
                          field_details:
                            dashed_name: process-parent-entry-meta-source-as-organization-name
                            description: Organization name.
                            example: Google LLC
                            flat_name: process.parent.entry_meta.source.as.organization.name
                            ignore_above: 1024
                            level: extended
                            multi_fields:
                            - flat_name: process.parent.entry_meta.source.as.organization.name.text
                              name: text
                              type: match_only_text
                            name: organization.name
                            node_name: name
                            normalize: []
                            original_fieldset: as
                            short: Organization name.
                            type: keyword
                bytes:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-bytes
                    description: Bytes sent from the source to the destination.
                    example: 184
                    flat_name: process.parent.entry_meta.source.bytes
                    format: bytes
                    level: core
                    name: bytes
                    node_name: bytes
                    normalize: []
                    original_fieldset: source
                    short: Bytes sent from the source to the destination.
                    type: long
                domain:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-domain
                    description: 'The domain name of the source system.

                      This value may be a host name, a fully qualified domain name,
                      or another host naming format. The value may derive from the
                      original event or be added from enrichment.'
                    example: foo.example.com
                    flat_name: process.parent.entry_meta.source.domain
                    ignore_above: 1024
                    level: core
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: source
                    short: The domain name of the source.
                    type: keyword
                geo:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-geo
                    description: 'Geo fields can carry data about a specific location
                      related to an event.

                      This geolocation information can be derived from techniques
                      such as Geo IP, or be user-supplied.'
                    flat_name: process.parent.entry_meta.source.geo
                    intermediate: true
                    name: geo
                    node_name: geo
                    original_fieldset: geo
                    short: Fields describing a location.
                    type: group
                  fields:
                    city_name:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-city-name
                        description: City name.
                        example: Montreal
                        flat_name: process.parent.entry_meta.source.geo.city_name
                        ignore_above: 1024
                        level: core
                        name: city_name
                        node_name: city_name
                        normalize: []
                        original_fieldset: geo
                        short: City name.
                        type: keyword
                    continent_code:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-continent-code
                        description: Two-letter code representing continent's name.
                        example: NA
                        flat_name: process.parent.entry_meta.source.geo.continent_code
                        ignore_above: 1024
                        level: core
                        name: continent_code
                        node_name: continent_code
                        normalize: []
                        original_fieldset: geo
                        short: Continent code.
                        type: keyword
                    continent_name:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-continent-name
                        description: Name of the continent.
                        example: North America
                        flat_name: process.parent.entry_meta.source.geo.continent_name
                        ignore_above: 1024
                        level: core
                        name: continent_name
                        node_name: continent_name
                        normalize: []
                        original_fieldset: geo
                        short: Name of the continent.
                        type: keyword
                    country_iso_code:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-country-iso-code
                        description: Country ISO code.
                        example: CA
                        flat_name: process.parent.entry_meta.source.geo.country_iso_code
                        ignore_above: 1024
                        level: core
                        name: country_iso_code
                        node_name: country_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Country ISO code.
                        type: keyword
                    country_name:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-country-name
                        description: Country name.
                        example: Canada
                        flat_name: process.parent.entry_meta.source.geo.country_name
                        ignore_above: 1024
                        level: core
                        name: country_name
                        node_name: country_name
                        normalize: []
                        original_fieldset: geo
                        short: Country name.
                        type: keyword
                    location:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-location
                        description: Longitude and latitude.
                        example: '{ "lon": -73.614830, "lat": 45.505918 }'
                        flat_name: process.parent.entry_meta.source.geo.location
                        level: core
                        name: location
                        node_name: location
                        normalize: []
                        original_fieldset: geo
                        short: Longitude and latitude.
                        type: geo_point
                    name:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-name
                        description: 'User-defined description of a location, at the
                          level of granularity they care about.

                          Could be the name of their data centers, the floor number,
                          if this describes a local physical entity, city names.

                          Not typically used in automated geolocation.'
                        example: boston-dc
                        flat_name: process.parent.entry_meta.source.geo.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: geo
                        short: User-defined description of a location.
                        type: keyword
                    postal_code:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-postal-code
                        description: 'Postal code associated with the location.

                          Values appropriate for this field may also be known as a
                          postcode or ZIP code and will vary widely from country to
                          country.'
                        example: 94040
                        flat_name: process.parent.entry_meta.source.geo.postal_code
                        ignore_above: 1024
                        level: core
                        name: postal_code
                        node_name: postal_code
                        normalize: []
                        original_fieldset: geo
                        short: Postal code.
                        type: keyword
                    region_iso_code:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-region-iso-code
                        description: Region ISO code.
                        example: CA-QC
                        flat_name: process.parent.entry_meta.source.geo.region_iso_code
                        ignore_above: 1024
                        level: core
                        name: region_iso_code
                        node_name: region_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Region ISO code.
                        type: keyword
                    region_name:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-region-name
                        description: Region name.
                        example: Quebec
                        flat_name: process.parent.entry_meta.source.geo.region_name
                        ignore_above: 1024
                        level: core
                        name: region_name
                        node_name: region_name
                        normalize: []
                        original_fieldset: geo
                        short: Region name.
                        type: keyword
                    timezone:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-geo-timezone
                        description: The time zone of the location, such as IANA time
                          zone name.
                        example: America/Argentina/Buenos_Aires
                        flat_name: process.parent.entry_meta.source.geo.timezone
                        ignore_above: 1024
                        level: core
                        name: timezone
                        node_name: timezone
                        normalize: []
                        original_fieldset: geo
                        short: Time zone.
                        type: keyword
                ip:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-ip
                    description: IP address of the source (IPv4 or IPv6).
                    flat_name: process.parent.entry_meta.source.ip
                    level: core
                    name: ip
                    node_name: ip
                    normalize: []
                    original_fieldset: source
                    short: IP address of the source.
                    type: ip
                mac:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-mac
                    description: 'MAC address of the source.

                      The notation format from RFC 7042 is suggested: Each octet (that
                      is, 8-bit byte) is represented by two [uppercase] hexadecimal
                      digits giving the value of the octet as an unsigned integer.
                      Successive octets are separated by a hyphen.'
                    example: 00-00-5E-00-53-23
                    flat_name: process.parent.entry_meta.source.mac
                    ignore_above: 1024
                    level: core
                    name: mac
                    node_name: mac
                    normalize: []
                    original_fieldset: source
                    pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                    short: MAC address of the source.
                    type: keyword
                nat:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-nat
                    flat_name: process.parent.entry_meta.source.nat
                    intermediate: true
                    name: nat
                    node_name: nat
                    original_fieldset: source
                    type: object
                  fields:
                    ip:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-nat-ip
                        description: 'Translated ip of source based NAT sessions (e.g.
                          internal client to internet)

                          Typically connections traversing load balancers, firewalls,
                          or routers.'
                        flat_name: process.parent.entry_meta.source.nat.ip
                        level: extended
                        name: nat.ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: Source NAT ip
                        type: ip
                    port:
                      field_details:
                        dashed_name: process-parent-entry-meta-source-nat-port
                        description: 'Translated port of source based NAT sessions.
                          (e.g. internal client to internet)

                          Typically used with load balancers, firewalls, or routers.'
                        flat_name: process.parent.entry_meta.source.nat.port
                        format: string
                        level: extended
                        name: nat.port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Source NAT port
                        type: long
                packets:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-packets
                    description: Packets sent from the source to the destination.
                    example: 12
                    flat_name: process.parent.entry_meta.source.packets
                    level: core
                    name: packets
                    node_name: packets
                    normalize: []
                    original_fieldset: source
                    short: Packets sent from the source to the destination.
                    type: long
                port:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-port
                    description: Port of the source.
                    flat_name: process.parent.entry_meta.source.port
                    format: string
                    level: core
                    name: port
                    node_name: port
                    normalize: []
                    original_fieldset: source
                    short: Port of the source.
                    type: long
                registered_domain:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-registered-domain
                    description: 'The highest registered source domain, stripped of
                      the subdomain.

                      For example, the registered domain for "foo.example.com" is
                      "example.com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last two labels will not work well
                      for TLDs such as "co.uk".'
                    example: example.com
                    flat_name: process.parent.entry_meta.source.registered_domain
                    ignore_above: 1024
                    level: extended
                    name: registered_domain
                    node_name: registered_domain
                    normalize: []
                    original_fieldset: source
                    short: The highest registered source domain, stripped of the subdomain.
                    type: keyword
                subdomain:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-subdomain
                    description: 'The subdomain portion of a fully qualified domain
                      name includes all of the names except the host name under the
                      registered_domain.  In a partially qualified domain, or if the
                      the qualification level of the full name cannot be determined,
                      subdomain contains all of the names below the registered domain.

                      For example the subdomain portion of "www.east.mydomain.co.uk"
                      is "east". If the domain has multiple levels of subdomain, such
                      as "sub2.sub1.example.com", the subdomain field should contain
                      "sub2.sub1", with no trailing period.'
                    example: east
                    flat_name: process.parent.entry_meta.source.subdomain
                    ignore_above: 1024
                    level: extended
                    name: subdomain
                    node_name: subdomain
                    normalize: []
                    original_fieldset: source
                    short: The subdomain of the domain.
                    type: keyword
                top_level_domain:
                  field_details:
                    dashed_name: process-parent-entry-meta-source-top-level-domain
                    description: 'The effective top level domain (eTLD), also known
                      as the domain suffix, is the last part of the domain name. For
                      example, the top level domain for example.com is "com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last label will not work well for
                      effective TLDs such as "co.uk".'
                    example: co.uk
                    flat_name: process.parent.entry_meta.source.top_level_domain
                    ignore_above: 1024
                    level: extended
                    name: top_level_domain
                    node_name: top_level_domain
                    normalize: []
                    original_fieldset: source
                    short: The effective top level domain (com, org, net, co.uk).
                    type: keyword
            type:
              field_details:
                dashed_name: process-parent-entry-meta-type
                description: 'The entry type for the entry session leader. Values
                  include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                  console

                  Note: This field is only set on process.session_leader.'
                flat_name: process.parent.entry_meta.type
                ignore_above: 1024
                level: extended
                name: entry_meta.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The entry type for the entry session leader.
                type: keyword
        env_vars:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-parent-env-vars
            description: 'Array of environment variable bindings. Captured from a
              snapshot of the environment at the time of execution.

              May be filtered to protect sensitive information.'
            example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
            flat_name: process.parent.env_vars
            ignore_above: 1024
            level: extended
            name: env_vars
            node_name: env_vars
            normalize:
            - array
            original_fieldset: process
            short: Array of environment variable bindings.
            type: keyword
        executable:
          field_details:
            dashed_name: process-parent-executable
            description: Absolute path to the process executable.
            example: /usr/bin/ssh
            flat_name: process.parent.executable
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.parent.executable.text
              name: text
              type: match_only_text
            name: executable
            node_name: executable
            normalize: []
            original_fieldset: process
            short: Absolute path to the process executable.
            type: keyword
        exit_code:
          field_details:
            dashed_name: process-parent-exit-code
            description: 'The exit code of the process, if this is a termination event.

              The field should be absent if there is no exit code for the event (e.g.
              process start).'
            example: 137
            flat_name: process.parent.exit_code
            level: extended
            name: exit_code
            node_name: exit_code
            normalize: []
            original_fieldset: process
            short: The exit code of the process.
            type: long
        group:
          field_details:
            dashed_name: process-parent-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.parent.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.parent.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-group-name
                description: Name of the group.
                flat_name: process.parent.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        group_leader:
          field_details:
            dashed_name: process-parent-process
            description: 'These fields contain information about a process.

              These fields can help you correlate metrics information with a process
              id/name from a log message.  The `process.pid` often stays in the metric
              itself and is copied to the global field for correlation.'
            flat_name: process.parent.process
            intermediate: true
            name: group_leader
            node_name: process
            original_fieldset: process
            short: These fields contain information about a process.
            type: group
          fields:
            args:
              field_details:
                dashed_name: process-parent-group-leader-args
                description: 'Array of process arguments, starting with the absolute
                  path to the executable.

                  May be filtered to protect sensitive information.'
                example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
                flat_name: process.parent.group_leader.args
                ignore_above: 1024
                level: extended
                name: args
                node_name: args
                normalize:
                - array
                original_fieldset: process
                short: Array of process arguments.
                type: keyword
            args_count:
              field_details:
                dashed_name: process-parent-group-leader-args-count
                description: 'Length of the process.args array.

                  This field can be useful for querying or performing bucket analysis
                  on how many arguments were provided to start a process. More arguments
                  may be an indication of suspicious activity.'
                example: 4
                flat_name: process.parent.group_leader.args_count
                level: extended
                name: args_count
                node_name: args_count
                normalize: []
                original_fieldset: process
                short: Length of the process.args array.
                type: long
            attested_groups:
              field_details:
                dashed_name: process-parent-group-leader-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.group_leader.group
                intermediate: true
                name: attested_groups
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-groups-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.attested_groups.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-groups-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.group_leader.attested_groups.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-groups-name
                    description: Name of the group.
                    flat_name: process.parent.group_leader.attested_groups.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            attested_user:
              field_details:
                dashed_name: process-parent-group-leader-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.parent.group_leader.user
                intermediate: true
                name: attested_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.attested_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-email
                    description: User email address.
                    flat_name: process.parent.group_leader.attested_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.parent.group_leader.attested_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.parent.group_leader.attested_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.parent.group_leader.attested_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.parent.group_leader.attested_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.parent.group_leader.attested_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-group-name
                        description: Name of the group.
                        flat_name: process.parent.group_leader.attested_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.parent.group_leader.attested_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.parent.group_leader.attested_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.parent.group_leader.attested_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.parent.group_leader.attested_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-parent-group-leader-attested-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.parent.group_leader.attested_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.parent.group_leader.attested_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.parent.group_leader.attested_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.parent.group_leader.attested_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.parent.group_leader.attested_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.parent.group_leader.attested_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-attested-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.parent.group_leader.attested_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-parent-group-leader-attested-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.parent.group_leader.attested_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            code_signature:
              field_details:
                dashed_name: process-parent-group-leader-code-signature
                description: These fields contain information about binary code signatures.
                flat_name: process.parent.group_leader.code_signature
                intermediate: true
                name: code_signature
                node_name: code_signature
                original_fieldset: code_signature
                short: These fields contain information about binary code signatures.
                type: group
              fields:
                digest_algorithm:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-digest-algorithm
                    description: 'The hashing algorithm used to sign the process.

                      This value can distinguish signatures when a file is signed
                      multiple times by the same signer but with a different digest
                      algorithm.'
                    example: sha256
                    flat_name: process.parent.group_leader.code_signature.digest_algorithm
                    ignore_above: 1024
                    level: extended
                    name: digest_algorithm
                    node_name: digest_algorithm
                    normalize: []
                    original_fieldset: code_signature
                    short: Hashing algorithm used to sign the process.
                    type: keyword
                exists:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-exists
                    description: Boolean to capture if a signature is present.
                    example: 'true'
                    flat_name: process.parent.group_leader.code_signature.exists
                    level: core
                    name: exists
                    node_name: exists
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if a signature is present.
                    type: boolean
                signing_id:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-signing-id
                    description: 'The identifier used to sign the process.

                      This is used to identify the application manufactured by a software
                      vendor. The field is relevant to Apple *OS only.'
                    example: com.apple.xpc.proxy
                    flat_name: process.parent.group_leader.code_signature.signing_id
                    ignore_above: 1024
                    level: extended
                    name: signing_id
                    node_name: signing_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The identifier used to sign the process.
                    type: keyword
                status:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-status
                    description: 'Additional information about the certificate status.

                      This is useful for logging cryptographic errors with the certificate
                      validity or trust status. Leave unpopulated if the validity
                      or trust of the certificate was unchecked.'
                    example: ERROR_UNTRUSTED_ROOT
                    flat_name: process.parent.group_leader.code_signature.status
                    ignore_above: 1024
                    level: extended
                    name: status
                    node_name: status
                    normalize: []
                    original_fieldset: code_signature
                    short: Additional information about the certificate status.
                    type: keyword
                subject_name:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-subject-name
                    description: Subject name of the code signer
                    example: Microsoft Corporation
                    flat_name: process.parent.group_leader.code_signature.subject_name
                    ignore_above: 1024
                    level: core
                    name: subject_name
                    node_name: subject_name
                    normalize: []
                    original_fieldset: code_signature
                    short: Subject name of the code signer
                    type: keyword
                team_id:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-team-id
                    description: 'The team identifier used to sign the process.

                      This is used to identify the team or vendor of a software product.
                      The field is relevant to Apple *OS only.'
                    example: EQHXZ8M8AV
                    flat_name: process.parent.group_leader.code_signature.team_id
                    ignore_above: 1024
                    level: extended
                    name: team_id
                    node_name: team_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The team identifier used to sign the process.
                    type: keyword
                timestamp:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-timestamp
                    description: Date and time when the code signature was generated
                      and signed.
                    example: '2021-01-01T12:10:30Z'
                    flat_name: process.parent.group_leader.code_signature.timestamp
                    level: extended
                    name: timestamp
                    node_name: timestamp
                    normalize: []
                    original_fieldset: code_signature
                    short: When the signature was generated and signed.
                    type: date
                trusted:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-trusted
                    description: 'Stores the trust status of the certificate chain.

                      Validating the trust of the certificate chain may be complicated,
                      and this field should only be populated by tools that actively
                      check the status.'
                    example: 'true'
                    flat_name: process.parent.group_leader.code_signature.trusted
                    level: extended
                    name: trusted
                    node_name: trusted
                    normalize: []
                    original_fieldset: code_signature
                    short: Stores the trust status of the certificate chain.
                    type: boolean
                valid:
                  field_details:
                    dashed_name: process-parent-group-leader-code-signature-valid
                    description: 'Boolean to capture if the digital signature is verified
                      against the binary content.

                      Leave unpopulated if a certificate was unchecked.'
                    example: 'true'
                    flat_name: process.parent.group_leader.code_signature.valid
                    level: extended
                    name: valid
                    node_name: valid
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if the digital signature is verified
                      against the binary content.
                    type: boolean
            command_line:
              field_details:
                dashed_name: process-parent-group-leader-command-line
                description: 'Full command line that started the process, including
                  the absolute path to the executable, and all arguments.

                  Some arguments may be filtered to protect sensitive information.'
                example: /usr/bin/ssh -l user 10.0.0.16
                flat_name: process.parent.group_leader.command_line
                level: extended
                multi_fields:
                - flat_name: process.parent.group_leader.command_line.text
                  name: text
                  type: match_only_text
                name: command_line
                node_name: command_line
                normalize: []
                original_fieldset: process
                short: Full command line that started the process.
                type: wildcard
            elf:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-parent-group-leader-elf
                description: These fields contain Linux Executable Linkable Format
                  (ELF) metadata.
                flat_name: process.parent.group_leader.elf
                intermediate: true
                name: elf
                node_name: elf
                original_fieldset: elf
                short: These fields contain Linux Executable Linkable Format (ELF)
                  metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-architecture
                    description: Machine architecture of the ELF file.
                    example: x86-64
                    flat_name: process.parent.group_leader.elf.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: elf
                    short: Machine architecture of the ELF file.
                    type: keyword
                byte_order:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-byte-order
                    description: Byte sequence of ELF file.
                    example: Little Endian
                    flat_name: process.parent.group_leader.elf.byte_order
                    ignore_above: 1024
                    level: extended
                    name: byte_order
                    node_name: byte_order
                    normalize: []
                    original_fieldset: elf
                    short: Byte sequence of ELF file.
                    type: keyword
                cpu_type:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-cpu-type
                    description: CPU type of the ELF file.
                    example: Intel
                    flat_name: process.parent.group_leader.elf.cpu_type
                    ignore_above: 1024
                    level: extended
                    name: cpu_type
                    node_name: cpu_type
                    normalize: []
                    original_fieldset: elf
                    short: CPU type of the ELF file.
                    type: keyword
                creation_date:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-creation-date
                    description: Extracted when possible from the file's metadata.
                      Indicates when it was built or compiled. It can also be faked
                      by malware creators.
                    flat_name: process.parent.group_leader.elf.creation_date
                    level: extended
                    name: creation_date
                    node_name: creation_date
                    normalize: []
                    original_fieldset: elf
                    short: Build or compile date.
                    type: date
                exports:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-exports
                    description: List of exported element names and types.
                    flat_name: process.parent.group_leader.elf.exports
                    level: extended
                    name: exports
                    node_name: exports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of exported element names and types.
                    type: flattened
                go_import_hash:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-go-import-hash
                    description: 'A hash of the Go language imports in an ELF file
                      excluding standard library imports. An import hash can be used
                      to fingerprint binaries even after recompilation or other code-level
                      transformations have occurred, which would change more traditional
                      hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.parent.group_leader.elf.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the Go language imports in an ELF file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.parent.group_leader.elf.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: elf
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.parent.group_leader.elf.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.parent.group_leader.elf.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.parent.group_leader.elf.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: elf
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                header:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-header
                    flat_name: process.parent.group_leader.elf.header
                    intermediate: true
                    name: header
                    node_name: header
                    original_fieldset: elf
                    type: object
                  fields:
                    abi_version:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-abi-version
                        description: Version of the ELF Application Binary Interface
                          (ABI).
                        flat_name: process.parent.group_leader.elf.header.abi_version
                        ignore_above: 1024
                        level: extended
                        name: header.abi_version
                        node_name: abi_version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF Application Binary Interface (ABI).
                        type: keyword
                    class:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-class
                        description: Header class of the ELF file.
                        flat_name: process.parent.group_leader.elf.header.class
                        ignore_above: 1024
                        level: extended
                        name: header.class
                        node_name: class
                        normalize: []
                        original_fieldset: elf
                        short: Header class of the ELF file.
                        type: keyword
                    data:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-data
                        description: Data table of the ELF header.
                        flat_name: process.parent.group_leader.elf.header.data
                        ignore_above: 1024
                        level: extended
                        name: header.data
                        node_name: data
                        normalize: []
                        original_fieldset: elf
                        short: Data table of the ELF header.
                        type: keyword
                    entrypoint:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-entrypoint
                        description: Header entrypoint of the ELF file.
                        flat_name: process.parent.group_leader.elf.header.entrypoint
                        format: string
                        level: extended
                        name: header.entrypoint
                        node_name: entrypoint
                        normalize: []
                        original_fieldset: elf
                        short: Header entrypoint of the ELF file.
                        type: long
                    object_version:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-object-version
                        description: '"0x1" for original ELF files.'
                        flat_name: process.parent.group_leader.elf.header.object_version
                        ignore_above: 1024
                        level: extended
                        name: header.object_version
                        node_name: object_version
                        normalize: []
                        original_fieldset: elf
                        short: '"0x1" for original ELF files.'
                        type: keyword
                    os_abi:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-os-abi
                        description: Application Binary Interface (ABI) of the Linux
                          OS.
                        flat_name: process.parent.group_leader.elf.header.os_abi
                        ignore_above: 1024
                        level: extended
                        name: header.os_abi
                        node_name: os_abi
                        normalize: []
                        original_fieldset: elf
                        short: Application Binary Interface (ABI) of the Linux OS.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-type
                        description: Header type of the ELF file.
                        flat_name: process.parent.group_leader.elf.header.type
                        ignore_above: 1024
                        level: extended
                        name: header.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: Header type of the ELF file.
                        type: keyword
                    version:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-header-version
                        description: Version of the ELF header.
                        flat_name: process.parent.group_leader.elf.header.version
                        ignore_above: 1024
                        level: extended
                        name: header.version
                        node_name: version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF header.
                        type: keyword
                import_hash:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-import-hash
                    description: 'A hash of the imports in an ELF file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is an ELF implementation of the Windows PE imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.parent.group_leader.elf.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the imports in an ELF file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-imports
                    description: List of imported element names and types.
                    flat_name: process.parent.group_leader.elf.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.parent.group_leader.elf.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.parent.group_leader.elf.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                sections:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-sections
                    description: 'An array containing an object for each section of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.sections.*`.'
                    flat_name: process.parent.group_leader.elf.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: elf
                    short: Section information of the ELF file.
                    type: nested
                  fields:
                    chi2:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-chi2
                        description: Chi-square probability distribution of the section.
                        flat_name: process.parent.group_leader.elf.sections.chi2
                        format: number
                        level: extended
                        name: sections.chi2
                        node_name: chi2
                        normalize: []
                        original_fieldset: elf
                        short: Chi-square probability distribution of the section.
                        type: long
                    entropy:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.parent.group_leader.elf.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the section.
                        type: long
                    flags:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-flags
                        description: ELF Section List flags.
                        flat_name: process.parent.group_leader.elf.sections.flags
                        ignore_above: 1024
                        level: extended
                        name: sections.flags
                        node_name: flags
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List flags.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-name
                        description: ELF Section List name.
                        flat_name: process.parent.group_leader.elf.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List name.
                        type: keyword
                    physical_offset:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-physical-offset
                        description: ELF Section List offset.
                        flat_name: process.parent.group_leader.elf.sections.physical_offset
                        ignore_above: 1024
                        level: extended
                        name: sections.physical_offset
                        node_name: physical_offset
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List offset.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-physical-size
                        description: ELF Section List physical size.
                        flat_name: process.parent.group_leader.elf.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List physical size.
                        type: long
                    type:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-type
                        description: ELF Section List type.
                        flat_name: process.parent.group_leader.elf.sections.type
                        ignore_above: 1024
                        level: extended
                        name: sections.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List type.
                        type: keyword
                    var_entropy:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.parent.group_leader.elf.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_address:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-virtual-address
                        description: ELF Section List virtual address.
                        flat_name: process.parent.group_leader.elf.sections.virtual_address
                        format: string
                        level: extended
                        name: sections.virtual_address
                        node_name: virtual_address
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual address.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-sections-virtual-size
                        description: ELF Section List virtual size.
                        flat_name: process.parent.group_leader.elf.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual size.
                        type: long
                segments:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-segments
                    description: 'An array containing an object for each segment of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.segments.*`.'
                    flat_name: process.parent.group_leader.elf.segments
                    intermediate: false
                    level: extended
                    name: segments
                    node_name: segments
                    normalize:
                    - array
                    original_fieldset: elf
                    short: ELF object segment list.
                    type: nested
                  fields:
                    sections:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-segments-sections
                        description: ELF object segment sections.
                        flat_name: process.parent.group_leader.elf.segments.sections
                        ignore_above: 1024
                        level: extended
                        name: segments.sections
                        node_name: sections
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment sections.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: process-parent-group-leader-elf-segments-type
                        description: ELF object segment type.
                        flat_name: process.parent.group_leader.elf.segments.type
                        ignore_above: 1024
                        level: extended
                        name: segments.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment type.
                        type: keyword
                shared_libraries:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-shared-libraries
                    description: List of shared libraries used by this ELF object.
                    flat_name: process.parent.group_leader.elf.shared_libraries
                    ignore_above: 1024
                    level: extended
                    name: shared_libraries
                    node_name: shared_libraries
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of shared libraries used by this ELF object.
                    type: keyword
                telfhash:
                  field_details:
                    dashed_name: process-parent-group-leader-elf-telfhash
                    description: telfhash symbol hash for ELF file.
                    flat_name: process.parent.group_leader.elf.telfhash
                    ignore_above: 1024
                    level: extended
                    name: telfhash
                    node_name: telfhash
                    normalize: []
                    original_fieldset: elf
                    short: telfhash hash for ELF file.
                    type: keyword
            end:
              field_details:
                dashed_name: process-parent-group-leader-end
                description: The time the process ended.
                example: '2016-05-23T08:05:34.853Z'
                flat_name: process.parent.group_leader.end
                level: extended
                name: end
                node_name: end
                normalize: []
                original_fieldset: process
                short: The time the process ended.
                type: date
            entity_id:
              field_details:
                dashed_name: process-parent-group-leader-entity-id
                description: 'Unique identifier for the process.

                  The implementation of this is specified by the data source, but
                  some examples of what could be used here are a process-generated
                  UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying
                  components of a process.

                  Constructing a globally unique identifier is a common practice to
                  mitigate PID reuse as well as to identify a specific process over
                  time, across multiple monitored hosts.'
                example: c2c455d9f99375d
                flat_name: process.parent.group_leader.entity_id
                ignore_above: 1024
                level: extended
                name: entity_id
                node_name: entity_id
                normalize: []
                original_fieldset: process
                short: Unique identifier for the process.
                type: keyword
            entry_meta:
              field_details:
                dashed_name: process-parent-group-leader-entry-meta
                flat_name: process.parent.group_leader.entry_meta
                intermediate: true
                name: entry_meta
                node_name: entry_meta
                original_fieldset: process
                type: object
              fields:
                source:
                  field_details:
                    dashed_name: process-parent-group-leader-entry-meta-source
                    description: 'Source fields capture details about the sender of
                      a network exchange/packet. These fields are populated from a
                      network event, packet, or other event containing details of
                      a network transaction.

                      Source fields are usually populated in conjunction with destination
                      fields. The source and destination fields are considered the
                      baseline and should always be filled if an event contains source
                      and destination details from a network transaction. If the event
                      also contains identification of the client and server roles,
                      then the client and server fields should also be populated.'
                    flat_name: process.parent.group_leader.entry_meta.source
                    intermediate: true
                    name: source
                    node_name: source
                    original_fieldset: source
                    short: Fields about the source side of a network connection, used
                      with destination.
                    type: group
                  fields:
                    address:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-address
                        description: 'Some event source addresses are defined ambiguously.
                          The event will sometimes list an IP, a domain or a unix
                          socket.  You should always store the raw address in the
                          `.address` field.

                          Then it should be duplicated to `.ip` or `.domain`, depending
                          on which one it is.'
                        flat_name: process.parent.group_leader.entry_meta.source.address
                        ignore_above: 1024
                        level: extended
                        name: address
                        node_name: address
                        normalize: []
                        original_fieldset: source
                        short: Source network address.
                        type: keyword
                    as:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-as
                        description: An autonomous system (AS) is a collection of
                          connected Internet Protocol (IP) routing prefixes under
                          the control of one or more network operators on behalf of
                          a single administrative entity or domain that presents a
                          common, clearly defined routing policy to the internet.
                        flat_name: process.parent.group_leader.entry_meta.source.as
                        intermediate: true
                        name: as
                        node_name: as
                        original_fieldset: as
                        short: Fields describing an Autonomous System (Internet routing
                          prefix).
                        type: group
                      fields:
                        number:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-as-number
                            description: Unique number allocated to the autonomous
                              system. The autonomous system number (ASN) uniquely
                              identifies each network on the Internet.
                            example: 15169
                            flat_name: process.parent.group_leader.entry_meta.source.as.number
                            level: extended
                            name: number
                            node_name: number
                            normalize: []
                            original_fieldset: as
                            short: Unique number allocated to the autonomous system.
                            type: long
                        organization:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-as-organization
                            flat_name: process.parent.group_leader.entry_meta.source.as.organization
                            intermediate: true
                            name: organization
                            node_name: organization
                            original_fieldset: as
                            type: object
                          fields:
                            name:
                              field_details:
                                dashed_name: process-parent-group-leader-entry-meta-source-as-organization-name
                                description: Organization name.
                                example: Google LLC
                                flat_name: process.parent.group_leader.entry_meta.source.as.organization.name
                                ignore_above: 1024
                                level: extended
                                multi_fields:
                                - flat_name: process.parent.group_leader.entry_meta.source.as.organization.name.text
                                  name: text
                                  type: match_only_text
                                name: organization.name
                                node_name: name
                                normalize: []
                                original_fieldset: as
                                short: Organization name.
                                type: keyword
                    bytes:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-bytes
                        description: Bytes sent from the source to the destination.
                        example: 184
                        flat_name: process.parent.group_leader.entry_meta.source.bytes
                        format: bytes
                        level: core
                        name: bytes
                        node_name: bytes
                        normalize: []
                        original_fieldset: source
                        short: Bytes sent from the source to the destination.
                        type: long
                    domain:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-domain
                        description: 'The domain name of the source system.

                          This value may be a host name, a fully qualified domain
                          name, or another host naming format. The value may derive
                          from the original event or be added from enrichment.'
                        example: foo.example.com
                        flat_name: process.parent.group_leader.entry_meta.source.domain
                        ignore_above: 1024
                        level: core
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: source
                        short: The domain name of the source.
                        type: keyword
                    geo:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-geo
                        description: 'Geo fields can carry data about a specific location
                          related to an event.

                          This geolocation information can be derived from techniques
                          such as Geo IP, or be user-supplied.'
                        flat_name: process.parent.group_leader.entry_meta.source.geo
                        intermediate: true
                        name: geo
                        node_name: geo
                        original_fieldset: geo
                        short: Fields describing a location.
                        type: group
                      fields:
                        city_name:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-city-name
                            description: City name.
                            example: Montreal
                            flat_name: process.parent.group_leader.entry_meta.source.geo.city_name
                            ignore_above: 1024
                            level: core
                            name: city_name
                            node_name: city_name
                            normalize: []
                            original_fieldset: geo
                            short: City name.
                            type: keyword
                        continent_code:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-continent-code
                            description: Two-letter code representing continent's
                              name.
                            example: NA
                            flat_name: process.parent.group_leader.entry_meta.source.geo.continent_code
                            ignore_above: 1024
                            level: core
                            name: continent_code
                            node_name: continent_code
                            normalize: []
                            original_fieldset: geo
                            short: Continent code.
                            type: keyword
                        continent_name:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-continent-name
                            description: Name of the continent.
                            example: North America
                            flat_name: process.parent.group_leader.entry_meta.source.geo.continent_name
                            ignore_above: 1024
                            level: core
                            name: continent_name
                            node_name: continent_name
                            normalize: []
                            original_fieldset: geo
                            short: Name of the continent.
                            type: keyword
                        country_iso_code:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-country-iso-code
                            description: Country ISO code.
                            example: CA
                            flat_name: process.parent.group_leader.entry_meta.source.geo.country_iso_code
                            ignore_above: 1024
                            level: core
                            name: country_iso_code
                            node_name: country_iso_code
                            normalize: []
                            original_fieldset: geo
                            short: Country ISO code.
                            type: keyword
                        country_name:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-country-name
                            description: Country name.
                            example: Canada
                            flat_name: process.parent.group_leader.entry_meta.source.geo.country_name
                            ignore_above: 1024
                            level: core
                            name: country_name
                            node_name: country_name
                            normalize: []
                            original_fieldset: geo
                            short: Country name.
                            type: keyword
                        location:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-location
                            description: Longitude and latitude.
                            example: '{ "lon": -73.614830, "lat": 45.505918 }'
                            flat_name: process.parent.group_leader.entry_meta.source.geo.location
                            level: core
                            name: location
                            node_name: location
                            normalize: []
                            original_fieldset: geo
                            short: Longitude and latitude.
                            type: geo_point
                        name:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-name
                            description: 'User-defined description of a location,
                              at the level of granularity they care about.

                              Could be the name of their data centers, the floor number,
                              if this describes a local physical entity, city names.

                              Not typically used in automated geolocation.'
                            example: boston-dc
                            flat_name: process.parent.group_leader.entry_meta.source.geo.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: geo
                            short: User-defined description of a location.
                            type: keyword
                        postal_code:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-postal-code
                            description: 'Postal code associated with the location.

                              Values appropriate for this field may also be known
                              as a postcode or ZIP code and will vary widely from
                              country to country.'
                            example: 94040
                            flat_name: process.parent.group_leader.entry_meta.source.geo.postal_code
                            ignore_above: 1024
                            level: core
                            name: postal_code
                            node_name: postal_code
                            normalize: []
                            original_fieldset: geo
                            short: Postal code.
                            type: keyword
                        region_iso_code:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-region-iso-code
                            description: Region ISO code.
                            example: CA-QC
                            flat_name: process.parent.group_leader.entry_meta.source.geo.region_iso_code
                            ignore_above: 1024
                            level: core
                            name: region_iso_code
                            node_name: region_iso_code
                            normalize: []
                            original_fieldset: geo
                            short: Region ISO code.
                            type: keyword
                        region_name:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-region-name
                            description: Region name.
                            example: Quebec
                            flat_name: process.parent.group_leader.entry_meta.source.geo.region_name
                            ignore_above: 1024
                            level: core
                            name: region_name
                            node_name: region_name
                            normalize: []
                            original_fieldset: geo
                            short: Region name.
                            type: keyword
                        timezone:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-geo-timezone
                            description: The time zone of the location, such as IANA
                              time zone name.
                            example: America/Argentina/Buenos_Aires
                            flat_name: process.parent.group_leader.entry_meta.source.geo.timezone
                            ignore_above: 1024
                            level: core
                            name: timezone
                            node_name: timezone
                            normalize: []
                            original_fieldset: geo
                            short: Time zone.
                            type: keyword
                    ip:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-ip
                        description: IP address of the source (IPv4 or IPv6).
                        flat_name: process.parent.group_leader.entry_meta.source.ip
                        level: core
                        name: ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: IP address of the source.
                        type: ip
                    mac:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-mac
                        description: 'MAC address of the source.

                          The notation format from RFC 7042 is suggested: Each octet
                          (that is, 8-bit byte) is represented by two [uppercase]
                          hexadecimal digits giving the value of the octet as an unsigned
                          integer. Successive octets are separated by a hyphen.'
                        example: 00-00-5E-00-53-23
                        flat_name: process.parent.group_leader.entry_meta.source.mac
                        ignore_above: 1024
                        level: core
                        name: mac
                        node_name: mac
                        normalize: []
                        original_fieldset: source
                        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                        short: MAC address of the source.
                        type: keyword
                    nat:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-nat
                        flat_name: process.parent.group_leader.entry_meta.source.nat
                        intermediate: true
                        name: nat
                        node_name: nat
                        original_fieldset: source
                        type: object
                      fields:
                        ip:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-nat-ip
                            description: 'Translated ip of source based NAT sessions
                              (e.g. internal client to internet)

                              Typically connections traversing load balancers, firewalls,
                              or routers.'
                            flat_name: process.parent.group_leader.entry_meta.source.nat.ip
                            level: extended
                            name: nat.ip
                            node_name: ip
                            normalize: []
                            original_fieldset: source
                            short: Source NAT ip
                            type: ip
                        port:
                          field_details:
                            dashed_name: process-parent-group-leader-entry-meta-source-nat-port
                            description: 'Translated port of source based NAT sessions.
                              (e.g. internal client to internet)

                              Typically used with load balancers, firewalls, or routers.'
                            flat_name: process.parent.group_leader.entry_meta.source.nat.port
                            format: string
                            level: extended
                            name: nat.port
                            node_name: port
                            normalize: []
                            original_fieldset: source
                            short: Source NAT port
                            type: long
                    packets:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-packets
                        description: Packets sent from the source to the destination.
                        example: 12
                        flat_name: process.parent.group_leader.entry_meta.source.packets
                        level: core
                        name: packets
                        node_name: packets
                        normalize: []
                        original_fieldset: source
                        short: Packets sent from the source to the destination.
                        type: long
                    port:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-port
                        description: Port of the source.
                        flat_name: process.parent.group_leader.entry_meta.source.port
                        format: string
                        level: core
                        name: port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Port of the source.
                        type: long
                    registered_domain:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-registered-domain
                        description: 'The highest registered source domain, stripped
                          of the subdomain.

                          For example, the registered domain for "foo.example.com"
                          is "example.com".

                          This value can be determined precisely with a list like
                          the public suffix list (http://publicsuffix.org). Trying
                          to approximate this by simply taking the last two labels
                          will not work well for TLDs such as "co.uk".'
                        example: example.com
                        flat_name: process.parent.group_leader.entry_meta.source.registered_domain
                        ignore_above: 1024
                        level: extended
                        name: registered_domain
                        node_name: registered_domain
                        normalize: []
                        original_fieldset: source
                        short: The highest registered source domain, stripped of the
                          subdomain.
                        type: keyword
                    subdomain:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-subdomain
                        description: 'The subdomain portion of a fully qualified domain
                          name includes all of the names except the host name under
                          the registered_domain.  In a partially qualified domain,
                          or if the the qualification level of the full name cannot
                          be determined, subdomain contains all of the names below
                          the registered domain.

                          For example the subdomain portion of "www.east.mydomain.co.uk"
                          is "east". If the domain has multiple levels of subdomain,
                          such as "sub2.sub1.example.com", the subdomain field should
                          contain "sub2.sub1", with no trailing period.'
                        example: east
                        flat_name: process.parent.group_leader.entry_meta.source.subdomain
                        ignore_above: 1024
                        level: extended
                        name: subdomain
                        node_name: subdomain
                        normalize: []
                        original_fieldset: source
                        short: The subdomain of the domain.
                        type: keyword
                    top_level_domain:
                      field_details:
                        dashed_name: process-parent-group-leader-entry-meta-source-top-level-domain
                        description: 'The effective top level domain (eTLD), also
                          known as the domain suffix, is the last part of the domain
                          name. For example, the top level domain for example.com
                          is "com".

                          This value can be determined precisely with a list like
                          the public suffix list (http://publicsuffix.org). Trying
                          to approximate this by simply taking the last label will
                          not work well for effective TLDs such as "co.uk".'
                        example: co.uk
                        flat_name: process.parent.group_leader.entry_meta.source.top_level_domain
                        ignore_above: 1024
                        level: extended
                        name: top_level_domain
                        node_name: top_level_domain
                        normalize: []
                        original_fieldset: source
                        short: The effective top level domain (com, org, net, co.uk).
                        type: keyword
                type:
                  field_details:
                    dashed_name: process-parent-group-leader-entry-meta-type
                    description: 'The entry type for the entry session leader. Values
                      include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                      console

                      Note: This field is only set on process.session_leader.'
                    flat_name: process.parent.group_leader.entry_meta.type
                    ignore_above: 1024
                    level: extended
                    name: entry_meta.type
                    node_name: type
                    normalize: []
                    original_fieldset: process
                    short: The entry type for the entry session leader.
                    type: keyword
            env_vars:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-group-leader-env-vars
                description: 'Array of environment variable bindings. Captured from
                  a snapshot of the environment at the time of execution.

                  May be filtered to protect sensitive information.'
                example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
                flat_name: process.parent.group_leader.env_vars
                ignore_above: 1024
                level: extended
                name: env_vars
                node_name: env_vars
                normalize:
                - array
                original_fieldset: process
                short: Array of environment variable bindings.
                type: keyword
            executable:
              field_details:
                dashed_name: process-parent-group-leader-executable
                description: Absolute path to the process executable.
                example: /usr/bin/ssh
                flat_name: process.parent.group_leader.executable
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.group_leader.executable.text
                  name: text
                  type: match_only_text
                name: executable
                node_name: executable
                normalize: []
                original_fieldset: process
                short: Absolute path to the process executable.
                type: keyword
            exit_code:
              field_details:
                dashed_name: process-parent-group-leader-exit-code
                description: 'The exit code of the process, if this is a termination
                  event.

                  The field should be absent if there is no exit code for the event
                  (e.g. process start).'
                example: 137
                flat_name: process.parent.group_leader.exit_code
                level: extended
                name: exit_code
                node_name: exit_code
                normalize: []
                original_fieldset: process
                short: The exit code of the process.
                type: long
            group:
              field_details:
                dashed_name: process-parent-group-leader-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.group_leader.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.group_leader.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-group-name
                    description: Name of the group.
                    flat_name: process.parent.group_leader.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-parent-group-leader-hash
                description: 'The hash fields represent different bitwise hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).

                  Note that this fieldset is used for common hashes that may be computed
                  over a range of generic bytes. Entity-specific hashes such as ja3
                  or imphash are placed in the fieldsets to which they relate (tls
                  and pe, respectively).'
                flat_name: process.parent.group_leader.hash
                intermediate: true
                name: hash
                node_name: hash
                original_fieldset: hash
                short: Hashes, usually file hashes.
                type: group
              fields:
                md5:
                  field_details:
                    dashed_name: process-parent-group-leader-hash-md5
                    description: MD5 hash.
                    flat_name: process.parent.group_leader.hash.md5
                    ignore_above: 1024
                    level: extended
                    name: md5
                    node_name: md5
                    normalize: []
                    original_fieldset: hash
                    short: MD5 hash.
                    type: keyword
                sha1:
                  field_details:
                    dashed_name: process-parent-group-leader-hash-sha1
                    description: SHA1 hash.
                    flat_name: process.parent.group_leader.hash.sha1
                    ignore_above: 1024
                    level: extended
                    name: sha1
                    node_name: sha1
                    normalize: []
                    original_fieldset: hash
                    short: SHA1 hash.
                    type: keyword
                sha256:
                  field_details:
                    dashed_name: process-parent-group-leader-hash-sha256
                    description: SHA256 hash.
                    flat_name: process.parent.group_leader.hash.sha256
                    ignore_above: 1024
                    level: extended
                    name: sha256
                    node_name: sha256
                    normalize: []
                    original_fieldset: hash
                    short: SHA256 hash.
                    type: keyword
                sha384:
                  field_details:
                    dashed_name: process-parent-group-leader-hash-sha384
                    description: SHA384 hash.
                    flat_name: process.parent.group_leader.hash.sha384
                    ignore_above: 1024
                    level: extended
                    name: sha384
                    node_name: sha384
                    normalize: []
                    original_fieldset: hash
                    short: SHA384 hash.
                    type: keyword
                sha512:
                  field_details:
                    dashed_name: process-parent-group-leader-hash-sha512
                    description: SHA512 hash.
                    flat_name: process.parent.group_leader.hash.sha512
                    ignore_above: 1024
                    level: extended
                    name: sha512
                    node_name: sha512
                    normalize: []
                    original_fieldset: hash
                    short: SHA512 hash.
                    type: keyword
                ssdeep:
                  field_details:
                    dashed_name: process-parent-group-leader-hash-ssdeep
                    description: SSDEEP hash.
                    flat_name: process.parent.group_leader.hash.ssdeep
                    ignore_above: 1024
                    level: extended
                    name: ssdeep
                    node_name: ssdeep
                    normalize: []
                    original_fieldset: hash
                    short: SSDEEP hash.
                    type: keyword
                tlsh:
                  field_details:
                    dashed_name: process-parent-group-leader-hash-tlsh
                    description: TLSH hash.
                    flat_name: process.parent.group_leader.hash.tlsh
                    ignore_above: 1024
                    level: extended
                    name: tlsh
                    node_name: tlsh
                    normalize: []
                    original_fieldset: hash
                    short: TLSH hash.
                    type: keyword
            interactive:
              field_details:
                dashed_name: process-parent-group-leader-interactive
                description: 'Whether the process is connected to an interactive shell.

                  Process interactivity is inferred from the processes file descriptors.
                  If the character device for the controlling tty is the same as stdin
                  and stderr for the process, the process is considered interactive.

                  Note: A non-interactive process can belong to an interactive session
                  and is simply one that does not have open file descriptors reading
                  the controlling TTY on FD 0 (stdin) or writing to the controlling
                  TTY on FD 2 (stderr). A backgrounded process is still considered
                  interactive if stdin and stderr are connected to the controlling
                  TTY.'
                example: true
                flat_name: process.parent.group_leader.interactive
                level: extended
                name: interactive
                node_name: interactive
                normalize: []
                original_fieldset: process
                short: Whether the process is connected to an interactive shell.
                type: boolean
            io:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-group-leader-io
                description: 'A chunk of input or output (IO) from a single process.

                  This field only appears on the top level process object, which is
                  the process that wrote the output or read the input.'
                flat_name: process.parent.group_leader.io
                intermediate: false
                level: extended
                name: io
                node_name: io
                normalize: []
                original_fieldset: process
                short: A chunk of input or output (IO) from a single process.
                type: object
              fields:
                bytes_skipped:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-io-bytes-skipped
                    description: An array of byte offsets and lengths denoting where
                      IO data has been skipped.
                    flat_name: process.parent.group_leader.io.bytes_skipped
                    intermediate: false
                    level: extended
                    name: io.bytes_skipped
                    node_name: bytes_skipped
                    normalize:
                    - array
                    original_fieldset: process
                    short: An array of byte offsets and lengths denoting where IO
                      data has been skipped.
                    type: object
                  fields:
                    length:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-parent-group-leader-io-bytes-skipped-length
                        description: The length of bytes skipped.
                        flat_name: process.parent.group_leader.io.bytes_skipped.length
                        level: extended
                        name: io.bytes_skipped.length
                        node_name: length
                        normalize: []
                        original_fieldset: process
                        short: The length of bytes skipped.
                        type: long
                    offset:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-parent-group-leader-io-bytes-skipped-offset
                        description: The byte offset into this event's io.text (or
                          io.bytes in the future) where length bytes were skipped.
                        flat_name: process.parent.group_leader.io.bytes_skipped.offset
                        level: extended
                        name: io.bytes_skipped.offset
                        node_name: offset
                        normalize: []
                        original_fieldset: process
                        short: The byte offset into this event's io.text (or io.bytes
                          in the future) where length bytes were skipped.
                        type: long
                max_bytes_per_process_exceeded:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-io-max-bytes-per-process-exceeded
                    description: If true, the process producing the output has exceeded
                      the max_kilobytes_per_process configuration setting.
                    flat_name: process.parent.group_leader.io.max_bytes_per_process_exceeded
                    level: extended
                    name: io.max_bytes_per_process_exceeded
                    node_name: max_bytes_per_process_exceeded
                    normalize: []
                    original_fieldset: process
                    short: If true, the process producing the output has exceeded
                      the max_kilobytes_per_process configuration setting.
                    type: boolean
                text:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-io-text
                    description: 'A chunk of output or input sanitized to UTF-8.

                      Best efforts are made to ensure complete lines are captured
                      in these events. Assumptions should NOT be made that multiple
                      lines will appear in the same event. TTY output may contain
                      terminal control codes such as for cursor movement, so some
                      string queries may not match due to terminal codes inserted
                      between characters of a word.'
                    flat_name: process.parent.group_leader.io.text
                    level: extended
                    name: io.text
                    node_name: text
                    normalize: []
                    original_fieldset: process
                    short: A chunk of output or input sanitized to UTF-8.
                    type: wildcard
                total_bytes_captured:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-io-total-bytes-captured
                    description: The total number of bytes captured in this event.
                    flat_name: process.parent.group_leader.io.total_bytes_captured
                    level: extended
                    name: io.total_bytes_captured
                    node_name: total_bytes_captured
                    normalize: []
                    original_fieldset: process
                    short: The total number of bytes captured in this event.
                    type: long
                total_bytes_skipped:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-io-total-bytes-skipped
                    description: The total number of bytes that were not captured
                      due to implementation restrictions such as buffer size limits.
                      Implementors should strive to ensure this value is always zero
                    flat_name: process.parent.group_leader.io.total_bytes_skipped
                    level: extended
                    name: io.total_bytes_skipped
                    node_name: total_bytes_skipped
                    normalize: []
                    original_fieldset: process
                    short: The total number of bytes that were not captured due to
                      implementation restrictions such as buffer size limits.
                    type: long
                type:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-io-type
                    description: 'The type of object on which the IO action (read
                      or write) was taken.

                      Currently only ''tty'' is supported. Other types may be added
                      in the future for ''file'' and ''socket'' support.'
                    flat_name: process.parent.group_leader.io.type
                    ignore_above: 1024
                    level: extended
                    name: io.type
                    node_name: type
                    normalize: []
                    original_fieldset: process
                    short: The type of object on which the IO action (read or write)
                      was taken.
                    type: keyword
            macho:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-parent-group-leader-macho
                description: These fields contain Mac OS Mach Object file format (Mach-O)
                  metadata.
                flat_name: process.parent.group_leader.macho
                intermediate: true
                name: macho
                node_name: macho
                original_fieldset: macho
                short: These fields contain Mac OS Mach Object file format (Mach-O)
                  metadata.
                type: group
              fields:
                go_import_hash:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-go-import-hash
                    description: 'A hash of the Go language imports in a Mach-O file
                      excluding standard library imports. An import hash can be used
                      to fingerprint binaries even after recompilation or other code-level
                      transformations have occurred, which would change more traditional
                      hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.parent.group_leader.macho.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the Go language imports in a Mach-O file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.parent.group_leader.macho.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: macho
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.parent.group_leader.macho.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.parent.group_leader.macho.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.parent.group_leader.macho.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: macho
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                import_hash:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-import-hash
                    description: 'A hash of the imports in a Mach-O file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a synonym for symhash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.parent.group_leader.macho.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the imports in a Mach-O file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-imports
                    description: List of imported element names and types.
                    flat_name: process.parent.group_leader.macho.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: macho
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.parent.group_leader.macho.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.parent.group_leader.macho.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                sections:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-sections
                    description: 'An array containing an object for each section of
                      the Mach-O file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `macho.sections.*`.'
                    flat_name: process.parent.group_leader.macho.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: macho
                    short: Section information of the Mach-O file.
                    type: nested
                  fields:
                    entropy:
                      field_details:
                        dashed_name: process-parent-group-leader-macho-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.parent.group_leader.macho.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: macho
                        short: Shannon entropy calculation from the section.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-parent-group-leader-macho-sections-name
                        description: Mach-O Section List name.
                        flat_name: process.parent.group_leader.macho.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List name.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-parent-group-leader-macho-sections-physical-size
                        description: Mach-O Section List physical size.
                        flat_name: process.parent.group_leader.macho.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List physical size.
                        type: long
                    var_entropy:
                      field_details:
                        dashed_name: process-parent-group-leader-macho-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.parent.group_leader.macho.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-parent-group-leader-macho-sections-virtual-size
                        description: Mach-O Section List virtual size. This is always
                          the same as `physical_size`.
                        flat_name: process.parent.group_leader.macho.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List virtual size. This is always the
                          same as `physical_size`.
                        type: long
                symhash:
                  field_details:
                    dashed_name: process-parent-group-leader-macho-symhash
                    description: 'A hash of the imports in a Mach-O file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a Mach-O implementation of the Windows PE imphash'
                    example: d3ccf195b62a9279c3c19af1080497ec
                    flat_name: process.parent.group_leader.macho.symhash
                    ignore_above: 1024
                    level: extended
                    name: symhash
                    node_name: symhash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the imports in a Mach-O file.
                    type: keyword
            name:
              field_details:
                dashed_name: process-parent-group-leader-name
                description: 'Process name.

                  Sometimes called program name or similar.'
                example: ssh
                flat_name: process.parent.group_leader.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.group_leader.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Process name.
                type: keyword
            pe:
              field_details:
                dashed_name: process-parent-group-leader-pe
                description: These fields contain Windows Portable Executable (PE)
                  metadata.
                flat_name: process.parent.group_leader.pe
                intermediate: true
                name: pe
                node_name: pe
                original_fieldset: pe
                short: These fields contain Windows Portable Executable (PE) metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-architecture
                    description: CPU architecture target for the file.
                    example: x64
                    flat_name: process.parent.group_leader.pe.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: pe
                    short: CPU architecture target for the file.
                    type: keyword
                company:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-company
                    description: Internal company name of the file, provided at compile-time.
                    example: Microsoft Corporation
                    flat_name: process.parent.group_leader.pe.company
                    ignore_above: 1024
                    level: extended
                    name: company
                    node_name: company
                    normalize: []
                    original_fieldset: pe
                    short: Internal company name of the file, provided at compile-time.
                    type: keyword
                description:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-description
                    description: Internal description of the file, provided at compile-time.
                    example: Paint
                    flat_name: process.parent.group_leader.pe.description
                    ignore_above: 1024
                    level: extended
                    name: description
                    node_name: description
                    normalize: []
                    original_fieldset: pe
                    short: Internal description of the file, provided at compile-time.
                    type: keyword
                file_version:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-file-version
                    description: Internal version of the file, provided at compile-time.
                    example: 6.3.9600.17415
                    flat_name: process.parent.group_leader.pe.file_version
                    ignore_above: 1024
                    level: extended
                    name: file_version
                    node_name: file_version
                    normalize: []
                    original_fieldset: pe
                    short: Process name.
                    type: keyword
                go_import_hash:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-go-import-hash
                    description: 'A hash of the Go language imports in a PE file excluding
                      standard library imports. An import hash can be used to fingerprint
                      binaries even after recompilation or other code-level transformations
                      have occurred, which would change more traditional hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.parent.group_leader.pe.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the Go language imports in a PE file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.parent.group_leader.pe.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: pe
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.parent.group_leader.pe.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.parent.group_leader.pe.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.parent.group_leader.pe.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: pe
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                imphash:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-imphash
                    description: 'A hash of the imports in a PE file. An imphash --
                      or import hash -- can be used to fingerprint binaries even after
                      recompilation or other code-level transformations have occurred,
                      which would change more traditional hash values.

                      Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                    example: 0c6803c4e922103c4dca5963aad36ddf
                    flat_name: process.parent.group_leader.pe.imphash
                    ignore_above: 1024
                    level: extended
                    name: imphash
                    node_name: imphash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                import_hash:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-import-hash
                    description: 'A hash of the imports in a PE file. An import hash
                      can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a synonym for imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.parent.group_leader.pe.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-imports
                    description: List of imported element names and types.
                    flat_name: process.parent.group_leader.pe.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: pe
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.parent.group_leader.pe.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.parent.group_leader.pe.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                original_file_name:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-original-file-name
                    description: Internal name of the file, provided at compile-time.
                    example: MSPAINT.EXE
                    flat_name: process.parent.group_leader.pe.original_file_name
                    ignore_above: 1024
                    level: extended
                    name: original_file_name
                    node_name: original_file_name
                    normalize: []
                    original_fieldset: pe
                    short: Internal name of the file, provided at compile-time.
                    type: keyword
                pehash:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-pehash
                    description: 'A hash of the PE header and data from one or more
                      PE sections. An pehash can be used to cluster files by transforming
                      structural information about a file into a hash value.

                      Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                    example: 73ff189b63cd6be375a7ff25179a38d347651975
                    flat_name: process.parent.group_leader.pe.pehash
                    ignore_above: 1024
                    level: extended
                    name: pehash
                    node_name: pehash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the PE header and data from one or more PE sections.
                    type: keyword
                product:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-product
                    description: Internal product name of the file, provided at compile-time.
                    example: "Microsoft\xAE Windows\xAE Operating System"
                    flat_name: process.parent.group_leader.pe.product
                    ignore_above: 1024
                    level: extended
                    name: product
                    node_name: product
                    normalize: []
                    original_fieldset: pe
                    short: Internal product name of the file, provided at compile-time.
                    type: keyword
                sections:
                  field_details:
                    dashed_name: process-parent-group-leader-pe-sections
                    description: 'An array containing an object for each section of
                      the PE file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `pe.sections.*`.'
                    flat_name: process.parent.group_leader.pe.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: pe
                    short: Section information of the PE file.
                    type: nested
                  fields:
                    entropy:
                      field_details:
                        dashed_name: process-parent-group-leader-pe-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.parent.group_leader.pe.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the section.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-parent-group-leader-pe-sections-name
                        description: PE Section List name.
                        flat_name: process.parent.group_leader.pe.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List name.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-parent-group-leader-pe-sections-physical-size
                        description: PE Section List physical size.
                        flat_name: process.parent.group_leader.pe.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List physical size.
                        type: long
                    var_entropy:
                      field_details:
                        dashed_name: process-parent-group-leader-pe-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.parent.group_leader.pe.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-parent-group-leader-pe-sections-virtual-size
                        description: PE Section List virtual size. This is always
                          the same as `physical_size`.
                        flat_name: process.parent.group_leader.pe.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List virtual size. This is always the same
                          as `physical_size`.
                        type: long
            pgid:
              field_details:
                dashed_name: process-parent-group-leader-pgid
                description: 'Deprecated for removal in next major version release.
                  This field is superseded by `process.group_leader.pid`.

                  Identifier of the group of processes the process belongs to.'
                flat_name: process.parent.group_leader.pgid
                format: string
                level: extended
                name: pgid
                node_name: pgid
                normalize: []
                original_fieldset: process
                short: Deprecated identifier of the group of processes the process
                  belongs to.
                type: long
            pid:
              field_details:
                dashed_name: process-parent-group-leader-pid
                description: Process id.
                example: 4242
                flat_name: process.parent.group_leader.pid
                format: string
                level: core
                name: pid
                node_name: pid
                normalize: []
                original_fieldset: process
                short: Process id.
                type: long
            real_group:
              field_details:
                dashed_name: process-parent-group-leader-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.group_leader.group
                intermediate: true
                name: real_group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-real-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.real_group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-real-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.group_leader.real_group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-real-group-name
                    description: Name of the group.
                    flat_name: process.parent.group_leader.real_group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            real_user:
              field_details:
                dashed_name: process-parent-group-leader-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.parent.group_leader.user
                intermediate: true
                name: real_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.real_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-email
                    description: User email address.
                    flat_name: process.parent.group_leader.real_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.parent.group_leader.real_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.parent.group_leader.real_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.parent.group_leader.real_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.parent.group_leader.real_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.parent.group_leader.real_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-group-name
                        description: Name of the group.
                        flat_name: process.parent.group_leader.real_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.parent.group_leader.real_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.parent.group_leader.real_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.parent.group_leader.real_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.parent.group_leader.real_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-parent-group-leader-real-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.parent.group_leader.real_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.parent.group_leader.real_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.parent.group_leader.real_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.parent.group_leader.real_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.parent.group_leader.real_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.parent.group_leader.real_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-real-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.parent.group_leader.real_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-parent-group-leader-real-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.parent.group_leader.real_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            same_as_process:
              field_details:
                dashed_name: process-parent-group-leader-same-as-process
                description: 'This boolean is used to identify if a leader process
                  is the same as the top level process.

                  For example, if `process.group_leader.same_as_process = true`, it
                  means the process event in question is the leader of its process
                  group. Details under `process.*` like `pid` would be the same under
                  `process.group_leader.*` The same applies for both `process.session_leader`
                  and `process.entry_leader`.

                  This field exists to the benefit of EQL and other rule engines since
                  it''s not possible to compare equality between two fields in a single
                  document. e.g `process.entity_id` = `process.group_leader.entity_id`
                  (top level process is the process group leader) OR `process.entity_id`
                  = `process.entry_leader.entity_id` (top level process is the entry
                  session leader)

                  Instead these rules could be written like: `process.group_leader.same_as_process:
                  true` OR `process.entry_leader.same_as_process: true`

                  Note: This field is only set on `process.entry_leader`, `process.session_leader`
                  and `process.group_leader`.'
                example: true
                flat_name: process.parent.group_leader.same_as_process
                level: extended
                name: same_as_process
                node_name: same_as_process
                normalize: []
                original_fieldset: process
                short: This boolean is used to identify if a leader process is the
                  same as the top level process.
                type: boolean
            saved_group:
              field_details:
                dashed_name: process-parent-group-leader-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.group_leader.group
                intermediate: true
                name: saved_group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.saved_group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.group_leader.saved_group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-group-name
                    description: Name of the group.
                    flat_name: process.parent.group_leader.saved_group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            saved_user:
              field_details:
                dashed_name: process-parent-group-leader-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.parent.group_leader.user
                intermediate: true
                name: saved_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.saved_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-email
                    description: User email address.
                    flat_name: process.parent.group_leader.saved_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.parent.group_leader.saved_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.parent.group_leader.saved_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.parent.group_leader.saved_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.parent.group_leader.saved_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.parent.group_leader.saved_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-group-name
                        description: Name of the group.
                        flat_name: process.parent.group_leader.saved_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.parent.group_leader.saved_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.parent.group_leader.saved_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.parent.group_leader.saved_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.parent.group_leader.saved_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-parent-group-leader-saved-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.parent.group_leader.saved_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.parent.group_leader.saved_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.parent.group_leader.saved_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.parent.group_leader.saved_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.parent.group_leader.saved_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.parent.group_leader.saved_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-saved-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.parent.group_leader.saved_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-parent-group-leader-saved-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.parent.group_leader.saved_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            start:
              field_details:
                dashed_name: process-parent-group-leader-start
                description: The time the process started.
                example: '2016-05-23T08:05:34.853Z'
                flat_name: process.parent.group_leader.start
                level: extended
                name: start
                node_name: start
                normalize: []
                original_fieldset: process
                short: The time the process started.
                type: date
            supplemental_groups:
              field_details:
                dashed_name: process-parent-group-leader-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.group_leader.group
                intermediate: true
                name: supplemental_groups
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-supplemental-groups-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.supplemental_groups.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-supplemental-groups-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.group_leader.supplemental_groups.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-supplemental-groups-name
                    description: Name of the group.
                    flat_name: process.parent.group_leader.supplemental_groups.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            thread:
              field_details:
                dashed_name: process-parent-group-leader-thread
                flat_name: process.parent.group_leader.thread
                intermediate: true
                name: thread
                node_name: thread
                original_fieldset: process
                type: object
              fields:
                capabilities:
                  field_details:
                    dashed_name: process-parent-group-leader-thread-capabilities
                    flat_name: process.parent.group_leader.thread.capabilities
                    intermediate: true
                    name: thread.capabilities
                    node_name: capabilities
                    original_fieldset: process
                    type: object
                  fields:
                    effective:
                      field_details:
                        dashed_name: process-parent-group-leader-thread-capabilities-effective
                        description: This is the set of capabilities used by the kernel
                          to perform permission checks for the thread.
                        example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                        flat_name: process.parent.group_leader.thread.capabilities.effective
                        ignore_above: 1024
                        level: extended
                        name: thread.capabilities.effective
                        node_name: effective
                        normalize:
                        - array
                        original_fieldset: process
                        pattern: ^(CAP_[A-Z_]+|\d+)$
                        short: Array of capabilities used for permission checks.
                        type: keyword
                    permitted:
                      field_details:
                        dashed_name: process-parent-group-leader-thread-capabilities-permitted
                        description: This is a limiting superset for the effective
                          capabilities that the thread may assume.
                        example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                        flat_name: process.parent.group_leader.thread.capabilities.permitted
                        ignore_above: 1024
                        level: extended
                        name: thread.capabilities.permitted
                        node_name: permitted
                        normalize:
                        - array
                        original_fieldset: process
                        pattern: ^(CAP_[A-Z_]+|\d+)$
                        short: Array of capabilities a thread could assume.
                        type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-thread-id
                    description: Thread ID.
                    example: 4242
                    flat_name: process.parent.group_leader.thread.id
                    format: string
                    level: extended
                    name: thread.id
                    node_name: id
                    normalize: []
                    original_fieldset: process
                    short: Thread ID.
                    type: long
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-thread-name
                    description: Thread name.
                    example: thread-0
                    flat_name: process.parent.group_leader.thread.name
                    ignore_above: 1024
                    level: extended
                    name: thread.name
                    node_name: name
                    normalize: []
                    original_fieldset: process
                    short: Thread name.
                    type: keyword
            title:
              field_details:
                dashed_name: process-parent-group-leader-title
                description: 'Process title.

                  The proctitle, some times the same as process name. Can also be
                  different: for example a browser setting its title to the web page
                  currently opened.'
                flat_name: process.parent.group_leader.title
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.group_leader.title.text
                  name: text
                  type: match_only_text
                name: title
                node_name: title
                normalize: []
                original_fieldset: process
                short: Process title.
                type: keyword
            tty:
              field_details:
                dashed_name: process-parent-group-leader-tty
                description: Information about the controlling TTY device. If set,
                  the process belongs to an interactive session.
                flat_name: process.parent.group_leader.tty
                intermediate: false
                level: extended
                name: tty
                node_name: tty
                normalize: []
                original_fieldset: process
                short: Information about the controlling TTY device.
                type: object
              fields:
                char_device:
                  field_details:
                    dashed_name: process-parent-group-leader-tty-char-device
                    flat_name: process.parent.group_leader.tty.char_device
                    intermediate: true
                    name: tty.char_device
                    node_name: char_device
                    original_fieldset: process
                    type: object
                  fields:
                    major:
                      field_details:
                        dashed_name: process-parent-group-leader-tty-char-device-major
                        description: The major number identifies the driver associated
                          with the device. The character device's major and minor
                          numbers can be algorithmically combined to produce the more
                          familiar terminal identifiers such as "ttyS0" and "pts/0".
                          For more details, please refer to the Linux kernel documentation.
                        example: 4
                        flat_name: process.parent.group_leader.tty.char_device.major
                        level: extended
                        name: tty.char_device.major
                        node_name: major
                        normalize: []
                        original_fieldset: process
                        short: The TTY character device's major number.
                        type: long
                    minor:
                      field_details:
                        dashed_name: process-parent-group-leader-tty-char-device-minor
                        description: "The minor number is used only by the driver\
                          \ specified by the major number; other parts of the kernel\
                          \ don\u2019t use it, and merely pass it along to the driver.\
                          \ It is common for a driver to control several devices;\
                          \ the minor number provides a way for the driver to differentiate\
                          \ among them."
                        example: 1
                        flat_name: process.parent.group_leader.tty.char_device.minor
                        level: extended
                        name: tty.char_device.minor
                        node_name: minor
                        normalize: []
                        original_fieldset: process
                        short: The TTY character device's minor number.
                        type: long
                columns:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-tty-columns
                    description: 'The number of character columns per line. e.g terminal
                      width

                      Terminal sizes can change, so this value reflects the maximum
                      value for a given IO event. i.e. where event.action = ''text_output'''
                    example: 80
                    flat_name: process.parent.group_leader.tty.columns
                    level: extended
                    name: tty.columns
                    node_name: columns
                    normalize: []
                    original_fieldset: process
                    short: The number of character columns per line. e.g terminal
                      width
                    type: long
                rows:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-group-leader-tty-rows
                    description: 'The number of character rows in the terminal. e.g
                      terminal height

                      Terminal sizes can change, so this value reflects the maximum
                      value for a given IO event. i.e. where event.action = ''text_output'''
                    example: 24
                    flat_name: process.parent.group_leader.tty.rows
                    level: extended
                    name: tty.rows
                    node_name: rows
                    normalize: []
                    original_fieldset: process
                    short: The number of character rows in the terminal. e.g terminal
                      height
                    type: long
            uptime:
              field_details:
                dashed_name: process-parent-group-leader-uptime
                description: Seconds the process has been up.
                example: 1325
                flat_name: process.parent.group_leader.uptime
                level: extended
                name: uptime
                node_name: uptime
                normalize: []
                original_fieldset: process
                short: Seconds the process has been up.
                type: long
            user:
              field_details:
                dashed_name: process-parent-group-leader-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.parent.group_leader.user
                intermediate: true
                name: user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-group-leader-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.group_leader.user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-parent-group-leader-user-email
                    description: User email address.
                    flat_name: process.parent.group_leader.user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-parent-group-leader-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.parent.group_leader.user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.parent.group_leader.user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-parent-group-leader-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.parent.group_leader.user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-parent-group-leader-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.parent.group_leader.user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-parent-group-leader-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.parent.group_leader.user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-parent-group-leader-user-group-name
                        description: Name of the group.
                        flat_name: process.parent.group_leader.user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-parent-group-leader-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.parent.group_leader.user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-group-leader-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.parent.group_leader.user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-group-leader-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.parent.group_leader.user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.parent.group_leader.user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-parent-group-leader-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.parent.group_leader.user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-parent-group-leader-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.parent.group_leader.user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-parent-group-leader-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.parent.group_leader.user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.parent.group_leader.user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-parent-group-leader-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.parent.group_leader.user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-parent-group-leader-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.parent.group_leader.user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-parent-group-leader-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.parent.group_leader.user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-parent-group-leader-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.parent.group_leader.user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            vpid:
              field_details:
                dashed_name: process-parent-group-leader-vpid
                description: 'Virtual process id.

                  The process id within a pid namespace. This is not necessarily unique
                  across all processes on the host but it is unique within the process
                  namespace that the process exists within.'
                example: 4242
                flat_name: process.parent.group_leader.vpid
                format: string
                level: core
                name: vpid
                node_name: vpid
                normalize: []
                original_fieldset: process
                short: Virtual process id.
                type: long
            working_directory:
              field_details:
                dashed_name: process-parent-group-leader-working-directory
                description: The working directory of the process.
                example: /home/alice
                flat_name: process.parent.group_leader.working_directory
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.group_leader.working_directory.text
                  name: text
                  type: match_only_text
                name: working_directory
                node_name: working_directory
                normalize: []
                original_fieldset: process
                short: The working directory of the process.
                type: keyword
        hash:
          field_details:
            dashed_name: process-parent-hash
            description: 'The hash fields represent different bitwise hash algorithms
              and their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).

              Note that this fieldset is used for common hashes that may be computed
              over a range of generic bytes. Entity-specific hashes such as ja3 or
              imphash are placed in the fieldsets to which they relate (tls and pe,
              respectively).'
            flat_name: process.parent.hash
            intermediate: true
            name: hash
            node_name: hash
            original_fieldset: hash
            short: Hashes, usually file hashes.
            type: group
          fields:
            md5:
              field_details:
                dashed_name: process-parent-hash-md5
                description: MD5 hash.
                flat_name: process.parent.hash.md5
                ignore_above: 1024
                level: extended
                name: md5
                node_name: md5
                normalize: []
                original_fieldset: hash
                short: MD5 hash.
                type: keyword
            sha1:
              field_details:
                dashed_name: process-parent-hash-sha1
                description: SHA1 hash.
                flat_name: process.parent.hash.sha1
                ignore_above: 1024
                level: extended
                name: sha1
                node_name: sha1
                normalize: []
                original_fieldset: hash
                short: SHA1 hash.
                type: keyword
            sha256:
              field_details:
                dashed_name: process-parent-hash-sha256
                description: SHA256 hash.
                flat_name: process.parent.hash.sha256
                ignore_above: 1024
                level: extended
                name: sha256
                node_name: sha256
                normalize: []
                original_fieldset: hash
                short: SHA256 hash.
                type: keyword
            sha384:
              field_details:
                dashed_name: process-parent-hash-sha384
                description: SHA384 hash.
                flat_name: process.parent.hash.sha384
                ignore_above: 1024
                level: extended
                name: sha384
                node_name: sha384
                normalize: []
                original_fieldset: hash
                short: SHA384 hash.
                type: keyword
            sha512:
              field_details:
                dashed_name: process-parent-hash-sha512
                description: SHA512 hash.
                flat_name: process.parent.hash.sha512
                ignore_above: 1024
                level: extended
                name: sha512
                node_name: sha512
                normalize: []
                original_fieldset: hash
                short: SHA512 hash.
                type: keyword
            ssdeep:
              field_details:
                dashed_name: process-parent-hash-ssdeep
                description: SSDEEP hash.
                flat_name: process.parent.hash.ssdeep
                ignore_above: 1024
                level: extended
                name: ssdeep
                node_name: ssdeep
                normalize: []
                original_fieldset: hash
                short: SSDEEP hash.
                type: keyword
            tlsh:
              field_details:
                dashed_name: process-parent-hash-tlsh
                description: TLSH hash.
                flat_name: process.parent.hash.tlsh
                ignore_above: 1024
                level: extended
                name: tlsh
                node_name: tlsh
                normalize: []
                original_fieldset: hash
                short: TLSH hash.
                type: keyword
        interactive:
          field_details:
            dashed_name: process-parent-interactive
            description: 'Whether the process is connected to an interactive shell.

              Process interactivity is inferred from the processes file descriptors.
              If the character device for the controlling tty is the same as stdin
              and stderr for the process, the process is considered interactive.

              Note: A non-interactive process can belong to an interactive session
              and is simply one that does not have open file descriptors reading the
              controlling TTY on FD 0 (stdin) or writing to the controlling TTY on
              FD 2 (stderr). A backgrounded process is still considered interactive
              if stdin and stderr are connected to the controlling TTY.'
            example: true
            flat_name: process.parent.interactive
            level: extended
            name: interactive
            node_name: interactive
            normalize: []
            original_fieldset: process
            short: Whether the process is connected to an interactive shell.
            type: boolean
        io:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-parent-io
            description: 'A chunk of input or output (IO) from a single process.

              This field only appears on the top level process object, which is the
              process that wrote the output or read the input.'
            flat_name: process.parent.io
            intermediate: false
            level: extended
            name: io
            node_name: io
            normalize: []
            original_fieldset: process
            short: A chunk of input or output (IO) from a single process.
            type: object
          fields:
            bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-io-bytes-skipped
                description: An array of byte offsets and lengths denoting where IO
                  data has been skipped.
                flat_name: process.parent.io.bytes_skipped
                intermediate: false
                level: extended
                name: io.bytes_skipped
                node_name: bytes_skipped
                normalize:
                - array
                original_fieldset: process
                short: An array of byte offsets and lengths denoting where IO data
                  has been skipped.
                type: object
              fields:
                length:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-io-bytes-skipped-length
                    description: The length of bytes skipped.
                    flat_name: process.parent.io.bytes_skipped.length
                    level: extended
                    name: io.bytes_skipped.length
                    node_name: length
                    normalize: []
                    original_fieldset: process
                    short: The length of bytes skipped.
                    type: long
                offset:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-parent-io-bytes-skipped-offset
                    description: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    flat_name: process.parent.io.bytes_skipped.offset
                    level: extended
                    name: io.bytes_skipped.offset
                    node_name: offset
                    normalize: []
                    original_fieldset: process
                    short: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    type: long
            max_bytes_per_process_exceeded:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-io-max-bytes-per-process-exceeded
                description: If true, the process producing the output has exceeded
                  the max_kilobytes_per_process configuration setting.
                flat_name: process.parent.io.max_bytes_per_process_exceeded
                level: extended
                name: io.max_bytes_per_process_exceeded
                node_name: max_bytes_per_process_exceeded
                normalize: []
                original_fieldset: process
                short: If true, the process producing the output has exceeded the
                  max_kilobytes_per_process configuration setting.
                type: boolean
            text:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-io-text
                description: 'A chunk of output or input sanitized to UTF-8.

                  Best efforts are made to ensure complete lines are captured in these
                  events. Assumptions should NOT be made that multiple lines will
                  appear in the same event. TTY output may contain terminal control
                  codes such as for cursor movement, so some string queries may not
                  match due to terminal codes inserted between characters of a word.'
                flat_name: process.parent.io.text
                level: extended
                name: io.text
                node_name: text
                normalize: []
                original_fieldset: process
                short: A chunk of output or input sanitized to UTF-8.
                type: wildcard
            total_bytes_captured:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-io-total-bytes-captured
                description: The total number of bytes captured in this event.
                flat_name: process.parent.io.total_bytes_captured
                level: extended
                name: io.total_bytes_captured
                node_name: total_bytes_captured
                normalize: []
                original_fieldset: process
                short: The total number of bytes captured in this event.
                type: long
            total_bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-io-total-bytes-skipped
                description: The total number of bytes that were not captured due
                  to implementation restrictions such as buffer size limits. Implementors
                  should strive to ensure this value is always zero
                flat_name: process.parent.io.total_bytes_skipped
                level: extended
                name: io.total_bytes_skipped
                node_name: total_bytes_skipped
                normalize: []
                original_fieldset: process
                short: The total number of bytes that were not captured due to implementation
                  restrictions such as buffer size limits.
                type: long
            type:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-io-type
                description: 'The type of object on which the IO action (read or write)
                  was taken.

                  Currently only ''tty'' is supported. Other types may be added in
                  the future for ''file'' and ''socket'' support.'
                flat_name: process.parent.io.type
                ignore_above: 1024
                level: extended
                name: io.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The type of object on which the IO action (read or write) was
                  taken.
                type: keyword
        macho:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-parent-macho
            description: These fields contain Mac OS Mach Object file format (Mach-O)
              metadata.
            flat_name: process.parent.macho
            intermediate: true
            name: macho
            node_name: macho
            original_fieldset: macho
            short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
            type: group
          fields:
            go_import_hash:
              field_details:
                dashed_name: process-parent-macho-go-import-hash
                description: 'A hash of the Go language imports in a Mach-O file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.parent.macho.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the Go language imports in a Mach-O file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-parent-macho-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.parent.macho.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: macho
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-parent-macho-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.parent.macho.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-parent-macho-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.parent.macho.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-parent-macho-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.parent.macho.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: macho
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            import_hash:
              field_details:
                dashed_name: process-parent-macho-import-hash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a synonym for symhash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.parent.macho.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-parent-macho-imports
                description: List of imported element names and types.
                flat_name: process.parent.macho.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: macho
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-parent-macho-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.parent.macho.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-parent-macho-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.parent.macho.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-parent-macho-sections
                description: 'An array containing an object for each section of the
                  Mach-O file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `macho.sections.*`.'
                flat_name: process.parent.macho.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: macho
                short: Section information of the Mach-O file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-parent-macho-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.parent.macho.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-parent-macho-sections-name
                    description: Mach-O Section List name.
                    flat_name: process.parent.macho.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-parent-macho-sections-physical-size
                    description: Mach-O Section List physical size.
                    flat_name: process.parent.macho.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-parent-macho-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.parent.macho.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-parent-macho-sections-virtual-size
                    description: Mach-O Section List virtual size. This is always
                      the same as `physical_size`.
                    flat_name: process.parent.macho.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List virtual size. This is always the same
                      as `physical_size`.
                    type: long
            symhash:
              field_details:
                dashed_name: process-parent-macho-symhash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a Mach-O implementation of the Windows PE imphash'
                example: d3ccf195b62a9279c3c19af1080497ec
                flat_name: process.parent.macho.symhash
                ignore_above: 1024
                level: extended
                name: symhash
                node_name: symhash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
        name:
          field_details:
            dashed_name: process-parent-name
            description: 'Process name.

              Sometimes called program name or similar.'
            example: ssh
            flat_name: process.parent.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.parent.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: process
            short: Process name.
            type: keyword
        pe:
          field_details:
            dashed_name: process-parent-pe
            description: These fields contain Windows Portable Executable (PE) metadata.
            flat_name: process.parent.pe
            intermediate: true
            name: pe
            node_name: pe
            original_fieldset: pe
            short: These fields contain Windows Portable Executable (PE) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-parent-pe-architecture
                description: CPU architecture target for the file.
                example: x64
                flat_name: process.parent.pe.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: pe
                short: CPU architecture target for the file.
                type: keyword
            company:
              field_details:
                dashed_name: process-parent-pe-company
                description: Internal company name of the file, provided at compile-time.
                example: Microsoft Corporation
                flat_name: process.parent.pe.company
                ignore_above: 1024
                level: extended
                name: company
                node_name: company
                normalize: []
                original_fieldset: pe
                short: Internal company name of the file, provided at compile-time.
                type: keyword
            description:
              field_details:
                dashed_name: process-parent-pe-description
                description: Internal description of the file, provided at compile-time.
                example: Paint
                flat_name: process.parent.pe.description
                ignore_above: 1024
                level: extended
                name: description
                node_name: description
                normalize: []
                original_fieldset: pe
                short: Internal description of the file, provided at compile-time.
                type: keyword
            file_version:
              field_details:
                dashed_name: process-parent-pe-file-version
                description: Internal version of the file, provided at compile-time.
                example: 6.3.9600.17415
                flat_name: process.parent.pe.file_version
                ignore_above: 1024
                level: extended
                name: file_version
                node_name: file_version
                normalize: []
                original_fieldset: pe
                short: Process name.
                type: keyword
            go_import_hash:
              field_details:
                dashed_name: process-parent-pe-go-import-hash
                description: 'A hash of the Go language imports in a PE file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.parent.pe.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the Go language imports in a PE file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-parent-pe-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.parent.pe.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: pe
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-parent-pe-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.parent.pe.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-parent-pe-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.parent.pe.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-parent-pe-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.parent.pe.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: pe
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            imphash:
              field_details:
                dashed_name: process-parent-pe-imphash
                description: 'A hash of the imports in a PE file. An imphash -- or
                  import hash -- can be used to fingerprint binaries even after recompilation
                  or other code-level transformations have occurred, which would change
                  more traditional hash values.

                  Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                example: 0c6803c4e922103c4dca5963aad36ddf
                flat_name: process.parent.pe.imphash
                ignore_above: 1024
                level: extended
                name: imphash
                node_name: imphash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            import_hash:
              field_details:
                dashed_name: process-parent-pe-import-hash
                description: 'A hash of the imports in a PE file. An import hash can
                  be used to fingerprint binaries even after recompilation or other
                  code-level transformations have occurred, which would change more
                  traditional hash values.

                  This is a synonym for imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.parent.pe.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-parent-pe-imports
                description: List of imported element names and types.
                flat_name: process.parent.pe.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: pe
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-parent-pe-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.parent.pe.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-parent-pe-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.parent.pe.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            original_file_name:
              field_details:
                dashed_name: process-parent-pe-original-file-name
                description: Internal name of the file, provided at compile-time.
                example: MSPAINT.EXE
                flat_name: process.parent.pe.original_file_name
                ignore_above: 1024
                level: extended
                name: original_file_name
                node_name: original_file_name
                normalize: []
                original_fieldset: pe
                short: Internal name of the file, provided at compile-time.
                type: keyword
            pehash:
              field_details:
                dashed_name: process-parent-pe-pehash
                description: 'A hash of the PE header and data from one or more PE
                  sections. An pehash can be used to cluster files by transforming
                  structural information about a file into a hash value.

                  Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                example: 73ff189b63cd6be375a7ff25179a38d347651975
                flat_name: process.parent.pe.pehash
                ignore_above: 1024
                level: extended
                name: pehash
                node_name: pehash
                normalize: []
                original_fieldset: pe
                short: A hash of the PE header and data from one or more PE sections.
                type: keyword
            product:
              field_details:
                dashed_name: process-parent-pe-product
                description: Internal product name of the file, provided at compile-time.
                example: "Microsoft\xAE Windows\xAE Operating System"
                flat_name: process.parent.pe.product
                ignore_above: 1024
                level: extended
                name: product
                node_name: product
                normalize: []
                original_fieldset: pe
                short: Internal product name of the file, provided at compile-time.
                type: keyword
            sections:
              field_details:
                dashed_name: process-parent-pe-sections
                description: 'An array containing an object for each section of the
                  PE file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `pe.sections.*`.'
                flat_name: process.parent.pe.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: pe
                short: Section information of the PE file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-parent-pe-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.parent.pe.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-parent-pe-sections-name
                    description: PE Section List name.
                    flat_name: process.parent.pe.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-parent-pe-sections-physical-size
                    description: PE Section List physical size.
                    flat_name: process.parent.pe.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-parent-pe-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.parent.pe.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-parent-pe-sections-virtual-size
                    description: PE Section List virtual size. This is always the
                      same as `physical_size`.
                    flat_name: process.parent.pe.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List virtual size. This is always the same as
                      `physical_size`.
                    type: long
        pgid:
          field_details:
            dashed_name: process-parent-pgid
            description: 'Deprecated for removal in next major version release. This
              field is superseded by `process.group_leader.pid`.

              Identifier of the group of processes the process belongs to.'
            flat_name: process.parent.pgid
            format: string
            level: extended
            name: pgid
            node_name: pgid
            normalize: []
            original_fieldset: process
            short: Deprecated identifier of the group of processes the process belongs
              to.
            type: long
        pid:
          field_details:
            dashed_name: process-parent-pid
            description: Process id.
            example: 4242
            flat_name: process.parent.pid
            format: string
            level: core
            name: pid
            node_name: pid
            normalize: []
            original_fieldset: process
            short: Process id.
            type: long
        real_group:
          field_details:
            dashed_name: process-parent-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.parent.group
            intermediate: true
            name: real_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-real-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.real_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-real-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.parent.real_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-real-group-name
                description: Name of the group.
                flat_name: process.parent.real_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        real_user:
          field_details:
            dashed_name: process-parent-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.parent.user
            intermediate: true
            name: real_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-real-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.real_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-parent-real-user-email
                description: User email address.
                flat_name: process.parent.real_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-parent-real-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.parent.real_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.real_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-parent-real-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.real_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-real-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.real_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-real-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.real_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-real-user-group-name
                    description: Name of the group.
                    flat_name: process.parent.real_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-parent-real-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.parent.real_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-real-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.parent.real_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-real-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.parent.real_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.parent.real_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-parent-real-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.parent.real_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-parent-real-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.parent.real_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-parent-real-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.parent.real_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-parent-real-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.parent.real_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-parent-real-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.parent.real_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-parent-real-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.parent.real_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-parent-real-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.parent.real_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-parent-real-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.parent.real_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        same_as_process:
          field_details:
            dashed_name: process-parent-same-as-process
            description: 'This boolean is used to identify if a leader process is
              the same as the top level process.

              For example, if `process.group_leader.same_as_process = true`, it means
              the process event in question is the leader of its process group. Details
              under `process.*` like `pid` would be the same under `process.group_leader.*`
              The same applies for both `process.session_leader` and `process.entry_leader`.

              This field exists to the benefit of EQL and other rule engines since
              it''s not possible to compare equality between two fields in a single
              document. e.g `process.entity_id` = `process.group_leader.entity_id`
              (top level process is the process group leader) OR `process.entity_id`
              = `process.entry_leader.entity_id` (top level process is the entry session
              leader)

              Instead these rules could be written like: `process.group_leader.same_as_process:
              true` OR `process.entry_leader.same_as_process: true`

              Note: This field is only set on `process.entry_leader`, `process.session_leader`
              and `process.group_leader`.'
            example: true
            flat_name: process.parent.same_as_process
            level: extended
            name: same_as_process
            node_name: same_as_process
            normalize: []
            original_fieldset: process
            short: This boolean is used to identify if a leader process is the same
              as the top level process.
            type: boolean
        saved_group:
          field_details:
            dashed_name: process-parent-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.parent.group
            intermediate: true
            name: saved_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-saved-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.saved_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-saved-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.parent.saved_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-saved-group-name
                description: Name of the group.
                flat_name: process.parent.saved_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        saved_user:
          field_details:
            dashed_name: process-parent-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.parent.user
            intermediate: true
            name: saved_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-saved-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.saved_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-parent-saved-user-email
                description: User email address.
                flat_name: process.parent.saved_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-parent-saved-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.parent.saved_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.saved_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-parent-saved-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.saved_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-saved-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.saved_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-saved-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.saved_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-saved-user-group-name
                    description: Name of the group.
                    flat_name: process.parent.saved_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-parent-saved-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.parent.saved_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-saved-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.parent.saved_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-saved-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.parent.saved_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.parent.saved_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-parent-saved-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.parent.saved_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-parent-saved-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.parent.saved_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-parent-saved-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.parent.saved_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-parent-saved-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.parent.saved_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-parent-saved-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.parent.saved_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-parent-saved-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.parent.saved_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-parent-saved-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.parent.saved_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-parent-saved-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.parent.saved_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        start:
          field_details:
            dashed_name: process-parent-start
            description: The time the process started.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.parent.start
            level: extended
            name: start
            node_name: start
            normalize: []
            original_fieldset: process
            short: The time the process started.
            type: date
        supplemental_groups:
          field_details:
            dashed_name: process-parent-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.parent.group
            intermediate: true
            name: supplemental_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-supplemental-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.supplemental_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-supplemental-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.parent.supplemental_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-supplemental-groups-name
                description: Name of the group.
                flat_name: process.parent.supplemental_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        thread:
          field_details:
            dashed_name: process-parent-thread
            flat_name: process.parent.thread
            intermediate: true
            name: thread
            node_name: thread
            original_fieldset: process
            type: object
          fields:
            capabilities:
              field_details:
                dashed_name: process-parent-thread-capabilities
                flat_name: process.parent.thread.capabilities
                intermediate: true
                name: thread.capabilities
                node_name: capabilities
                original_fieldset: process
                type: object
              fields:
                effective:
                  field_details:
                    dashed_name: process-parent-thread-capabilities-effective
                    description: This is the set of capabilities used by the kernel
                      to perform permission checks for the thread.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.parent.thread.capabilities.effective
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.effective
                    node_name: effective
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities used for permission checks.
                    type: keyword
                permitted:
                  field_details:
                    dashed_name: process-parent-thread-capabilities-permitted
                    description: This is a limiting superset for the effective capabilities
                      that the thread may assume.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.parent.thread.capabilities.permitted
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.permitted
                    node_name: permitted
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities a thread could assume.
                    type: keyword
            id:
              field_details:
                dashed_name: process-parent-thread-id
                description: Thread ID.
                example: 4242
                flat_name: process.parent.thread.id
                format: string
                level: extended
                name: thread.id
                node_name: id
                normalize: []
                original_fieldset: process
                short: Thread ID.
                type: long
            name:
              field_details:
                dashed_name: process-parent-thread-name
                description: Thread name.
                example: thread-0
                flat_name: process.parent.thread.name
                ignore_above: 1024
                level: extended
                name: thread.name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Thread name.
                type: keyword
        title:
          field_details:
            dashed_name: process-parent-title
            description: 'Process title.

              The proctitle, some times the same as process name. Can also be different:
              for example a browser setting its title to the web page currently opened.'
            flat_name: process.parent.title
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.parent.title.text
              name: text
              type: match_only_text
            name: title
            node_name: title
            normalize: []
            original_fieldset: process
            short: Process title.
            type: keyword
        tty:
          field_details:
            dashed_name: process-parent-tty
            description: Information about the controlling TTY device. If set, the
              process belongs to an interactive session.
            flat_name: process.parent.tty
            intermediate: false
            level: extended
            name: tty
            node_name: tty
            normalize: []
            original_fieldset: process
            short: Information about the controlling TTY device.
            type: object
          fields:
            char_device:
              field_details:
                dashed_name: process-parent-tty-char-device
                flat_name: process.parent.tty.char_device
                intermediate: true
                name: tty.char_device
                node_name: char_device
                original_fieldset: process
                type: object
              fields:
                major:
                  field_details:
                    dashed_name: process-parent-tty-char-device-major
                    description: The major number identifies the driver associated
                      with the device. The character device's major and minor numbers
                      can be algorithmically combined to produce the more familiar
                      terminal identifiers such as "ttyS0" and "pts/0". For more details,
                      please refer to the Linux kernel documentation.
                    example: 4
                    flat_name: process.parent.tty.char_device.major
                    level: extended
                    name: tty.char_device.major
                    node_name: major
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's major number.
                    type: long
                minor:
                  field_details:
                    dashed_name: process-parent-tty-char-device-minor
                    description: "The minor number is used only by the driver specified\
                      \ by the major number; other parts of the kernel don\u2019t\
                      \ use it, and merely pass it along to the driver. It is common\
                      \ for a driver to control several devices; the minor number\
                      \ provides a way for the driver to differentiate among them."
                    example: 1
                    flat_name: process.parent.tty.char_device.minor
                    level: extended
                    name: tty.char_device.minor
                    node_name: minor
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's minor number.
                    type: long
            columns:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-tty-columns
                description: 'The number of character columns per line. e.g terminal
                  width

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 80
                flat_name: process.parent.tty.columns
                level: extended
                name: tty.columns
                node_name: columns
                normalize: []
                original_fieldset: process
                short: The number of character columns per line. e.g terminal width
                type: long
            rows:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-parent-tty-rows
                description: 'The number of character rows in the terminal. e.g terminal
                  height

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 24
                flat_name: process.parent.tty.rows
                level: extended
                name: tty.rows
                node_name: rows
                normalize: []
                original_fieldset: process
                short: The number of character rows in the terminal. e.g terminal
                  height
                type: long
        uptime:
          field_details:
            dashed_name: process-parent-uptime
            description: Seconds the process has been up.
            example: 1325
            flat_name: process.parent.uptime
            level: extended
            name: uptime
            node_name: uptime
            normalize: []
            original_fieldset: process
            short: Seconds the process has been up.
            type: long
        user:
          field_details:
            dashed_name: process-parent-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.parent.user
            intermediate: true
            name: user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-parent-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.parent.user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-parent-user-email
                description: User email address.
                flat_name: process.parent.user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-parent-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.parent.user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.parent.user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-parent-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.parent.user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-parent-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.parent.user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-parent-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.parent.user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-parent-user-group-name
                    description: Name of the group.
                    flat_name: process.parent.user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-parent-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.parent.user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-parent-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.parent.user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-parent-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.parent.user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.parent.user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-parent-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.parent.user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-parent-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.parent.user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-parent-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.parent.user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-parent-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.parent.user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-parent-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.parent.user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-parent-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.parent.user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-parent-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.parent.user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-parent-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.parent.user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        vpid:
          field_details:
            dashed_name: process-parent-vpid
            description: 'Virtual process id.

              The process id within a pid namespace. This is not necessarily unique
              across all processes on the host but it is unique within the process
              namespace that the process exists within.'
            example: 4242
            flat_name: process.parent.vpid
            format: string
            level: core
            name: vpid
            node_name: vpid
            normalize: []
            original_fieldset: process
            short: Virtual process id.
            type: long
        working_directory:
          field_details:
            dashed_name: process-parent-working-directory
            description: The working directory of the process.
            example: /home/alice
            flat_name: process.parent.working_directory
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.parent.working_directory.text
              name: text
              type: match_only_text
            name: working_directory
            node_name: working_directory
            normalize: []
            original_fieldset: process
            short: The working directory of the process.
            type: keyword
    pe:
      field_details:
        dashed_name: process-pe
        description: These fields contain Windows Portable Executable (PE) metadata.
        flat_name: process.pe
        intermediate: true
        name: pe
        node_name: pe
        original_fieldset: pe
        short: These fields contain Windows Portable Executable (PE) metadata.
        type: group
      fields:
        architecture:
          field_details:
            dashed_name: process-pe-architecture
            description: CPU architecture target for the file.
            example: x64
            flat_name: process.pe.architecture
            ignore_above: 1024
            level: extended
            name: architecture
            node_name: architecture
            normalize: []
            original_fieldset: pe
            short: CPU architecture target for the file.
            type: keyword
        company:
          field_details:
            dashed_name: process-pe-company
            description: Internal company name of the file, provided at compile-time.
            example: Microsoft Corporation
            flat_name: process.pe.company
            ignore_above: 1024
            level: extended
            name: company
            node_name: company
            normalize: []
            original_fieldset: pe
            short: Internal company name of the file, provided at compile-time.
            type: keyword
        description:
          field_details:
            dashed_name: process-pe-description
            description: Internal description of the file, provided at compile-time.
            example: Paint
            flat_name: process.pe.description
            ignore_above: 1024
            level: extended
            name: description
            node_name: description
            normalize: []
            original_fieldset: pe
            short: Internal description of the file, provided at compile-time.
            type: keyword
        file_version:
          field_details:
            dashed_name: process-pe-file-version
            description: Internal version of the file, provided at compile-time.
            example: 6.3.9600.17415
            flat_name: process.pe.file_version
            ignore_above: 1024
            level: extended
            name: file_version
            node_name: file_version
            normalize: []
            original_fieldset: pe
            short: Process name.
            type: keyword
        go_import_hash:
          field_details:
            dashed_name: process-pe-go-import-hash
            description: 'A hash of the Go language imports in a PE file excluding
              standard library imports. An import hash can be used to fingerprint
              binaries even after recompilation or other code-level transformations
              have occurred, which would change more traditional hash values.

              The algorithm used to calculate the Go symbol hash and a reference implementation
              are available [here](https://github.com/elastic/toutoumomoma).'
            example: 10bddcb4cee42080f76c88d9ff964491
            flat_name: process.pe.go_import_hash
            ignore_above: 1024
            level: extended
            name: go_import_hash
            node_name: go_import_hash
            normalize: []
            original_fieldset: pe
            short: A hash of the Go language imports in a PE file.
            type: keyword
        go_imports:
          field_details:
            dashed_name: process-pe-go-imports
            description: List of imported Go language element names and types.
            flat_name: process.pe.go_imports
            level: extended
            name: go_imports
            node_name: go_imports
            normalize: []
            original_fieldset: pe
            short: List of imported Go language element names and types.
            type: flattened
        go_imports_names_entropy:
          field_details:
            dashed_name: process-pe-go-imports-names-entropy
            description: Shannon entropy calculation from the list of Go imports.
            flat_name: process.pe.go_imports_names_entropy
            format: number
            level: extended
            name: go_imports_names_entropy
            node_name: go_imports_names_entropy
            normalize: []
            original_fieldset: pe
            short: Shannon entropy calculation from the list of Go imports.
            type: long
        go_imports_names_var_entropy:
          field_details:
            dashed_name: process-pe-go-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              Go imports.
            flat_name: process.pe.go_imports_names_var_entropy
            format: number
            level: extended
            name: go_imports_names_var_entropy
            node_name: go_imports_names_var_entropy
            normalize: []
            original_fieldset: pe
            short: Variance for Shannon entropy calculation from the list of Go imports.
            type: long
        go_stripped:
          field_details:
            dashed_name: process-pe-go-stripped
            description: Set to true if the file is a Go executable that has had its
              symbols stripped or obfuscated and false if an unobfuscated Go executable.
            flat_name: process.pe.go_stripped
            level: extended
            name: go_stripped
            node_name: go_stripped
            normalize: []
            original_fieldset: pe
            short: Whether the file is a stripped or obfuscated Go executable.
            type: boolean
        imphash:
          field_details:
            dashed_name: process-pe-imphash
            description: 'A hash of the imports in a PE file. An imphash -- or import
              hash -- can be used to fingerprint binaries even after recompilation
              or other code-level transformations have occurred, which would change
              more traditional hash values.

              Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
            example: 0c6803c4e922103c4dca5963aad36ddf
            flat_name: process.pe.imphash
            ignore_above: 1024
            level: extended
            name: imphash
            node_name: imphash
            normalize: []
            original_fieldset: pe
            short: A hash of the imports in a PE file.
            type: keyword
        import_hash:
          field_details:
            dashed_name: process-pe-import-hash
            description: 'A hash of the imports in a PE file. An import hash can be
              used to fingerprint binaries even after recompilation or other code-level
              transformations have occurred, which would change more traditional hash
              values.

              This is a synonym for imphash.'
            example: d41d8cd98f00b204e9800998ecf8427e
            flat_name: process.pe.import_hash
            ignore_above: 1024
            level: extended
            name: import_hash
            node_name: import_hash
            normalize: []
            original_fieldset: pe
            short: A hash of the imports in a PE file.
            type: keyword
        imports:
          field_details:
            dashed_name: process-pe-imports
            description: List of imported element names and types.
            flat_name: process.pe.imports
            level: extended
            name: imports
            node_name: imports
            normalize:
            - array
            original_fieldset: pe
            short: List of imported element names and types.
            type: flattened
        imports_names_entropy:
          field_details:
            dashed_name: process-pe-imports-names-entropy
            description: Shannon entropy calculation from the list of imported element
              names and types.
            flat_name: process.pe.imports_names_entropy
            format: number
            level: extended
            name: imports_names_entropy
            node_name: imports_names_entropy
            normalize: []
            original_fieldset: pe
            short: Shannon entropy calculation from the list of imported element names
              and types.
            type: long
        imports_names_var_entropy:
          field_details:
            dashed_name: process-pe-imports-names-var-entropy
            description: Variance for Shannon entropy calculation from the list of
              imported element names and types.
            flat_name: process.pe.imports_names_var_entropy
            format: number
            level: extended
            name: imports_names_var_entropy
            node_name: imports_names_var_entropy
            normalize: []
            original_fieldset: pe
            short: Variance for Shannon entropy calculation from the list of imported
              element names and types.
            type: long
        original_file_name:
          field_details:
            dashed_name: process-pe-original-file-name
            description: Internal name of the file, provided at compile-time.
            example: MSPAINT.EXE
            flat_name: process.pe.original_file_name
            ignore_above: 1024
            level: extended
            name: original_file_name
            node_name: original_file_name
            normalize: []
            original_fieldset: pe
            short: Internal name of the file, provided at compile-time.
            type: keyword
        pehash:
          field_details:
            dashed_name: process-pe-pehash
            description: 'A hash of the PE header and data from one or more PE sections.
              An pehash can be used to cluster files by transforming structural information
              about a file into a hash value.

              Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
            example: 73ff189b63cd6be375a7ff25179a38d347651975
            flat_name: process.pe.pehash
            ignore_above: 1024
            level: extended
            name: pehash
            node_name: pehash
            normalize: []
            original_fieldset: pe
            short: A hash of the PE header and data from one or more PE sections.
            type: keyword
        product:
          field_details:
            dashed_name: process-pe-product
            description: Internal product name of the file, provided at compile-time.
            example: "Microsoft\xAE Windows\xAE Operating System"
            flat_name: process.pe.product
            ignore_above: 1024
            level: extended
            name: product
            node_name: product
            normalize: []
            original_fieldset: pe
            short: Internal product name of the file, provided at compile-time.
            type: keyword
        sections:
          field_details:
            dashed_name: process-pe-sections
            description: 'An array containing an object for each section of the PE
              file.

              The keys that should be present in these objects are defined by sub-fields
              underneath `pe.sections.*`.'
            flat_name: process.pe.sections
            intermediate: false
            level: extended
            name: sections
            node_name: sections
            normalize:
            - array
            original_fieldset: pe
            short: Section information of the PE file.
            type: nested
          fields:
            entropy:
              field_details:
                dashed_name: process-pe-sections-entropy
                description: Shannon entropy calculation from the section.
                flat_name: process.pe.sections.entropy
                format: number
                level: extended
                name: sections.entropy
                node_name: entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the section.
                type: long
            name:
              field_details:
                dashed_name: process-pe-sections-name
                description: PE Section List name.
                flat_name: process.pe.sections.name
                ignore_above: 1024
                level: extended
                name: sections.name
                node_name: name
                normalize: []
                original_fieldset: pe
                short: PE Section List name.
                type: keyword
            physical_size:
              field_details:
                dashed_name: process-pe-sections-physical-size
                description: PE Section List physical size.
                flat_name: process.pe.sections.physical_size
                format: bytes
                level: extended
                name: sections.physical_size
                node_name: physical_size
                normalize: []
                original_fieldset: pe
                short: PE Section List physical size.
                type: long
            var_entropy:
              field_details:
                dashed_name: process-pe-sections-var-entropy
                description: Variance for Shannon entropy calculation from the section.
                flat_name: process.pe.sections.var_entropy
                format: number
                level: extended
                name: sections.var_entropy
                node_name: var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the section.
                type: long
            virtual_size:
              field_details:
                dashed_name: process-pe-sections-virtual-size
                description: PE Section List virtual size. This is always the same
                  as `physical_size`.
                flat_name: process.pe.sections.virtual_size
                format: string
                level: extended
                name: sections.virtual_size
                node_name: virtual_size
                normalize: []
                original_fieldset: pe
                short: PE Section List virtual size. This is always the same as `physical_size`.
                type: long
    pgid:
      field_details:
        dashed_name: process-pgid
        description: 'Deprecated for removal in next major version release. This field
          is superseded by `process.group_leader.pid`.

          Identifier of the group of processes the process belongs to.'
        flat_name: process.pgid
        format: string
        level: extended
        name: pgid
        node_name: pgid
        normalize: []
        short: Deprecated identifier of the group of processes the process belongs
          to.
        type: long
    pid:
      field_details:
        dashed_name: process-pid
        description: Process id.
        example: 4242
        flat_name: process.pid
        format: string
        level: core
        name: pid
        node_name: pid
        normalize: []
        short: Process id.
        type: long
    previous:
      field_details:
        dashed_name: process-process
        description: 'These fields contain information about a process.

          These fields can help you correlate metrics information with a process id/name
          from a log message.  The `process.pid` often stays in the metric itself
          and is copied to the global field for correlation.'
        flat_name: process.process
        intermediate: true
        name: previous
        node_name: process
        original_fieldset: process
        short: These fields contain information about a process.
        type: group
      fields:
        args:
          field_details:
            dashed_name: process-previous-args
            description: 'Array of process arguments, starting with the absolute path
              to the executable.

              May be filtered to protect sensitive information.'
            example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
            flat_name: process.previous.args
            ignore_above: 1024
            level: extended
            name: args
            node_name: args
            normalize:
            - array
            original_fieldset: process
            short: Array of process arguments.
            type: keyword
        args_count:
          field_details:
            dashed_name: process-previous-args-count
            description: 'Length of the process.args array.

              This field can be useful for querying or performing bucket analysis
              on how many arguments were provided to start a process. More arguments
              may be an indication of suspicious activity.'
            example: 4
            flat_name: process.previous.args_count
            level: extended
            name: args_count
            node_name: args_count
            normalize: []
            original_fieldset: process
            short: Length of the process.args array.
            type: long
        attested_groups:
          field_details:
            dashed_name: process-previous-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.previous.group
            intermediate: true
            name: attested_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-attested-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.attested_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-attested-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.previous.attested_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-attested-groups-name
                description: Name of the group.
                flat_name: process.previous.attested_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        attested_user:
          field_details:
            dashed_name: process-previous-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.previous.user
            intermediate: true
            name: attested_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-attested-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.attested_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-previous-attested-user-email
                description: User email address.
                flat_name: process.previous.attested_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-previous-attested-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.previous.attested_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.previous.attested_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-previous-attested-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.previous.attested_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-previous-attested-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.previous.attested_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-previous-attested-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.previous.attested_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-previous-attested-user-group-name
                    description: Name of the group.
                    flat_name: process.previous.attested_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-previous-attested-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.previous.attested_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-attested-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.previous.attested_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-attested-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.previous.attested_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.previous.attested_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-previous-attested-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.previous.attested_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-previous-attested-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.previous.attested_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-previous-attested-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.previous.attested_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-previous-attested-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.previous.attested_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-previous-attested-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.previous.attested_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-previous-attested-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.previous.attested_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-previous-attested-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.previous.attested_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-previous-attested-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.previous.attested_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        code_signature:
          field_details:
            dashed_name: process-previous-code-signature
            description: These fields contain information about binary code signatures.
            flat_name: process.previous.code_signature
            intermediate: true
            name: code_signature
            node_name: code_signature
            original_fieldset: code_signature
            short: These fields contain information about binary code signatures.
            type: group
          fields:
            digest_algorithm:
              field_details:
                dashed_name: process-previous-code-signature-digest-algorithm
                description: 'The hashing algorithm used to sign the process.

                  This value can distinguish signatures when a file is signed multiple
                  times by the same signer but with a different digest algorithm.'
                example: sha256
                flat_name: process.previous.code_signature.digest_algorithm
                ignore_above: 1024
                level: extended
                name: digest_algorithm
                node_name: digest_algorithm
                normalize: []
                original_fieldset: code_signature
                short: Hashing algorithm used to sign the process.
                type: keyword
            exists:
              field_details:
                dashed_name: process-previous-code-signature-exists
                description: Boolean to capture if a signature is present.
                example: 'true'
                flat_name: process.previous.code_signature.exists
                level: core
                name: exists
                node_name: exists
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if a signature is present.
                type: boolean
            signing_id:
              field_details:
                dashed_name: process-previous-code-signature-signing-id
                description: 'The identifier used to sign the process.

                  This is used to identify the application manufactured by a software
                  vendor. The field is relevant to Apple *OS only.'
                example: com.apple.xpc.proxy
                flat_name: process.previous.code_signature.signing_id
                ignore_above: 1024
                level: extended
                name: signing_id
                node_name: signing_id
                normalize: []
                original_fieldset: code_signature
                short: The identifier used to sign the process.
                type: keyword
            status:
              field_details:
                dashed_name: process-previous-code-signature-status
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT
                flat_name: process.previous.code_signature.status
                ignore_above: 1024
                level: extended
                name: status
                node_name: status
                normalize: []
                original_fieldset: code_signature
                short: Additional information about the certificate status.
                type: keyword
            subject_name:
              field_details:
                dashed_name: process-previous-code-signature-subject-name
                description: Subject name of the code signer
                example: Microsoft Corporation
                flat_name: process.previous.code_signature.subject_name
                ignore_above: 1024
                level: core
                name: subject_name
                node_name: subject_name
                normalize: []
                original_fieldset: code_signature
                short: Subject name of the code signer
                type: keyword
            team_id:
              field_details:
                dashed_name: process-previous-code-signature-team-id
                description: 'The team identifier used to sign the process.

                  This is used to identify the team or vendor of a software product.
                  The field is relevant to Apple *OS only.'
                example: EQHXZ8M8AV
                flat_name: process.previous.code_signature.team_id
                ignore_above: 1024
                level: extended
                name: team_id
                node_name: team_id
                normalize: []
                original_fieldset: code_signature
                short: The team identifier used to sign the process.
                type: keyword
            timestamp:
              field_details:
                dashed_name: process-previous-code-signature-timestamp
                description: Date and time when the code signature was generated and
                  signed.
                example: '2021-01-01T12:10:30Z'
                flat_name: process.previous.code_signature.timestamp
                level: extended
                name: timestamp
                node_name: timestamp
                normalize: []
                original_fieldset: code_signature
                short: When the signature was generated and signed.
                type: date
            trusted:
              field_details:
                dashed_name: process-previous-code-signature-trusted
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'
                flat_name: process.previous.code_signature.trusted
                level: extended
                name: trusted
                node_name: trusted
                normalize: []
                original_fieldset: code_signature
                short: Stores the trust status of the certificate chain.
                type: boolean
            valid:
              field_details:
                dashed_name: process-previous-code-signature-valid
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'
                flat_name: process.previous.code_signature.valid
                level: extended
                name: valid
                node_name: valid
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if the digital signature is verified against
                  the binary content.
                type: boolean
        command_line:
          field_details:
            dashed_name: process-previous-command-line
            description: 'Full command line that started the process, including the
              absolute path to the executable, and all arguments.

              Some arguments may be filtered to protect sensitive information.'
            example: /usr/bin/ssh -l user 10.0.0.16
            flat_name: process.previous.command_line
            level: extended
            multi_fields:
            - flat_name: process.previous.command_line.text
              name: text
              type: match_only_text
            name: command_line
            node_name: command_line
            normalize: []
            original_fieldset: process
            short: Full command line that started the process.
            type: wildcard
        elf:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-previous-elf
            description: These fields contain Linux Executable Linkable Format (ELF)
              metadata.
            flat_name: process.previous.elf
            intermediate: true
            name: elf
            node_name: elf
            original_fieldset: elf
            short: These fields contain Linux Executable Linkable Format (ELF) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-previous-elf-architecture
                description: Machine architecture of the ELF file.
                example: x86-64
                flat_name: process.previous.elf.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: elf
                short: Machine architecture of the ELF file.
                type: keyword
            byte_order:
              field_details:
                dashed_name: process-previous-elf-byte-order
                description: Byte sequence of ELF file.
                example: Little Endian
                flat_name: process.previous.elf.byte_order
                ignore_above: 1024
                level: extended
                name: byte_order
                node_name: byte_order
                normalize: []
                original_fieldset: elf
                short: Byte sequence of ELF file.
                type: keyword
            cpu_type:
              field_details:
                dashed_name: process-previous-elf-cpu-type
                description: CPU type of the ELF file.
                example: Intel
                flat_name: process.previous.elf.cpu_type
                ignore_above: 1024
                level: extended
                name: cpu_type
                node_name: cpu_type
                normalize: []
                original_fieldset: elf
                short: CPU type of the ELF file.
                type: keyword
            creation_date:
              field_details:
                dashed_name: process-previous-elf-creation-date
                description: Extracted when possible from the file's metadata. Indicates
                  when it was built or compiled. It can also be faked by malware creators.
                flat_name: process.previous.elf.creation_date
                level: extended
                name: creation_date
                node_name: creation_date
                normalize: []
                original_fieldset: elf
                short: Build or compile date.
                type: date
            exports:
              field_details:
                dashed_name: process-previous-elf-exports
                description: List of exported element names and types.
                flat_name: process.previous.elf.exports
                level: extended
                name: exports
                node_name: exports
                normalize:
                - array
                original_fieldset: elf
                short: List of exported element names and types.
                type: flattened
            go_import_hash:
              field_details:
                dashed_name: process-previous-elf-go-import-hash
                description: 'A hash of the Go language imports in an ELF file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.previous.elf.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the Go language imports in an ELF file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-previous-elf-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.previous.elf.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: elf
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-previous-elf-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.previous.elf.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-previous-elf-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.previous.elf.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-previous-elf-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.previous.elf.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: elf
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            header:
              field_details:
                dashed_name: process-previous-elf-header
                flat_name: process.previous.elf.header
                intermediate: true
                name: header
                node_name: header
                original_fieldset: elf
                type: object
              fields:
                abi_version:
                  field_details:
                    dashed_name: process-previous-elf-header-abi-version
                    description: Version of the ELF Application Binary Interface (ABI).
                    flat_name: process.previous.elf.header.abi_version
                    ignore_above: 1024
                    level: extended
                    name: header.abi_version
                    node_name: abi_version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF Application Binary Interface (ABI).
                    type: keyword
                class:
                  field_details:
                    dashed_name: process-previous-elf-header-class
                    description: Header class of the ELF file.
                    flat_name: process.previous.elf.header.class
                    ignore_above: 1024
                    level: extended
                    name: header.class
                    node_name: class
                    normalize: []
                    original_fieldset: elf
                    short: Header class of the ELF file.
                    type: keyword
                data:
                  field_details:
                    dashed_name: process-previous-elf-header-data
                    description: Data table of the ELF header.
                    flat_name: process.previous.elf.header.data
                    ignore_above: 1024
                    level: extended
                    name: header.data
                    node_name: data
                    normalize: []
                    original_fieldset: elf
                    short: Data table of the ELF header.
                    type: keyword
                entrypoint:
                  field_details:
                    dashed_name: process-previous-elf-header-entrypoint
                    description: Header entrypoint of the ELF file.
                    flat_name: process.previous.elf.header.entrypoint
                    format: string
                    level: extended
                    name: header.entrypoint
                    node_name: entrypoint
                    normalize: []
                    original_fieldset: elf
                    short: Header entrypoint of the ELF file.
                    type: long
                object_version:
                  field_details:
                    dashed_name: process-previous-elf-header-object-version
                    description: '"0x1" for original ELF files.'
                    flat_name: process.previous.elf.header.object_version
                    ignore_above: 1024
                    level: extended
                    name: header.object_version
                    node_name: object_version
                    normalize: []
                    original_fieldset: elf
                    short: '"0x1" for original ELF files.'
                    type: keyword
                os_abi:
                  field_details:
                    dashed_name: process-previous-elf-header-os-abi
                    description: Application Binary Interface (ABI) of the Linux OS.
                    flat_name: process.previous.elf.header.os_abi
                    ignore_above: 1024
                    level: extended
                    name: header.os_abi
                    node_name: os_abi
                    normalize: []
                    original_fieldset: elf
                    short: Application Binary Interface (ABI) of the Linux OS.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-previous-elf-header-type
                    description: Header type of the ELF file.
                    flat_name: process.previous.elf.header.type
                    ignore_above: 1024
                    level: extended
                    name: header.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: Header type of the ELF file.
                    type: keyword
                version:
                  field_details:
                    dashed_name: process-previous-elf-header-version
                    description: Version of the ELF header.
                    flat_name: process.previous.elf.header.version
                    ignore_above: 1024
                    level: extended
                    name: header.version
                    node_name: version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF header.
                    type: keyword
            import_hash:
              field_details:
                dashed_name: process-previous-elf-import-hash
                description: 'A hash of the imports in an ELF file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is an ELF implementation of the Windows PE imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.previous.elf.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the imports in an ELF file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-previous-elf-imports
                description: List of imported element names and types.
                flat_name: process.previous.elf.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: elf
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-previous-elf-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.previous.elf.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-previous-elf-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.previous.elf.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-previous-elf-sections
                description: 'An array containing an object for each section of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.sections.*`.'
                flat_name: process.previous.elf.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: elf
                short: Section information of the ELF file.
                type: nested
              fields:
                chi2:
                  field_details:
                    dashed_name: process-previous-elf-sections-chi2
                    description: Chi-square probability distribution of the section.
                    flat_name: process.previous.elf.sections.chi2
                    format: number
                    level: extended
                    name: sections.chi2
                    node_name: chi2
                    normalize: []
                    original_fieldset: elf
                    short: Chi-square probability distribution of the section.
                    type: long
                entropy:
                  field_details:
                    dashed_name: process-previous-elf-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.previous.elf.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the section.
                    type: long
                flags:
                  field_details:
                    dashed_name: process-previous-elf-sections-flags
                    description: ELF Section List flags.
                    flat_name: process.previous.elf.sections.flags
                    ignore_above: 1024
                    level: extended
                    name: sections.flags
                    node_name: flags
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List flags.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-previous-elf-sections-name
                    description: ELF Section List name.
                    flat_name: process.previous.elf.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List name.
                    type: keyword
                physical_offset:
                  field_details:
                    dashed_name: process-previous-elf-sections-physical-offset
                    description: ELF Section List offset.
                    flat_name: process.previous.elf.sections.physical_offset
                    ignore_above: 1024
                    level: extended
                    name: sections.physical_offset
                    node_name: physical_offset
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List offset.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-previous-elf-sections-physical-size
                    description: ELF Section List physical size.
                    flat_name: process.previous.elf.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List physical size.
                    type: long
                type:
                  field_details:
                    dashed_name: process-previous-elf-sections-type
                    description: ELF Section List type.
                    flat_name: process.previous.elf.sections.type
                    ignore_above: 1024
                    level: extended
                    name: sections.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List type.
                    type: keyword
                var_entropy:
                  field_details:
                    dashed_name: process-previous-elf-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.previous.elf.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_address:
                  field_details:
                    dashed_name: process-previous-elf-sections-virtual-address
                    description: ELF Section List virtual address.
                    flat_name: process.previous.elf.sections.virtual_address
                    format: string
                    level: extended
                    name: sections.virtual_address
                    node_name: virtual_address
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual address.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-previous-elf-sections-virtual-size
                    description: ELF Section List virtual size.
                    flat_name: process.previous.elf.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual size.
                    type: long
            segments:
              field_details:
                dashed_name: process-previous-elf-segments
                description: 'An array containing an object for each segment of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.segments.*`.'
                flat_name: process.previous.elf.segments
                intermediate: false
                level: extended
                name: segments
                node_name: segments
                normalize:
                - array
                original_fieldset: elf
                short: ELF object segment list.
                type: nested
              fields:
                sections:
                  field_details:
                    dashed_name: process-previous-elf-segments-sections
                    description: ELF object segment sections.
                    flat_name: process.previous.elf.segments.sections
                    ignore_above: 1024
                    level: extended
                    name: segments.sections
                    node_name: sections
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment sections.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-previous-elf-segments-type
                    description: ELF object segment type.
                    flat_name: process.previous.elf.segments.type
                    ignore_above: 1024
                    level: extended
                    name: segments.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment type.
                    type: keyword
            shared_libraries:
              field_details:
                dashed_name: process-previous-elf-shared-libraries
                description: List of shared libraries used by this ELF object.
                flat_name: process.previous.elf.shared_libraries
                ignore_above: 1024
                level: extended
                name: shared_libraries
                node_name: shared_libraries
                normalize:
                - array
                original_fieldset: elf
                short: List of shared libraries used by this ELF object.
                type: keyword
            telfhash:
              field_details:
                dashed_name: process-previous-elf-telfhash
                description: telfhash symbol hash for ELF file.
                flat_name: process.previous.elf.telfhash
                ignore_above: 1024
                level: extended
                name: telfhash
                node_name: telfhash
                normalize: []
                original_fieldset: elf
                short: telfhash hash for ELF file.
                type: keyword
        end:
          field_details:
            dashed_name: process-previous-end
            description: The time the process ended.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.previous.end
            level: extended
            name: end
            node_name: end
            normalize: []
            original_fieldset: process
            short: The time the process ended.
            type: date
        entity_id:
          field_details:
            dashed_name: process-previous-entity-id
            description: 'Unique identifier for the process.

              The implementation of this is specified by the data source, but some
              examples of what could be used here are a process-generated UUID, Sysmon
              Process GUIDs, or a hash of some uniquely identifying components of
              a process.

              Constructing a globally unique identifier is a common practice to mitigate
              PID reuse as well as to identify a specific process over time, across
              multiple monitored hosts.'
            example: c2c455d9f99375d
            flat_name: process.previous.entity_id
            ignore_above: 1024
            level: extended
            name: entity_id
            node_name: entity_id
            normalize: []
            original_fieldset: process
            short: Unique identifier for the process.
            type: keyword
        entry_meta:
          field_details:
            dashed_name: process-previous-entry-meta
            flat_name: process.previous.entry_meta
            intermediate: true
            name: entry_meta
            node_name: entry_meta
            original_fieldset: process
            type: object
          fields:
            source:
              field_details:
                dashed_name: process-previous-entry-meta-source
                description: 'Source fields capture details about the sender of a
                  network exchange/packet. These fields are populated from a network
                  event, packet, or other event containing details of a network transaction.

                  Source fields are usually populated in conjunction with destination
                  fields. The source and destination fields are considered the baseline
                  and should always be filled if an event contains source and destination
                  details from a network transaction. If the event also contains identification
                  of the client and server roles, then the client and server fields
                  should also be populated.'
                flat_name: process.previous.entry_meta.source
                intermediate: true
                name: source
                node_name: source
                original_fieldset: source
                short: Fields about the source side of a network connection, used
                  with destination.
                type: group
              fields:
                address:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-address
                    description: 'Some event source addresses are defined ambiguously.
                      The event will sometimes list an IP, a domain or a unix socket.  You
                      should always store the raw address in the `.address` field.

                      Then it should be duplicated to `.ip` or `.domain`, depending
                      on which one it is.'
                    flat_name: process.previous.entry_meta.source.address
                    ignore_above: 1024
                    level: extended
                    name: address
                    node_name: address
                    normalize: []
                    original_fieldset: source
                    short: Source network address.
                    type: keyword
                as:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-as
                    description: An autonomous system (AS) is a collection of connected
                      Internet Protocol (IP) routing prefixes under the control of
                      one or more network operators on behalf of a single administrative
                      entity or domain that presents a common, clearly defined routing
                      policy to the internet.
                    flat_name: process.previous.entry_meta.source.as
                    intermediate: true
                    name: as
                    node_name: as
                    original_fieldset: as
                    short: Fields describing an Autonomous System (Internet routing
                      prefix).
                    type: group
                  fields:
                    number:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-as-number
                        description: Unique number allocated to the autonomous system.
                          The autonomous system number (ASN) uniquely identifies each
                          network on the Internet.
                        example: 15169
                        flat_name: process.previous.entry_meta.source.as.number
                        level: extended
                        name: number
                        node_name: number
                        normalize: []
                        original_fieldset: as
                        short: Unique number allocated to the autonomous system.
                        type: long
                    organization:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-as-organization
                        flat_name: process.previous.entry_meta.source.as.organization
                        intermediate: true
                        name: organization
                        node_name: organization
                        original_fieldset: as
                        type: object
                      fields:
                        name:
                          field_details:
                            dashed_name: process-previous-entry-meta-source-as-organization-name
                            description: Organization name.
                            example: Google LLC
                            flat_name: process.previous.entry_meta.source.as.organization.name
                            ignore_above: 1024
                            level: extended
                            multi_fields:
                            - flat_name: process.previous.entry_meta.source.as.organization.name.text
                              name: text
                              type: match_only_text
                            name: organization.name
                            node_name: name
                            normalize: []
                            original_fieldset: as
                            short: Organization name.
                            type: keyword
                bytes:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-bytes
                    description: Bytes sent from the source to the destination.
                    example: 184
                    flat_name: process.previous.entry_meta.source.bytes
                    format: bytes
                    level: core
                    name: bytes
                    node_name: bytes
                    normalize: []
                    original_fieldset: source
                    short: Bytes sent from the source to the destination.
                    type: long
                domain:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-domain
                    description: 'The domain name of the source system.

                      This value may be a host name, a fully qualified domain name,
                      or another host naming format. The value may derive from the
                      original event or be added from enrichment.'
                    example: foo.example.com
                    flat_name: process.previous.entry_meta.source.domain
                    ignore_above: 1024
                    level: core
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: source
                    short: The domain name of the source.
                    type: keyword
                geo:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-geo
                    description: 'Geo fields can carry data about a specific location
                      related to an event.

                      This geolocation information can be derived from techniques
                      such as Geo IP, or be user-supplied.'
                    flat_name: process.previous.entry_meta.source.geo
                    intermediate: true
                    name: geo
                    node_name: geo
                    original_fieldset: geo
                    short: Fields describing a location.
                    type: group
                  fields:
                    city_name:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-city-name
                        description: City name.
                        example: Montreal
                        flat_name: process.previous.entry_meta.source.geo.city_name
                        ignore_above: 1024
                        level: core
                        name: city_name
                        node_name: city_name
                        normalize: []
                        original_fieldset: geo
                        short: City name.
                        type: keyword
                    continent_code:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-continent-code
                        description: Two-letter code representing continent's name.
                        example: NA
                        flat_name: process.previous.entry_meta.source.geo.continent_code
                        ignore_above: 1024
                        level: core
                        name: continent_code
                        node_name: continent_code
                        normalize: []
                        original_fieldset: geo
                        short: Continent code.
                        type: keyword
                    continent_name:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-continent-name
                        description: Name of the continent.
                        example: North America
                        flat_name: process.previous.entry_meta.source.geo.continent_name
                        ignore_above: 1024
                        level: core
                        name: continent_name
                        node_name: continent_name
                        normalize: []
                        original_fieldset: geo
                        short: Name of the continent.
                        type: keyword
                    country_iso_code:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-country-iso-code
                        description: Country ISO code.
                        example: CA
                        flat_name: process.previous.entry_meta.source.geo.country_iso_code
                        ignore_above: 1024
                        level: core
                        name: country_iso_code
                        node_name: country_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Country ISO code.
                        type: keyword
                    country_name:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-country-name
                        description: Country name.
                        example: Canada
                        flat_name: process.previous.entry_meta.source.geo.country_name
                        ignore_above: 1024
                        level: core
                        name: country_name
                        node_name: country_name
                        normalize: []
                        original_fieldset: geo
                        short: Country name.
                        type: keyword
                    location:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-location
                        description: Longitude and latitude.
                        example: '{ "lon": -73.614830, "lat": 45.505918 }'
                        flat_name: process.previous.entry_meta.source.geo.location
                        level: core
                        name: location
                        node_name: location
                        normalize: []
                        original_fieldset: geo
                        short: Longitude and latitude.
                        type: geo_point
                    name:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-name
                        description: 'User-defined description of a location, at the
                          level of granularity they care about.

                          Could be the name of their data centers, the floor number,
                          if this describes a local physical entity, city names.

                          Not typically used in automated geolocation.'
                        example: boston-dc
                        flat_name: process.previous.entry_meta.source.geo.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: geo
                        short: User-defined description of a location.
                        type: keyword
                    postal_code:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-postal-code
                        description: 'Postal code associated with the location.

                          Values appropriate for this field may also be known as a
                          postcode or ZIP code and will vary widely from country to
                          country.'
                        example: 94040
                        flat_name: process.previous.entry_meta.source.geo.postal_code
                        ignore_above: 1024
                        level: core
                        name: postal_code
                        node_name: postal_code
                        normalize: []
                        original_fieldset: geo
                        short: Postal code.
                        type: keyword
                    region_iso_code:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-region-iso-code
                        description: Region ISO code.
                        example: CA-QC
                        flat_name: process.previous.entry_meta.source.geo.region_iso_code
                        ignore_above: 1024
                        level: core
                        name: region_iso_code
                        node_name: region_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Region ISO code.
                        type: keyword
                    region_name:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-region-name
                        description: Region name.
                        example: Quebec
                        flat_name: process.previous.entry_meta.source.geo.region_name
                        ignore_above: 1024
                        level: core
                        name: region_name
                        node_name: region_name
                        normalize: []
                        original_fieldset: geo
                        short: Region name.
                        type: keyword
                    timezone:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-geo-timezone
                        description: The time zone of the location, such as IANA time
                          zone name.
                        example: America/Argentina/Buenos_Aires
                        flat_name: process.previous.entry_meta.source.geo.timezone
                        ignore_above: 1024
                        level: core
                        name: timezone
                        node_name: timezone
                        normalize: []
                        original_fieldset: geo
                        short: Time zone.
                        type: keyword
                ip:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-ip
                    description: IP address of the source (IPv4 or IPv6).
                    flat_name: process.previous.entry_meta.source.ip
                    level: core
                    name: ip
                    node_name: ip
                    normalize: []
                    original_fieldset: source
                    short: IP address of the source.
                    type: ip
                mac:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-mac
                    description: 'MAC address of the source.

                      The notation format from RFC 7042 is suggested: Each octet (that
                      is, 8-bit byte) is represented by two [uppercase] hexadecimal
                      digits giving the value of the octet as an unsigned integer.
                      Successive octets are separated by a hyphen.'
                    example: 00-00-5E-00-53-23
                    flat_name: process.previous.entry_meta.source.mac
                    ignore_above: 1024
                    level: core
                    name: mac
                    node_name: mac
                    normalize: []
                    original_fieldset: source
                    pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                    short: MAC address of the source.
                    type: keyword
                nat:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-nat
                    flat_name: process.previous.entry_meta.source.nat
                    intermediate: true
                    name: nat
                    node_name: nat
                    original_fieldset: source
                    type: object
                  fields:
                    ip:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-nat-ip
                        description: 'Translated ip of source based NAT sessions (e.g.
                          internal client to internet)

                          Typically connections traversing load balancers, firewalls,
                          or routers.'
                        flat_name: process.previous.entry_meta.source.nat.ip
                        level: extended
                        name: nat.ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: Source NAT ip
                        type: ip
                    port:
                      field_details:
                        dashed_name: process-previous-entry-meta-source-nat-port
                        description: 'Translated port of source based NAT sessions.
                          (e.g. internal client to internet)

                          Typically used with load balancers, firewalls, or routers.'
                        flat_name: process.previous.entry_meta.source.nat.port
                        format: string
                        level: extended
                        name: nat.port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Source NAT port
                        type: long
                packets:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-packets
                    description: Packets sent from the source to the destination.
                    example: 12
                    flat_name: process.previous.entry_meta.source.packets
                    level: core
                    name: packets
                    node_name: packets
                    normalize: []
                    original_fieldset: source
                    short: Packets sent from the source to the destination.
                    type: long
                port:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-port
                    description: Port of the source.
                    flat_name: process.previous.entry_meta.source.port
                    format: string
                    level: core
                    name: port
                    node_name: port
                    normalize: []
                    original_fieldset: source
                    short: Port of the source.
                    type: long
                registered_domain:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-registered-domain
                    description: 'The highest registered source domain, stripped of
                      the subdomain.

                      For example, the registered domain for "foo.example.com" is
                      "example.com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last two labels will not work well
                      for TLDs such as "co.uk".'
                    example: example.com
                    flat_name: process.previous.entry_meta.source.registered_domain
                    ignore_above: 1024
                    level: extended
                    name: registered_domain
                    node_name: registered_domain
                    normalize: []
                    original_fieldset: source
                    short: The highest registered source domain, stripped of the subdomain.
                    type: keyword
                subdomain:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-subdomain
                    description: 'The subdomain portion of a fully qualified domain
                      name includes all of the names except the host name under the
                      registered_domain.  In a partially qualified domain, or if the
                      the qualification level of the full name cannot be determined,
                      subdomain contains all of the names below the registered domain.

                      For example the subdomain portion of "www.east.mydomain.co.uk"
                      is "east". If the domain has multiple levels of subdomain, such
                      as "sub2.sub1.example.com", the subdomain field should contain
                      "sub2.sub1", with no trailing period.'
                    example: east
                    flat_name: process.previous.entry_meta.source.subdomain
                    ignore_above: 1024
                    level: extended
                    name: subdomain
                    node_name: subdomain
                    normalize: []
                    original_fieldset: source
                    short: The subdomain of the domain.
                    type: keyword
                top_level_domain:
                  field_details:
                    dashed_name: process-previous-entry-meta-source-top-level-domain
                    description: 'The effective top level domain (eTLD), also known
                      as the domain suffix, is the last part of the domain name. For
                      example, the top level domain for example.com is "com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last label will not work well for
                      effective TLDs such as "co.uk".'
                    example: co.uk
                    flat_name: process.previous.entry_meta.source.top_level_domain
                    ignore_above: 1024
                    level: extended
                    name: top_level_domain
                    node_name: top_level_domain
                    normalize: []
                    original_fieldset: source
                    short: The effective top level domain (com, org, net, co.uk).
                    type: keyword
            type:
              field_details:
                dashed_name: process-previous-entry-meta-type
                description: 'The entry type for the entry session leader. Values
                  include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                  console

                  Note: This field is only set on process.session_leader.'
                flat_name: process.previous.entry_meta.type
                ignore_above: 1024
                level: extended
                name: entry_meta.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The entry type for the entry session leader.
                type: keyword
        env_vars:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-previous-env-vars
            description: 'Array of environment variable bindings. Captured from a
              snapshot of the environment at the time of execution.

              May be filtered to protect sensitive information.'
            example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
            flat_name: process.previous.env_vars
            ignore_above: 1024
            level: extended
            name: env_vars
            node_name: env_vars
            normalize:
            - array
            original_fieldset: process
            short: Array of environment variable bindings.
            type: keyword
        executable:
          field_details:
            dashed_name: process-previous-executable
            description: Absolute path to the process executable.
            example: /usr/bin/ssh
            flat_name: process.previous.executable
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.previous.executable.text
              name: text
              type: match_only_text
            name: executable
            node_name: executable
            normalize: []
            original_fieldset: process
            short: Absolute path to the process executable.
            type: keyword
        exit_code:
          field_details:
            dashed_name: process-previous-exit-code
            description: 'The exit code of the process, if this is a termination event.

              The field should be absent if there is no exit code for the event (e.g.
              process start).'
            example: 137
            flat_name: process.previous.exit_code
            level: extended
            name: exit_code
            node_name: exit_code
            normalize: []
            original_fieldset: process
            short: The exit code of the process.
            type: long
        group:
          field_details:
            dashed_name: process-previous-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.previous.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.previous.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-group-name
                description: Name of the group.
                flat_name: process.previous.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-previous-hash
            description: 'The hash fields represent different bitwise hash algorithms
              and their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).

              Note that this fieldset is used for common hashes that may be computed
              over a range of generic bytes. Entity-specific hashes such as ja3 or
              imphash are placed in the fieldsets to which they relate (tls and pe,
              respectively).'
            flat_name: process.previous.hash
            intermediate: true
            name: hash
            node_name: hash
            original_fieldset: hash
            short: Hashes, usually file hashes.
            type: group
          fields:
            md5:
              field_details:
                dashed_name: process-previous-hash-md5
                description: MD5 hash.
                flat_name: process.previous.hash.md5
                ignore_above: 1024
                level: extended
                name: md5
                node_name: md5
                normalize: []
                original_fieldset: hash
                short: MD5 hash.
                type: keyword
            sha1:
              field_details:
                dashed_name: process-previous-hash-sha1
                description: SHA1 hash.
                flat_name: process.previous.hash.sha1
                ignore_above: 1024
                level: extended
                name: sha1
                node_name: sha1
                normalize: []
                original_fieldset: hash
                short: SHA1 hash.
                type: keyword
            sha256:
              field_details:
                dashed_name: process-previous-hash-sha256
                description: SHA256 hash.
                flat_name: process.previous.hash.sha256
                ignore_above: 1024
                level: extended
                name: sha256
                node_name: sha256
                normalize: []
                original_fieldset: hash
                short: SHA256 hash.
                type: keyword
            sha384:
              field_details:
                dashed_name: process-previous-hash-sha384
                description: SHA384 hash.
                flat_name: process.previous.hash.sha384
                ignore_above: 1024
                level: extended
                name: sha384
                node_name: sha384
                normalize: []
                original_fieldset: hash
                short: SHA384 hash.
                type: keyword
            sha512:
              field_details:
                dashed_name: process-previous-hash-sha512
                description: SHA512 hash.
                flat_name: process.previous.hash.sha512
                ignore_above: 1024
                level: extended
                name: sha512
                node_name: sha512
                normalize: []
                original_fieldset: hash
                short: SHA512 hash.
                type: keyword
            ssdeep:
              field_details:
                dashed_name: process-previous-hash-ssdeep
                description: SSDEEP hash.
                flat_name: process.previous.hash.ssdeep
                ignore_above: 1024
                level: extended
                name: ssdeep
                node_name: ssdeep
                normalize: []
                original_fieldset: hash
                short: SSDEEP hash.
                type: keyword
            tlsh:
              field_details:
                dashed_name: process-previous-hash-tlsh
                description: TLSH hash.
                flat_name: process.previous.hash.tlsh
                ignore_above: 1024
                level: extended
                name: tlsh
                node_name: tlsh
                normalize: []
                original_fieldset: hash
                short: TLSH hash.
                type: keyword
        interactive:
          field_details:
            dashed_name: process-previous-interactive
            description: 'Whether the process is connected to an interactive shell.

              Process interactivity is inferred from the processes file descriptors.
              If the character device for the controlling tty is the same as stdin
              and stderr for the process, the process is considered interactive.

              Note: A non-interactive process can belong to an interactive session
              and is simply one that does not have open file descriptors reading the
              controlling TTY on FD 0 (stdin) or writing to the controlling TTY on
              FD 2 (stderr). A backgrounded process is still considered interactive
              if stdin and stderr are connected to the controlling TTY.'
            example: true
            flat_name: process.previous.interactive
            level: extended
            name: interactive
            node_name: interactive
            normalize: []
            original_fieldset: process
            short: Whether the process is connected to an interactive shell.
            type: boolean
        io:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-previous-io
            description: 'A chunk of input or output (IO) from a single process.

              This field only appears on the top level process object, which is the
              process that wrote the output or read the input.'
            flat_name: process.previous.io
            intermediate: false
            level: extended
            name: io
            node_name: io
            normalize: []
            original_fieldset: process
            short: A chunk of input or output (IO) from a single process.
            type: object
          fields:
            bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-io-bytes-skipped
                description: An array of byte offsets and lengths denoting where IO
                  data has been skipped.
                flat_name: process.previous.io.bytes_skipped
                intermediate: false
                level: extended
                name: io.bytes_skipped
                node_name: bytes_skipped
                normalize:
                - array
                original_fieldset: process
                short: An array of byte offsets and lengths denoting where IO data
                  has been skipped.
                type: object
              fields:
                length:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-previous-io-bytes-skipped-length
                    description: The length of bytes skipped.
                    flat_name: process.previous.io.bytes_skipped.length
                    level: extended
                    name: io.bytes_skipped.length
                    node_name: length
                    normalize: []
                    original_fieldset: process
                    short: The length of bytes skipped.
                    type: long
                offset:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-previous-io-bytes-skipped-offset
                    description: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    flat_name: process.previous.io.bytes_skipped.offset
                    level: extended
                    name: io.bytes_skipped.offset
                    node_name: offset
                    normalize: []
                    original_fieldset: process
                    short: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    type: long
            max_bytes_per_process_exceeded:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-io-max-bytes-per-process-exceeded
                description: If true, the process producing the output has exceeded
                  the max_kilobytes_per_process configuration setting.
                flat_name: process.previous.io.max_bytes_per_process_exceeded
                level: extended
                name: io.max_bytes_per_process_exceeded
                node_name: max_bytes_per_process_exceeded
                normalize: []
                original_fieldset: process
                short: If true, the process producing the output has exceeded the
                  max_kilobytes_per_process configuration setting.
                type: boolean
            text:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-io-text
                description: 'A chunk of output or input sanitized to UTF-8.

                  Best efforts are made to ensure complete lines are captured in these
                  events. Assumptions should NOT be made that multiple lines will
                  appear in the same event. TTY output may contain terminal control
                  codes such as for cursor movement, so some string queries may not
                  match due to terminal codes inserted between characters of a word.'
                flat_name: process.previous.io.text
                level: extended
                name: io.text
                node_name: text
                normalize: []
                original_fieldset: process
                short: A chunk of output or input sanitized to UTF-8.
                type: wildcard
            total_bytes_captured:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-io-total-bytes-captured
                description: The total number of bytes captured in this event.
                flat_name: process.previous.io.total_bytes_captured
                level: extended
                name: io.total_bytes_captured
                node_name: total_bytes_captured
                normalize: []
                original_fieldset: process
                short: The total number of bytes captured in this event.
                type: long
            total_bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-io-total-bytes-skipped
                description: The total number of bytes that were not captured due
                  to implementation restrictions such as buffer size limits. Implementors
                  should strive to ensure this value is always zero
                flat_name: process.previous.io.total_bytes_skipped
                level: extended
                name: io.total_bytes_skipped
                node_name: total_bytes_skipped
                normalize: []
                original_fieldset: process
                short: The total number of bytes that were not captured due to implementation
                  restrictions such as buffer size limits.
                type: long
            type:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-io-type
                description: 'The type of object on which the IO action (read or write)
                  was taken.

                  Currently only ''tty'' is supported. Other types may be added in
                  the future for ''file'' and ''socket'' support.'
                flat_name: process.previous.io.type
                ignore_above: 1024
                level: extended
                name: io.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The type of object on which the IO action (read or write) was
                  taken.
                type: keyword
        macho:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-previous-macho
            description: These fields contain Mac OS Mach Object file format (Mach-O)
              metadata.
            flat_name: process.previous.macho
            intermediate: true
            name: macho
            node_name: macho
            original_fieldset: macho
            short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
            type: group
          fields:
            go_import_hash:
              field_details:
                dashed_name: process-previous-macho-go-import-hash
                description: 'A hash of the Go language imports in a Mach-O file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.previous.macho.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the Go language imports in a Mach-O file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-previous-macho-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.previous.macho.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: macho
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-previous-macho-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.previous.macho.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-previous-macho-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.previous.macho.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-previous-macho-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.previous.macho.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: macho
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            import_hash:
              field_details:
                dashed_name: process-previous-macho-import-hash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a synonym for symhash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.previous.macho.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-previous-macho-imports
                description: List of imported element names and types.
                flat_name: process.previous.macho.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: macho
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-previous-macho-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.previous.macho.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-previous-macho-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.previous.macho.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-previous-macho-sections
                description: 'An array containing an object for each section of the
                  Mach-O file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `macho.sections.*`.'
                flat_name: process.previous.macho.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: macho
                short: Section information of the Mach-O file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-previous-macho-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.previous.macho.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-previous-macho-sections-name
                    description: Mach-O Section List name.
                    flat_name: process.previous.macho.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-previous-macho-sections-physical-size
                    description: Mach-O Section List physical size.
                    flat_name: process.previous.macho.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-previous-macho-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.previous.macho.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-previous-macho-sections-virtual-size
                    description: Mach-O Section List virtual size. This is always
                      the same as `physical_size`.
                    flat_name: process.previous.macho.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List virtual size. This is always the same
                      as `physical_size`.
                    type: long
            symhash:
              field_details:
                dashed_name: process-previous-macho-symhash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a Mach-O implementation of the Windows PE imphash'
                example: d3ccf195b62a9279c3c19af1080497ec
                flat_name: process.previous.macho.symhash
                ignore_above: 1024
                level: extended
                name: symhash
                node_name: symhash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
        name:
          field_details:
            dashed_name: process-previous-name
            description: 'Process name.

              Sometimes called program name or similar.'
            example: ssh
            flat_name: process.previous.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.previous.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: process
            short: Process name.
            type: keyword
        pe:
          field_details:
            dashed_name: process-previous-pe
            description: These fields contain Windows Portable Executable (PE) metadata.
            flat_name: process.previous.pe
            intermediate: true
            name: pe
            node_name: pe
            original_fieldset: pe
            short: These fields contain Windows Portable Executable (PE) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-previous-pe-architecture
                description: CPU architecture target for the file.
                example: x64
                flat_name: process.previous.pe.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: pe
                short: CPU architecture target for the file.
                type: keyword
            company:
              field_details:
                dashed_name: process-previous-pe-company
                description: Internal company name of the file, provided at compile-time.
                example: Microsoft Corporation
                flat_name: process.previous.pe.company
                ignore_above: 1024
                level: extended
                name: company
                node_name: company
                normalize: []
                original_fieldset: pe
                short: Internal company name of the file, provided at compile-time.
                type: keyword
            description:
              field_details:
                dashed_name: process-previous-pe-description
                description: Internal description of the file, provided at compile-time.
                example: Paint
                flat_name: process.previous.pe.description
                ignore_above: 1024
                level: extended
                name: description
                node_name: description
                normalize: []
                original_fieldset: pe
                short: Internal description of the file, provided at compile-time.
                type: keyword
            file_version:
              field_details:
                dashed_name: process-previous-pe-file-version
                description: Internal version of the file, provided at compile-time.
                example: 6.3.9600.17415
                flat_name: process.previous.pe.file_version
                ignore_above: 1024
                level: extended
                name: file_version
                node_name: file_version
                normalize: []
                original_fieldset: pe
                short: Process name.
                type: keyword
            go_import_hash:
              field_details:
                dashed_name: process-previous-pe-go-import-hash
                description: 'A hash of the Go language imports in a PE file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.previous.pe.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the Go language imports in a PE file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-previous-pe-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.previous.pe.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: pe
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-previous-pe-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.previous.pe.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-previous-pe-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.previous.pe.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-previous-pe-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.previous.pe.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: pe
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            imphash:
              field_details:
                dashed_name: process-previous-pe-imphash
                description: 'A hash of the imports in a PE file. An imphash -- or
                  import hash -- can be used to fingerprint binaries even after recompilation
                  or other code-level transformations have occurred, which would change
                  more traditional hash values.

                  Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                example: 0c6803c4e922103c4dca5963aad36ddf
                flat_name: process.previous.pe.imphash
                ignore_above: 1024
                level: extended
                name: imphash
                node_name: imphash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            import_hash:
              field_details:
                dashed_name: process-previous-pe-import-hash
                description: 'A hash of the imports in a PE file. An import hash can
                  be used to fingerprint binaries even after recompilation or other
                  code-level transformations have occurred, which would change more
                  traditional hash values.

                  This is a synonym for imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.previous.pe.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-previous-pe-imports
                description: List of imported element names and types.
                flat_name: process.previous.pe.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: pe
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-previous-pe-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.previous.pe.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-previous-pe-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.previous.pe.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            original_file_name:
              field_details:
                dashed_name: process-previous-pe-original-file-name
                description: Internal name of the file, provided at compile-time.
                example: MSPAINT.EXE
                flat_name: process.previous.pe.original_file_name
                ignore_above: 1024
                level: extended
                name: original_file_name
                node_name: original_file_name
                normalize: []
                original_fieldset: pe
                short: Internal name of the file, provided at compile-time.
                type: keyword
            pehash:
              field_details:
                dashed_name: process-previous-pe-pehash
                description: 'A hash of the PE header and data from one or more PE
                  sections. An pehash can be used to cluster files by transforming
                  structural information about a file into a hash value.

                  Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                example: 73ff189b63cd6be375a7ff25179a38d347651975
                flat_name: process.previous.pe.pehash
                ignore_above: 1024
                level: extended
                name: pehash
                node_name: pehash
                normalize: []
                original_fieldset: pe
                short: A hash of the PE header and data from one or more PE sections.
                type: keyword
            product:
              field_details:
                dashed_name: process-previous-pe-product
                description: Internal product name of the file, provided at compile-time.
                example: "Microsoft\xAE Windows\xAE Operating System"
                flat_name: process.previous.pe.product
                ignore_above: 1024
                level: extended
                name: product
                node_name: product
                normalize: []
                original_fieldset: pe
                short: Internal product name of the file, provided at compile-time.
                type: keyword
            sections:
              field_details:
                dashed_name: process-previous-pe-sections
                description: 'An array containing an object for each section of the
                  PE file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `pe.sections.*`.'
                flat_name: process.previous.pe.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: pe
                short: Section information of the PE file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-previous-pe-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.previous.pe.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-previous-pe-sections-name
                    description: PE Section List name.
                    flat_name: process.previous.pe.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-previous-pe-sections-physical-size
                    description: PE Section List physical size.
                    flat_name: process.previous.pe.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-previous-pe-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.previous.pe.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-previous-pe-sections-virtual-size
                    description: PE Section List virtual size. This is always the
                      same as `physical_size`.
                    flat_name: process.previous.pe.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List virtual size. This is always the same as
                      `physical_size`.
                    type: long
        pgid:
          field_details:
            dashed_name: process-previous-pgid
            description: 'Deprecated for removal in next major version release. This
              field is superseded by `process.group_leader.pid`.

              Identifier of the group of processes the process belongs to.'
            flat_name: process.previous.pgid
            format: string
            level: extended
            name: pgid
            node_name: pgid
            normalize: []
            original_fieldset: process
            short: Deprecated identifier of the group of processes the process belongs
              to.
            type: long
        pid:
          field_details:
            dashed_name: process-previous-pid
            description: Process id.
            example: 4242
            flat_name: process.previous.pid
            format: string
            level: core
            name: pid
            node_name: pid
            normalize: []
            original_fieldset: process
            short: Process id.
            type: long
        real_group:
          field_details:
            dashed_name: process-previous-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.previous.group
            intermediate: true
            name: real_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-real-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.real_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-real-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.previous.real_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-real-group-name
                description: Name of the group.
                flat_name: process.previous.real_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        real_user:
          field_details:
            dashed_name: process-previous-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.previous.user
            intermediate: true
            name: real_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-real-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.real_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-previous-real-user-email
                description: User email address.
                flat_name: process.previous.real_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-previous-real-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.previous.real_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.previous.real_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-previous-real-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.previous.real_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-previous-real-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.previous.real_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-previous-real-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.previous.real_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-previous-real-user-group-name
                    description: Name of the group.
                    flat_name: process.previous.real_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-previous-real-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.previous.real_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-real-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.previous.real_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-real-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.previous.real_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.previous.real_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-previous-real-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.previous.real_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-previous-real-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.previous.real_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-previous-real-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.previous.real_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-previous-real-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.previous.real_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-previous-real-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.previous.real_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-previous-real-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.previous.real_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-previous-real-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.previous.real_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-previous-real-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.previous.real_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        same_as_process:
          field_details:
            dashed_name: process-previous-same-as-process
            description: 'This boolean is used to identify if a leader process is
              the same as the top level process.

              For example, if `process.group_leader.same_as_process = true`, it means
              the process event in question is the leader of its process group. Details
              under `process.*` like `pid` would be the same under `process.group_leader.*`
              The same applies for both `process.session_leader` and `process.entry_leader`.

              This field exists to the benefit of EQL and other rule engines since
              it''s not possible to compare equality between two fields in a single
              document. e.g `process.entity_id` = `process.group_leader.entity_id`
              (top level process is the process group leader) OR `process.entity_id`
              = `process.entry_leader.entity_id` (top level process is the entry session
              leader)

              Instead these rules could be written like: `process.group_leader.same_as_process:
              true` OR `process.entry_leader.same_as_process: true`

              Note: This field is only set on `process.entry_leader`, `process.session_leader`
              and `process.group_leader`.'
            example: true
            flat_name: process.previous.same_as_process
            level: extended
            name: same_as_process
            node_name: same_as_process
            normalize: []
            original_fieldset: process
            short: This boolean is used to identify if a leader process is the same
              as the top level process.
            type: boolean
        saved_group:
          field_details:
            dashed_name: process-previous-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.previous.group
            intermediate: true
            name: saved_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-saved-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.saved_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-saved-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.previous.saved_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-saved-group-name
                description: Name of the group.
                flat_name: process.previous.saved_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        saved_user:
          field_details:
            dashed_name: process-previous-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.previous.user
            intermediate: true
            name: saved_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-saved-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.saved_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-previous-saved-user-email
                description: User email address.
                flat_name: process.previous.saved_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-previous-saved-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.previous.saved_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.previous.saved_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-previous-saved-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.previous.saved_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-previous-saved-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.previous.saved_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-previous-saved-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.previous.saved_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-previous-saved-user-group-name
                    description: Name of the group.
                    flat_name: process.previous.saved_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-previous-saved-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.previous.saved_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-saved-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.previous.saved_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-saved-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.previous.saved_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.previous.saved_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-previous-saved-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.previous.saved_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-previous-saved-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.previous.saved_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-previous-saved-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.previous.saved_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-previous-saved-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.previous.saved_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-previous-saved-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.previous.saved_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-previous-saved-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.previous.saved_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-previous-saved-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.previous.saved_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-previous-saved-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.previous.saved_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        start:
          field_details:
            dashed_name: process-previous-start
            description: The time the process started.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.previous.start
            level: extended
            name: start
            node_name: start
            normalize: []
            original_fieldset: process
            short: The time the process started.
            type: date
        supplemental_groups:
          field_details:
            dashed_name: process-previous-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.previous.group
            intermediate: true
            name: supplemental_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-supplemental-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.supplemental_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-supplemental-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.previous.supplemental_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-supplemental-groups-name
                description: Name of the group.
                flat_name: process.previous.supplemental_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        thread:
          field_details:
            dashed_name: process-previous-thread
            flat_name: process.previous.thread
            intermediate: true
            name: thread
            node_name: thread
            original_fieldset: process
            type: object
          fields:
            capabilities:
              field_details:
                dashed_name: process-previous-thread-capabilities
                flat_name: process.previous.thread.capabilities
                intermediate: true
                name: thread.capabilities
                node_name: capabilities
                original_fieldset: process
                type: object
              fields:
                effective:
                  field_details:
                    dashed_name: process-previous-thread-capabilities-effective
                    description: This is the set of capabilities used by the kernel
                      to perform permission checks for the thread.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.previous.thread.capabilities.effective
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.effective
                    node_name: effective
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities used for permission checks.
                    type: keyword
                permitted:
                  field_details:
                    dashed_name: process-previous-thread-capabilities-permitted
                    description: This is a limiting superset for the effective capabilities
                      that the thread may assume.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.previous.thread.capabilities.permitted
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.permitted
                    node_name: permitted
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities a thread could assume.
                    type: keyword
            id:
              field_details:
                dashed_name: process-previous-thread-id
                description: Thread ID.
                example: 4242
                flat_name: process.previous.thread.id
                format: string
                level: extended
                name: thread.id
                node_name: id
                normalize: []
                original_fieldset: process
                short: Thread ID.
                type: long
            name:
              field_details:
                dashed_name: process-previous-thread-name
                description: Thread name.
                example: thread-0
                flat_name: process.previous.thread.name
                ignore_above: 1024
                level: extended
                name: thread.name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Thread name.
                type: keyword
        title:
          field_details:
            dashed_name: process-previous-title
            description: 'Process title.

              The proctitle, some times the same as process name. Can also be different:
              for example a browser setting its title to the web page currently opened.'
            flat_name: process.previous.title
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.previous.title.text
              name: text
              type: match_only_text
            name: title
            node_name: title
            normalize: []
            original_fieldset: process
            short: Process title.
            type: keyword
        tty:
          field_details:
            dashed_name: process-previous-tty
            description: Information about the controlling TTY device. If set, the
              process belongs to an interactive session.
            flat_name: process.previous.tty
            intermediate: false
            level: extended
            name: tty
            node_name: tty
            normalize: []
            original_fieldset: process
            short: Information about the controlling TTY device.
            type: object
          fields:
            char_device:
              field_details:
                dashed_name: process-previous-tty-char-device
                flat_name: process.previous.tty.char_device
                intermediate: true
                name: tty.char_device
                node_name: char_device
                original_fieldset: process
                type: object
              fields:
                major:
                  field_details:
                    dashed_name: process-previous-tty-char-device-major
                    description: The major number identifies the driver associated
                      with the device. The character device's major and minor numbers
                      can be algorithmically combined to produce the more familiar
                      terminal identifiers such as "ttyS0" and "pts/0". For more details,
                      please refer to the Linux kernel documentation.
                    example: 4
                    flat_name: process.previous.tty.char_device.major
                    level: extended
                    name: tty.char_device.major
                    node_name: major
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's major number.
                    type: long
                minor:
                  field_details:
                    dashed_name: process-previous-tty-char-device-minor
                    description: "The minor number is used only by the driver specified\
                      \ by the major number; other parts of the kernel don\u2019t\
                      \ use it, and merely pass it along to the driver. It is common\
                      \ for a driver to control several devices; the minor number\
                      \ provides a way for the driver to differentiate among them."
                    example: 1
                    flat_name: process.previous.tty.char_device.minor
                    level: extended
                    name: tty.char_device.minor
                    node_name: minor
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's minor number.
                    type: long
            columns:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-tty-columns
                description: 'The number of character columns per line. e.g terminal
                  width

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 80
                flat_name: process.previous.tty.columns
                level: extended
                name: tty.columns
                node_name: columns
                normalize: []
                original_fieldset: process
                short: The number of character columns per line. e.g terminal width
                type: long
            rows:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-previous-tty-rows
                description: 'The number of character rows in the terminal. e.g terminal
                  height

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 24
                flat_name: process.previous.tty.rows
                level: extended
                name: tty.rows
                node_name: rows
                normalize: []
                original_fieldset: process
                short: The number of character rows in the terminal. e.g terminal
                  height
                type: long
        uptime:
          field_details:
            dashed_name: process-previous-uptime
            description: Seconds the process has been up.
            example: 1325
            flat_name: process.previous.uptime
            level: extended
            name: uptime
            node_name: uptime
            normalize: []
            original_fieldset: process
            short: Seconds the process has been up.
            type: long
        user:
          field_details:
            dashed_name: process-previous-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.previous.user
            intermediate: true
            name: user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-previous-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.previous.user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-previous-user-email
                description: User email address.
                flat_name: process.previous.user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-previous-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.previous.user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.previous.user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-previous-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.previous.user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-previous-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.previous.user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-previous-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.previous.user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-previous-user-group-name
                    description: Name of the group.
                    flat_name: process.previous.user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-previous-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.previous.user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-previous-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.previous.user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-previous-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.previous.user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.previous.user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-previous-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.previous.user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-previous-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.previous.user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-previous-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.previous.user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-previous-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.previous.user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-previous-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.previous.user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-previous-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.previous.user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-previous-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.previous.user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-previous-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.previous.user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        vpid:
          field_details:
            dashed_name: process-previous-vpid
            description: 'Virtual process id.

              The process id within a pid namespace. This is not necessarily unique
              across all processes on the host but it is unique within the process
              namespace that the process exists within.'
            example: 4242
            flat_name: process.previous.vpid
            format: string
            level: core
            name: vpid
            node_name: vpid
            normalize: []
            original_fieldset: process
            short: Virtual process id.
            type: long
        working_directory:
          field_details:
            dashed_name: process-previous-working-directory
            description: The working directory of the process.
            example: /home/alice
            flat_name: process.previous.working_directory
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.previous.working_directory.text
              name: text
              type: match_only_text
            name: working_directory
            node_name: working_directory
            normalize: []
            original_fieldset: process
            short: The working directory of the process.
            type: keyword
    real_group:
      field_details:
        dashed_name: process-group
        description: The group fields are meant to represent groups that are relevant
          to the event.
        flat_name: process.group
        intermediate: true
        name: real_group
        node_name: group
        original_fieldset: group
        short: User's group relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-real-group-domain
            description: 'Name of the directory the group is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.real_group.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: group
            short: Name of the directory the group is a member of.
            type: keyword
        id:
          field_details:
            dashed_name: process-real-group-id
            description: Unique identifier for the group on the system/platform.
            flat_name: process.real_group.id
            ignore_above: 1024
            level: extended
            name: id
            node_name: id
            normalize: []
            original_fieldset: group
            short: Unique identifier for the group on the system/platform.
            type: keyword
        name:
          field_details:
            dashed_name: process-real-group-name
            description: Name of the group.
            flat_name: process.real_group.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: group
            short: Name of the group.
            type: keyword
    real_user:
      field_details:
        dashed_name: process-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: process.user
        intermediate: true
        name: real_user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-real-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.real_user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: process-real-user-email
            description: User email address.
            flat_name: process.real_user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: process-real-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: process.real_user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.real_user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: process-real-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.real_user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-real-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.real_user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-real-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.real_user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-real-user-group-name
                description: Name of the group.
                flat_name: process.real_user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-real-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: process.real_user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: process-real-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: process.real_user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: process-real-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: process.real_user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: process.real_user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-real-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: process.real_user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: process-real-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: process.real_user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: process-real-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: process.real_user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: process-real-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: process.real_user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: process-real-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: process.real_user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: process-real-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: process.real_user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: process-real-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: process.real_user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: process-real-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: process.real_user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
    same_as_process:
      field_details:
        dashed_name: process-same-as-process
        description: 'This boolean is used to identify if a leader process is the
          same as the top level process.

          For example, if `process.group_leader.same_as_process = true`, it means
          the process event in question is the leader of its process group. Details
          under `process.*` like `pid` would be the same under `process.group_leader.*`
          The same applies for both `process.session_leader` and `process.entry_leader`.

          This field exists to the benefit of EQL and other rule engines since it''s
          not possible to compare equality between two fields in a single document.
          e.g `process.entity_id` = `process.group_leader.entity_id` (top level process
          is the process group leader) OR `process.entity_id` = `process.entry_leader.entity_id`
          (top level process is the entry session leader)

          Instead these rules could be written like: `process.group_leader.same_as_process:
          true` OR `process.entry_leader.same_as_process: true`

          Note: This field is only set on `process.entry_leader`, `process.session_leader`
          and `process.group_leader`.'
        example: true
        flat_name: process.same_as_process
        level: extended
        name: same_as_process
        node_name: same_as_process
        normalize: []
        short: This boolean is used to identify if a leader process is the same as
          the top level process.
        type: boolean
    saved_group:
      field_details:
        dashed_name: process-group
        description: The group fields are meant to represent groups that are relevant
          to the event.
        flat_name: process.group
        intermediate: true
        name: saved_group
        node_name: group
        original_fieldset: group
        short: User's group relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-saved-group-domain
            description: 'Name of the directory the group is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.saved_group.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: group
            short: Name of the directory the group is a member of.
            type: keyword
        id:
          field_details:
            dashed_name: process-saved-group-id
            description: Unique identifier for the group on the system/platform.
            flat_name: process.saved_group.id
            ignore_above: 1024
            level: extended
            name: id
            node_name: id
            normalize: []
            original_fieldset: group
            short: Unique identifier for the group on the system/platform.
            type: keyword
        name:
          field_details:
            dashed_name: process-saved-group-name
            description: Name of the group.
            flat_name: process.saved_group.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: group
            short: Name of the group.
            type: keyword
    saved_user:
      field_details:
        dashed_name: process-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: process.user
        intermediate: true
        name: saved_user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-saved-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.saved_user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: process-saved-user-email
            description: User email address.
            flat_name: process.saved_user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: process-saved-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: process.saved_user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.saved_user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: process-saved-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.saved_user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-saved-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.saved_user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-saved-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.saved_user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-saved-user-group-name
                description: Name of the group.
                flat_name: process.saved_user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-saved-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: process.saved_user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: process-saved-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: process.saved_user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: process-saved-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: process.saved_user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: process.saved_user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-saved-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: process.saved_user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: process-saved-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: process.saved_user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: process-saved-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: process.saved_user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: process-saved-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: process.saved_user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: process-saved-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: process.saved_user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: process-saved-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: process.saved_user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: process-saved-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: process.saved_user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: process-saved-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: process.saved_user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
    session_leader:
      field_details:
        dashed_name: process-process
        description: 'These fields contain information about a process.

          These fields can help you correlate metrics information with a process id/name
          from a log message.  The `process.pid` often stays in the metric itself
          and is copied to the global field for correlation.'
        flat_name: process.process
        intermediate: true
        name: session_leader
        node_name: process
        original_fieldset: process
        short: These fields contain information about a process.
        type: group
      fields:
        args:
          field_details:
            dashed_name: process-session-leader-args
            description: 'Array of process arguments, starting with the absolute path
              to the executable.

              May be filtered to protect sensitive information.'
            example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
            flat_name: process.session_leader.args
            ignore_above: 1024
            level: extended
            name: args
            node_name: args
            normalize:
            - array
            original_fieldset: process
            short: Array of process arguments.
            type: keyword
        args_count:
          field_details:
            dashed_name: process-session-leader-args-count
            description: 'Length of the process.args array.

              This field can be useful for querying or performing bucket analysis
              on how many arguments were provided to start a process. More arguments
              may be an indication of suspicious activity.'
            example: 4
            flat_name: process.session_leader.args_count
            level: extended
            name: args_count
            node_name: args_count
            normalize: []
            original_fieldset: process
            short: Length of the process.args array.
            type: long
        attested_groups:
          field_details:
            dashed_name: process-session-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.session_leader.group
            intermediate: true
            name: attested_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-attested-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.attested_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-attested-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.session_leader.attested_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-attested-groups-name
                description: Name of the group.
                flat_name: process.session_leader.attested_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        attested_user:
          field_details:
            dashed_name: process-session-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.session_leader.user
            intermediate: true
            name: attested_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-attested-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.attested_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-session-leader-attested-user-email
                description: User email address.
                flat_name: process.session_leader.attested_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-session-leader-attested-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.session_leader.attested_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.attested_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-session-leader-attested-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.attested_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-attested-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.attested_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-attested-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.attested_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-attested-user-group-name
                    description: Name of the group.
                    flat_name: process.session_leader.attested_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-session-leader-attested-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.session_leader.attested_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-attested-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.session_leader.attested_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-attested-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.session_leader.attested_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.session_leader.attested_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-session-leader-attested-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.session_leader.attested_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-session-leader-attested-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.session_leader.attested_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-session-leader-attested-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.session_leader.attested_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-session-leader-attested-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.session_leader.attested_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-session-leader-attested-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.session_leader.attested_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-session-leader-attested-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.session_leader.attested_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-session-leader-attested-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.session_leader.attested_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-session-leader-attested-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.session_leader.attested_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        code_signature:
          field_details:
            dashed_name: process-session-leader-code-signature
            description: These fields contain information about binary code signatures.
            flat_name: process.session_leader.code_signature
            intermediate: true
            name: code_signature
            node_name: code_signature
            original_fieldset: code_signature
            short: These fields contain information about binary code signatures.
            type: group
          fields:
            digest_algorithm:
              field_details:
                dashed_name: process-session-leader-code-signature-digest-algorithm
                description: 'The hashing algorithm used to sign the process.

                  This value can distinguish signatures when a file is signed multiple
                  times by the same signer but with a different digest algorithm.'
                example: sha256
                flat_name: process.session_leader.code_signature.digest_algorithm
                ignore_above: 1024
                level: extended
                name: digest_algorithm
                node_name: digest_algorithm
                normalize: []
                original_fieldset: code_signature
                short: Hashing algorithm used to sign the process.
                type: keyword
            exists:
              field_details:
                dashed_name: process-session-leader-code-signature-exists
                description: Boolean to capture if a signature is present.
                example: 'true'
                flat_name: process.session_leader.code_signature.exists
                level: core
                name: exists
                node_name: exists
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if a signature is present.
                type: boolean
            signing_id:
              field_details:
                dashed_name: process-session-leader-code-signature-signing-id
                description: 'The identifier used to sign the process.

                  This is used to identify the application manufactured by a software
                  vendor. The field is relevant to Apple *OS only.'
                example: com.apple.xpc.proxy
                flat_name: process.session_leader.code_signature.signing_id
                ignore_above: 1024
                level: extended
                name: signing_id
                node_name: signing_id
                normalize: []
                original_fieldset: code_signature
                short: The identifier used to sign the process.
                type: keyword
            status:
              field_details:
                dashed_name: process-session-leader-code-signature-status
                description: 'Additional information about the certificate status.

                  This is useful for logging cryptographic errors with the certificate
                  validity or trust status. Leave unpopulated if the validity or trust
                  of the certificate was unchecked.'
                example: ERROR_UNTRUSTED_ROOT
                flat_name: process.session_leader.code_signature.status
                ignore_above: 1024
                level: extended
                name: status
                node_name: status
                normalize: []
                original_fieldset: code_signature
                short: Additional information about the certificate status.
                type: keyword
            subject_name:
              field_details:
                dashed_name: process-session-leader-code-signature-subject-name
                description: Subject name of the code signer
                example: Microsoft Corporation
                flat_name: process.session_leader.code_signature.subject_name
                ignore_above: 1024
                level: core
                name: subject_name
                node_name: subject_name
                normalize: []
                original_fieldset: code_signature
                short: Subject name of the code signer
                type: keyword
            team_id:
              field_details:
                dashed_name: process-session-leader-code-signature-team-id
                description: 'The team identifier used to sign the process.

                  This is used to identify the team or vendor of a software product.
                  The field is relevant to Apple *OS only.'
                example: EQHXZ8M8AV
                flat_name: process.session_leader.code_signature.team_id
                ignore_above: 1024
                level: extended
                name: team_id
                node_name: team_id
                normalize: []
                original_fieldset: code_signature
                short: The team identifier used to sign the process.
                type: keyword
            timestamp:
              field_details:
                dashed_name: process-session-leader-code-signature-timestamp
                description: Date and time when the code signature was generated and
                  signed.
                example: '2021-01-01T12:10:30Z'
                flat_name: process.session_leader.code_signature.timestamp
                level: extended
                name: timestamp
                node_name: timestamp
                normalize: []
                original_fieldset: code_signature
                short: When the signature was generated and signed.
                type: date
            trusted:
              field_details:
                dashed_name: process-session-leader-code-signature-trusted
                description: 'Stores the trust status of the certificate chain.

                  Validating the trust of the certificate chain may be complicated,
                  and this field should only be populated by tools that actively check
                  the status.'
                example: 'true'
                flat_name: process.session_leader.code_signature.trusted
                level: extended
                name: trusted
                node_name: trusted
                normalize: []
                original_fieldset: code_signature
                short: Stores the trust status of the certificate chain.
                type: boolean
            valid:
              field_details:
                dashed_name: process-session-leader-code-signature-valid
                description: 'Boolean to capture if the digital signature is verified
                  against the binary content.

                  Leave unpopulated if a certificate was unchecked.'
                example: 'true'
                flat_name: process.session_leader.code_signature.valid
                level: extended
                name: valid
                node_name: valid
                normalize: []
                original_fieldset: code_signature
                short: Boolean to capture if the digital signature is verified against
                  the binary content.
                type: boolean
        command_line:
          field_details:
            dashed_name: process-session-leader-command-line
            description: 'Full command line that started the process, including the
              absolute path to the executable, and all arguments.

              Some arguments may be filtered to protect sensitive information.'
            example: /usr/bin/ssh -l user 10.0.0.16
            flat_name: process.session_leader.command_line
            level: extended
            multi_fields:
            - flat_name: process.session_leader.command_line.text
              name: text
              type: match_only_text
            name: command_line
            node_name: command_line
            normalize: []
            original_fieldset: process
            short: Full command line that started the process.
            type: wildcard
        elf:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-session-leader-elf
            description: These fields contain Linux Executable Linkable Format (ELF)
              metadata.
            flat_name: process.session_leader.elf
            intermediate: true
            name: elf
            node_name: elf
            original_fieldset: elf
            short: These fields contain Linux Executable Linkable Format (ELF) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-session-leader-elf-architecture
                description: Machine architecture of the ELF file.
                example: x86-64
                flat_name: process.session_leader.elf.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: elf
                short: Machine architecture of the ELF file.
                type: keyword
            byte_order:
              field_details:
                dashed_name: process-session-leader-elf-byte-order
                description: Byte sequence of ELF file.
                example: Little Endian
                flat_name: process.session_leader.elf.byte_order
                ignore_above: 1024
                level: extended
                name: byte_order
                node_name: byte_order
                normalize: []
                original_fieldset: elf
                short: Byte sequence of ELF file.
                type: keyword
            cpu_type:
              field_details:
                dashed_name: process-session-leader-elf-cpu-type
                description: CPU type of the ELF file.
                example: Intel
                flat_name: process.session_leader.elf.cpu_type
                ignore_above: 1024
                level: extended
                name: cpu_type
                node_name: cpu_type
                normalize: []
                original_fieldset: elf
                short: CPU type of the ELF file.
                type: keyword
            creation_date:
              field_details:
                dashed_name: process-session-leader-elf-creation-date
                description: Extracted when possible from the file's metadata. Indicates
                  when it was built or compiled. It can also be faked by malware creators.
                flat_name: process.session_leader.elf.creation_date
                level: extended
                name: creation_date
                node_name: creation_date
                normalize: []
                original_fieldset: elf
                short: Build or compile date.
                type: date
            exports:
              field_details:
                dashed_name: process-session-leader-elf-exports
                description: List of exported element names and types.
                flat_name: process.session_leader.elf.exports
                level: extended
                name: exports
                node_name: exports
                normalize:
                - array
                original_fieldset: elf
                short: List of exported element names and types.
                type: flattened
            go_import_hash:
              field_details:
                dashed_name: process-session-leader-elf-go-import-hash
                description: 'A hash of the Go language imports in an ELF file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.session_leader.elf.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the Go language imports in an ELF file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-session-leader-elf-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.session_leader.elf.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: elf
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-session-leader-elf-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.session_leader.elf.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-session-leader-elf-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.session_leader.elf.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-session-leader-elf-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.session_leader.elf.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: elf
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            header:
              field_details:
                dashed_name: process-session-leader-elf-header
                flat_name: process.session_leader.elf.header
                intermediate: true
                name: header
                node_name: header
                original_fieldset: elf
                type: object
              fields:
                abi_version:
                  field_details:
                    dashed_name: process-session-leader-elf-header-abi-version
                    description: Version of the ELF Application Binary Interface (ABI).
                    flat_name: process.session_leader.elf.header.abi_version
                    ignore_above: 1024
                    level: extended
                    name: header.abi_version
                    node_name: abi_version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF Application Binary Interface (ABI).
                    type: keyword
                class:
                  field_details:
                    dashed_name: process-session-leader-elf-header-class
                    description: Header class of the ELF file.
                    flat_name: process.session_leader.elf.header.class
                    ignore_above: 1024
                    level: extended
                    name: header.class
                    node_name: class
                    normalize: []
                    original_fieldset: elf
                    short: Header class of the ELF file.
                    type: keyword
                data:
                  field_details:
                    dashed_name: process-session-leader-elf-header-data
                    description: Data table of the ELF header.
                    flat_name: process.session_leader.elf.header.data
                    ignore_above: 1024
                    level: extended
                    name: header.data
                    node_name: data
                    normalize: []
                    original_fieldset: elf
                    short: Data table of the ELF header.
                    type: keyword
                entrypoint:
                  field_details:
                    dashed_name: process-session-leader-elf-header-entrypoint
                    description: Header entrypoint of the ELF file.
                    flat_name: process.session_leader.elf.header.entrypoint
                    format: string
                    level: extended
                    name: header.entrypoint
                    node_name: entrypoint
                    normalize: []
                    original_fieldset: elf
                    short: Header entrypoint of the ELF file.
                    type: long
                object_version:
                  field_details:
                    dashed_name: process-session-leader-elf-header-object-version
                    description: '"0x1" for original ELF files.'
                    flat_name: process.session_leader.elf.header.object_version
                    ignore_above: 1024
                    level: extended
                    name: header.object_version
                    node_name: object_version
                    normalize: []
                    original_fieldset: elf
                    short: '"0x1" for original ELF files.'
                    type: keyword
                os_abi:
                  field_details:
                    dashed_name: process-session-leader-elf-header-os-abi
                    description: Application Binary Interface (ABI) of the Linux OS.
                    flat_name: process.session_leader.elf.header.os_abi
                    ignore_above: 1024
                    level: extended
                    name: header.os_abi
                    node_name: os_abi
                    normalize: []
                    original_fieldset: elf
                    short: Application Binary Interface (ABI) of the Linux OS.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-session-leader-elf-header-type
                    description: Header type of the ELF file.
                    flat_name: process.session_leader.elf.header.type
                    ignore_above: 1024
                    level: extended
                    name: header.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: Header type of the ELF file.
                    type: keyword
                version:
                  field_details:
                    dashed_name: process-session-leader-elf-header-version
                    description: Version of the ELF header.
                    flat_name: process.session_leader.elf.header.version
                    ignore_above: 1024
                    level: extended
                    name: header.version
                    node_name: version
                    normalize: []
                    original_fieldset: elf
                    short: Version of the ELF header.
                    type: keyword
            import_hash:
              field_details:
                dashed_name: process-session-leader-elf-import-hash
                description: 'A hash of the imports in an ELF file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is an ELF implementation of the Windows PE imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.session_leader.elf.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: elf
                short: A hash of the imports in an ELF file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-session-leader-elf-imports
                description: List of imported element names and types.
                flat_name: process.session_leader.elf.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: elf
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-session-leader-elf-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.session_leader.elf.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: elf
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-session-leader-elf-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.session_leader.elf.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: elf
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-session-leader-elf-sections
                description: 'An array containing an object for each section of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.sections.*`.'
                flat_name: process.session_leader.elf.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: elf
                short: Section information of the ELF file.
                type: nested
              fields:
                chi2:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-chi2
                    description: Chi-square probability distribution of the section.
                    flat_name: process.session_leader.elf.sections.chi2
                    format: number
                    level: extended
                    name: sections.chi2
                    node_name: chi2
                    normalize: []
                    original_fieldset: elf
                    short: Chi-square probability distribution of the section.
                    type: long
                entropy:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.session_leader.elf.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the section.
                    type: long
                flags:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-flags
                    description: ELF Section List flags.
                    flat_name: process.session_leader.elf.sections.flags
                    ignore_above: 1024
                    level: extended
                    name: sections.flags
                    node_name: flags
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List flags.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-name
                    description: ELF Section List name.
                    flat_name: process.session_leader.elf.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List name.
                    type: keyword
                physical_offset:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-physical-offset
                    description: ELF Section List offset.
                    flat_name: process.session_leader.elf.sections.physical_offset
                    ignore_above: 1024
                    level: extended
                    name: sections.physical_offset
                    node_name: physical_offset
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List offset.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-physical-size
                    description: ELF Section List physical size.
                    flat_name: process.session_leader.elf.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List physical size.
                    type: long
                type:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-type
                    description: ELF Section List type.
                    flat_name: process.session_leader.elf.sections.type
                    ignore_above: 1024
                    level: extended
                    name: sections.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List type.
                    type: keyword
                var_entropy:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.session_leader.elf.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_address:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-virtual-address
                    description: ELF Section List virtual address.
                    flat_name: process.session_leader.elf.sections.virtual_address
                    format: string
                    level: extended
                    name: sections.virtual_address
                    node_name: virtual_address
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual address.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-session-leader-elf-sections-virtual-size
                    description: ELF Section List virtual size.
                    flat_name: process.session_leader.elf.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: elf
                    short: ELF Section List virtual size.
                    type: long
            segments:
              field_details:
                dashed_name: process-session-leader-elf-segments
                description: 'An array containing an object for each segment of the
                  ELF file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `elf.segments.*`.'
                flat_name: process.session_leader.elf.segments
                intermediate: false
                level: extended
                name: segments
                node_name: segments
                normalize:
                - array
                original_fieldset: elf
                short: ELF object segment list.
                type: nested
              fields:
                sections:
                  field_details:
                    dashed_name: process-session-leader-elf-segments-sections
                    description: ELF object segment sections.
                    flat_name: process.session_leader.elf.segments.sections
                    ignore_above: 1024
                    level: extended
                    name: segments.sections
                    node_name: sections
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment sections.
                    type: keyword
                type:
                  field_details:
                    dashed_name: process-session-leader-elf-segments-type
                    description: ELF object segment type.
                    flat_name: process.session_leader.elf.segments.type
                    ignore_above: 1024
                    level: extended
                    name: segments.type
                    node_name: type
                    normalize: []
                    original_fieldset: elf
                    short: ELF object segment type.
                    type: keyword
            shared_libraries:
              field_details:
                dashed_name: process-session-leader-elf-shared-libraries
                description: List of shared libraries used by this ELF object.
                flat_name: process.session_leader.elf.shared_libraries
                ignore_above: 1024
                level: extended
                name: shared_libraries
                node_name: shared_libraries
                normalize:
                - array
                original_fieldset: elf
                short: List of shared libraries used by this ELF object.
                type: keyword
            telfhash:
              field_details:
                dashed_name: process-session-leader-elf-telfhash
                description: telfhash symbol hash for ELF file.
                flat_name: process.session_leader.elf.telfhash
                ignore_above: 1024
                level: extended
                name: telfhash
                node_name: telfhash
                normalize: []
                original_fieldset: elf
                short: telfhash hash for ELF file.
                type: keyword
        end:
          field_details:
            dashed_name: process-session-leader-end
            description: The time the process ended.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.session_leader.end
            level: extended
            name: end
            node_name: end
            normalize: []
            original_fieldset: process
            short: The time the process ended.
            type: date
        entity_id:
          field_details:
            dashed_name: process-session-leader-entity-id
            description: 'Unique identifier for the process.

              The implementation of this is specified by the data source, but some
              examples of what could be used here are a process-generated UUID, Sysmon
              Process GUIDs, or a hash of some uniquely identifying components of
              a process.

              Constructing a globally unique identifier is a common practice to mitigate
              PID reuse as well as to identify a specific process over time, across
              multiple monitored hosts.'
            example: c2c455d9f99375d
            flat_name: process.session_leader.entity_id
            ignore_above: 1024
            level: extended
            name: entity_id
            node_name: entity_id
            normalize: []
            original_fieldset: process
            short: Unique identifier for the process.
            type: keyword
        entry_meta:
          field_details:
            dashed_name: process-session-leader-entry-meta
            flat_name: process.session_leader.entry_meta
            intermediate: true
            name: entry_meta
            node_name: entry_meta
            original_fieldset: process
            type: object
          fields:
            source:
              field_details:
                dashed_name: process-session-leader-entry-meta-source
                description: 'Source fields capture details about the sender of a
                  network exchange/packet. These fields are populated from a network
                  event, packet, or other event containing details of a network transaction.

                  Source fields are usually populated in conjunction with destination
                  fields. The source and destination fields are considered the baseline
                  and should always be filled if an event contains source and destination
                  details from a network transaction. If the event also contains identification
                  of the client and server roles, then the client and server fields
                  should also be populated.'
                flat_name: process.session_leader.entry_meta.source
                intermediate: true
                name: source
                node_name: source
                original_fieldset: source
                short: Fields about the source side of a network connection, used
                  with destination.
                type: group
              fields:
                address:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-address
                    description: 'Some event source addresses are defined ambiguously.
                      The event will sometimes list an IP, a domain or a unix socket.  You
                      should always store the raw address in the `.address` field.

                      Then it should be duplicated to `.ip` or `.domain`, depending
                      on which one it is.'
                    flat_name: process.session_leader.entry_meta.source.address
                    ignore_above: 1024
                    level: extended
                    name: address
                    node_name: address
                    normalize: []
                    original_fieldset: source
                    short: Source network address.
                    type: keyword
                as:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-as
                    description: An autonomous system (AS) is a collection of connected
                      Internet Protocol (IP) routing prefixes under the control of
                      one or more network operators on behalf of a single administrative
                      entity or domain that presents a common, clearly defined routing
                      policy to the internet.
                    flat_name: process.session_leader.entry_meta.source.as
                    intermediate: true
                    name: as
                    node_name: as
                    original_fieldset: as
                    short: Fields describing an Autonomous System (Internet routing
                      prefix).
                    type: group
                  fields:
                    number:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-as-number
                        description: Unique number allocated to the autonomous system.
                          The autonomous system number (ASN) uniquely identifies each
                          network on the Internet.
                        example: 15169
                        flat_name: process.session_leader.entry_meta.source.as.number
                        level: extended
                        name: number
                        node_name: number
                        normalize: []
                        original_fieldset: as
                        short: Unique number allocated to the autonomous system.
                        type: long
                    organization:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-as-organization
                        flat_name: process.session_leader.entry_meta.source.as.organization
                        intermediate: true
                        name: organization
                        node_name: organization
                        original_fieldset: as
                        type: object
                      fields:
                        name:
                          field_details:
                            dashed_name: process-session-leader-entry-meta-source-as-organization-name
                            description: Organization name.
                            example: Google LLC
                            flat_name: process.session_leader.entry_meta.source.as.organization.name
                            ignore_above: 1024
                            level: extended
                            multi_fields:
                            - flat_name: process.session_leader.entry_meta.source.as.organization.name.text
                              name: text
                              type: match_only_text
                            name: organization.name
                            node_name: name
                            normalize: []
                            original_fieldset: as
                            short: Organization name.
                            type: keyword
                bytes:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-bytes
                    description: Bytes sent from the source to the destination.
                    example: 184
                    flat_name: process.session_leader.entry_meta.source.bytes
                    format: bytes
                    level: core
                    name: bytes
                    node_name: bytes
                    normalize: []
                    original_fieldset: source
                    short: Bytes sent from the source to the destination.
                    type: long
                domain:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-domain
                    description: 'The domain name of the source system.

                      This value may be a host name, a fully qualified domain name,
                      or another host naming format. The value may derive from the
                      original event or be added from enrichment.'
                    example: foo.example.com
                    flat_name: process.session_leader.entry_meta.source.domain
                    ignore_above: 1024
                    level: core
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: source
                    short: The domain name of the source.
                    type: keyword
                geo:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-geo
                    description: 'Geo fields can carry data about a specific location
                      related to an event.

                      This geolocation information can be derived from techniques
                      such as Geo IP, or be user-supplied.'
                    flat_name: process.session_leader.entry_meta.source.geo
                    intermediate: true
                    name: geo
                    node_name: geo
                    original_fieldset: geo
                    short: Fields describing a location.
                    type: group
                  fields:
                    city_name:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-city-name
                        description: City name.
                        example: Montreal
                        flat_name: process.session_leader.entry_meta.source.geo.city_name
                        ignore_above: 1024
                        level: core
                        name: city_name
                        node_name: city_name
                        normalize: []
                        original_fieldset: geo
                        short: City name.
                        type: keyword
                    continent_code:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-continent-code
                        description: Two-letter code representing continent's name.
                        example: NA
                        flat_name: process.session_leader.entry_meta.source.geo.continent_code
                        ignore_above: 1024
                        level: core
                        name: continent_code
                        node_name: continent_code
                        normalize: []
                        original_fieldset: geo
                        short: Continent code.
                        type: keyword
                    continent_name:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-continent-name
                        description: Name of the continent.
                        example: North America
                        flat_name: process.session_leader.entry_meta.source.geo.continent_name
                        ignore_above: 1024
                        level: core
                        name: continent_name
                        node_name: continent_name
                        normalize: []
                        original_fieldset: geo
                        short: Name of the continent.
                        type: keyword
                    country_iso_code:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-country-iso-code
                        description: Country ISO code.
                        example: CA
                        flat_name: process.session_leader.entry_meta.source.geo.country_iso_code
                        ignore_above: 1024
                        level: core
                        name: country_iso_code
                        node_name: country_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Country ISO code.
                        type: keyword
                    country_name:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-country-name
                        description: Country name.
                        example: Canada
                        flat_name: process.session_leader.entry_meta.source.geo.country_name
                        ignore_above: 1024
                        level: core
                        name: country_name
                        node_name: country_name
                        normalize: []
                        original_fieldset: geo
                        short: Country name.
                        type: keyword
                    location:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-location
                        description: Longitude and latitude.
                        example: '{ "lon": -73.614830, "lat": 45.505918 }'
                        flat_name: process.session_leader.entry_meta.source.geo.location
                        level: core
                        name: location
                        node_name: location
                        normalize: []
                        original_fieldset: geo
                        short: Longitude and latitude.
                        type: geo_point
                    name:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-name
                        description: 'User-defined description of a location, at the
                          level of granularity they care about.

                          Could be the name of their data centers, the floor number,
                          if this describes a local physical entity, city names.

                          Not typically used in automated geolocation.'
                        example: boston-dc
                        flat_name: process.session_leader.entry_meta.source.geo.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: geo
                        short: User-defined description of a location.
                        type: keyword
                    postal_code:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-postal-code
                        description: 'Postal code associated with the location.

                          Values appropriate for this field may also be known as a
                          postcode or ZIP code and will vary widely from country to
                          country.'
                        example: 94040
                        flat_name: process.session_leader.entry_meta.source.geo.postal_code
                        ignore_above: 1024
                        level: core
                        name: postal_code
                        node_name: postal_code
                        normalize: []
                        original_fieldset: geo
                        short: Postal code.
                        type: keyword
                    region_iso_code:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-region-iso-code
                        description: Region ISO code.
                        example: CA-QC
                        flat_name: process.session_leader.entry_meta.source.geo.region_iso_code
                        ignore_above: 1024
                        level: core
                        name: region_iso_code
                        node_name: region_iso_code
                        normalize: []
                        original_fieldset: geo
                        short: Region ISO code.
                        type: keyword
                    region_name:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-region-name
                        description: Region name.
                        example: Quebec
                        flat_name: process.session_leader.entry_meta.source.geo.region_name
                        ignore_above: 1024
                        level: core
                        name: region_name
                        node_name: region_name
                        normalize: []
                        original_fieldset: geo
                        short: Region name.
                        type: keyword
                    timezone:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-geo-timezone
                        description: The time zone of the location, such as IANA time
                          zone name.
                        example: America/Argentina/Buenos_Aires
                        flat_name: process.session_leader.entry_meta.source.geo.timezone
                        ignore_above: 1024
                        level: core
                        name: timezone
                        node_name: timezone
                        normalize: []
                        original_fieldset: geo
                        short: Time zone.
                        type: keyword
                ip:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-ip
                    description: IP address of the source (IPv4 or IPv6).
                    flat_name: process.session_leader.entry_meta.source.ip
                    level: core
                    name: ip
                    node_name: ip
                    normalize: []
                    original_fieldset: source
                    short: IP address of the source.
                    type: ip
                mac:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-mac
                    description: 'MAC address of the source.

                      The notation format from RFC 7042 is suggested: Each octet (that
                      is, 8-bit byte) is represented by two [uppercase] hexadecimal
                      digits giving the value of the octet as an unsigned integer.
                      Successive octets are separated by a hyphen.'
                    example: 00-00-5E-00-53-23
                    flat_name: process.session_leader.entry_meta.source.mac
                    ignore_above: 1024
                    level: core
                    name: mac
                    node_name: mac
                    normalize: []
                    original_fieldset: source
                    pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                    short: MAC address of the source.
                    type: keyword
                nat:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-nat
                    flat_name: process.session_leader.entry_meta.source.nat
                    intermediate: true
                    name: nat
                    node_name: nat
                    original_fieldset: source
                    type: object
                  fields:
                    ip:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-nat-ip
                        description: 'Translated ip of source based NAT sessions (e.g.
                          internal client to internet)

                          Typically connections traversing load balancers, firewalls,
                          or routers.'
                        flat_name: process.session_leader.entry_meta.source.nat.ip
                        level: extended
                        name: nat.ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: Source NAT ip
                        type: ip
                    port:
                      field_details:
                        dashed_name: process-session-leader-entry-meta-source-nat-port
                        description: 'Translated port of source based NAT sessions.
                          (e.g. internal client to internet)

                          Typically used with load balancers, firewalls, or routers.'
                        flat_name: process.session_leader.entry_meta.source.nat.port
                        format: string
                        level: extended
                        name: nat.port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Source NAT port
                        type: long
                packets:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-packets
                    description: Packets sent from the source to the destination.
                    example: 12
                    flat_name: process.session_leader.entry_meta.source.packets
                    level: core
                    name: packets
                    node_name: packets
                    normalize: []
                    original_fieldset: source
                    short: Packets sent from the source to the destination.
                    type: long
                port:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-port
                    description: Port of the source.
                    flat_name: process.session_leader.entry_meta.source.port
                    format: string
                    level: core
                    name: port
                    node_name: port
                    normalize: []
                    original_fieldset: source
                    short: Port of the source.
                    type: long
                registered_domain:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-registered-domain
                    description: 'The highest registered source domain, stripped of
                      the subdomain.

                      For example, the registered domain for "foo.example.com" is
                      "example.com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last two labels will not work well
                      for TLDs such as "co.uk".'
                    example: example.com
                    flat_name: process.session_leader.entry_meta.source.registered_domain
                    ignore_above: 1024
                    level: extended
                    name: registered_domain
                    node_name: registered_domain
                    normalize: []
                    original_fieldset: source
                    short: The highest registered source domain, stripped of the subdomain.
                    type: keyword
                subdomain:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-subdomain
                    description: 'The subdomain portion of a fully qualified domain
                      name includes all of the names except the host name under the
                      registered_domain.  In a partially qualified domain, or if the
                      the qualification level of the full name cannot be determined,
                      subdomain contains all of the names below the registered domain.

                      For example the subdomain portion of "www.east.mydomain.co.uk"
                      is "east". If the domain has multiple levels of subdomain, such
                      as "sub2.sub1.example.com", the subdomain field should contain
                      "sub2.sub1", with no trailing period.'
                    example: east
                    flat_name: process.session_leader.entry_meta.source.subdomain
                    ignore_above: 1024
                    level: extended
                    name: subdomain
                    node_name: subdomain
                    normalize: []
                    original_fieldset: source
                    short: The subdomain of the domain.
                    type: keyword
                top_level_domain:
                  field_details:
                    dashed_name: process-session-leader-entry-meta-source-top-level-domain
                    description: 'The effective top level domain (eTLD), also known
                      as the domain suffix, is the last part of the domain name. For
                      example, the top level domain for example.com is "com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last label will not work well for
                      effective TLDs such as "co.uk".'
                    example: co.uk
                    flat_name: process.session_leader.entry_meta.source.top_level_domain
                    ignore_above: 1024
                    level: extended
                    name: top_level_domain
                    node_name: top_level_domain
                    normalize: []
                    original_fieldset: source
                    short: The effective top level domain (com, org, net, co.uk).
                    type: keyword
            type:
              field_details:
                dashed_name: process-session-leader-entry-meta-type
                description: 'The entry type for the entry session leader. Values
                  include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                  console

                  Note: This field is only set on process.session_leader.'
                flat_name: process.session_leader.entry_meta.type
                ignore_above: 1024
                level: extended
                name: entry_meta.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The entry type for the entry session leader.
                type: keyword
        env_vars:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-session-leader-env-vars
            description: 'Array of environment variable bindings. Captured from a
              snapshot of the environment at the time of execution.

              May be filtered to protect sensitive information.'
            example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
            flat_name: process.session_leader.env_vars
            ignore_above: 1024
            level: extended
            name: env_vars
            node_name: env_vars
            normalize:
            - array
            original_fieldset: process
            short: Array of environment variable bindings.
            type: keyword
        executable:
          field_details:
            dashed_name: process-session-leader-executable
            description: Absolute path to the process executable.
            example: /usr/bin/ssh
            flat_name: process.session_leader.executable
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.session_leader.executable.text
              name: text
              type: match_only_text
            name: executable
            node_name: executable
            normalize: []
            original_fieldset: process
            short: Absolute path to the process executable.
            type: keyword
        exit_code:
          field_details:
            dashed_name: process-session-leader-exit-code
            description: 'The exit code of the process, if this is a termination event.

              The field should be absent if there is no exit code for the event (e.g.
              process start).'
            example: 137
            flat_name: process.session_leader.exit_code
            level: extended
            name: exit_code
            node_name: exit_code
            normalize: []
            original_fieldset: process
            short: The exit code of the process.
            type: long
        group:
          field_details:
            dashed_name: process-session-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.session_leader.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.session_leader.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-group-name
                description: Name of the group.
                flat_name: process.session_leader.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-session-leader-hash
            description: 'The hash fields represent different bitwise hash algorithms
              and their values.

              Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields
              for other hashes by lowercasing the hash algorithm name and using underscore
              separators as appropriate (snake case, e.g. sha3_512).

              Note that this fieldset is used for common hashes that may be computed
              over a range of generic bytes. Entity-specific hashes such as ja3 or
              imphash are placed in the fieldsets to which they relate (tls and pe,
              respectively).'
            flat_name: process.session_leader.hash
            intermediate: true
            name: hash
            node_name: hash
            original_fieldset: hash
            short: Hashes, usually file hashes.
            type: group
          fields:
            md5:
              field_details:
                dashed_name: process-session-leader-hash-md5
                description: MD5 hash.
                flat_name: process.session_leader.hash.md5
                ignore_above: 1024
                level: extended
                name: md5
                node_name: md5
                normalize: []
                original_fieldset: hash
                short: MD5 hash.
                type: keyword
            sha1:
              field_details:
                dashed_name: process-session-leader-hash-sha1
                description: SHA1 hash.
                flat_name: process.session_leader.hash.sha1
                ignore_above: 1024
                level: extended
                name: sha1
                node_name: sha1
                normalize: []
                original_fieldset: hash
                short: SHA1 hash.
                type: keyword
            sha256:
              field_details:
                dashed_name: process-session-leader-hash-sha256
                description: SHA256 hash.
                flat_name: process.session_leader.hash.sha256
                ignore_above: 1024
                level: extended
                name: sha256
                node_name: sha256
                normalize: []
                original_fieldset: hash
                short: SHA256 hash.
                type: keyword
            sha384:
              field_details:
                dashed_name: process-session-leader-hash-sha384
                description: SHA384 hash.
                flat_name: process.session_leader.hash.sha384
                ignore_above: 1024
                level: extended
                name: sha384
                node_name: sha384
                normalize: []
                original_fieldset: hash
                short: SHA384 hash.
                type: keyword
            sha512:
              field_details:
                dashed_name: process-session-leader-hash-sha512
                description: SHA512 hash.
                flat_name: process.session_leader.hash.sha512
                ignore_above: 1024
                level: extended
                name: sha512
                node_name: sha512
                normalize: []
                original_fieldset: hash
                short: SHA512 hash.
                type: keyword
            ssdeep:
              field_details:
                dashed_name: process-session-leader-hash-ssdeep
                description: SSDEEP hash.
                flat_name: process.session_leader.hash.ssdeep
                ignore_above: 1024
                level: extended
                name: ssdeep
                node_name: ssdeep
                normalize: []
                original_fieldset: hash
                short: SSDEEP hash.
                type: keyword
            tlsh:
              field_details:
                dashed_name: process-session-leader-hash-tlsh
                description: TLSH hash.
                flat_name: process.session_leader.hash.tlsh
                ignore_above: 1024
                level: extended
                name: tlsh
                node_name: tlsh
                normalize: []
                original_fieldset: hash
                short: TLSH hash.
                type: keyword
        interactive:
          field_details:
            dashed_name: process-session-leader-interactive
            description: 'Whether the process is connected to an interactive shell.

              Process interactivity is inferred from the processes file descriptors.
              If the character device for the controlling tty is the same as stdin
              and stderr for the process, the process is considered interactive.

              Note: A non-interactive process can belong to an interactive session
              and is simply one that does not have open file descriptors reading the
              controlling TTY on FD 0 (stdin) or writing to the controlling TTY on
              FD 2 (stderr). A backgrounded process is still considered interactive
              if stdin and stderr are connected to the controlling TTY.'
            example: true
            flat_name: process.session_leader.interactive
            level: extended
            name: interactive
            node_name: interactive
            normalize: []
            original_fieldset: process
            short: Whether the process is connected to an interactive shell.
            type: boolean
        io:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-session-leader-io
            description: 'A chunk of input or output (IO) from a single process.

              This field only appears on the top level process object, which is the
              process that wrote the output or read the input.'
            flat_name: process.session_leader.io
            intermediate: false
            level: extended
            name: io
            node_name: io
            normalize: []
            original_fieldset: process
            short: A chunk of input or output (IO) from a single process.
            type: object
          fields:
            bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-io-bytes-skipped
                description: An array of byte offsets and lengths denoting where IO
                  data has been skipped.
                flat_name: process.session_leader.io.bytes_skipped
                intermediate: false
                level: extended
                name: io.bytes_skipped
                node_name: bytes_skipped
                normalize:
                - array
                original_fieldset: process
                short: An array of byte offsets and lengths denoting where IO data
                  has been skipped.
                type: object
              fields:
                length:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-io-bytes-skipped-length
                    description: The length of bytes skipped.
                    flat_name: process.session_leader.io.bytes_skipped.length
                    level: extended
                    name: io.bytes_skipped.length
                    node_name: length
                    normalize: []
                    original_fieldset: process
                    short: The length of bytes skipped.
                    type: long
                offset:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-io-bytes-skipped-offset
                    description: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    flat_name: process.session_leader.io.bytes_skipped.offset
                    level: extended
                    name: io.bytes_skipped.offset
                    node_name: offset
                    normalize: []
                    original_fieldset: process
                    short: The byte offset into this event's io.text (or io.bytes
                      in the future) where length bytes were skipped.
                    type: long
            max_bytes_per_process_exceeded:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-io-max-bytes-per-process-exceeded
                description: If true, the process producing the output has exceeded
                  the max_kilobytes_per_process configuration setting.
                flat_name: process.session_leader.io.max_bytes_per_process_exceeded
                level: extended
                name: io.max_bytes_per_process_exceeded
                node_name: max_bytes_per_process_exceeded
                normalize: []
                original_fieldset: process
                short: If true, the process producing the output has exceeded the
                  max_kilobytes_per_process configuration setting.
                type: boolean
            text:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-io-text
                description: 'A chunk of output or input sanitized to UTF-8.

                  Best efforts are made to ensure complete lines are captured in these
                  events. Assumptions should NOT be made that multiple lines will
                  appear in the same event. TTY output may contain terminal control
                  codes such as for cursor movement, so some string queries may not
                  match due to terminal codes inserted between characters of a word.'
                flat_name: process.session_leader.io.text
                level: extended
                name: io.text
                node_name: text
                normalize: []
                original_fieldset: process
                short: A chunk of output or input sanitized to UTF-8.
                type: wildcard
            total_bytes_captured:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-io-total-bytes-captured
                description: The total number of bytes captured in this event.
                flat_name: process.session_leader.io.total_bytes_captured
                level: extended
                name: io.total_bytes_captured
                node_name: total_bytes_captured
                normalize: []
                original_fieldset: process
                short: The total number of bytes captured in this event.
                type: long
            total_bytes_skipped:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-io-total-bytes-skipped
                description: The total number of bytes that were not captured due
                  to implementation restrictions such as buffer size limits. Implementors
                  should strive to ensure this value is always zero
                flat_name: process.session_leader.io.total_bytes_skipped
                level: extended
                name: io.total_bytes_skipped
                node_name: total_bytes_skipped
                normalize: []
                original_fieldset: process
                short: The total number of bytes that were not captured due to implementation
                  restrictions such as buffer size limits.
                type: long
            type:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-io-type
                description: 'The type of object on which the IO action (read or write)
                  was taken.

                  Currently only ''tty'' is supported. Other types may be added in
                  the future for ''file'' and ''socket'' support.'
                flat_name: process.session_leader.io.type
                ignore_above: 1024
                level: extended
                name: io.type
                node_name: type
                normalize: []
                original_fieldset: process
                short: The type of object on which the IO action (read or write) was
                  taken.
                type: keyword
        macho:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-session-leader-macho
            description: These fields contain Mac OS Mach Object file format (Mach-O)
              metadata.
            flat_name: process.session_leader.macho
            intermediate: true
            name: macho
            node_name: macho
            original_fieldset: macho
            short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
            type: group
          fields:
            go_import_hash:
              field_details:
                dashed_name: process-session-leader-macho-go-import-hash
                description: 'A hash of the Go language imports in a Mach-O file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.session_leader.macho.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the Go language imports in a Mach-O file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-session-leader-macho-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.session_leader.macho.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: macho
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-session-leader-macho-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.session_leader.macho.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-session-leader-macho-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.session_leader.macho.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-session-leader-macho-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.session_leader.macho.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: macho
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            import_hash:
              field_details:
                dashed_name: process-session-leader-macho-import-hash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a synonym for symhash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.session_leader.macho.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-session-leader-macho-imports
                description: List of imported element names and types.
                flat_name: process.session_leader.macho.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: macho
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-session-leader-macho-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.session_leader.macho.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: macho
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-session-leader-macho-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.session_leader.macho.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: macho
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            sections:
              field_details:
                dashed_name: process-session-leader-macho-sections
                description: 'An array containing an object for each section of the
                  Mach-O file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `macho.sections.*`.'
                flat_name: process.session_leader.macho.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: macho
                short: Section information of the Mach-O file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-session-leader-macho-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.session_leader.macho.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-session-leader-macho-sections-name
                    description: Mach-O Section List name.
                    flat_name: process.session_leader.macho.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-session-leader-macho-sections-physical-size
                    description: Mach-O Section List physical size.
                    flat_name: process.session_leader.macho.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-session-leader-macho-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.session_leader.macho.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-session-leader-macho-sections-virtual-size
                    description: Mach-O Section List virtual size. This is always
                      the same as `physical_size`.
                    flat_name: process.session_leader.macho.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: macho
                    short: Mach-O Section List virtual size. This is always the same
                      as `physical_size`.
                    type: long
            symhash:
              field_details:
                dashed_name: process-session-leader-macho-symhash
                description: 'A hash of the imports in a Mach-O file. An import hash
                  can be used to fingerprint binaries even after recompilation or
                  other code-level transformations have occurred, which would change
                  more traditional hash values.

                  This is a Mach-O implementation of the Windows PE imphash'
                example: d3ccf195b62a9279c3c19af1080497ec
                flat_name: process.session_leader.macho.symhash
                ignore_above: 1024
                level: extended
                name: symhash
                node_name: symhash
                normalize: []
                original_fieldset: macho
                short: A hash of the imports in a Mach-O file.
                type: keyword
        name:
          field_details:
            dashed_name: process-session-leader-name
            description: 'Process name.

              Sometimes called program name or similar.'
            example: ssh
            flat_name: process.session_leader.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.session_leader.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: process
            short: Process name.
            type: keyword
        parent:
          field_details:
            dashed_name: process-session-leader-process
            description: 'These fields contain information about a process.

              These fields can help you correlate metrics information with a process
              id/name from a log message.  The `process.pid` often stays in the metric
              itself and is copied to the global field for correlation.'
            flat_name: process.session_leader.process
            intermediate: true
            name: parent
            node_name: process
            original_fieldset: process
            short: These fields contain information about a process.
            type: group
          fields:
            args:
              field_details:
                dashed_name: process-session-leader-parent-args
                description: 'Array of process arguments, starting with the absolute
                  path to the executable.

                  May be filtered to protect sensitive information.'
                example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
                flat_name: process.session_leader.parent.args
                ignore_above: 1024
                level: extended
                name: args
                node_name: args
                normalize:
                - array
                original_fieldset: process
                short: Array of process arguments.
                type: keyword
            args_count:
              field_details:
                dashed_name: process-session-leader-parent-args-count
                description: 'Length of the process.args array.

                  This field can be useful for querying or performing bucket analysis
                  on how many arguments were provided to start a process. More arguments
                  may be an indication of suspicious activity.'
                example: 4
                flat_name: process.session_leader.parent.args_count
                level: extended
                name: args_count
                node_name: args_count
                normalize: []
                original_fieldset: process
                short: Length of the process.args array.
                type: long
            attested_groups:
              field_details:
                dashed_name: process-session-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.parent.group
                intermediate: true
                name: attested_groups
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-groups-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.attested_groups.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-groups-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.parent.attested_groups.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-groups-name
                    description: Name of the group.
                    flat_name: process.session_leader.parent.attested_groups.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            attested_user:
              field_details:
                dashed_name: process-session-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.session_leader.parent.user
                intermediate: true
                name: attested_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.attested_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-email
                    description: User email address.
                    flat_name: process.session_leader.parent.attested_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.session_leader.parent.attested_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.attested_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.attested_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.attested_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.attested_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-group-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.attested_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.session_leader.parent.attested_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.session_leader.parent.attested_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.session_leader.parent.attested_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.session_leader.parent.attested_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-session-leader-parent-attested-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.session_leader.parent.attested_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.session_leader.parent.attested_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.session_leader.parent.attested_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.session_leader.parent.attested_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.session_leader.parent.attested_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.session_leader.parent.attested_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-attested-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.session_leader.parent.attested_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-session-leader-parent-attested-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.session_leader.parent.attested_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            code_signature:
              field_details:
                dashed_name: process-session-leader-parent-code-signature
                description: These fields contain information about binary code signatures.
                flat_name: process.session_leader.parent.code_signature
                intermediate: true
                name: code_signature
                node_name: code_signature
                original_fieldset: code_signature
                short: These fields contain information about binary code signatures.
                type: group
              fields:
                digest_algorithm:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-digest-algorithm
                    description: 'The hashing algorithm used to sign the process.

                      This value can distinguish signatures when a file is signed
                      multiple times by the same signer but with a different digest
                      algorithm.'
                    example: sha256
                    flat_name: process.session_leader.parent.code_signature.digest_algorithm
                    ignore_above: 1024
                    level: extended
                    name: digest_algorithm
                    node_name: digest_algorithm
                    normalize: []
                    original_fieldset: code_signature
                    short: Hashing algorithm used to sign the process.
                    type: keyword
                exists:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-exists
                    description: Boolean to capture if a signature is present.
                    example: 'true'
                    flat_name: process.session_leader.parent.code_signature.exists
                    level: core
                    name: exists
                    node_name: exists
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if a signature is present.
                    type: boolean
                signing_id:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-signing-id
                    description: 'The identifier used to sign the process.

                      This is used to identify the application manufactured by a software
                      vendor. The field is relevant to Apple *OS only.'
                    example: com.apple.xpc.proxy
                    flat_name: process.session_leader.parent.code_signature.signing_id
                    ignore_above: 1024
                    level: extended
                    name: signing_id
                    node_name: signing_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The identifier used to sign the process.
                    type: keyword
                status:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-status
                    description: 'Additional information about the certificate status.

                      This is useful for logging cryptographic errors with the certificate
                      validity or trust status. Leave unpopulated if the validity
                      or trust of the certificate was unchecked.'
                    example: ERROR_UNTRUSTED_ROOT
                    flat_name: process.session_leader.parent.code_signature.status
                    ignore_above: 1024
                    level: extended
                    name: status
                    node_name: status
                    normalize: []
                    original_fieldset: code_signature
                    short: Additional information about the certificate status.
                    type: keyword
                subject_name:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-subject-name
                    description: Subject name of the code signer
                    example: Microsoft Corporation
                    flat_name: process.session_leader.parent.code_signature.subject_name
                    ignore_above: 1024
                    level: core
                    name: subject_name
                    node_name: subject_name
                    normalize: []
                    original_fieldset: code_signature
                    short: Subject name of the code signer
                    type: keyword
                team_id:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-team-id
                    description: 'The team identifier used to sign the process.

                      This is used to identify the team or vendor of a software product.
                      The field is relevant to Apple *OS only.'
                    example: EQHXZ8M8AV
                    flat_name: process.session_leader.parent.code_signature.team_id
                    ignore_above: 1024
                    level: extended
                    name: team_id
                    node_name: team_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The team identifier used to sign the process.
                    type: keyword
                timestamp:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-timestamp
                    description: Date and time when the code signature was generated
                      and signed.
                    example: '2021-01-01T12:10:30Z'
                    flat_name: process.session_leader.parent.code_signature.timestamp
                    level: extended
                    name: timestamp
                    node_name: timestamp
                    normalize: []
                    original_fieldset: code_signature
                    short: When the signature was generated and signed.
                    type: date
                trusted:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-trusted
                    description: 'Stores the trust status of the certificate chain.

                      Validating the trust of the certificate chain may be complicated,
                      and this field should only be populated by tools that actively
                      check the status.'
                    example: 'true'
                    flat_name: process.session_leader.parent.code_signature.trusted
                    level: extended
                    name: trusted
                    node_name: trusted
                    normalize: []
                    original_fieldset: code_signature
                    short: Stores the trust status of the certificate chain.
                    type: boolean
                valid:
                  field_details:
                    dashed_name: process-session-leader-parent-code-signature-valid
                    description: 'Boolean to capture if the digital signature is verified
                      against the binary content.

                      Leave unpopulated if a certificate was unchecked.'
                    example: 'true'
                    flat_name: process.session_leader.parent.code_signature.valid
                    level: extended
                    name: valid
                    node_name: valid
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if the digital signature is verified
                      against the binary content.
                    type: boolean
            command_line:
              field_details:
                dashed_name: process-session-leader-parent-command-line
                description: 'Full command line that started the process, including
                  the absolute path to the executable, and all arguments.

                  Some arguments may be filtered to protect sensitive information.'
                example: /usr/bin/ssh -l user 10.0.0.16
                flat_name: process.session_leader.parent.command_line
                level: extended
                multi_fields:
                - flat_name: process.session_leader.parent.command_line.text
                  name: text
                  type: match_only_text
                name: command_line
                node_name: command_line
                normalize: []
                original_fieldset: process
                short: Full command line that started the process.
                type: wildcard
            elf:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-session-leader-parent-elf
                description: These fields contain Linux Executable Linkable Format
                  (ELF) metadata.
                flat_name: process.session_leader.parent.elf
                intermediate: true
                name: elf
                node_name: elf
                original_fieldset: elf
                short: These fields contain Linux Executable Linkable Format (ELF)
                  metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-architecture
                    description: Machine architecture of the ELF file.
                    example: x86-64
                    flat_name: process.session_leader.parent.elf.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: elf
                    short: Machine architecture of the ELF file.
                    type: keyword
                byte_order:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-byte-order
                    description: Byte sequence of ELF file.
                    example: Little Endian
                    flat_name: process.session_leader.parent.elf.byte_order
                    ignore_above: 1024
                    level: extended
                    name: byte_order
                    node_name: byte_order
                    normalize: []
                    original_fieldset: elf
                    short: Byte sequence of ELF file.
                    type: keyword
                cpu_type:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-cpu-type
                    description: CPU type of the ELF file.
                    example: Intel
                    flat_name: process.session_leader.parent.elf.cpu_type
                    ignore_above: 1024
                    level: extended
                    name: cpu_type
                    node_name: cpu_type
                    normalize: []
                    original_fieldset: elf
                    short: CPU type of the ELF file.
                    type: keyword
                creation_date:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-creation-date
                    description: Extracted when possible from the file's metadata.
                      Indicates when it was built or compiled. It can also be faked
                      by malware creators.
                    flat_name: process.session_leader.parent.elf.creation_date
                    level: extended
                    name: creation_date
                    node_name: creation_date
                    normalize: []
                    original_fieldset: elf
                    short: Build or compile date.
                    type: date
                exports:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-exports
                    description: List of exported element names and types.
                    flat_name: process.session_leader.parent.elf.exports
                    level: extended
                    name: exports
                    node_name: exports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of exported element names and types.
                    type: flattened
                go_import_hash:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-go-import-hash
                    description: 'A hash of the Go language imports in an ELF file
                      excluding standard library imports. An import hash can be used
                      to fingerprint binaries even after recompilation or other code-level
                      transformations have occurred, which would change more traditional
                      hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.session_leader.parent.elf.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the Go language imports in an ELF file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.session_leader.parent.elf.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: elf
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.session_leader.parent.elf.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.session_leader.parent.elf.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.session_leader.parent.elf.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: elf
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                header:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-header
                    flat_name: process.session_leader.parent.elf.header
                    intermediate: true
                    name: header
                    node_name: header
                    original_fieldset: elf
                    type: object
                  fields:
                    abi_version:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-abi-version
                        description: Version of the ELF Application Binary Interface
                          (ABI).
                        flat_name: process.session_leader.parent.elf.header.abi_version
                        ignore_above: 1024
                        level: extended
                        name: header.abi_version
                        node_name: abi_version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF Application Binary Interface (ABI).
                        type: keyword
                    class:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-class
                        description: Header class of the ELF file.
                        flat_name: process.session_leader.parent.elf.header.class
                        ignore_above: 1024
                        level: extended
                        name: header.class
                        node_name: class
                        normalize: []
                        original_fieldset: elf
                        short: Header class of the ELF file.
                        type: keyword
                    data:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-data
                        description: Data table of the ELF header.
                        flat_name: process.session_leader.parent.elf.header.data
                        ignore_above: 1024
                        level: extended
                        name: header.data
                        node_name: data
                        normalize: []
                        original_fieldset: elf
                        short: Data table of the ELF header.
                        type: keyword
                    entrypoint:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-entrypoint
                        description: Header entrypoint of the ELF file.
                        flat_name: process.session_leader.parent.elf.header.entrypoint
                        format: string
                        level: extended
                        name: header.entrypoint
                        node_name: entrypoint
                        normalize: []
                        original_fieldset: elf
                        short: Header entrypoint of the ELF file.
                        type: long
                    object_version:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-object-version
                        description: '"0x1" for original ELF files.'
                        flat_name: process.session_leader.parent.elf.header.object_version
                        ignore_above: 1024
                        level: extended
                        name: header.object_version
                        node_name: object_version
                        normalize: []
                        original_fieldset: elf
                        short: '"0x1" for original ELF files.'
                        type: keyword
                    os_abi:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-os-abi
                        description: Application Binary Interface (ABI) of the Linux
                          OS.
                        flat_name: process.session_leader.parent.elf.header.os_abi
                        ignore_above: 1024
                        level: extended
                        name: header.os_abi
                        node_name: os_abi
                        normalize: []
                        original_fieldset: elf
                        short: Application Binary Interface (ABI) of the Linux OS.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-type
                        description: Header type of the ELF file.
                        flat_name: process.session_leader.parent.elf.header.type
                        ignore_above: 1024
                        level: extended
                        name: header.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: Header type of the ELF file.
                        type: keyword
                    version:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-header-version
                        description: Version of the ELF header.
                        flat_name: process.session_leader.parent.elf.header.version
                        ignore_above: 1024
                        level: extended
                        name: header.version
                        node_name: version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF header.
                        type: keyword
                import_hash:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-import-hash
                    description: 'A hash of the imports in an ELF file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is an ELF implementation of the Windows PE imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.session_leader.parent.elf.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the imports in an ELF file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-imports
                    description: List of imported element names and types.
                    flat_name: process.session_leader.parent.elf.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.session_leader.parent.elf.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.session_leader.parent.elf.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                sections:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-sections
                    description: 'An array containing an object for each section of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.sections.*`.'
                    flat_name: process.session_leader.parent.elf.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: elf
                    short: Section information of the ELF file.
                    type: nested
                  fields:
                    chi2:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-chi2
                        description: Chi-square probability distribution of the section.
                        flat_name: process.session_leader.parent.elf.sections.chi2
                        format: number
                        level: extended
                        name: sections.chi2
                        node_name: chi2
                        normalize: []
                        original_fieldset: elf
                        short: Chi-square probability distribution of the section.
                        type: long
                    entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.session_leader.parent.elf.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the section.
                        type: long
                    flags:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-flags
                        description: ELF Section List flags.
                        flat_name: process.session_leader.parent.elf.sections.flags
                        ignore_above: 1024
                        level: extended
                        name: sections.flags
                        node_name: flags
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List flags.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-name
                        description: ELF Section List name.
                        flat_name: process.session_leader.parent.elf.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List name.
                        type: keyword
                    physical_offset:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-physical-offset
                        description: ELF Section List offset.
                        flat_name: process.session_leader.parent.elf.sections.physical_offset
                        ignore_above: 1024
                        level: extended
                        name: sections.physical_offset
                        node_name: physical_offset
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List offset.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-physical-size
                        description: ELF Section List physical size.
                        flat_name: process.session_leader.parent.elf.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List physical size.
                        type: long
                    type:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-type
                        description: ELF Section List type.
                        flat_name: process.session_leader.parent.elf.sections.type
                        ignore_above: 1024
                        level: extended
                        name: sections.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List type.
                        type: keyword
                    var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.session_leader.parent.elf.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_address:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-virtual-address
                        description: ELF Section List virtual address.
                        flat_name: process.session_leader.parent.elf.sections.virtual_address
                        format: string
                        level: extended
                        name: sections.virtual_address
                        node_name: virtual_address
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual address.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-sections-virtual-size
                        description: ELF Section List virtual size.
                        flat_name: process.session_leader.parent.elf.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual size.
                        type: long
                segments:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-segments
                    description: 'An array containing an object for each segment of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.segments.*`.'
                    flat_name: process.session_leader.parent.elf.segments
                    intermediate: false
                    level: extended
                    name: segments
                    node_name: segments
                    normalize:
                    - array
                    original_fieldset: elf
                    short: ELF object segment list.
                    type: nested
                  fields:
                    sections:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-segments-sections
                        description: ELF object segment sections.
                        flat_name: process.session_leader.parent.elf.segments.sections
                        ignore_above: 1024
                        level: extended
                        name: segments.sections
                        node_name: sections
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment sections.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: process-session-leader-parent-elf-segments-type
                        description: ELF object segment type.
                        flat_name: process.session_leader.parent.elf.segments.type
                        ignore_above: 1024
                        level: extended
                        name: segments.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment type.
                        type: keyword
                shared_libraries:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-shared-libraries
                    description: List of shared libraries used by this ELF object.
                    flat_name: process.session_leader.parent.elf.shared_libraries
                    ignore_above: 1024
                    level: extended
                    name: shared_libraries
                    node_name: shared_libraries
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of shared libraries used by this ELF object.
                    type: keyword
                telfhash:
                  field_details:
                    dashed_name: process-session-leader-parent-elf-telfhash
                    description: telfhash symbol hash for ELF file.
                    flat_name: process.session_leader.parent.elf.telfhash
                    ignore_above: 1024
                    level: extended
                    name: telfhash
                    node_name: telfhash
                    normalize: []
                    original_fieldset: elf
                    short: telfhash hash for ELF file.
                    type: keyword
            end:
              field_details:
                dashed_name: process-session-leader-parent-end
                description: The time the process ended.
                example: '2016-05-23T08:05:34.853Z'
                flat_name: process.session_leader.parent.end
                level: extended
                name: end
                node_name: end
                normalize: []
                original_fieldset: process
                short: The time the process ended.
                type: date
            entity_id:
              field_details:
                dashed_name: process-session-leader-parent-entity-id
                description: 'Unique identifier for the process.

                  The implementation of this is specified by the data source, but
                  some examples of what could be used here are a process-generated
                  UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying
                  components of a process.

                  Constructing a globally unique identifier is a common practice to
                  mitigate PID reuse as well as to identify a specific process over
                  time, across multiple monitored hosts.'
                example: c2c455d9f99375d
                flat_name: process.session_leader.parent.entity_id
                ignore_above: 1024
                level: extended
                name: entity_id
                node_name: entity_id
                normalize: []
                original_fieldset: process
                short: Unique identifier for the process.
                type: keyword
            entry_meta:
              field_details:
                dashed_name: process-session-leader-parent-entry-meta
                flat_name: process.session_leader.parent.entry_meta
                intermediate: true
                name: entry_meta
                node_name: entry_meta
                original_fieldset: process
                type: object
              fields:
                source:
                  field_details:
                    dashed_name: process-session-leader-parent-entry-meta-source
                    description: 'Source fields capture details about the sender of
                      a network exchange/packet. These fields are populated from a
                      network event, packet, or other event containing details of
                      a network transaction.

                      Source fields are usually populated in conjunction with destination
                      fields. The source and destination fields are considered the
                      baseline and should always be filled if an event contains source
                      and destination details from a network transaction. If the event
                      also contains identification of the client and server roles,
                      then the client and server fields should also be populated.'
                    flat_name: process.session_leader.parent.entry_meta.source
                    intermediate: true
                    name: source
                    node_name: source
                    original_fieldset: source
                    short: Fields about the source side of a network connection, used
                      with destination.
                    type: group
                  fields:
                    address:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-address
                        description: 'Some event source addresses are defined ambiguously.
                          The event will sometimes list an IP, a domain or a unix
                          socket.  You should always store the raw address in the
                          `.address` field.

                          Then it should be duplicated to `.ip` or `.domain`, depending
                          on which one it is.'
                        flat_name: process.session_leader.parent.entry_meta.source.address
                        ignore_above: 1024
                        level: extended
                        name: address
                        node_name: address
                        normalize: []
                        original_fieldset: source
                        short: Source network address.
                        type: keyword
                    as:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-as
                        description: An autonomous system (AS) is a collection of
                          connected Internet Protocol (IP) routing prefixes under
                          the control of one or more network operators on behalf of
                          a single administrative entity or domain that presents a
                          common, clearly defined routing policy to the internet.
                        flat_name: process.session_leader.parent.entry_meta.source.as
                        intermediate: true
                        name: as
                        node_name: as
                        original_fieldset: as
                        short: Fields describing an Autonomous System (Internet routing
                          prefix).
                        type: group
                      fields:
                        number:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-as-number
                            description: Unique number allocated to the autonomous
                              system. The autonomous system number (ASN) uniquely
                              identifies each network on the Internet.
                            example: 15169
                            flat_name: process.session_leader.parent.entry_meta.source.as.number
                            level: extended
                            name: number
                            node_name: number
                            normalize: []
                            original_fieldset: as
                            short: Unique number allocated to the autonomous system.
                            type: long
                        organization:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-as-organization
                            flat_name: process.session_leader.parent.entry_meta.source.as.organization
                            intermediate: true
                            name: organization
                            node_name: organization
                            original_fieldset: as
                            type: object
                          fields:
                            name:
                              field_details:
                                dashed_name: process-session-leader-parent-entry-meta-source-as-organization-name
                                description: Organization name.
                                example: Google LLC
                                flat_name: process.session_leader.parent.entry_meta.source.as.organization.name
                                ignore_above: 1024
                                level: extended
                                multi_fields:
                                - flat_name: process.session_leader.parent.entry_meta.source.as.organization.name.text
                                  name: text
                                  type: match_only_text
                                name: organization.name
                                node_name: name
                                normalize: []
                                original_fieldset: as
                                short: Organization name.
                                type: keyword
                    bytes:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-bytes
                        description: Bytes sent from the source to the destination.
                        example: 184
                        flat_name: process.session_leader.parent.entry_meta.source.bytes
                        format: bytes
                        level: core
                        name: bytes
                        node_name: bytes
                        normalize: []
                        original_fieldset: source
                        short: Bytes sent from the source to the destination.
                        type: long
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-domain
                        description: 'The domain name of the source system.

                          This value may be a host name, a fully qualified domain
                          name, or another host naming format. The value may derive
                          from the original event or be added from enrichment.'
                        example: foo.example.com
                        flat_name: process.session_leader.parent.entry_meta.source.domain
                        ignore_above: 1024
                        level: core
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: source
                        short: The domain name of the source.
                        type: keyword
                    geo:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-geo
                        description: 'Geo fields can carry data about a specific location
                          related to an event.

                          This geolocation information can be derived from techniques
                          such as Geo IP, or be user-supplied.'
                        flat_name: process.session_leader.parent.entry_meta.source.geo
                        intermediate: true
                        name: geo
                        node_name: geo
                        original_fieldset: geo
                        short: Fields describing a location.
                        type: group
                      fields:
                        city_name:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-city-name
                            description: City name.
                            example: Montreal
                            flat_name: process.session_leader.parent.entry_meta.source.geo.city_name
                            ignore_above: 1024
                            level: core
                            name: city_name
                            node_name: city_name
                            normalize: []
                            original_fieldset: geo
                            short: City name.
                            type: keyword
                        continent_code:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-continent-code
                            description: Two-letter code representing continent's
                              name.
                            example: NA
                            flat_name: process.session_leader.parent.entry_meta.source.geo.continent_code
                            ignore_above: 1024
                            level: core
                            name: continent_code
                            node_name: continent_code
                            normalize: []
                            original_fieldset: geo
                            short: Continent code.
                            type: keyword
                        continent_name:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-continent-name
                            description: Name of the continent.
                            example: North America
                            flat_name: process.session_leader.parent.entry_meta.source.geo.continent_name
                            ignore_above: 1024
                            level: core
                            name: continent_name
                            node_name: continent_name
                            normalize: []
                            original_fieldset: geo
                            short: Name of the continent.
                            type: keyword
                        country_iso_code:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-country-iso-code
                            description: Country ISO code.
                            example: CA
                            flat_name: process.session_leader.parent.entry_meta.source.geo.country_iso_code
                            ignore_above: 1024
                            level: core
                            name: country_iso_code
                            node_name: country_iso_code
                            normalize: []
                            original_fieldset: geo
                            short: Country ISO code.
                            type: keyword
                        country_name:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-country-name
                            description: Country name.
                            example: Canada
                            flat_name: process.session_leader.parent.entry_meta.source.geo.country_name
                            ignore_above: 1024
                            level: core
                            name: country_name
                            node_name: country_name
                            normalize: []
                            original_fieldset: geo
                            short: Country name.
                            type: keyword
                        location:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-location
                            description: Longitude and latitude.
                            example: '{ "lon": -73.614830, "lat": 45.505918 }'
                            flat_name: process.session_leader.parent.entry_meta.source.geo.location
                            level: core
                            name: location
                            node_name: location
                            normalize: []
                            original_fieldset: geo
                            short: Longitude and latitude.
                            type: geo_point
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-name
                            description: 'User-defined description of a location,
                              at the level of granularity they care about.

                              Could be the name of their data centers, the floor number,
                              if this describes a local physical entity, city names.

                              Not typically used in automated geolocation.'
                            example: boston-dc
                            flat_name: process.session_leader.parent.entry_meta.source.geo.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: geo
                            short: User-defined description of a location.
                            type: keyword
                        postal_code:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-postal-code
                            description: 'Postal code associated with the location.

                              Values appropriate for this field may also be known
                              as a postcode or ZIP code and will vary widely from
                              country to country.'
                            example: 94040
                            flat_name: process.session_leader.parent.entry_meta.source.geo.postal_code
                            ignore_above: 1024
                            level: core
                            name: postal_code
                            node_name: postal_code
                            normalize: []
                            original_fieldset: geo
                            short: Postal code.
                            type: keyword
                        region_iso_code:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-region-iso-code
                            description: Region ISO code.
                            example: CA-QC
                            flat_name: process.session_leader.parent.entry_meta.source.geo.region_iso_code
                            ignore_above: 1024
                            level: core
                            name: region_iso_code
                            node_name: region_iso_code
                            normalize: []
                            original_fieldset: geo
                            short: Region ISO code.
                            type: keyword
                        region_name:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-region-name
                            description: Region name.
                            example: Quebec
                            flat_name: process.session_leader.parent.entry_meta.source.geo.region_name
                            ignore_above: 1024
                            level: core
                            name: region_name
                            node_name: region_name
                            normalize: []
                            original_fieldset: geo
                            short: Region name.
                            type: keyword
                        timezone:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-geo-timezone
                            description: The time zone of the location, such as IANA
                              time zone name.
                            example: America/Argentina/Buenos_Aires
                            flat_name: process.session_leader.parent.entry_meta.source.geo.timezone
                            ignore_above: 1024
                            level: core
                            name: timezone
                            node_name: timezone
                            normalize: []
                            original_fieldset: geo
                            short: Time zone.
                            type: keyword
                    ip:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-ip
                        description: IP address of the source (IPv4 or IPv6).
                        flat_name: process.session_leader.parent.entry_meta.source.ip
                        level: core
                        name: ip
                        node_name: ip
                        normalize: []
                        original_fieldset: source
                        short: IP address of the source.
                        type: ip
                    mac:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-mac
                        description: 'MAC address of the source.

                          The notation format from RFC 7042 is suggested: Each octet
                          (that is, 8-bit byte) is represented by two [uppercase]
                          hexadecimal digits giving the value of the octet as an unsigned
                          integer. Successive octets are separated by a hyphen.'
                        example: 00-00-5E-00-53-23
                        flat_name: process.session_leader.parent.entry_meta.source.mac
                        ignore_above: 1024
                        level: core
                        name: mac
                        node_name: mac
                        normalize: []
                        original_fieldset: source
                        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                        short: MAC address of the source.
                        type: keyword
                    nat:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-nat
                        flat_name: process.session_leader.parent.entry_meta.source.nat
                        intermediate: true
                        name: nat
                        node_name: nat
                        original_fieldset: source
                        type: object
                      fields:
                        ip:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-nat-ip
                            description: 'Translated ip of source based NAT sessions
                              (e.g. internal client to internet)

                              Typically connections traversing load balancers, firewalls,
                              or routers.'
                            flat_name: process.session_leader.parent.entry_meta.source.nat.ip
                            level: extended
                            name: nat.ip
                            node_name: ip
                            normalize: []
                            original_fieldset: source
                            short: Source NAT ip
                            type: ip
                        port:
                          field_details:
                            dashed_name: process-session-leader-parent-entry-meta-source-nat-port
                            description: 'Translated port of source based NAT sessions.
                              (e.g. internal client to internet)

                              Typically used with load balancers, firewalls, or routers.'
                            flat_name: process.session_leader.parent.entry_meta.source.nat.port
                            format: string
                            level: extended
                            name: nat.port
                            node_name: port
                            normalize: []
                            original_fieldset: source
                            short: Source NAT port
                            type: long
                    packets:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-packets
                        description: Packets sent from the source to the destination.
                        example: 12
                        flat_name: process.session_leader.parent.entry_meta.source.packets
                        level: core
                        name: packets
                        node_name: packets
                        normalize: []
                        original_fieldset: source
                        short: Packets sent from the source to the destination.
                        type: long
                    port:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-port
                        description: Port of the source.
                        flat_name: process.session_leader.parent.entry_meta.source.port
                        format: string
                        level: core
                        name: port
                        node_name: port
                        normalize: []
                        original_fieldset: source
                        short: Port of the source.
                        type: long
                    registered_domain:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-registered-domain
                        description: 'The highest registered source domain, stripped
                          of the subdomain.

                          For example, the registered domain for "foo.example.com"
                          is "example.com".

                          This value can be determined precisely with a list like
                          the public suffix list (http://publicsuffix.org). Trying
                          to approximate this by simply taking the last two labels
                          will not work well for TLDs such as "co.uk".'
                        example: example.com
                        flat_name: process.session_leader.parent.entry_meta.source.registered_domain
                        ignore_above: 1024
                        level: extended
                        name: registered_domain
                        node_name: registered_domain
                        normalize: []
                        original_fieldset: source
                        short: The highest registered source domain, stripped of the
                          subdomain.
                        type: keyword
                    subdomain:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-subdomain
                        description: 'The subdomain portion of a fully qualified domain
                          name includes all of the names except the host name under
                          the registered_domain.  In a partially qualified domain,
                          or if the the qualification level of the full name cannot
                          be determined, subdomain contains all of the names below
                          the registered domain.

                          For example the subdomain portion of "www.east.mydomain.co.uk"
                          is "east". If the domain has multiple levels of subdomain,
                          such as "sub2.sub1.example.com", the subdomain field should
                          contain "sub2.sub1", with no trailing period.'
                        example: east
                        flat_name: process.session_leader.parent.entry_meta.source.subdomain
                        ignore_above: 1024
                        level: extended
                        name: subdomain
                        node_name: subdomain
                        normalize: []
                        original_fieldset: source
                        short: The subdomain of the domain.
                        type: keyword
                    top_level_domain:
                      field_details:
                        dashed_name: process-session-leader-parent-entry-meta-source-top-level-domain
                        description: 'The effective top level domain (eTLD), also
                          known as the domain suffix, is the last part of the domain
                          name. For example, the top level domain for example.com
                          is "com".

                          This value can be determined precisely with a list like
                          the public suffix list (http://publicsuffix.org). Trying
                          to approximate this by simply taking the last label will
                          not work well for effective TLDs such as "co.uk".'
                        example: co.uk
                        flat_name: process.session_leader.parent.entry_meta.source.top_level_domain
                        ignore_above: 1024
                        level: extended
                        name: top_level_domain
                        node_name: top_level_domain
                        normalize: []
                        original_fieldset: source
                        short: The effective top level domain (com, org, net, co.uk).
                        type: keyword
                type:
                  field_details:
                    dashed_name: process-session-leader-parent-entry-meta-type
                    description: 'The entry type for the entry session leader. Values
                      include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal,
                      console

                      Note: This field is only set on process.session_leader.'
                    flat_name: process.session_leader.parent.entry_meta.type
                    ignore_above: 1024
                    level: extended
                    name: entry_meta.type
                    node_name: type
                    normalize: []
                    original_fieldset: process
                    short: The entry type for the entry session leader.
                    type: keyword
            env_vars:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-parent-env-vars
                description: 'Array of environment variable bindings. Captured from
                  a snapshot of the environment at the time of execution.

                  May be filtered to protect sensitive information.'
                example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
                flat_name: process.session_leader.parent.env_vars
                ignore_above: 1024
                level: extended
                name: env_vars
                node_name: env_vars
                normalize:
                - array
                original_fieldset: process
                short: Array of environment variable bindings.
                type: keyword
            executable:
              field_details:
                dashed_name: process-session-leader-parent-executable
                description: Absolute path to the process executable.
                example: /usr/bin/ssh
                flat_name: process.session_leader.parent.executable
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.parent.executable.text
                  name: text
                  type: match_only_text
                name: executable
                node_name: executable
                normalize: []
                original_fieldset: process
                short: Absolute path to the process executable.
                type: keyword
            exit_code:
              field_details:
                dashed_name: process-session-leader-parent-exit-code
                description: 'The exit code of the process, if this is a termination
                  event.

                  The field should be absent if there is no exit code for the event
                  (e.g. process start).'
                example: 137
                flat_name: process.session_leader.parent.exit_code
                level: extended
                name: exit_code
                node_name: exit_code
                normalize: []
                original_fieldset: process
                short: The exit code of the process.
                type: long
            group:
              field_details:
                dashed_name: process-session-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.parent.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.parent.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-group-name
                    description: Name of the group.
                    flat_name: process.session_leader.parent.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-session-leader-parent-hash
                description: 'The hash fields represent different bitwise hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).

                  Note that this fieldset is used for common hashes that may be computed
                  over a range of generic bytes. Entity-specific hashes such as ja3
                  or imphash are placed in the fieldsets to which they relate (tls
                  and pe, respectively).'
                flat_name: process.session_leader.parent.hash
                intermediate: true
                name: hash
                node_name: hash
                original_fieldset: hash
                short: Hashes, usually file hashes.
                type: group
              fields:
                md5:
                  field_details:
                    dashed_name: process-session-leader-parent-hash-md5
                    description: MD5 hash.
                    flat_name: process.session_leader.parent.hash.md5
                    ignore_above: 1024
                    level: extended
                    name: md5
                    node_name: md5
                    normalize: []
                    original_fieldset: hash
                    short: MD5 hash.
                    type: keyword
                sha1:
                  field_details:
                    dashed_name: process-session-leader-parent-hash-sha1
                    description: SHA1 hash.
                    flat_name: process.session_leader.parent.hash.sha1
                    ignore_above: 1024
                    level: extended
                    name: sha1
                    node_name: sha1
                    normalize: []
                    original_fieldset: hash
                    short: SHA1 hash.
                    type: keyword
                sha256:
                  field_details:
                    dashed_name: process-session-leader-parent-hash-sha256
                    description: SHA256 hash.
                    flat_name: process.session_leader.parent.hash.sha256
                    ignore_above: 1024
                    level: extended
                    name: sha256
                    node_name: sha256
                    normalize: []
                    original_fieldset: hash
                    short: SHA256 hash.
                    type: keyword
                sha384:
                  field_details:
                    dashed_name: process-session-leader-parent-hash-sha384
                    description: SHA384 hash.
                    flat_name: process.session_leader.parent.hash.sha384
                    ignore_above: 1024
                    level: extended
                    name: sha384
                    node_name: sha384
                    normalize: []
                    original_fieldset: hash
                    short: SHA384 hash.
                    type: keyword
                sha512:
                  field_details:
                    dashed_name: process-session-leader-parent-hash-sha512
                    description: SHA512 hash.
                    flat_name: process.session_leader.parent.hash.sha512
                    ignore_above: 1024
                    level: extended
                    name: sha512
                    node_name: sha512
                    normalize: []
                    original_fieldset: hash
                    short: SHA512 hash.
                    type: keyword
                ssdeep:
                  field_details:
                    dashed_name: process-session-leader-parent-hash-ssdeep
                    description: SSDEEP hash.
                    flat_name: process.session_leader.parent.hash.ssdeep
                    ignore_above: 1024
                    level: extended
                    name: ssdeep
                    node_name: ssdeep
                    normalize: []
                    original_fieldset: hash
                    short: SSDEEP hash.
                    type: keyword
                tlsh:
                  field_details:
                    dashed_name: process-session-leader-parent-hash-tlsh
                    description: TLSH hash.
                    flat_name: process.session_leader.parent.hash.tlsh
                    ignore_above: 1024
                    level: extended
                    name: tlsh
                    node_name: tlsh
                    normalize: []
                    original_fieldset: hash
                    short: TLSH hash.
                    type: keyword
            interactive:
              field_details:
                dashed_name: process-session-leader-parent-interactive
                description: 'Whether the process is connected to an interactive shell.

                  Process interactivity is inferred from the processes file descriptors.
                  If the character device for the controlling tty is the same as stdin
                  and stderr for the process, the process is considered interactive.

                  Note: A non-interactive process can belong to an interactive session
                  and is simply one that does not have open file descriptors reading
                  the controlling TTY on FD 0 (stdin) or writing to the controlling
                  TTY on FD 2 (stderr). A backgrounded process is still considered
                  interactive if stdin and stderr are connected to the controlling
                  TTY.'
                example: true
                flat_name: process.session_leader.parent.interactive
                level: extended
                name: interactive
                node_name: interactive
                normalize: []
                original_fieldset: process
                short: Whether the process is connected to an interactive shell.
                type: boolean
            io:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-parent-io
                description: 'A chunk of input or output (IO) from a single process.

                  This field only appears on the top level process object, which is
                  the process that wrote the output or read the input.'
                flat_name: process.session_leader.parent.io
                intermediate: false
                level: extended
                name: io
                node_name: io
                normalize: []
                original_fieldset: process
                short: A chunk of input or output (IO) from a single process.
                type: object
              fields:
                bytes_skipped:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-io-bytes-skipped
                    description: An array of byte offsets and lengths denoting where
                      IO data has been skipped.
                    flat_name: process.session_leader.parent.io.bytes_skipped
                    intermediate: false
                    level: extended
                    name: io.bytes_skipped
                    node_name: bytes_skipped
                    normalize:
                    - array
                    original_fieldset: process
                    short: An array of byte offsets and lengths denoting where IO
                      data has been skipped.
                    type: object
                  fields:
                    length:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-io-bytes-skipped-length
                        description: The length of bytes skipped.
                        flat_name: process.session_leader.parent.io.bytes_skipped.length
                        level: extended
                        name: io.bytes_skipped.length
                        node_name: length
                        normalize: []
                        original_fieldset: process
                        short: The length of bytes skipped.
                        type: long
                    offset:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-io-bytes-skipped-offset
                        description: The byte offset into this event's io.text (or
                          io.bytes in the future) where length bytes were skipped.
                        flat_name: process.session_leader.parent.io.bytes_skipped.offset
                        level: extended
                        name: io.bytes_skipped.offset
                        node_name: offset
                        normalize: []
                        original_fieldset: process
                        short: The byte offset into this event's io.text (or io.bytes
                          in the future) where length bytes were skipped.
                        type: long
                max_bytes_per_process_exceeded:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-io-max-bytes-per-process-exceeded
                    description: If true, the process producing the output has exceeded
                      the max_kilobytes_per_process configuration setting.
                    flat_name: process.session_leader.parent.io.max_bytes_per_process_exceeded
                    level: extended
                    name: io.max_bytes_per_process_exceeded
                    node_name: max_bytes_per_process_exceeded
                    normalize: []
                    original_fieldset: process
                    short: If true, the process producing the output has exceeded
                      the max_kilobytes_per_process configuration setting.
                    type: boolean
                text:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-io-text
                    description: 'A chunk of output or input sanitized to UTF-8.

                      Best efforts are made to ensure complete lines are captured
                      in these events. Assumptions should NOT be made that multiple
                      lines will appear in the same event. TTY output may contain
                      terminal control codes such as for cursor movement, so some
                      string queries may not match due to terminal codes inserted
                      between characters of a word.'
                    flat_name: process.session_leader.parent.io.text
                    level: extended
                    name: io.text
                    node_name: text
                    normalize: []
                    original_fieldset: process
                    short: A chunk of output or input sanitized to UTF-8.
                    type: wildcard
                total_bytes_captured:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-io-total-bytes-captured
                    description: The total number of bytes captured in this event.
                    flat_name: process.session_leader.parent.io.total_bytes_captured
                    level: extended
                    name: io.total_bytes_captured
                    node_name: total_bytes_captured
                    normalize: []
                    original_fieldset: process
                    short: The total number of bytes captured in this event.
                    type: long
                total_bytes_skipped:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-io-total-bytes-skipped
                    description: The total number of bytes that were not captured
                      due to implementation restrictions such as buffer size limits.
                      Implementors should strive to ensure this value is always zero
                    flat_name: process.session_leader.parent.io.total_bytes_skipped
                    level: extended
                    name: io.total_bytes_skipped
                    node_name: total_bytes_skipped
                    normalize: []
                    original_fieldset: process
                    short: The total number of bytes that were not captured due to
                      implementation restrictions such as buffer size limits.
                    type: long
                type:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-io-type
                    description: 'The type of object on which the IO action (read
                      or write) was taken.

                      Currently only ''tty'' is supported. Other types may be added
                      in the future for ''file'' and ''socket'' support.'
                    flat_name: process.session_leader.parent.io.type
                    ignore_above: 1024
                    level: extended
                    name: io.type
                    node_name: type
                    normalize: []
                    original_fieldset: process
                    short: The type of object on which the IO action (read or write)
                      was taken.
                    type: keyword
            macho:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-session-leader-parent-macho
                description: These fields contain Mac OS Mach Object file format (Mach-O)
                  metadata.
                flat_name: process.session_leader.parent.macho
                intermediate: true
                name: macho
                node_name: macho
                original_fieldset: macho
                short: These fields contain Mac OS Mach Object file format (Mach-O)
                  metadata.
                type: group
              fields:
                go_import_hash:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-go-import-hash
                    description: 'A hash of the Go language imports in a Mach-O file
                      excluding standard library imports. An import hash can be used
                      to fingerprint binaries even after recompilation or other code-level
                      transformations have occurred, which would change more traditional
                      hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.session_leader.parent.macho.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the Go language imports in a Mach-O file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.session_leader.parent.macho.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: macho
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.session_leader.parent.macho.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.session_leader.parent.macho.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.session_leader.parent.macho.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: macho
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                import_hash:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-import-hash
                    description: 'A hash of the imports in a Mach-O file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a synonym for symhash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.session_leader.parent.macho.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the imports in a Mach-O file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-imports
                    description: List of imported element names and types.
                    flat_name: process.session_leader.parent.macho.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: macho
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.session_leader.parent.macho.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.session_leader.parent.macho.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: macho
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                sections:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-sections
                    description: 'An array containing an object for each section of
                      the Mach-O file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `macho.sections.*`.'
                    flat_name: process.session_leader.parent.macho.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: macho
                    short: Section information of the Mach-O file.
                    type: nested
                  fields:
                    entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-macho-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.session_leader.parent.macho.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: macho
                        short: Shannon entropy calculation from the section.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-macho-sections-name
                        description: Mach-O Section List name.
                        flat_name: process.session_leader.parent.macho.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List name.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-session-leader-parent-macho-sections-physical-size
                        description: Mach-O Section List physical size.
                        flat_name: process.session_leader.parent.macho.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List physical size.
                        type: long
                    var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-macho-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.session_leader.parent.macho.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-session-leader-parent-macho-sections-virtual-size
                        description: Mach-O Section List virtual size. This is always
                          the same as `physical_size`.
                        flat_name: process.session_leader.parent.macho.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: macho
                        short: Mach-O Section List virtual size. This is always the
                          same as `physical_size`.
                        type: long
                symhash:
                  field_details:
                    dashed_name: process-session-leader-parent-macho-symhash
                    description: 'A hash of the imports in a Mach-O file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a Mach-O implementation of the Windows PE imphash'
                    example: d3ccf195b62a9279c3c19af1080497ec
                    flat_name: process.session_leader.parent.macho.symhash
                    ignore_above: 1024
                    level: extended
                    name: symhash
                    node_name: symhash
                    normalize: []
                    original_fieldset: macho
                    short: A hash of the imports in a Mach-O file.
                    type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-parent-name
                description: 'Process name.

                  Sometimes called program name or similar.'
                example: ssh
                flat_name: process.session_leader.parent.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.parent.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Process name.
                type: keyword
            pe:
              field_details:
                dashed_name: process-session-leader-parent-pe
                description: These fields contain Windows Portable Executable (PE)
                  metadata.
                flat_name: process.session_leader.parent.pe
                intermediate: true
                name: pe
                node_name: pe
                original_fieldset: pe
                short: These fields contain Windows Portable Executable (PE) metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-architecture
                    description: CPU architecture target for the file.
                    example: x64
                    flat_name: process.session_leader.parent.pe.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: pe
                    short: CPU architecture target for the file.
                    type: keyword
                company:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-company
                    description: Internal company name of the file, provided at compile-time.
                    example: Microsoft Corporation
                    flat_name: process.session_leader.parent.pe.company
                    ignore_above: 1024
                    level: extended
                    name: company
                    node_name: company
                    normalize: []
                    original_fieldset: pe
                    short: Internal company name of the file, provided at compile-time.
                    type: keyword
                description:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-description
                    description: Internal description of the file, provided at compile-time.
                    example: Paint
                    flat_name: process.session_leader.parent.pe.description
                    ignore_above: 1024
                    level: extended
                    name: description
                    node_name: description
                    normalize: []
                    original_fieldset: pe
                    short: Internal description of the file, provided at compile-time.
                    type: keyword
                file_version:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-file-version
                    description: Internal version of the file, provided at compile-time.
                    example: 6.3.9600.17415
                    flat_name: process.session_leader.parent.pe.file_version
                    ignore_above: 1024
                    level: extended
                    name: file_version
                    node_name: file_version
                    normalize: []
                    original_fieldset: pe
                    short: Process name.
                    type: keyword
                go_import_hash:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-go-import-hash
                    description: 'A hash of the Go language imports in a PE file excluding
                      standard library imports. An import hash can be used to fingerprint
                      binaries even after recompilation or other code-level transformations
                      have occurred, which would change more traditional hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: process.session_leader.parent.pe.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the Go language imports in a PE file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: process.session_leader.parent.pe.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: pe
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: process.session_leader.parent.pe.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: process.session_leader.parent.pe.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: process.session_leader.parent.pe.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: pe
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                imphash:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-imphash
                    description: 'A hash of the imports in a PE file. An imphash --
                      or import hash -- can be used to fingerprint binaries even after
                      recompilation or other code-level transformations have occurred,
                      which would change more traditional hash values.

                      Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                    example: 0c6803c4e922103c4dca5963aad36ddf
                    flat_name: process.session_leader.parent.pe.imphash
                    ignore_above: 1024
                    level: extended
                    name: imphash
                    node_name: imphash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                import_hash:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-import-hash
                    description: 'A hash of the imports in a PE file. An import hash
                      can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a synonym for imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: process.session_leader.parent.pe.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-imports
                    description: List of imported element names and types.
                    flat_name: process.session_leader.parent.pe.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: pe
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: process.session_leader.parent.pe.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: process.session_leader.parent.pe.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                original_file_name:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-original-file-name
                    description: Internal name of the file, provided at compile-time.
                    example: MSPAINT.EXE
                    flat_name: process.session_leader.parent.pe.original_file_name
                    ignore_above: 1024
                    level: extended
                    name: original_file_name
                    node_name: original_file_name
                    normalize: []
                    original_fieldset: pe
                    short: Internal name of the file, provided at compile-time.
                    type: keyword
                pehash:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-pehash
                    description: 'A hash of the PE header and data from one or more
                      PE sections. An pehash can be used to cluster files by transforming
                      structural information about a file into a hash value.

                      Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                    example: 73ff189b63cd6be375a7ff25179a38d347651975
                    flat_name: process.session_leader.parent.pe.pehash
                    ignore_above: 1024
                    level: extended
                    name: pehash
                    node_name: pehash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the PE header and data from one or more PE sections.
                    type: keyword
                product:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-product
                    description: Internal product name of the file, provided at compile-time.
                    example: "Microsoft\xAE Windows\xAE Operating System"
                    flat_name: process.session_leader.parent.pe.product
                    ignore_above: 1024
                    level: extended
                    name: product
                    node_name: product
                    normalize: []
                    original_fieldset: pe
                    short: Internal product name of the file, provided at compile-time.
                    type: keyword
                sections:
                  field_details:
                    dashed_name: process-session-leader-parent-pe-sections
                    description: 'An array containing an object for each section of
                      the PE file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `pe.sections.*`.'
                    flat_name: process.session_leader.parent.pe.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: pe
                    short: Section information of the PE file.
                    type: nested
                  fields:
                    entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-pe-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: process.session_leader.parent.pe.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the section.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-pe-sections-name
                        description: PE Section List name.
                        flat_name: process.session_leader.parent.pe.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List name.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: process-session-leader-parent-pe-sections-physical-size
                        description: PE Section List physical size.
                        flat_name: process.session_leader.parent.pe.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List physical size.
                        type: long
                    var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-pe-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: process.session_leader.parent.pe.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: process-session-leader-parent-pe-sections-virtual-size
                        description: PE Section List virtual size. This is always
                          the same as `physical_size`.
                        flat_name: process.session_leader.parent.pe.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List virtual size. This is always the same
                          as `physical_size`.
                        type: long
            pgid:
              field_details:
                dashed_name: process-session-leader-parent-pgid
                description: 'Deprecated for removal in next major version release.
                  This field is superseded by `process.group_leader.pid`.

                  Identifier of the group of processes the process belongs to.'
                flat_name: process.session_leader.parent.pgid
                format: string
                level: extended
                name: pgid
                node_name: pgid
                normalize: []
                original_fieldset: process
                short: Deprecated identifier of the group of processes the process
                  belongs to.
                type: long
            pid:
              field_details:
                dashed_name: process-session-leader-parent-pid
                description: Process id.
                example: 4242
                flat_name: process.session_leader.parent.pid
                format: string
                level: core
                name: pid
                node_name: pid
                normalize: []
                original_fieldset: process
                short: Process id.
                type: long
            real_group:
              field_details:
                dashed_name: process-session-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.parent.group
                intermediate: true
                name: real_group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-real-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.real_group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-real-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.parent.real_group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-real-group-name
                    description: Name of the group.
                    flat_name: process.session_leader.parent.real_group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            real_user:
              field_details:
                dashed_name: process-session-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.session_leader.parent.user
                intermediate: true
                name: real_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.real_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-email
                    description: User email address.
                    flat_name: process.session_leader.parent.real_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.session_leader.parent.real_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.real_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.real_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.real_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.real_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-group-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.real_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.session_leader.parent.real_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.session_leader.parent.real_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.session_leader.parent.real_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.session_leader.parent.real_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-session-leader-parent-real-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.session_leader.parent.real_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.session_leader.parent.real_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.session_leader.parent.real_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.session_leader.parent.real_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.session_leader.parent.real_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.session_leader.parent.real_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-real-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.session_leader.parent.real_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-session-leader-parent-real-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.session_leader.parent.real_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            same_as_process:
              field_details:
                dashed_name: process-session-leader-parent-same-as-process
                description: 'This boolean is used to identify if a leader process
                  is the same as the top level process.

                  For example, if `process.group_leader.same_as_process = true`, it
                  means the process event in question is the leader of its process
                  group. Details under `process.*` like `pid` would be the same under
                  `process.group_leader.*` The same applies for both `process.session_leader`
                  and `process.entry_leader`.

                  This field exists to the benefit of EQL and other rule engines since
                  it''s not possible to compare equality between two fields in a single
                  document. e.g `process.entity_id` = `process.group_leader.entity_id`
                  (top level process is the process group leader) OR `process.entity_id`
                  = `process.entry_leader.entity_id` (top level process is the entry
                  session leader)

                  Instead these rules could be written like: `process.group_leader.same_as_process:
                  true` OR `process.entry_leader.same_as_process: true`

                  Note: This field is only set on `process.entry_leader`, `process.session_leader`
                  and `process.group_leader`.'
                example: true
                flat_name: process.session_leader.parent.same_as_process
                level: extended
                name: same_as_process
                node_name: same_as_process
                normalize: []
                original_fieldset: process
                short: This boolean is used to identify if a leader process is the
                  same as the top level process.
                type: boolean
            saved_group:
              field_details:
                dashed_name: process-session-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.parent.group
                intermediate: true
                name: saved_group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.saved_group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.parent.saved_group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-group-name
                    description: Name of the group.
                    flat_name: process.session_leader.parent.saved_group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            saved_user:
              field_details:
                dashed_name: process-session-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.session_leader.parent.user
                intermediate: true
                name: saved_user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.saved_user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-email
                    description: User email address.
                    flat_name: process.session_leader.parent.saved_user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.session_leader.parent.saved_user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.saved_user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.saved_user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.saved_user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.saved_user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-group-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.saved_user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.session_leader.parent.saved_user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.session_leader.parent.saved_user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.session_leader.parent.saved_user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.session_leader.parent.saved_user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-session-leader-parent-saved-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.session_leader.parent.saved_user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.session_leader.parent.saved_user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.session_leader.parent.saved_user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.session_leader.parent.saved_user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.session_leader.parent.saved_user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.session_leader.parent.saved_user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-saved-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.session_leader.parent.saved_user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-session-leader-parent-saved-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.session_leader.parent.saved_user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            session_leader:
              field_details:
                dashed_name: process-session-leader-parent-process
                description: 'These fields contain information about a process.

                  These fields can help you correlate metrics information with a process
                  id/name from a log message.  The `process.pid` often stays in the
                  metric itself and is copied to the global field for correlation.'
                flat_name: process.session_leader.parent.process
                intermediate: true
                name: session_leader
                node_name: process
                original_fieldset: process
                short: These fields contain information about a process.
                type: group
              fields:
                args:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-args
                    description: 'Array of process arguments, starting with the absolute
                      path to the executable.

                      May be filtered to protect sensitive information.'
                    example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
                    flat_name: process.session_leader.parent.session_leader.args
                    ignore_above: 1024
                    level: extended
                    name: args
                    node_name: args
                    normalize:
                    - array
                    original_fieldset: process
                    short: Array of process arguments.
                    type: keyword
                args_count:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-args-count
                    description: 'Length of the process.args array.

                      This field can be useful for querying or performing bucket analysis
                      on how many arguments were provided to start a process. More
                      arguments may be an indication of suspicious activity.'
                    example: 4
                    flat_name: process.session_leader.parent.session_leader.args_count
                    level: extended
                    name: args_count
                    node_name: args_count
                    normalize: []
                    original_fieldset: process
                    short: Length of the process.args array.
                    type: long
                attested_groups:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.session_leader.group
                    intermediate: true
                    name: attested_groups
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-groups-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.attested_groups.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-groups-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.session_leader.attested_groups.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-groups-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.session_leader.attested_groups.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                attested_user:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.session_leader.parent.session_leader.user
                    intermediate: true
                    name: attested_user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.attested_user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-email
                        description: User email address.
                        flat_name: process.session_leader.parent.session_leader.attested_user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.session_leader.parent.session_leader.attested_user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.attested_user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.session_leader.parent.session_leader.attested_user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.session_leader.parent.session_leader.attested_user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.session_leader.parent.session_leader.attested_user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-group-name
                            description: Name of the group.
                            flat_name: process.session_leader.parent.session_leader.attested_user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.session_leader.parent.session_leader.attested_user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.session_leader.parent.session_leader.attested_user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.session_leader.parent.session_leader.attested_user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.attested_user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-session-leader-parent-session-leader-attested-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.session_leader.parent.session_leader.attested_user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.attested_user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.session_leader.parent.session_leader.attested_user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.session_leader.parent.session_leader.attested_user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.attested_user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.session_leader.parent.session_leader.attested_user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-attested-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.session_leader.parent.session_leader.attested_user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-attested-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.session_leader.parent.session_leader.attested_user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                code_signature:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-code-signature
                    description: These fields contain information about binary code
                      signatures.
                    flat_name: process.session_leader.parent.session_leader.code_signature
                    intermediate: true
                    name: code_signature
                    node_name: code_signature
                    original_fieldset: code_signature
                    short: These fields contain information about binary code signatures.
                    type: group
                  fields:
                    digest_algorithm:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-digest-algorithm
                        description: 'The hashing algorithm used to sign the process.

                          This value can distinguish signatures when a file is signed
                          multiple times by the same signer but with a different digest
                          algorithm.'
                        example: sha256
                        flat_name: process.session_leader.parent.session_leader.code_signature.digest_algorithm
                        ignore_above: 1024
                        level: extended
                        name: digest_algorithm
                        node_name: digest_algorithm
                        normalize: []
                        original_fieldset: code_signature
                        short: Hashing algorithm used to sign the process.
                        type: keyword
                    exists:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-exists
                        description: Boolean to capture if a signature is present.
                        example: 'true'
                        flat_name: process.session_leader.parent.session_leader.code_signature.exists
                        level: core
                        name: exists
                        node_name: exists
                        normalize: []
                        original_fieldset: code_signature
                        short: Boolean to capture if a signature is present.
                        type: boolean
                    signing_id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-signing-id
                        description: 'The identifier used to sign the process.

                          This is used to identify the application manufactured by
                          a software vendor. The field is relevant to Apple *OS only.'
                        example: com.apple.xpc.proxy
                        flat_name: process.session_leader.parent.session_leader.code_signature.signing_id
                        ignore_above: 1024
                        level: extended
                        name: signing_id
                        node_name: signing_id
                        normalize: []
                        original_fieldset: code_signature
                        short: The identifier used to sign the process.
                        type: keyword
                    status:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-status
                        description: 'Additional information about the certificate
                          status.

                          This is useful for logging cryptographic errors with the
                          certificate validity or trust status. Leave unpopulated
                          if the validity or trust of the certificate was unchecked.'
                        example: ERROR_UNTRUSTED_ROOT
                        flat_name: process.session_leader.parent.session_leader.code_signature.status
                        ignore_above: 1024
                        level: extended
                        name: status
                        node_name: status
                        normalize: []
                        original_fieldset: code_signature
                        short: Additional information about the certificate status.
                        type: keyword
                    subject_name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-subject-name
                        description: Subject name of the code signer
                        example: Microsoft Corporation
                        flat_name: process.session_leader.parent.session_leader.code_signature.subject_name
                        ignore_above: 1024
                        level: core
                        name: subject_name
                        node_name: subject_name
                        normalize: []
                        original_fieldset: code_signature
                        short: Subject name of the code signer
                        type: keyword
                    team_id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-team-id
                        description: 'The team identifier used to sign the process.

                          This is used to identify the team or vendor of a software
                          product. The field is relevant to Apple *OS only.'
                        example: EQHXZ8M8AV
                        flat_name: process.session_leader.parent.session_leader.code_signature.team_id
                        ignore_above: 1024
                        level: extended
                        name: team_id
                        node_name: team_id
                        normalize: []
                        original_fieldset: code_signature
                        short: The team identifier used to sign the process.
                        type: keyword
                    timestamp:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-timestamp
                        description: Date and time when the code signature was generated
                          and signed.
                        example: '2021-01-01T12:10:30Z'
                        flat_name: process.session_leader.parent.session_leader.code_signature.timestamp
                        level: extended
                        name: timestamp
                        node_name: timestamp
                        normalize: []
                        original_fieldset: code_signature
                        short: When the signature was generated and signed.
                        type: date
                    trusted:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-trusted
                        description: 'Stores the trust status of the certificate chain.

                          Validating the trust of the certificate chain may be complicated,
                          and this field should only be populated by tools that actively
                          check the status.'
                        example: 'true'
                        flat_name: process.session_leader.parent.session_leader.code_signature.trusted
                        level: extended
                        name: trusted
                        node_name: trusted
                        normalize: []
                        original_fieldset: code_signature
                        short: Stores the trust status of the certificate chain.
                        type: boolean
                    valid:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-code-signature-valid
                        description: 'Boolean to capture if the digital signature
                          is verified against the binary content.

                          Leave unpopulated if a certificate was unchecked.'
                        example: 'true'
                        flat_name: process.session_leader.parent.session_leader.code_signature.valid
                        level: extended
                        name: valid
                        node_name: valid
                        normalize: []
                        original_fieldset: code_signature
                        short: Boolean to capture if the digital signature is verified
                          against the binary content.
                        type: boolean
                command_line:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-command-line
                    description: 'Full command line that started the process, including
                      the absolute path to the executable, and all arguments.

                      Some arguments may be filtered to protect sensitive information.'
                    example: /usr/bin/ssh -l user 10.0.0.16
                    flat_name: process.session_leader.parent.session_leader.command_line
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.session_leader.command_line.text
                      name: text
                      type: match_only_text
                    name: command_line
                    node_name: command_line
                    normalize: []
                    original_fieldset: process
                    short: Full command line that started the process.
                    type: wildcard
                elf:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-session-leader-parent-session-leader-elf
                    description: These fields contain Linux Executable Linkable Format
                      (ELF) metadata.
                    flat_name: process.session_leader.parent.session_leader.elf
                    intermediate: true
                    name: elf
                    node_name: elf
                    original_fieldset: elf
                    short: These fields contain Linux Executable Linkable Format (ELF)
                      metadata.
                    type: group
                  fields:
                    architecture:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-architecture
                        description: Machine architecture of the ELF file.
                        example: x86-64
                        flat_name: process.session_leader.parent.session_leader.elf.architecture
                        ignore_above: 1024
                        level: extended
                        name: architecture
                        node_name: architecture
                        normalize: []
                        original_fieldset: elf
                        short: Machine architecture of the ELF file.
                        type: keyword
                    byte_order:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-byte-order
                        description: Byte sequence of ELF file.
                        example: Little Endian
                        flat_name: process.session_leader.parent.session_leader.elf.byte_order
                        ignore_above: 1024
                        level: extended
                        name: byte_order
                        node_name: byte_order
                        normalize: []
                        original_fieldset: elf
                        short: Byte sequence of ELF file.
                        type: keyword
                    cpu_type:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-cpu-type
                        description: CPU type of the ELF file.
                        example: Intel
                        flat_name: process.session_leader.parent.session_leader.elf.cpu_type
                        ignore_above: 1024
                        level: extended
                        name: cpu_type
                        node_name: cpu_type
                        normalize: []
                        original_fieldset: elf
                        short: CPU type of the ELF file.
                        type: keyword
                    creation_date:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-creation-date
                        description: Extracted when possible from the file's metadata.
                          Indicates when it was built or compiled. It can also be
                          faked by malware creators.
                        flat_name: process.session_leader.parent.session_leader.elf.creation_date
                        level: extended
                        name: creation_date
                        node_name: creation_date
                        normalize: []
                        original_fieldset: elf
                        short: Build or compile date.
                        type: date
                    exports:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-exports
                        description: List of exported element names and types.
                        flat_name: process.session_leader.parent.session_leader.elf.exports
                        level: extended
                        name: exports
                        node_name: exports
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of exported element names and types.
                        type: flattened
                    go_import_hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-go-import-hash
                        description: 'A hash of the Go language imports in an ELF
                          file excluding standard library imports. An import hash
                          can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: process.session_leader.parent.session_leader.elf.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: elf
                        short: A hash of the Go language imports in an ELF file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: process.session_leader.parent.session_leader.elf.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: elf
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: process.session_leader.parent.session_leader.elf.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: process.session_leader.parent.session_leader.elf.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: process.session_leader.parent.session_leader.elf.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: elf
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    header:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-header
                        flat_name: process.session_leader.parent.session_leader.elf.header
                        intermediate: true
                        name: header
                        node_name: header
                        original_fieldset: elf
                        type: object
                      fields:
                        abi_version:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-abi-version
                            description: Version of the ELF Application Binary Interface
                              (ABI).
                            flat_name: process.session_leader.parent.session_leader.elf.header.abi_version
                            ignore_above: 1024
                            level: extended
                            name: header.abi_version
                            node_name: abi_version
                            normalize: []
                            original_fieldset: elf
                            short: Version of the ELF Application Binary Interface
                              (ABI).
                            type: keyword
                        class:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-class
                            description: Header class of the ELF file.
                            flat_name: process.session_leader.parent.session_leader.elf.header.class
                            ignore_above: 1024
                            level: extended
                            name: header.class
                            node_name: class
                            normalize: []
                            original_fieldset: elf
                            short: Header class of the ELF file.
                            type: keyword
                        data:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-data
                            description: Data table of the ELF header.
                            flat_name: process.session_leader.parent.session_leader.elf.header.data
                            ignore_above: 1024
                            level: extended
                            name: header.data
                            node_name: data
                            normalize: []
                            original_fieldset: elf
                            short: Data table of the ELF header.
                            type: keyword
                        entrypoint:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-entrypoint
                            description: Header entrypoint of the ELF file.
                            flat_name: process.session_leader.parent.session_leader.elf.header.entrypoint
                            format: string
                            level: extended
                            name: header.entrypoint
                            node_name: entrypoint
                            normalize: []
                            original_fieldset: elf
                            short: Header entrypoint of the ELF file.
                            type: long
                        object_version:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-object-version
                            description: '"0x1" for original ELF files.'
                            flat_name: process.session_leader.parent.session_leader.elf.header.object_version
                            ignore_above: 1024
                            level: extended
                            name: header.object_version
                            node_name: object_version
                            normalize: []
                            original_fieldset: elf
                            short: '"0x1" for original ELF files.'
                            type: keyword
                        os_abi:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-os-abi
                            description: Application Binary Interface (ABI) of the
                              Linux OS.
                            flat_name: process.session_leader.parent.session_leader.elf.header.os_abi
                            ignore_above: 1024
                            level: extended
                            name: header.os_abi
                            node_name: os_abi
                            normalize: []
                            original_fieldset: elf
                            short: Application Binary Interface (ABI) of the Linux
                              OS.
                            type: keyword
                        type:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-type
                            description: Header type of the ELF file.
                            flat_name: process.session_leader.parent.session_leader.elf.header.type
                            ignore_above: 1024
                            level: extended
                            name: header.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: Header type of the ELF file.
                            type: keyword
                        version:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-header-version
                            description: Version of the ELF header.
                            flat_name: process.session_leader.parent.session_leader.elf.header.version
                            ignore_above: 1024
                            level: extended
                            name: header.version
                            node_name: version
                            normalize: []
                            original_fieldset: elf
                            short: Version of the ELF header.
                            type: keyword
                    import_hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-import-hash
                        description: 'A hash of the imports in an ELF file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is an ELF implementation of the Windows PE imphash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: process.session_leader.parent.session_leader.elf.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: elf
                        short: A hash of the imports in an ELF file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-imports
                        description: List of imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.elf.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.elf.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.elf.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    sections:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-sections
                        description: 'An array containing an object for each section
                          of the ELF file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `elf.sections.*`.'
                        flat_name: process.session_leader.parent.session_leader.elf.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: elf
                        short: Section information of the ELF file.
                        type: nested
                      fields:
                        chi2:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-chi2
                            description: Chi-square probability distribution of the
                              section.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.chi2
                            format: number
                            level: extended
                            name: sections.chi2
                            node_name: chi2
                            normalize: []
                            original_fieldset: elf
                            short: Chi-square probability distribution of the section.
                            type: long
                        entropy:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: elf
                            short: Shannon entropy calculation from the section.
                            type: long
                        flags:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-flags
                            description: ELF Section List flags.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.flags
                            ignore_above: 1024
                            level: extended
                            name: sections.flags
                            node_name: flags
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List flags.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-name
                            description: ELF Section List name.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List name.
                            type: keyword
                        physical_offset:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-physical-offset
                            description: ELF Section List offset.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.physical_offset
                            ignore_above: 1024
                            level: extended
                            name: sections.physical_offset
                            node_name: physical_offset
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List offset.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-physical-size
                            description: ELF Section List physical size.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List physical size.
                            type: long
                        type:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-type
                            description: ELF Section List type.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.type
                            ignore_above: 1024
                            level: extended
                            name: sections.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List type.
                            type: keyword
                        var_entropy:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: elf
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_address:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-virtual-address
                            description: ELF Section List virtual address.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.virtual_address
                            format: string
                            level: extended
                            name: sections.virtual_address
                            node_name: virtual_address
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List virtual address.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-sections-virtual-size
                            description: ELF Section List virtual size.
                            flat_name: process.session_leader.parent.session_leader.elf.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List virtual size.
                            type: long
                    segments:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-segments
                        description: 'An array containing an object for each segment
                          of the ELF file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `elf.segments.*`.'
                        flat_name: process.session_leader.parent.session_leader.elf.segments
                        intermediate: false
                        level: extended
                        name: segments
                        node_name: segments
                        normalize:
                        - array
                        original_fieldset: elf
                        short: ELF object segment list.
                        type: nested
                      fields:
                        sections:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-segments-sections
                            description: ELF object segment sections.
                            flat_name: process.session_leader.parent.session_leader.elf.segments.sections
                            ignore_above: 1024
                            level: extended
                            name: segments.sections
                            node_name: sections
                            normalize: []
                            original_fieldset: elf
                            short: ELF object segment sections.
                            type: keyword
                        type:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-elf-segments-type
                            description: ELF object segment type.
                            flat_name: process.session_leader.parent.session_leader.elf.segments.type
                            ignore_above: 1024
                            level: extended
                            name: segments.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: ELF object segment type.
                            type: keyword
                    shared_libraries:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-shared-libraries
                        description: List of shared libraries used by this ELF object.
                        flat_name: process.session_leader.parent.session_leader.elf.shared_libraries
                        ignore_above: 1024
                        level: extended
                        name: shared_libraries
                        node_name: shared_libraries
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of shared libraries used by this ELF object.
                        type: keyword
                    telfhash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-elf-telfhash
                        description: telfhash symbol hash for ELF file.
                        flat_name: process.session_leader.parent.session_leader.elf.telfhash
                        ignore_above: 1024
                        level: extended
                        name: telfhash
                        node_name: telfhash
                        normalize: []
                        original_fieldset: elf
                        short: telfhash hash for ELF file.
                        type: keyword
                end:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-end
                    description: The time the process ended.
                    example: '2016-05-23T08:05:34.853Z'
                    flat_name: process.session_leader.parent.session_leader.end
                    level: extended
                    name: end
                    node_name: end
                    normalize: []
                    original_fieldset: process
                    short: The time the process ended.
                    type: date
                entity_id:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-entity-id
                    description: 'Unique identifier for the process.

                      The implementation of this is specified by the data source,
                      but some examples of what could be used here are a process-generated
                      UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying
                      components of a process.

                      Constructing a globally unique identifier is a common practice
                      to mitigate PID reuse as well as to identify a specific process
                      over time, across multiple monitored hosts.'
                    example: c2c455d9f99375d
                    flat_name: process.session_leader.parent.session_leader.entity_id
                    ignore_above: 1024
                    level: extended
                    name: entity_id
                    node_name: entity_id
                    normalize: []
                    original_fieldset: process
                    short: Unique identifier for the process.
                    type: keyword
                entry_meta:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-entry-meta
                    flat_name: process.session_leader.parent.session_leader.entry_meta
                    intermediate: true
                    name: entry_meta
                    node_name: entry_meta
                    original_fieldset: process
                    type: object
                  fields:
                    source:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-entry-meta-source
                        description: 'Source fields capture details about the sender
                          of a network exchange/packet. These fields are populated
                          from a network event, packet, or other event containing
                          details of a network transaction.

                          Source fields are usually populated in conjunction with
                          destination fields. The source and destination fields are
                          considered the baseline and should always be filled if an
                          event contains source and destination details from a network
                          transaction. If the event also contains identification of
                          the client and server roles, then the client and server
                          fields should also be populated.'
                        flat_name: process.session_leader.parent.session_leader.entry_meta.source
                        intermediate: true
                        name: source
                        node_name: source
                        original_fieldset: source
                        short: Fields about the source side of a network connection,
                          used with destination.
                        type: group
                      fields:
                        address:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-address
                            description: 'Some event source addresses are defined
                              ambiguously. The event will sometimes list an IP, a
                              domain or a unix socket.  You should always store the
                              raw address in the `.address` field.

                              Then it should be duplicated to `.ip` or `.domain`,
                              depending on which one it is.'
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.address
                            ignore_above: 1024
                            level: extended
                            name: address
                            node_name: address
                            normalize: []
                            original_fieldset: source
                            short: Source network address.
                            type: keyword
                        as:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-as
                            description: An autonomous system (AS) is a collection
                              of connected Internet Protocol (IP) routing prefixes
                              under the control of one or more network operators on
                              behalf of a single administrative entity or domain that
                              presents a common, clearly defined routing policy to
                              the internet.
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.as
                            intermediate: true
                            name: as
                            node_name: as
                            original_fieldset: as
                            short: Fields describing an Autonomous System (Internet
                              routing prefix).
                            type: group
                          fields:
                            number:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-as-number
                                description: Unique number allocated to the autonomous
                                  system. The autonomous system number (ASN) uniquely
                                  identifies each network on the Internet.
                                example: 15169
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.as.number
                                level: extended
                                name: number
                                node_name: number
                                normalize: []
                                original_fieldset: as
                                short: Unique number allocated to the autonomous system.
                                type: long
                            organization:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-as-organization
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.as.organization
                                intermediate: true
                                name: organization
                                node_name: organization
                                original_fieldset: as
                                type: object
                              fields:
                                name:
                                  field_details:
                                    dashed_name: process-session-leader-parent-session-leader-entry-meta-source-as-organization-name
                                    description: Organization name.
                                    example: Google LLC
                                    flat_name: process.session_leader.parent.session_leader.entry_meta.source.as.organization.name
                                    ignore_above: 1024
                                    level: extended
                                    multi_fields:
                                    - flat_name: process.session_leader.parent.session_leader.entry_meta.source.as.organization.name.text
                                      name: text
                                      type: match_only_text
                                    name: organization.name
                                    node_name: name
                                    normalize: []
                                    original_fieldset: as
                                    short: Organization name.
                                    type: keyword
                        bytes:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-bytes
                            description: Bytes sent from the source to the destination.
                            example: 184
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.bytes
                            format: bytes
                            level: core
                            name: bytes
                            node_name: bytes
                            normalize: []
                            original_fieldset: source
                            short: Bytes sent from the source to the destination.
                            type: long
                        domain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-domain
                            description: 'The domain name of the source system.

                              This value may be a host name, a fully qualified domain
                              name, or another host naming format. The value may derive
                              from the original event or be added from enrichment.'
                            example: foo.example.com
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.domain
                            ignore_above: 1024
                            level: core
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: source
                            short: The domain name of the source.
                            type: keyword
                        geo:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo
                            description: 'Geo fields can carry data about a specific
                              location related to an event.

                              This geolocation information can be derived from techniques
                              such as Geo IP, or be user-supplied.'
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo
                            intermediate: true
                            name: geo
                            node_name: geo
                            original_fieldset: geo
                            short: Fields describing a location.
                            type: group
                          fields:
                            city_name:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-city-name
                                description: City name.
                                example: Montreal
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.city_name
                                ignore_above: 1024
                                level: core
                                name: city_name
                                node_name: city_name
                                normalize: []
                                original_fieldset: geo
                                short: City name.
                                type: keyword
                            continent_code:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-continent-code
                                description: Two-letter code representing continent's
                                  name.
                                example: NA
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.continent_code
                                ignore_above: 1024
                                level: core
                                name: continent_code
                                node_name: continent_code
                                normalize: []
                                original_fieldset: geo
                                short: Continent code.
                                type: keyword
                            continent_name:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-continent-name
                                description: Name of the continent.
                                example: North America
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.continent_name
                                ignore_above: 1024
                                level: core
                                name: continent_name
                                node_name: continent_name
                                normalize: []
                                original_fieldset: geo
                                short: Name of the continent.
                                type: keyword
                            country_iso_code:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-country-iso-code
                                description: Country ISO code.
                                example: CA
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.country_iso_code
                                ignore_above: 1024
                                level: core
                                name: country_iso_code
                                node_name: country_iso_code
                                normalize: []
                                original_fieldset: geo
                                short: Country ISO code.
                                type: keyword
                            country_name:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-country-name
                                description: Country name.
                                example: Canada
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.country_name
                                ignore_above: 1024
                                level: core
                                name: country_name
                                node_name: country_name
                                normalize: []
                                original_fieldset: geo
                                short: Country name.
                                type: keyword
                            location:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-location
                                description: Longitude and latitude.
                                example: '{ "lon": -73.614830, "lat": 45.505918 }'
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.location
                                level: core
                                name: location
                                node_name: location
                                normalize: []
                                original_fieldset: geo
                                short: Longitude and latitude.
                                type: geo_point
                            name:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-name
                                description: 'User-defined description of a location,
                                  at the level of granularity they care about.

                                  Could be the name of their data centers, the floor
                                  number, if this describes a local physical entity,
                                  city names.

                                  Not typically used in automated geolocation.'
                                example: boston-dc
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.name
                                ignore_above: 1024
                                level: extended
                                name: name
                                node_name: name
                                normalize: []
                                original_fieldset: geo
                                short: User-defined description of a location.
                                type: keyword
                            postal_code:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-postal-code
                                description: 'Postal code associated with the location.

                                  Values appropriate for this field may also be known
                                  as a postcode or ZIP code and will vary widely from
                                  country to country.'
                                example: 94040
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.postal_code
                                ignore_above: 1024
                                level: core
                                name: postal_code
                                node_name: postal_code
                                normalize: []
                                original_fieldset: geo
                                short: Postal code.
                                type: keyword
                            region_iso_code:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-region-iso-code
                                description: Region ISO code.
                                example: CA-QC
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.region_iso_code
                                ignore_above: 1024
                                level: core
                                name: region_iso_code
                                node_name: region_iso_code
                                normalize: []
                                original_fieldset: geo
                                short: Region ISO code.
                                type: keyword
                            region_name:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-region-name
                                description: Region name.
                                example: Quebec
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.region_name
                                ignore_above: 1024
                                level: core
                                name: region_name
                                node_name: region_name
                                normalize: []
                                original_fieldset: geo
                                short: Region name.
                                type: keyword
                            timezone:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-geo-timezone
                                description: The time zone of the location, such as
                                  IANA time zone name.
                                example: America/Argentina/Buenos_Aires
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.geo.timezone
                                ignore_above: 1024
                                level: core
                                name: timezone
                                node_name: timezone
                                normalize: []
                                original_fieldset: geo
                                short: Time zone.
                                type: keyword
                        ip:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-ip
                            description: IP address of the source (IPv4 or IPv6).
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.ip
                            level: core
                            name: ip
                            node_name: ip
                            normalize: []
                            original_fieldset: source
                            short: IP address of the source.
                            type: ip
                        mac:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-mac
                            description: 'MAC address of the source.

                              The notation format from RFC 7042 is suggested: Each
                              octet (that is, 8-bit byte) is represented by two [uppercase]
                              hexadecimal digits giving the value of the octet as
                              an unsigned integer. Successive octets are separated
                              by a hyphen.'
                            example: 00-00-5E-00-53-23
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.mac
                            ignore_above: 1024
                            level: core
                            name: mac
                            node_name: mac
                            normalize: []
                            original_fieldset: source
                            pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
                            short: MAC address of the source.
                            type: keyword
                        nat:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-nat
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.nat
                            intermediate: true
                            name: nat
                            node_name: nat
                            original_fieldset: source
                            type: object
                          fields:
                            ip:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-nat-ip
                                description: 'Translated ip of source based NAT sessions
                                  (e.g. internal client to internet)

                                  Typically connections traversing load balancers,
                                  firewalls, or routers.'
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.nat.ip
                                level: extended
                                name: nat.ip
                                node_name: ip
                                normalize: []
                                original_fieldset: source
                                short: Source NAT ip
                                type: ip
                            port:
                              field_details:
                                dashed_name: process-session-leader-parent-session-leader-entry-meta-source-nat-port
                                description: 'Translated port of source based NAT
                                  sessions. (e.g. internal client to internet)

                                  Typically used with load balancers, firewalls, or
                                  routers.'
                                flat_name: process.session_leader.parent.session_leader.entry_meta.source.nat.port
                                format: string
                                level: extended
                                name: nat.port
                                node_name: port
                                normalize: []
                                original_fieldset: source
                                short: Source NAT port
                                type: long
                        packets:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-packets
                            description: Packets sent from the source to the destination.
                            example: 12
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.packets
                            level: core
                            name: packets
                            node_name: packets
                            normalize: []
                            original_fieldset: source
                            short: Packets sent from the source to the destination.
                            type: long
                        port:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-port
                            description: Port of the source.
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.port
                            format: string
                            level: core
                            name: port
                            node_name: port
                            normalize: []
                            original_fieldset: source
                            short: Port of the source.
                            type: long
                        registered_domain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-registered-domain
                            description: 'The highest registered source domain, stripped
                              of the subdomain.

                              For example, the registered domain for "foo.example.com"
                              is "example.com".

                              This value can be determined precisely with a list like
                              the public suffix list (http://publicsuffix.org). Trying
                              to approximate this by simply taking the last two labels
                              will not work well for TLDs such as "co.uk".'
                            example: example.com
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.registered_domain
                            ignore_above: 1024
                            level: extended
                            name: registered_domain
                            node_name: registered_domain
                            normalize: []
                            original_fieldset: source
                            short: The highest registered source domain, stripped
                              of the subdomain.
                            type: keyword
                        subdomain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-subdomain
                            description: 'The subdomain portion of a fully qualified
                              domain name includes all of the names except the host
                              name under the registered_domain.  In a partially qualified
                              domain, or if the the qualification level of the full
                              name cannot be determined, subdomain contains all of
                              the names below the registered domain.

                              For example the subdomain portion of "www.east.mydomain.co.uk"
                              is "east". If the domain has multiple levels of subdomain,
                              such as "sub2.sub1.example.com", the subdomain field
                              should contain "sub2.sub1", with no trailing period.'
                            example: east
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.subdomain
                            ignore_above: 1024
                            level: extended
                            name: subdomain
                            node_name: subdomain
                            normalize: []
                            original_fieldset: source
                            short: The subdomain of the domain.
                            type: keyword
                        top_level_domain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-entry-meta-source-top-level-domain
                            description: 'The effective top level domain (eTLD), also
                              known as the domain suffix, is the last part of the
                              domain name. For example, the top level domain for example.com
                              is "com".

                              This value can be determined precisely with a list like
                              the public suffix list (http://publicsuffix.org). Trying
                              to approximate this by simply taking the last label
                              will not work well for effective TLDs such as "co.uk".'
                            example: co.uk
                            flat_name: process.session_leader.parent.session_leader.entry_meta.source.top_level_domain
                            ignore_above: 1024
                            level: extended
                            name: top_level_domain
                            node_name: top_level_domain
                            normalize: []
                            original_fieldset: source
                            short: The effective top level domain (com, org, net,
                              co.uk).
                            type: keyword
                    type:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-entry-meta-type
                        description: 'The entry type for the entry session leader.
                          Values include: init(e.g systemd), sshd, ssm, kubelet, teleport,
                          terminal, console

                          Note: This field is only set on process.session_leader.'
                        flat_name: process.session_leader.parent.session_leader.entry_meta.type
                        ignore_above: 1024
                        level: extended
                        name: entry_meta.type
                        node_name: type
                        normalize: []
                        original_fieldset: process
                        short: The entry type for the entry session leader.
                        type: keyword
                env_vars:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-session-leader-env-vars
                    description: 'Array of environment variable bindings. Captured
                      from a snapshot of the environment at the time of execution.

                      May be filtered to protect sensitive information.'
                    example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
                    flat_name: process.session_leader.parent.session_leader.env_vars
                    ignore_above: 1024
                    level: extended
                    name: env_vars
                    node_name: env_vars
                    normalize:
                    - array
                    original_fieldset: process
                    short: Array of environment variable bindings.
                    type: keyword
                executable:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-executable
                    description: Absolute path to the process executable.
                    example: /usr/bin/ssh
                    flat_name: process.session_leader.parent.session_leader.executable
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.session_leader.executable.text
                      name: text
                      type: match_only_text
                    name: executable
                    node_name: executable
                    normalize: []
                    original_fieldset: process
                    short: Absolute path to the process executable.
                    type: keyword
                exit_code:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-exit-code
                    description: 'The exit code of the process, if this is a termination
                      event.

                      The field should be absent if there is no exit code for the
                      event (e.g. process start).'
                    example: 137
                    flat_name: process.session_leader.parent.session_leader.exit_code
                    level: extended
                    name: exit_code
                    node_name: exit_code
                    normalize: []
                    original_fieldset: process
                    short: The exit code of the process.
                    type: long
                group:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.session_leader.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.session_leader.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-group-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.session_leader.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-hash
                    description: 'The hash fields represent different bitwise hash
                      algorithms and their values.

                      Field names for common hashes (e.g. MD5, SHA1) are predefined.
                      Add fields for other hashes by lowercasing the hash algorithm
                      name and using underscore separators as appropriate (snake case,
                      e.g. sha3_512).

                      Note that this fieldset is used for common hashes that may be
                      computed over a range of generic bytes. Entity-specific hashes
                      such as ja3 or imphash are placed in the fieldsets to which
                      they relate (tls and pe, respectively).'
                    flat_name: process.session_leader.parent.session_leader.hash
                    intermediate: true
                    name: hash
                    node_name: hash
                    original_fieldset: hash
                    short: Hashes, usually file hashes.
                    type: group
                  fields:
                    md5:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-hash-md5
                        description: MD5 hash.
                        flat_name: process.session_leader.parent.session_leader.hash.md5
                        ignore_above: 1024
                        level: extended
                        name: md5
                        node_name: md5
                        normalize: []
                        original_fieldset: hash
                        short: MD5 hash.
                        type: keyword
                    sha1:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-hash-sha1
                        description: SHA1 hash.
                        flat_name: process.session_leader.parent.session_leader.hash.sha1
                        ignore_above: 1024
                        level: extended
                        name: sha1
                        node_name: sha1
                        normalize: []
                        original_fieldset: hash
                        short: SHA1 hash.
                        type: keyword
                    sha256:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-hash-sha256
                        description: SHA256 hash.
                        flat_name: process.session_leader.parent.session_leader.hash.sha256
                        ignore_above: 1024
                        level: extended
                        name: sha256
                        node_name: sha256
                        normalize: []
                        original_fieldset: hash
                        short: SHA256 hash.
                        type: keyword
                    sha384:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-hash-sha384
                        description: SHA384 hash.
                        flat_name: process.session_leader.parent.session_leader.hash.sha384
                        ignore_above: 1024
                        level: extended
                        name: sha384
                        node_name: sha384
                        normalize: []
                        original_fieldset: hash
                        short: SHA384 hash.
                        type: keyword
                    sha512:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-hash-sha512
                        description: SHA512 hash.
                        flat_name: process.session_leader.parent.session_leader.hash.sha512
                        ignore_above: 1024
                        level: extended
                        name: sha512
                        node_name: sha512
                        normalize: []
                        original_fieldset: hash
                        short: SHA512 hash.
                        type: keyword
                    ssdeep:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-hash-ssdeep
                        description: SSDEEP hash.
                        flat_name: process.session_leader.parent.session_leader.hash.ssdeep
                        ignore_above: 1024
                        level: extended
                        name: ssdeep
                        node_name: ssdeep
                        normalize: []
                        original_fieldset: hash
                        short: SSDEEP hash.
                        type: keyword
                    tlsh:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-hash-tlsh
                        description: TLSH hash.
                        flat_name: process.session_leader.parent.session_leader.hash.tlsh
                        ignore_above: 1024
                        level: extended
                        name: tlsh
                        node_name: tlsh
                        normalize: []
                        original_fieldset: hash
                        short: TLSH hash.
                        type: keyword
                interactive:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-interactive
                    description: 'Whether the process is connected to an interactive
                      shell.

                      Process interactivity is inferred from the processes file descriptors.
                      If the character device for the controlling tty is the same
                      as stdin and stderr for the process, the process is considered
                      interactive.

                      Note: A non-interactive process can belong to an interactive
                      session and is simply one that does not have open file descriptors
                      reading the controlling TTY on FD 0 (stdin) or writing to the
                      controlling TTY on FD 2 (stderr). A backgrounded process is
                      still considered interactive if stdin and stderr are connected
                      to the controlling TTY.'
                    example: true
                    flat_name: process.session_leader.parent.session_leader.interactive
                    level: extended
                    name: interactive
                    node_name: interactive
                    normalize: []
                    original_fieldset: process
                    short: Whether the process is connected to an interactive shell.
                    type: boolean
                io:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-session-leader-io
                    description: 'A chunk of input or output (IO) from a single process.

                      This field only appears on the top level process object, which
                      is the process that wrote the output or read the input.'
                    flat_name: process.session_leader.parent.session_leader.io
                    intermediate: false
                    level: extended
                    name: io
                    node_name: io
                    normalize: []
                    original_fieldset: process
                    short: A chunk of input or output (IO) from a single process.
                    type: object
                  fields:
                    bytes_skipped:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-io-bytes-skipped
                        description: An array of byte offsets and lengths denoting
                          where IO data has been skipped.
                        flat_name: process.session_leader.parent.session_leader.io.bytes_skipped
                        intermediate: false
                        level: extended
                        name: io.bytes_skipped
                        node_name: bytes_skipped
                        normalize:
                        - array
                        original_fieldset: process
                        short: An array of byte offsets and lengths denoting where
                          IO data has been skipped.
                        type: object
                      fields:
                        length:
                          field_details:
                            beta: This field is beta and subject to change.
                            dashed_name: process-session-leader-parent-session-leader-io-bytes-skipped-length
                            description: The length of bytes skipped.
                            flat_name: process.session_leader.parent.session_leader.io.bytes_skipped.length
                            level: extended
                            name: io.bytes_skipped.length
                            node_name: length
                            normalize: []
                            original_fieldset: process
                            short: The length of bytes skipped.
                            type: long
                        offset:
                          field_details:
                            beta: This field is beta and subject to change.
                            dashed_name: process-session-leader-parent-session-leader-io-bytes-skipped-offset
                            description: The byte offset into this event's io.text
                              (or io.bytes in the future) where length bytes were
                              skipped.
                            flat_name: process.session_leader.parent.session_leader.io.bytes_skipped.offset
                            level: extended
                            name: io.bytes_skipped.offset
                            node_name: offset
                            normalize: []
                            original_fieldset: process
                            short: The byte offset into this event's io.text (or io.bytes
                              in the future) where length bytes were skipped.
                            type: long
                    max_bytes_per_process_exceeded:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-io-max-bytes-per-process-exceeded
                        description: If true, the process producing the output has
                          exceeded the max_kilobytes_per_process configuration setting.
                        flat_name: process.session_leader.parent.session_leader.io.max_bytes_per_process_exceeded
                        level: extended
                        name: io.max_bytes_per_process_exceeded
                        node_name: max_bytes_per_process_exceeded
                        normalize: []
                        original_fieldset: process
                        short: If true, the process producing the output has exceeded
                          the max_kilobytes_per_process configuration setting.
                        type: boolean
                    text:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-io-text
                        description: 'A chunk of output or input sanitized to UTF-8.

                          Best efforts are made to ensure complete lines are captured
                          in these events. Assumptions should NOT be made that multiple
                          lines will appear in the same event. TTY output may contain
                          terminal control codes such as for cursor movement, so some
                          string queries may not match due to terminal codes inserted
                          between characters of a word.'
                        flat_name: process.session_leader.parent.session_leader.io.text
                        level: extended
                        name: io.text
                        node_name: text
                        normalize: []
                        original_fieldset: process
                        short: A chunk of output or input sanitized to UTF-8.
                        type: wildcard
                    total_bytes_captured:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-io-total-bytes-captured
                        description: The total number of bytes captured in this event.
                        flat_name: process.session_leader.parent.session_leader.io.total_bytes_captured
                        level: extended
                        name: io.total_bytes_captured
                        node_name: total_bytes_captured
                        normalize: []
                        original_fieldset: process
                        short: The total number of bytes captured in this event.
                        type: long
                    total_bytes_skipped:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-io-total-bytes-skipped
                        description: The total number of bytes that were not captured
                          due to implementation restrictions such as buffer size limits.
                          Implementors should strive to ensure this value is always
                          zero
                        flat_name: process.session_leader.parent.session_leader.io.total_bytes_skipped
                        level: extended
                        name: io.total_bytes_skipped
                        node_name: total_bytes_skipped
                        normalize: []
                        original_fieldset: process
                        short: The total number of bytes that were not captured due
                          to implementation restrictions such as buffer size limits.
                        type: long
                    type:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-io-type
                        description: 'The type of object on which the IO action (read
                          or write) was taken.

                          Currently only ''tty'' is supported. Other types may be
                          added in the future for ''file'' and ''socket'' support.'
                        flat_name: process.session_leader.parent.session_leader.io.type
                        ignore_above: 1024
                        level: extended
                        name: io.type
                        node_name: type
                        normalize: []
                        original_fieldset: process
                        short: The type of object on which the IO action (read or
                          write) was taken.
                        type: keyword
                macho:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-session-leader-parent-session-leader-macho
                    description: These fields contain Mac OS Mach Object file format
                      (Mach-O) metadata.
                    flat_name: process.session_leader.parent.session_leader.macho
                    intermediate: true
                    name: macho
                    node_name: macho
                    original_fieldset: macho
                    short: These fields contain Mac OS Mach Object file format (Mach-O)
                      metadata.
                    type: group
                  fields:
                    go_import_hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-go-import-hash
                        description: 'A hash of the Go language imports in a Mach-O
                          file excluding standard library imports. An import hash
                          can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: process.session_leader.parent.session_leader.macho.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: macho
                        short: A hash of the Go language imports in a Mach-O file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: process.session_leader.parent.session_leader.macho.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: macho
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: process.session_leader.parent.session_leader.macho.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: process.session_leader.parent.session_leader.macho.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: process.session_leader.parent.session_leader.macho.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: macho
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    import_hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-import-hash
                        description: 'A hash of the imports in a Mach-O file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is a synonym for symhash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: process.session_leader.parent.session_leader.macho.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: macho
                        short: A hash of the imports in a Mach-O file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-imports
                        description: List of imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.macho.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: macho
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.macho.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.macho.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: macho
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    sections:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-sections
                        description: 'An array containing an object for each section
                          of the Mach-O file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `macho.sections.*`.'
                        flat_name: process.session_leader.parent.session_leader.macho.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: macho
                        short: Section information of the Mach-O file.
                        type: nested
                      fields:
                        entropy:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-macho-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: process.session_leader.parent.session_leader.macho.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: macho
                            short: Shannon entropy calculation from the section.
                            type: long
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-macho-sections-name
                            description: Mach-O Section List name.
                            flat_name: process.session_leader.parent.session_leader.macho.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: macho
                            short: Mach-O Section List name.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-macho-sections-physical-size
                            description: Mach-O Section List physical size.
                            flat_name: process.session_leader.parent.session_leader.macho.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: macho
                            short: Mach-O Section List physical size.
                            type: long
                        var_entropy:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-macho-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: process.session_leader.parent.session_leader.macho.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: macho
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-macho-sections-virtual-size
                            description: Mach-O Section List virtual size. This is
                              always the same as `physical_size`.
                            flat_name: process.session_leader.parent.session_leader.macho.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: macho
                            short: Mach-O Section List virtual size. This is always
                              the same as `physical_size`.
                            type: long
                    symhash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-macho-symhash
                        description: 'A hash of the imports in a Mach-O file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is a Mach-O implementation of the Windows PE imphash'
                        example: d3ccf195b62a9279c3c19af1080497ec
                        flat_name: process.session_leader.parent.session_leader.macho.symhash
                        ignore_above: 1024
                        level: extended
                        name: symhash
                        node_name: symhash
                        normalize: []
                        original_fieldset: macho
                        short: A hash of the imports in a Mach-O file.
                        type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-name
                    description: 'Process name.

                      Sometimes called program name or similar.'
                    example: ssh
                    flat_name: process.session_leader.parent.session_leader.name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.session_leader.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: process
                    short: Process name.
                    type: keyword
                pe:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-pe
                    description: These fields contain Windows Portable Executable
                      (PE) metadata.
                    flat_name: process.session_leader.parent.session_leader.pe
                    intermediate: true
                    name: pe
                    node_name: pe
                    original_fieldset: pe
                    short: These fields contain Windows Portable Executable (PE) metadata.
                    type: group
                  fields:
                    architecture:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-architecture
                        description: CPU architecture target for the file.
                        example: x64
                        flat_name: process.session_leader.parent.session_leader.pe.architecture
                        ignore_above: 1024
                        level: extended
                        name: architecture
                        node_name: architecture
                        normalize: []
                        original_fieldset: pe
                        short: CPU architecture target for the file.
                        type: keyword
                    company:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-company
                        description: Internal company name of the file, provided at
                          compile-time.
                        example: Microsoft Corporation
                        flat_name: process.session_leader.parent.session_leader.pe.company
                        ignore_above: 1024
                        level: extended
                        name: company
                        node_name: company
                        normalize: []
                        original_fieldset: pe
                        short: Internal company name of the file, provided at compile-time.
                        type: keyword
                    description:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-description
                        description: Internal description of the file, provided at
                          compile-time.
                        example: Paint
                        flat_name: process.session_leader.parent.session_leader.pe.description
                        ignore_above: 1024
                        level: extended
                        name: description
                        node_name: description
                        normalize: []
                        original_fieldset: pe
                        short: Internal description of the file, provided at compile-time.
                        type: keyword
                    file_version:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-file-version
                        description: Internal version of the file, provided at compile-time.
                        example: 6.3.9600.17415
                        flat_name: process.session_leader.parent.session_leader.pe.file_version
                        ignore_above: 1024
                        level: extended
                        name: file_version
                        node_name: file_version
                        normalize: []
                        original_fieldset: pe
                        short: Process name.
                        type: keyword
                    go_import_hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-go-import-hash
                        description: 'A hash of the Go language imports in a PE file
                          excluding standard library imports. An import hash can be
                          used to fingerprint binaries even after recompilation or
                          other code-level transformations have occurred, which would
                          change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: process.session_leader.parent.session_leader.pe.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the Go language imports in a PE file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: process.session_leader.parent.session_leader.pe.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: pe
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: process.session_leader.parent.session_leader.pe.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: process.session_leader.parent.session_leader.pe.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: process.session_leader.parent.session_leader.pe.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: pe
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    imphash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-imphash
                        description: 'A hash of the imports in a PE file. An imphash
                          -- or import hash -- can be used to fingerprint binaries
                          even after recompilation or other code-level transformations
                          have occurred, which would change more traditional hash
                          values.

                          Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                        example: 0c6803c4e922103c4dca5963aad36ddf
                        flat_name: process.session_leader.parent.session_leader.pe.imphash
                        ignore_above: 1024
                        level: extended
                        name: imphash
                        node_name: imphash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the imports in a PE file.
                        type: keyword
                    import_hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-import-hash
                        description: 'A hash of the imports in a PE file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is a synonym for imphash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: process.session_leader.parent.session_leader.pe.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the imports in a PE file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-imports
                        description: List of imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.pe.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: pe
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.pe.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: process.session_leader.parent.session_leader.pe.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    original_file_name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-original-file-name
                        description: Internal name of the file, provided at compile-time.
                        example: MSPAINT.EXE
                        flat_name: process.session_leader.parent.session_leader.pe.original_file_name
                        ignore_above: 1024
                        level: extended
                        name: original_file_name
                        node_name: original_file_name
                        normalize: []
                        original_fieldset: pe
                        short: Internal name of the file, provided at compile-time.
                        type: keyword
                    pehash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-pehash
                        description: 'A hash of the PE header and data from one or
                          more PE sections. An pehash can be used to cluster files
                          by transforming structural information about a file into
                          a hash value.

                          Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                        example: 73ff189b63cd6be375a7ff25179a38d347651975
                        flat_name: process.session_leader.parent.session_leader.pe.pehash
                        ignore_above: 1024
                        level: extended
                        name: pehash
                        node_name: pehash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the PE header and data from one or more PE
                          sections.
                        type: keyword
                    product:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-product
                        description: Internal product name of the file, provided at
                          compile-time.
                        example: "Microsoft\xAE Windows\xAE Operating System"
                        flat_name: process.session_leader.parent.session_leader.pe.product
                        ignore_above: 1024
                        level: extended
                        name: product
                        node_name: product
                        normalize: []
                        original_fieldset: pe
                        short: Internal product name of the file, provided at compile-time.
                        type: keyword
                    sections:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-pe-sections
                        description: 'An array containing an object for each section
                          of the PE file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `pe.sections.*`.'
                        flat_name: process.session_leader.parent.session_leader.pe.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: pe
                        short: Section information of the PE file.
                        type: nested
                      fields:
                        entropy:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-pe-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: process.session_leader.parent.session_leader.pe.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: pe
                            short: Shannon entropy calculation from the section.
                            type: long
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-pe-sections-name
                            description: PE Section List name.
                            flat_name: process.session_leader.parent.session_leader.pe.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List name.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-pe-sections-physical-size
                            description: PE Section List physical size.
                            flat_name: process.session_leader.parent.session_leader.pe.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List physical size.
                            type: long
                        var_entropy:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-pe-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: process.session_leader.parent.session_leader.pe.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: pe
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-pe-sections-virtual-size
                            description: PE Section List virtual size. This is always
                              the same as `physical_size`.
                            flat_name: process.session_leader.parent.session_leader.pe.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List virtual size. This is always the
                              same as `physical_size`.
                            type: long
                pgid:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-pgid
                    description: 'Deprecated for removal in next major version release.
                      This field is superseded by `process.group_leader.pid`.

                      Identifier of the group of processes the process belongs to.'
                    flat_name: process.session_leader.parent.session_leader.pgid
                    format: string
                    level: extended
                    name: pgid
                    node_name: pgid
                    normalize: []
                    original_fieldset: process
                    short: Deprecated identifier of the group of processes the process
                      belongs to.
                    type: long
                pid:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-pid
                    description: Process id.
                    example: 4242
                    flat_name: process.session_leader.parent.session_leader.pid
                    format: string
                    level: core
                    name: pid
                    node_name: pid
                    normalize: []
                    original_fieldset: process
                    short: Process id.
                    type: long
                real_group:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.session_leader.group
                    intermediate: true
                    name: real_group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.real_group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.session_leader.real_group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-group-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.session_leader.real_group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                real_user:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.session_leader.parent.session_leader.user
                    intermediate: true
                    name: real_user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.real_user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-email
                        description: User email address.
                        flat_name: process.session_leader.parent.session_leader.real_user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.session_leader.parent.session_leader.real_user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.real_user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.session_leader.parent.session_leader.real_user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.session_leader.parent.session_leader.real_user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.session_leader.parent.session_leader.real_user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-group-name
                            description: Name of the group.
                            flat_name: process.session_leader.parent.session_leader.real_user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.session_leader.parent.session_leader.real_user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.session_leader.parent.session_leader.real_user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.session_leader.parent.session_leader.real_user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.real_user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-session-leader-parent-session-leader-real-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.session_leader.parent.session_leader.real_user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.real_user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.session_leader.parent.session_leader.real_user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.session_leader.parent.session_leader.real_user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.real_user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.session_leader.parent.session_leader.real_user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-real-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.session_leader.parent.session_leader.real_user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-real-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.session_leader.parent.session_leader.real_user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                same_as_process:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-same-as-process
                    description: 'This boolean is used to identify if a leader process
                      is the same as the top level process.

                      For example, if `process.group_leader.same_as_process = true`,
                      it means the process event in question is the leader of its
                      process group. Details under `process.*` like `pid` would be
                      the same under `process.group_leader.*` The same applies for
                      both `process.session_leader` and `process.entry_leader`.

                      This field exists to the benefit of EQL and other rule engines
                      since it''s not possible to compare equality between two fields
                      in a single document. e.g `process.entity_id` = `process.group_leader.entity_id`
                      (top level process is the process group leader) OR `process.entity_id`
                      = `process.entry_leader.entity_id` (top level process is the
                      entry session leader)

                      Instead these rules could be written like: `process.group_leader.same_as_process:
                      true` OR `process.entry_leader.same_as_process: true`

                      Note: This field is only set on `process.entry_leader`, `process.session_leader`
                      and `process.group_leader`.'
                    example: true
                    flat_name: process.session_leader.parent.session_leader.same_as_process
                    level: extended
                    name: same_as_process
                    node_name: same_as_process
                    normalize: []
                    original_fieldset: process
                    short: This boolean is used to identify if a leader process is
                      the same as the top level process.
                    type: boolean
                saved_group:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.session_leader.group
                    intermediate: true
                    name: saved_group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.saved_group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.session_leader.saved_group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-group-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.session_leader.saved_group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                saved_user:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.session_leader.parent.session_leader.user
                    intermediate: true
                    name: saved_user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.saved_user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-email
                        description: User email address.
                        flat_name: process.session_leader.parent.session_leader.saved_user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.session_leader.parent.session_leader.saved_user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.saved_user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.session_leader.parent.session_leader.saved_user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.session_leader.parent.session_leader.saved_user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.session_leader.parent.session_leader.saved_user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-group-name
                            description: Name of the group.
                            flat_name: process.session_leader.parent.session_leader.saved_user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.session_leader.parent.session_leader.saved_user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.session_leader.parent.session_leader.saved_user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.session_leader.parent.session_leader.saved_user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.saved_user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-session-leader-parent-session-leader-saved-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.session_leader.parent.session_leader.saved_user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.saved_user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.session_leader.parent.session_leader.saved_user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.session_leader.parent.session_leader.saved_user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.saved_user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.session_leader.parent.session_leader.saved_user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-saved-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.session_leader.parent.session_leader.saved_user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-saved-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.session_leader.parent.session_leader.saved_user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                start:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-start
                    description: The time the process started.
                    example: '2016-05-23T08:05:34.853Z'
                    flat_name: process.session_leader.parent.session_leader.start
                    level: extended
                    name: start
                    node_name: start
                    normalize: []
                    original_fieldset: process
                    short: The time the process started.
                    type: date
                supplemental_groups:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.session_leader.group
                    intermediate: true
                    name: supplemental_groups
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-supplemental-groups-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.supplemental_groups.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-supplemental-groups-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.session_leader.supplemental_groups.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-supplemental-groups-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.session_leader.supplemental_groups.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                thread:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-thread
                    flat_name: process.session_leader.parent.session_leader.thread
                    intermediate: true
                    name: thread
                    node_name: thread
                    original_fieldset: process
                    type: object
                  fields:
                    capabilities:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-thread-capabilities
                        flat_name: process.session_leader.parent.session_leader.thread.capabilities
                        intermediate: true
                        name: thread.capabilities
                        node_name: capabilities
                        original_fieldset: process
                        type: object
                      fields:
                        effective:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-thread-capabilities-effective
                            description: This is the set of capabilities used by the
                              kernel to perform permission checks for the thread.
                            example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                            flat_name: process.session_leader.parent.session_leader.thread.capabilities.effective
                            ignore_above: 1024
                            level: extended
                            name: thread.capabilities.effective
                            node_name: effective
                            normalize:
                            - array
                            original_fieldset: process
                            pattern: ^(CAP_[A-Z_]+|\d+)$
                            short: Array of capabilities used for permission checks.
                            type: keyword
                        permitted:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-thread-capabilities-permitted
                            description: This is a limiting superset for the effective
                              capabilities that the thread may assume.
                            example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                            flat_name: process.session_leader.parent.session_leader.thread.capabilities.permitted
                            ignore_above: 1024
                            level: extended
                            name: thread.capabilities.permitted
                            node_name: permitted
                            normalize:
                            - array
                            original_fieldset: process
                            pattern: ^(CAP_[A-Z_]+|\d+)$
                            short: Array of capabilities a thread could assume.
                            type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-thread-id
                        description: Thread ID.
                        example: 4242
                        flat_name: process.session_leader.parent.session_leader.thread.id
                        format: string
                        level: extended
                        name: thread.id
                        node_name: id
                        normalize: []
                        original_fieldset: process
                        short: Thread ID.
                        type: long
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-thread-name
                        description: Thread name.
                        example: thread-0
                        flat_name: process.session_leader.parent.session_leader.thread.name
                        ignore_above: 1024
                        level: extended
                        name: thread.name
                        node_name: name
                        normalize: []
                        original_fieldset: process
                        short: Thread name.
                        type: keyword
                title:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-title
                    description: 'Process title.

                      The proctitle, some times the same as process name. Can also
                      be different: for example a browser setting its title to the
                      web page currently opened.'
                    flat_name: process.session_leader.parent.session_leader.title
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.session_leader.title.text
                      name: text
                      type: match_only_text
                    name: title
                    node_name: title
                    normalize: []
                    original_fieldset: process
                    short: Process title.
                    type: keyword
                tty:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-tty
                    description: Information about the controlling TTY device. If
                      set, the process belongs to an interactive session.
                    flat_name: process.session_leader.parent.session_leader.tty
                    intermediate: false
                    level: extended
                    name: tty
                    node_name: tty
                    normalize: []
                    original_fieldset: process
                    short: Information about the controlling TTY device.
                    type: object
                  fields:
                    char_device:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-tty-char-device
                        flat_name: process.session_leader.parent.session_leader.tty.char_device
                        intermediate: true
                        name: tty.char_device
                        node_name: char_device
                        original_fieldset: process
                        type: object
                      fields:
                        major:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-tty-char-device-major
                            description: The major number identifies the driver associated
                              with the device. The character device's major and minor
                              numbers can be algorithmically combined to produce the
                              more familiar terminal identifiers such as "ttyS0" and
                              "pts/0". For more details, please refer to the Linux
                              kernel documentation.
                            example: 4
                            flat_name: process.session_leader.parent.session_leader.tty.char_device.major
                            level: extended
                            name: tty.char_device.major
                            node_name: major
                            normalize: []
                            original_fieldset: process
                            short: The TTY character device's major number.
                            type: long
                        minor:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-tty-char-device-minor
                            description: "The minor number is used only by the driver\
                              \ specified by the major number; other parts of the\
                              \ kernel don\u2019t use it, and merely pass it along\
                              \ to the driver. It is common for a driver to control\
                              \ several devices; the minor number provides a way for\
                              \ the driver to differentiate among them."
                            example: 1
                            flat_name: process.session_leader.parent.session_leader.tty.char_device.minor
                            level: extended
                            name: tty.char_device.minor
                            node_name: minor
                            normalize: []
                            original_fieldset: process
                            short: The TTY character device's minor number.
                            type: long
                    columns:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-tty-columns
                        description: 'The number of character columns per line. e.g
                          terminal width

                          Terminal sizes can change, so this value reflects the maximum
                          value for a given IO event. i.e. where event.action = ''text_output'''
                        example: 80
                        flat_name: process.session_leader.parent.session_leader.tty.columns
                        level: extended
                        name: tty.columns
                        node_name: columns
                        normalize: []
                        original_fieldset: process
                        short: The number of character columns per line. e.g terminal
                          width
                        type: long
                    rows:
                      field_details:
                        beta: This field is beta and subject to change.
                        dashed_name: process-session-leader-parent-session-leader-tty-rows
                        description: 'The number of character rows in the terminal.
                          e.g terminal height

                          Terminal sizes can change, so this value reflects the maximum
                          value for a given IO event. i.e. where event.action = ''text_output'''
                        example: 24
                        flat_name: process.session_leader.parent.session_leader.tty.rows
                        level: extended
                        name: tty.rows
                        node_name: rows
                        normalize: []
                        original_fieldset: process
                        short: The number of character rows in the terminal. e.g terminal
                          height
                        type: long
                uptime:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-uptime
                    description: Seconds the process has been up.
                    example: 1325
                    flat_name: process.session_leader.parent.session_leader.uptime
                    level: extended
                    name: uptime
                    node_name: uptime
                    normalize: []
                    original_fieldset: process
                    short: Seconds the process has been up.
                    type: long
                user:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-user
                    description: 'The user fields describe information about the user
                      that is relevant to the event.

                      Fields can have one entry or multiple entries. If a user has
                      more than one id, provide an array that includes all of them.'
                    flat_name: process.session_leader.parent.session_leader.user
                    intermediate: true
                    name: user
                    node_name: user
                    original_fieldset: user
                    short: Fields to describe the user relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-domain
                        description: 'Name of the directory the user is a member of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.session_leader.user.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: user
                        short: Name of the directory the user is a member of.
                        type: keyword
                    email:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-email
                        description: User email address.
                        flat_name: process.session_leader.parent.session_leader.user.email
                        ignore_above: 1024
                        level: extended
                        name: email
                        node_name: email
                        normalize: []
                        original_fieldset: user
                        short: User email address.
                        type: keyword
                    full_name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-full-name
                        description: User's full name, if available.
                        example: Albert Einstein
                        flat_name: process.session_leader.parent.session_leader.user.full_name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.user.full_name.text
                          name: text
                          type: match_only_text
                        name: full_name
                        node_name: full_name
                        normalize: []
                        original_fieldset: user
                        short: User's full name, if available.
                        type: keyword
                    group:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-group
                        description: The group fields are meant to represent groups
                          that are relevant to the event.
                        flat_name: process.session_leader.parent.session_leader.user.group
                        intermediate: true
                        name: group
                        node_name: group
                        original_fieldset: group
                        short: User's group relevant to the event.
                        type: group
                      fields:
                        domain:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-group-domain
                            description: 'Name of the directory the group is a member
                              of.

                              For example, an LDAP or Active Directory domain name.'
                            flat_name: process.session_leader.parent.session_leader.user.group.domain
                            ignore_above: 1024
                            level: extended
                            name: domain
                            node_name: domain
                            normalize: []
                            original_fieldset: group
                            short: Name of the directory the group is a member of.
                            type: keyword
                        id:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-group-id
                            description: Unique identifier for the group on the system/platform.
                            flat_name: process.session_leader.parent.session_leader.user.group.id
                            ignore_above: 1024
                            level: extended
                            name: id
                            node_name: id
                            normalize: []
                            original_fieldset: group
                            short: Unique identifier for the group on the system/platform.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-group-name
                            description: Name of the group.
                            flat_name: process.session_leader.parent.session_leader.user.group.name
                            ignore_above: 1024
                            level: extended
                            name: name
                            node_name: name
                            normalize: []
                            original_fieldset: group
                            short: Name of the group.
                            type: keyword
                    hash:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-hash
                        description: 'Unique user hash to correlate information for
                          a user in anonymized form.

                          Useful if `user.id` or `user.name` contain confidential
                          information and cannot be used.'
                        flat_name: process.session_leader.parent.session_leader.user.hash
                        ignore_above: 1024
                        level: extended
                        name: hash
                        node_name: hash
                        normalize: []
                        original_fieldset: user
                        short: Unique user hash to correlate information for a user
                          in anonymized form.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-id
                        description: Unique identifier of the user.
                        example: S-1-5-21-202424912787-2692429404-2351956786-1000
                        flat_name: process.session_leader.parent.session_leader.user.id
                        ignore_above: 1024
                        level: core
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: user
                        short: Unique identifier of the user.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-name
                        description: Short name or login of the user.
                        example: a.einstein
                        flat_name: process.session_leader.parent.session_leader.user.name
                        ignore_above: 1024
                        level: core
                        multi_fields:
                        - flat_name: process.session_leader.parent.session_leader.user.name.text
                          name: text
                          type: match_only_text
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: user
                        short: Short name or login of the user.
                        type: keyword
                    risk:
                      field_details:
                        beta: These fields are in beta and are subject to change.
                        dashed_name: process-session-leader-parent-session-leader-user-risk
                        description: Fields for describing risk score and risk level
                          of entities such as hosts and users.  These fields are not
                          allowed to be nested under `event.*`. Please continue to
                          use  `event.risk_score` and `event.risk_score_norm` for
                          event risk.
                        flat_name: process.session_leader.parent.session_leader.user.risk
                        intermediate: true
                        name: risk
                        node_name: risk
                        original_fieldset: risk
                        short: Fields for describing risk score and level.
                        type: group
                      fields:
                        calculated_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-risk-calculated-level
                            description: A risk classification level calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.user.risk.calculated_level
                            ignore_above: 1024
                            level: extended
                            name: calculated_level
                            node_name: calculated_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: keyword
                        calculated_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-risk-calculated-score
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring.
                            example: 880.73
                            flat_name: process.session_leader.parent.session_leader.user.risk.calculated_score
                            level: extended
                            name: calculated_score
                            node_name: calculated_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score calculated by an internal
                              system as part of entity analytics and entity risk scoring.
                            type: float
                        calculated_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-risk-calculated-score-norm
                            description: A risk classification score calculated by
                              an internal system as part of entity analytics and entity
                              risk scoring, and normalized to a range of 0 to 100.
                            example: 88.73
                            flat_name: process.session_leader.parent.session_leader.user.risk.calculated_score_norm
                            level: extended
                            name: calculated_score_norm
                            node_name: calculated_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an internal
                              system.
                            type: float
                        static_level:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-risk-static-level
                            description: A risk classification level obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: High
                            flat_name: process.session_leader.parent.session_leader.user.risk.static_level
                            ignore_above: 1024
                            level: extended
                            name: static_level
                            node_name: static_level
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification level obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: keyword
                        static_score:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-risk-static-score
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform.
                            example: 830.0
                            flat_name: process.session_leader.parent.session_leader.user.risk.static_score
                            level: extended
                            name: static_score
                            node_name: static_score
                            normalize: []
                            original_fieldset: risk
                            short: A risk classification score obtained from outside
                              the system, such as from some external Threat Intelligence
                              Platform.
                            type: float
                        static_score_norm:
                          field_details:
                            dashed_name: process-session-leader-parent-session-leader-user-risk-static-score-norm
                            description: A risk classification score obtained from
                              outside the system, such as from some external Threat
                              Intelligence Platform, and normalized to a range of
                              0 to 100.
                            example: 83.0
                            flat_name: process.session_leader.parent.session_leader.user.risk.static_score_norm
                            level: extended
                            name: static_score_norm
                            node_name: static_score_norm
                            normalize: []
                            original_fieldset: risk
                            short: A normalized risk score calculated by an external
                              system.
                            type: float
                    roles:
                      field_details:
                        dashed_name: process-session-leader-parent-session-leader-user-roles
                        description: Array of user roles at the time of the event.
                        example: '["kibana_admin", "reporting_user"]'
                        flat_name: process.session_leader.parent.session_leader.user.roles
                        ignore_above: 1024
                        level: extended
                        name: roles
                        node_name: roles
                        normalize:
                        - array
                        original_fieldset: user
                        short: Array of user roles at the time of the event.
                        type: keyword
                vpid:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-vpid
                    description: 'Virtual process id.

                      The process id within a pid namespace. This is not necessarily
                      unique across all processes on the host but it is unique within
                      the process namespace that the process exists within.'
                    example: 4242
                    flat_name: process.session_leader.parent.session_leader.vpid
                    format: string
                    level: core
                    name: vpid
                    node_name: vpid
                    normalize: []
                    original_fieldset: process
                    short: Virtual process id.
                    type: long
                working_directory:
                  field_details:
                    dashed_name: process-session-leader-parent-session-leader-working-directory
                    description: The working directory of the process.
                    example: /home/alice
                    flat_name: process.session_leader.parent.session_leader.working_directory
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.session_leader.working_directory.text
                      name: text
                      type: match_only_text
                    name: working_directory
                    node_name: working_directory
                    normalize: []
                    original_fieldset: process
                    short: The working directory of the process.
                    type: keyword
            start:
              field_details:
                dashed_name: process-session-leader-parent-start
                description: The time the process started.
                example: '2016-05-23T08:05:34.853Z'
                flat_name: process.session_leader.parent.start
                level: extended
                name: start
                node_name: start
                normalize: []
                original_fieldset: process
                short: The time the process started.
                type: date
            supplemental_groups:
              field_details:
                dashed_name: process-session-leader-parent-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.parent.group
                intermediate: true
                name: supplemental_groups
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-supplemental-groups-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.supplemental_groups.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-supplemental-groups-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.parent.supplemental_groups.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-supplemental-groups-name
                    description: Name of the group.
                    flat_name: process.session_leader.parent.supplemental_groups.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            thread:
              field_details:
                dashed_name: process-session-leader-parent-thread
                flat_name: process.session_leader.parent.thread
                intermediate: true
                name: thread
                node_name: thread
                original_fieldset: process
                type: object
              fields:
                capabilities:
                  field_details:
                    dashed_name: process-session-leader-parent-thread-capabilities
                    flat_name: process.session_leader.parent.thread.capabilities
                    intermediate: true
                    name: thread.capabilities
                    node_name: capabilities
                    original_fieldset: process
                    type: object
                  fields:
                    effective:
                      field_details:
                        dashed_name: process-session-leader-parent-thread-capabilities-effective
                        description: This is the set of capabilities used by the kernel
                          to perform permission checks for the thread.
                        example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                        flat_name: process.session_leader.parent.thread.capabilities.effective
                        ignore_above: 1024
                        level: extended
                        name: thread.capabilities.effective
                        node_name: effective
                        normalize:
                        - array
                        original_fieldset: process
                        pattern: ^(CAP_[A-Z_]+|\d+)$
                        short: Array of capabilities used for permission checks.
                        type: keyword
                    permitted:
                      field_details:
                        dashed_name: process-session-leader-parent-thread-capabilities-permitted
                        description: This is a limiting superset for the effective
                          capabilities that the thread may assume.
                        example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                        flat_name: process.session_leader.parent.thread.capabilities.permitted
                        ignore_above: 1024
                        level: extended
                        name: thread.capabilities.permitted
                        node_name: permitted
                        normalize:
                        - array
                        original_fieldset: process
                        pattern: ^(CAP_[A-Z_]+|\d+)$
                        short: Array of capabilities a thread could assume.
                        type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-thread-id
                    description: Thread ID.
                    example: 4242
                    flat_name: process.session_leader.parent.thread.id
                    format: string
                    level: extended
                    name: thread.id
                    node_name: id
                    normalize: []
                    original_fieldset: process
                    short: Thread ID.
                    type: long
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-thread-name
                    description: Thread name.
                    example: thread-0
                    flat_name: process.session_leader.parent.thread.name
                    ignore_above: 1024
                    level: extended
                    name: thread.name
                    node_name: name
                    normalize: []
                    original_fieldset: process
                    short: Thread name.
                    type: keyword
            title:
              field_details:
                dashed_name: process-session-leader-parent-title
                description: 'Process title.

                  The proctitle, some times the same as process name. Can also be
                  different: for example a browser setting its title to the web page
                  currently opened.'
                flat_name: process.session_leader.parent.title
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.parent.title.text
                  name: text
                  type: match_only_text
                name: title
                node_name: title
                normalize: []
                original_fieldset: process
                short: Process title.
                type: keyword
            tty:
              field_details:
                dashed_name: process-session-leader-parent-tty
                description: Information about the controlling TTY device. If set,
                  the process belongs to an interactive session.
                flat_name: process.session_leader.parent.tty
                intermediate: false
                level: extended
                name: tty
                node_name: tty
                normalize: []
                original_fieldset: process
                short: Information about the controlling TTY device.
                type: object
              fields:
                char_device:
                  field_details:
                    dashed_name: process-session-leader-parent-tty-char-device
                    flat_name: process.session_leader.parent.tty.char_device
                    intermediate: true
                    name: tty.char_device
                    node_name: char_device
                    original_fieldset: process
                    type: object
                  fields:
                    major:
                      field_details:
                        dashed_name: process-session-leader-parent-tty-char-device-major
                        description: The major number identifies the driver associated
                          with the device. The character device's major and minor
                          numbers can be algorithmically combined to produce the more
                          familiar terminal identifiers such as "ttyS0" and "pts/0".
                          For more details, please refer to the Linux kernel documentation.
                        example: 4
                        flat_name: process.session_leader.parent.tty.char_device.major
                        level: extended
                        name: tty.char_device.major
                        node_name: major
                        normalize: []
                        original_fieldset: process
                        short: The TTY character device's major number.
                        type: long
                    minor:
                      field_details:
                        dashed_name: process-session-leader-parent-tty-char-device-minor
                        description: "The minor number is used only by the driver\
                          \ specified by the major number; other parts of the kernel\
                          \ don\u2019t use it, and merely pass it along to the driver.\
                          \ It is common for a driver to control several devices;\
                          \ the minor number provides a way for the driver to differentiate\
                          \ among them."
                        example: 1
                        flat_name: process.session_leader.parent.tty.char_device.minor
                        level: extended
                        name: tty.char_device.minor
                        node_name: minor
                        normalize: []
                        original_fieldset: process
                        short: The TTY character device's minor number.
                        type: long
                columns:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-tty-columns
                    description: 'The number of character columns per line. e.g terminal
                      width

                      Terminal sizes can change, so this value reflects the maximum
                      value for a given IO event. i.e. where event.action = ''text_output'''
                    example: 80
                    flat_name: process.session_leader.parent.tty.columns
                    level: extended
                    name: tty.columns
                    node_name: columns
                    normalize: []
                    original_fieldset: process
                    short: The number of character columns per line. e.g terminal
                      width
                    type: long
                rows:
                  field_details:
                    beta: This field is beta and subject to change.
                    dashed_name: process-session-leader-parent-tty-rows
                    description: 'The number of character rows in the terminal. e.g
                      terminal height

                      Terminal sizes can change, so this value reflects the maximum
                      value for a given IO event. i.e. where event.action = ''text_output'''
                    example: 24
                    flat_name: process.session_leader.parent.tty.rows
                    level: extended
                    name: tty.rows
                    node_name: rows
                    normalize: []
                    original_fieldset: process
                    short: The number of character rows in the terminal. e.g terminal
                      height
                    type: long
            uptime:
              field_details:
                dashed_name: process-session-leader-parent-uptime
                description: Seconds the process has been up.
                example: 1325
                flat_name: process.session_leader.parent.uptime
                level: extended
                name: uptime
                node_name: uptime
                normalize: []
                original_fieldset: process
                short: Seconds the process has been up.
                type: long
            user:
              field_details:
                dashed_name: process-session-leader-parent-user
                description: 'The user fields describe information about the user
                  that is relevant to the event.

                  Fields can have one entry or multiple entries. If a user has more
                  than one id, provide an array that includes all of them.'
                flat_name: process.session_leader.parent.user
                intermediate: true
                name: user
                node_name: user
                original_fieldset: user
                short: Fields to describe the user relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-parent-user-domain
                    description: 'Name of the directory the user is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.parent.user.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: user
                    short: Name of the directory the user is a member of.
                    type: keyword
                email:
                  field_details:
                    dashed_name: process-session-leader-parent-user-email
                    description: User email address.
                    flat_name: process.session_leader.parent.user.email
                    ignore_above: 1024
                    level: extended
                    name: email
                    node_name: email
                    normalize: []
                    original_fieldset: user
                    short: User email address.
                    type: keyword
                full_name:
                  field_details:
                    dashed_name: process-session-leader-parent-user-full-name
                    description: User's full name, if available.
                    example: Albert Einstein
                    flat_name: process.session_leader.parent.user.full_name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: process.session_leader.parent.user.full_name.text
                      name: text
                      type: match_only_text
                    name: full_name
                    node_name: full_name
                    normalize: []
                    original_fieldset: user
                    short: User's full name, if available.
                    type: keyword
                group:
                  field_details:
                    dashed_name: process-session-leader-parent-user-group
                    description: The group fields are meant to represent groups that
                      are relevant to the event.
                    flat_name: process.session_leader.parent.user.group
                    intermediate: true
                    name: group
                    node_name: group
                    original_fieldset: group
                    short: User's group relevant to the event.
                    type: group
                  fields:
                    domain:
                      field_details:
                        dashed_name: process-session-leader-parent-user-group-domain
                        description: 'Name of the directory the group is a member
                          of.

                          For example, an LDAP or Active Directory domain name.'
                        flat_name: process.session_leader.parent.user.group.domain
                        ignore_above: 1024
                        level: extended
                        name: domain
                        node_name: domain
                        normalize: []
                        original_fieldset: group
                        short: Name of the directory the group is a member of.
                        type: keyword
                    id:
                      field_details:
                        dashed_name: process-session-leader-parent-user-group-id
                        description: Unique identifier for the group on the system/platform.
                        flat_name: process.session_leader.parent.user.group.id
                        ignore_above: 1024
                        level: extended
                        name: id
                        node_name: id
                        normalize: []
                        original_fieldset: group
                        short: Unique identifier for the group on the system/platform.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: process-session-leader-parent-user-group-name
                        description: Name of the group.
                        flat_name: process.session_leader.parent.user.group.name
                        ignore_above: 1024
                        level: extended
                        name: name
                        node_name: name
                        normalize: []
                        original_fieldset: group
                        short: Name of the group.
                        type: keyword
                hash:
                  field_details:
                    dashed_name: process-session-leader-parent-user-hash
                    description: 'Unique user hash to correlate information for a
                      user in anonymized form.

                      Useful if `user.id` or `user.name` contain confidential information
                      and cannot be used.'
                    flat_name: process.session_leader.parent.user.hash
                    ignore_above: 1024
                    level: extended
                    name: hash
                    node_name: hash
                    normalize: []
                    original_fieldset: user
                    short: Unique user hash to correlate information for a user in
                      anonymized form.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-parent-user-id
                    description: Unique identifier of the user.
                    example: S-1-5-21-202424912787-2692429404-2351956786-1000
                    flat_name: process.session_leader.parent.user.id
                    ignore_above: 1024
                    level: core
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: user
                    short: Unique identifier of the user.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-parent-user-name
                    description: Short name or login of the user.
                    example: a.einstein
                    flat_name: process.session_leader.parent.user.name
                    ignore_above: 1024
                    level: core
                    multi_fields:
                    - flat_name: process.session_leader.parent.user.name.text
                      name: text
                      type: match_only_text
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: user
                    short: Short name or login of the user.
                    type: keyword
                risk:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: process-session-leader-parent-user-risk
                    description: Fields for describing risk score and risk level of
                      entities such as hosts and users.  These fields are not allowed
                      to be nested under `event.*`. Please continue to use  `event.risk_score`
                      and `event.risk_score_norm` for event risk.
                    flat_name: process.session_leader.parent.user.risk
                    intermediate: true
                    name: risk
                    node_name: risk
                    original_fieldset: risk
                    short: Fields for describing risk score and level.
                    type: group
                  fields:
                    calculated_level:
                      field_details:
                        dashed_name: process-session-leader-parent-user-risk-calculated-level
                        description: A risk classification level calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: High
                        flat_name: process.session_leader.parent.user.risk.calculated_level
                        ignore_above: 1024
                        level: extended
                        name: calculated_level
                        node_name: calculated_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: keyword
                    calculated_score:
                      field_details:
                        dashed_name: process-session-leader-parent-user-risk-calculated-score
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring.
                        example: 880.73
                        flat_name: process.session_leader.parent.user.risk.calculated_score
                        level: extended
                        name: calculated_score
                        node_name: calculated_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score calculated by an internal
                          system as part of entity analytics and entity risk scoring.
                        type: float
                    calculated_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-user-risk-calculated-score-norm
                        description: A risk classification score calculated by an
                          internal system as part of entity analytics and entity risk
                          scoring, and normalized to a range of 0 to 100.
                        example: 88.73
                        flat_name: process.session_leader.parent.user.risk.calculated_score_norm
                        level: extended
                        name: calculated_score_norm
                        node_name: calculated_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an internal system.
                        type: float
                    static_level:
                      field_details:
                        dashed_name: process-session-leader-parent-user-risk-static-level
                        description: A risk classification level obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: High
                        flat_name: process.session_leader.parent.user.risk.static_level
                        ignore_above: 1024
                        level: extended
                        name: static_level
                        node_name: static_level
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification level obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: keyword
                    static_score:
                      field_details:
                        dashed_name: process-session-leader-parent-user-risk-static-score
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform.
                        example: 830.0
                        flat_name: process.session_leader.parent.user.risk.static_score
                        level: extended
                        name: static_score
                        node_name: static_score
                        normalize: []
                        original_fieldset: risk
                        short: A risk classification score obtained from outside the
                          system, such as from some external Threat Intelligence Platform.
                        type: float
                    static_score_norm:
                      field_details:
                        dashed_name: process-session-leader-parent-user-risk-static-score-norm
                        description: A risk classification score obtained from outside
                          the system, such as from some external Threat Intelligence
                          Platform, and normalized to a range of 0 to 100.
                        example: 83.0
                        flat_name: process.session_leader.parent.user.risk.static_score_norm
                        level: extended
                        name: static_score_norm
                        node_name: static_score_norm
                        normalize: []
                        original_fieldset: risk
                        short: A normalized risk score calculated by an external system.
                        type: float
                roles:
                  field_details:
                    dashed_name: process-session-leader-parent-user-roles
                    description: Array of user roles at the time of the event.
                    example: '["kibana_admin", "reporting_user"]'
                    flat_name: process.session_leader.parent.user.roles
                    ignore_above: 1024
                    level: extended
                    name: roles
                    node_name: roles
                    normalize:
                    - array
                    original_fieldset: user
                    short: Array of user roles at the time of the event.
                    type: keyword
            vpid:
              field_details:
                dashed_name: process-session-leader-parent-vpid
                description: 'Virtual process id.

                  The process id within a pid namespace. This is not necessarily unique
                  across all processes on the host but it is unique within the process
                  namespace that the process exists within.'
                example: 4242
                flat_name: process.session_leader.parent.vpid
                format: string
                level: core
                name: vpid
                node_name: vpid
                normalize: []
                original_fieldset: process
                short: Virtual process id.
                type: long
            working_directory:
              field_details:
                dashed_name: process-session-leader-parent-working-directory
                description: The working directory of the process.
                example: /home/alice
                flat_name: process.session_leader.parent.working_directory
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.parent.working_directory.text
                  name: text
                  type: match_only_text
                name: working_directory
                node_name: working_directory
                normalize: []
                original_fieldset: process
                short: The working directory of the process.
                type: keyword
        pe:
          field_details:
            dashed_name: process-session-leader-pe
            description: These fields contain Windows Portable Executable (PE) metadata.
            flat_name: process.session_leader.pe
            intermediate: true
            name: pe
            node_name: pe
            original_fieldset: pe
            short: These fields contain Windows Portable Executable (PE) metadata.
            type: group
          fields:
            architecture:
              field_details:
                dashed_name: process-session-leader-pe-architecture
                description: CPU architecture target for the file.
                example: x64
                flat_name: process.session_leader.pe.architecture
                ignore_above: 1024
                level: extended
                name: architecture
                node_name: architecture
                normalize: []
                original_fieldset: pe
                short: CPU architecture target for the file.
                type: keyword
            company:
              field_details:
                dashed_name: process-session-leader-pe-company
                description: Internal company name of the file, provided at compile-time.
                example: Microsoft Corporation
                flat_name: process.session_leader.pe.company
                ignore_above: 1024
                level: extended
                name: company
                node_name: company
                normalize: []
                original_fieldset: pe
                short: Internal company name of the file, provided at compile-time.
                type: keyword
            description:
              field_details:
                dashed_name: process-session-leader-pe-description
                description: Internal description of the file, provided at compile-time.
                example: Paint
                flat_name: process.session_leader.pe.description
                ignore_above: 1024
                level: extended
                name: description
                node_name: description
                normalize: []
                original_fieldset: pe
                short: Internal description of the file, provided at compile-time.
                type: keyword
            file_version:
              field_details:
                dashed_name: process-session-leader-pe-file-version
                description: Internal version of the file, provided at compile-time.
                example: 6.3.9600.17415
                flat_name: process.session_leader.pe.file_version
                ignore_above: 1024
                level: extended
                name: file_version
                node_name: file_version
                normalize: []
                original_fieldset: pe
                short: Process name.
                type: keyword
            go_import_hash:
              field_details:
                dashed_name: process-session-leader-pe-go-import-hash
                description: 'A hash of the Go language imports in a PE file excluding
                  standard library imports. An import hash can be used to fingerprint
                  binaries even after recompilation or other code-level transformations
                  have occurred, which would change more traditional hash values.

                  The algorithm used to calculate the Go symbol hash and a reference
                  implementation are available [here](https://github.com/elastic/toutoumomoma).'
                example: 10bddcb4cee42080f76c88d9ff964491
                flat_name: process.session_leader.pe.go_import_hash
                ignore_above: 1024
                level: extended
                name: go_import_hash
                node_name: go_import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the Go language imports in a PE file.
                type: keyword
            go_imports:
              field_details:
                dashed_name: process-session-leader-pe-go-imports
                description: List of imported Go language element names and types.
                flat_name: process.session_leader.pe.go_imports
                level: extended
                name: go_imports
                node_name: go_imports
                normalize: []
                original_fieldset: pe
                short: List of imported Go language element names and types.
                type: flattened
            go_imports_names_entropy:
              field_details:
                dashed_name: process-session-leader-pe-go-imports-names-entropy
                description: Shannon entropy calculation from the list of Go imports.
                flat_name: process.session_leader.pe.go_imports_names_entropy
                format: number
                level: extended
                name: go_imports_names_entropy
                node_name: go_imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of Go imports.
                type: long
            go_imports_names_var_entropy:
              field_details:
                dashed_name: process-session-leader-pe-go-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of Go imports.
                flat_name: process.session_leader.pe.go_imports_names_var_entropy
                format: number
                level: extended
                name: go_imports_names_var_entropy
                node_name: go_imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of Go
                  imports.
                type: long
            go_stripped:
              field_details:
                dashed_name: process-session-leader-pe-go-stripped
                description: Set to true if the file is a Go executable that has had
                  its symbols stripped or obfuscated and false if an unobfuscated
                  Go executable.
                flat_name: process.session_leader.pe.go_stripped
                level: extended
                name: go_stripped
                node_name: go_stripped
                normalize: []
                original_fieldset: pe
                short: Whether the file is a stripped or obfuscated Go executable.
                type: boolean
            imphash:
              field_details:
                dashed_name: process-session-leader-pe-imphash
                description: 'A hash of the imports in a PE file. An imphash -- or
                  import hash -- can be used to fingerprint binaries even after recompilation
                  or other code-level transformations have occurred, which would change
                  more traditional hash values.

                  Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                example: 0c6803c4e922103c4dca5963aad36ddf
                flat_name: process.session_leader.pe.imphash
                ignore_above: 1024
                level: extended
                name: imphash
                node_name: imphash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            import_hash:
              field_details:
                dashed_name: process-session-leader-pe-import-hash
                description: 'A hash of the imports in a PE file. An import hash can
                  be used to fingerprint binaries even after recompilation or other
                  code-level transformations have occurred, which would change more
                  traditional hash values.

                  This is a synonym for imphash.'
                example: d41d8cd98f00b204e9800998ecf8427e
                flat_name: process.session_leader.pe.import_hash
                ignore_above: 1024
                level: extended
                name: import_hash
                node_name: import_hash
                normalize: []
                original_fieldset: pe
                short: A hash of the imports in a PE file.
                type: keyword
            imports:
              field_details:
                dashed_name: process-session-leader-pe-imports
                description: List of imported element names and types.
                flat_name: process.session_leader.pe.imports
                level: extended
                name: imports
                node_name: imports
                normalize:
                - array
                original_fieldset: pe
                short: List of imported element names and types.
                type: flattened
            imports_names_entropy:
              field_details:
                dashed_name: process-session-leader-pe-imports-names-entropy
                description: Shannon entropy calculation from the list of imported
                  element names and types.
                flat_name: process.session_leader.pe.imports_names_entropy
                format: number
                level: extended
                name: imports_names_entropy
                node_name: imports_names_entropy
                normalize: []
                original_fieldset: pe
                short: Shannon entropy calculation from the list of imported element
                  names and types.
                type: long
            imports_names_var_entropy:
              field_details:
                dashed_name: process-session-leader-pe-imports-names-var-entropy
                description: Variance for Shannon entropy calculation from the list
                  of imported element names and types.
                flat_name: process.session_leader.pe.imports_names_var_entropy
                format: number
                level: extended
                name: imports_names_var_entropy
                node_name: imports_names_var_entropy
                normalize: []
                original_fieldset: pe
                short: Variance for Shannon entropy calculation from the list of imported
                  element names and types.
                type: long
            original_file_name:
              field_details:
                dashed_name: process-session-leader-pe-original-file-name
                description: Internal name of the file, provided at compile-time.
                example: MSPAINT.EXE
                flat_name: process.session_leader.pe.original_file_name
                ignore_above: 1024
                level: extended
                name: original_file_name
                node_name: original_file_name
                normalize: []
                original_fieldset: pe
                short: Internal name of the file, provided at compile-time.
                type: keyword
            pehash:
              field_details:
                dashed_name: process-session-leader-pe-pehash
                description: 'A hash of the PE header and data from one or more PE
                  sections. An pehash can be used to cluster files by transforming
                  structural information about a file into a hash value.

                  Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                example: 73ff189b63cd6be375a7ff25179a38d347651975
                flat_name: process.session_leader.pe.pehash
                ignore_above: 1024
                level: extended
                name: pehash
                node_name: pehash
                normalize: []
                original_fieldset: pe
                short: A hash of the PE header and data from one or more PE sections.
                type: keyword
            product:
              field_details:
                dashed_name: process-session-leader-pe-product
                description: Internal product name of the file, provided at compile-time.
                example: "Microsoft\xAE Windows\xAE Operating System"
                flat_name: process.session_leader.pe.product
                ignore_above: 1024
                level: extended
                name: product
                node_name: product
                normalize: []
                original_fieldset: pe
                short: Internal product name of the file, provided at compile-time.
                type: keyword
            sections:
              field_details:
                dashed_name: process-session-leader-pe-sections
                description: 'An array containing an object for each section of the
                  PE file.

                  The keys that should be present in these objects are defined by
                  sub-fields underneath `pe.sections.*`.'
                flat_name: process.session_leader.pe.sections
                intermediate: false
                level: extended
                name: sections
                node_name: sections
                normalize:
                - array
                original_fieldset: pe
                short: Section information of the PE file.
                type: nested
              fields:
                entropy:
                  field_details:
                    dashed_name: process-session-leader-pe-sections-entropy
                    description: Shannon entropy calculation from the section.
                    flat_name: process.session_leader.pe.sections.entropy
                    format: number
                    level: extended
                    name: sections.entropy
                    node_name: entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the section.
                    type: long
                name:
                  field_details:
                    dashed_name: process-session-leader-pe-sections-name
                    description: PE Section List name.
                    flat_name: process.session_leader.pe.sections.name
                    ignore_above: 1024
                    level: extended
                    name: sections.name
                    node_name: name
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List name.
                    type: keyword
                physical_size:
                  field_details:
                    dashed_name: process-session-leader-pe-sections-physical-size
                    description: PE Section List physical size.
                    flat_name: process.session_leader.pe.sections.physical_size
                    format: bytes
                    level: extended
                    name: sections.physical_size
                    node_name: physical_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List physical size.
                    type: long
                var_entropy:
                  field_details:
                    dashed_name: process-session-leader-pe-sections-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      section.
                    flat_name: process.session_leader.pe.sections.var_entropy
                    format: number
                    level: extended
                    name: sections.var_entropy
                    node_name: var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the section.
                    type: long
                virtual_size:
                  field_details:
                    dashed_name: process-session-leader-pe-sections-virtual-size
                    description: PE Section List virtual size. This is always the
                      same as `physical_size`.
                    flat_name: process.session_leader.pe.sections.virtual_size
                    format: string
                    level: extended
                    name: sections.virtual_size
                    node_name: virtual_size
                    normalize: []
                    original_fieldset: pe
                    short: PE Section List virtual size. This is always the same as
                      `physical_size`.
                    type: long
        pgid:
          field_details:
            dashed_name: process-session-leader-pgid
            description: 'Deprecated for removal in next major version release. This
              field is superseded by `process.group_leader.pid`.

              Identifier of the group of processes the process belongs to.'
            flat_name: process.session_leader.pgid
            format: string
            level: extended
            name: pgid
            node_name: pgid
            normalize: []
            original_fieldset: process
            short: Deprecated identifier of the group of processes the process belongs
              to.
            type: long
        pid:
          field_details:
            dashed_name: process-session-leader-pid
            description: Process id.
            example: 4242
            flat_name: process.session_leader.pid
            format: string
            level: core
            name: pid
            node_name: pid
            normalize: []
            original_fieldset: process
            short: Process id.
            type: long
        real_group:
          field_details:
            dashed_name: process-session-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.session_leader.group
            intermediate: true
            name: real_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-real-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.real_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-real-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.session_leader.real_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-real-group-name
                description: Name of the group.
                flat_name: process.session_leader.real_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        real_user:
          field_details:
            dashed_name: process-session-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.session_leader.user
            intermediate: true
            name: real_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-real-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.real_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-session-leader-real-user-email
                description: User email address.
                flat_name: process.session_leader.real_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-session-leader-real-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.session_leader.real_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.real_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-session-leader-real-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.real_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-real-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.real_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-real-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.real_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-real-user-group-name
                    description: Name of the group.
                    flat_name: process.session_leader.real_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-session-leader-real-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.session_leader.real_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-real-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.session_leader.real_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-real-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.session_leader.real_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.session_leader.real_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-session-leader-real-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.session_leader.real_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-session-leader-real-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.session_leader.real_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-session-leader-real-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.session_leader.real_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-session-leader-real-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.session_leader.real_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-session-leader-real-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.session_leader.real_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-session-leader-real-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.session_leader.real_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-session-leader-real-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.session_leader.real_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-session-leader-real-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.session_leader.real_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        same_as_process:
          field_details:
            dashed_name: process-session-leader-same-as-process
            description: 'This boolean is used to identify if a leader process is
              the same as the top level process.

              For example, if `process.group_leader.same_as_process = true`, it means
              the process event in question is the leader of its process group. Details
              under `process.*` like `pid` would be the same under `process.group_leader.*`
              The same applies for both `process.session_leader` and `process.entry_leader`.

              This field exists to the benefit of EQL and other rule engines since
              it''s not possible to compare equality between two fields in a single
              document. e.g `process.entity_id` = `process.group_leader.entity_id`
              (top level process is the process group leader) OR `process.entity_id`
              = `process.entry_leader.entity_id` (top level process is the entry session
              leader)

              Instead these rules could be written like: `process.group_leader.same_as_process:
              true` OR `process.entry_leader.same_as_process: true`

              Note: This field is only set on `process.entry_leader`, `process.session_leader`
              and `process.group_leader`.'
            example: true
            flat_name: process.session_leader.same_as_process
            level: extended
            name: same_as_process
            node_name: same_as_process
            normalize: []
            original_fieldset: process
            short: This boolean is used to identify if a leader process is the same
              as the top level process.
            type: boolean
        saved_group:
          field_details:
            dashed_name: process-session-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.session_leader.group
            intermediate: true
            name: saved_group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-saved-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.saved_group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-saved-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.session_leader.saved_group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-saved-group-name
                description: Name of the group.
                flat_name: process.session_leader.saved_group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        saved_user:
          field_details:
            dashed_name: process-session-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.session_leader.user
            intermediate: true
            name: saved_user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-saved-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.saved_user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-session-leader-saved-user-email
                description: User email address.
                flat_name: process.session_leader.saved_user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-session-leader-saved-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.session_leader.saved_user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.saved_user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-session-leader-saved-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.saved_user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-saved-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.saved_user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-saved-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.saved_user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-saved-user-group-name
                    description: Name of the group.
                    flat_name: process.session_leader.saved_user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-session-leader-saved-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.session_leader.saved_user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-saved-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.session_leader.saved_user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-saved-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.session_leader.saved_user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.session_leader.saved_user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-session-leader-saved-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.session_leader.saved_user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-session-leader-saved-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.session_leader.saved_user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-session-leader-saved-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.session_leader.saved_user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-session-leader-saved-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.session_leader.saved_user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-session-leader-saved-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.session_leader.saved_user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-session-leader-saved-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.session_leader.saved_user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-session-leader-saved-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.session_leader.saved_user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-session-leader-saved-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.session_leader.saved_user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        start:
          field_details:
            dashed_name: process-session-leader-start
            description: The time the process started.
            example: '2016-05-23T08:05:34.853Z'
            flat_name: process.session_leader.start
            level: extended
            name: start
            node_name: start
            normalize: []
            original_fieldset: process
            short: The time the process started.
            type: date
        supplemental_groups:
          field_details:
            dashed_name: process-session-leader-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.session_leader.group
            intermediate: true
            name: supplemental_groups
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-supplemental-groups-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.supplemental_groups.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-supplemental-groups-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.session_leader.supplemental_groups.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-supplemental-groups-name
                description: Name of the group.
                flat_name: process.session_leader.supplemental_groups.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        thread:
          field_details:
            dashed_name: process-session-leader-thread
            flat_name: process.session_leader.thread
            intermediate: true
            name: thread
            node_name: thread
            original_fieldset: process
            type: object
          fields:
            capabilities:
              field_details:
                dashed_name: process-session-leader-thread-capabilities
                flat_name: process.session_leader.thread.capabilities
                intermediate: true
                name: thread.capabilities
                node_name: capabilities
                original_fieldset: process
                type: object
              fields:
                effective:
                  field_details:
                    dashed_name: process-session-leader-thread-capabilities-effective
                    description: This is the set of capabilities used by the kernel
                      to perform permission checks for the thread.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.session_leader.thread.capabilities.effective
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.effective
                    node_name: effective
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities used for permission checks.
                    type: keyword
                permitted:
                  field_details:
                    dashed_name: process-session-leader-thread-capabilities-permitted
                    description: This is a limiting superset for the effective capabilities
                      that the thread may assume.
                    example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                    flat_name: process.session_leader.thread.capabilities.permitted
                    ignore_above: 1024
                    level: extended
                    name: thread.capabilities.permitted
                    node_name: permitted
                    normalize:
                    - array
                    original_fieldset: process
                    pattern: ^(CAP_[A-Z_]+|\d+)$
                    short: Array of capabilities a thread could assume.
                    type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-thread-id
                description: Thread ID.
                example: 4242
                flat_name: process.session_leader.thread.id
                format: string
                level: extended
                name: thread.id
                node_name: id
                normalize: []
                original_fieldset: process
                short: Thread ID.
                type: long
            name:
              field_details:
                dashed_name: process-session-leader-thread-name
                description: Thread name.
                example: thread-0
                flat_name: process.session_leader.thread.name
                ignore_above: 1024
                level: extended
                name: thread.name
                node_name: name
                normalize: []
                original_fieldset: process
                short: Thread name.
                type: keyword
        title:
          field_details:
            dashed_name: process-session-leader-title
            description: 'Process title.

              The proctitle, some times the same as process name. Can also be different:
              for example a browser setting its title to the web page currently opened.'
            flat_name: process.session_leader.title
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.session_leader.title.text
              name: text
              type: match_only_text
            name: title
            node_name: title
            normalize: []
            original_fieldset: process
            short: Process title.
            type: keyword
        tty:
          field_details:
            dashed_name: process-session-leader-tty
            description: Information about the controlling TTY device. If set, the
              process belongs to an interactive session.
            flat_name: process.session_leader.tty
            intermediate: false
            level: extended
            name: tty
            node_name: tty
            normalize: []
            original_fieldset: process
            short: Information about the controlling TTY device.
            type: object
          fields:
            char_device:
              field_details:
                dashed_name: process-session-leader-tty-char-device
                flat_name: process.session_leader.tty.char_device
                intermediate: true
                name: tty.char_device
                node_name: char_device
                original_fieldset: process
                type: object
              fields:
                major:
                  field_details:
                    dashed_name: process-session-leader-tty-char-device-major
                    description: The major number identifies the driver associated
                      with the device. The character device's major and minor numbers
                      can be algorithmically combined to produce the more familiar
                      terminal identifiers such as "ttyS0" and "pts/0". For more details,
                      please refer to the Linux kernel documentation.
                    example: 4
                    flat_name: process.session_leader.tty.char_device.major
                    level: extended
                    name: tty.char_device.major
                    node_name: major
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's major number.
                    type: long
                minor:
                  field_details:
                    dashed_name: process-session-leader-tty-char-device-minor
                    description: "The minor number is used only by the driver specified\
                      \ by the major number; other parts of the kernel don\u2019t\
                      \ use it, and merely pass it along to the driver. It is common\
                      \ for a driver to control several devices; the minor number\
                      \ provides a way for the driver to differentiate among them."
                    example: 1
                    flat_name: process.session_leader.tty.char_device.minor
                    level: extended
                    name: tty.char_device.minor
                    node_name: minor
                    normalize: []
                    original_fieldset: process
                    short: The TTY character device's minor number.
                    type: long
            columns:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-tty-columns
                description: 'The number of character columns per line. e.g terminal
                  width

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 80
                flat_name: process.session_leader.tty.columns
                level: extended
                name: tty.columns
                node_name: columns
                normalize: []
                original_fieldset: process
                short: The number of character columns per line. e.g terminal width
                type: long
            rows:
              field_details:
                beta: This field is beta and subject to change.
                dashed_name: process-session-leader-tty-rows
                description: 'The number of character rows in the terminal. e.g terminal
                  height

                  Terminal sizes can change, so this value reflects the maximum value
                  for a given IO event. i.e. where event.action = ''text_output'''
                example: 24
                flat_name: process.session_leader.tty.rows
                level: extended
                name: tty.rows
                node_name: rows
                normalize: []
                original_fieldset: process
                short: The number of character rows in the terminal. e.g terminal
                  height
                type: long
        uptime:
          field_details:
            dashed_name: process-session-leader-uptime
            description: Seconds the process has been up.
            example: 1325
            flat_name: process.session_leader.uptime
            level: extended
            name: uptime
            node_name: uptime
            normalize: []
            original_fieldset: process
            short: Seconds the process has been up.
            type: long
        user:
          field_details:
            dashed_name: process-session-leader-user
            description: 'The user fields describe information about the user that
              is relevant to the event.

              Fields can have one entry or multiple entries. If a user has more than
              one id, provide an array that includes all of them.'
            flat_name: process.session_leader.user
            intermediate: true
            name: user
            node_name: user
            original_fieldset: user
            short: Fields to describe the user relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-session-leader-user-domain
                description: 'Name of the directory the user is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.session_leader.user.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: user
                short: Name of the directory the user is a member of.
                type: keyword
            email:
              field_details:
                dashed_name: process-session-leader-user-email
                description: User email address.
                flat_name: process.session_leader.user.email
                ignore_above: 1024
                level: extended
                name: email
                node_name: email
                normalize: []
                original_fieldset: user
                short: User email address.
                type: keyword
            full_name:
              field_details:
                dashed_name: process-session-leader-user-full-name
                description: User's full name, if available.
                example: Albert Einstein
                flat_name: process.session_leader.user.full_name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: process.session_leader.user.full_name.text
                  name: text
                  type: match_only_text
                name: full_name
                node_name: full_name
                normalize: []
                original_fieldset: user
                short: User's full name, if available.
                type: keyword
            group:
              field_details:
                dashed_name: process-session-leader-user-group
                description: The group fields are meant to represent groups that are
                  relevant to the event.
                flat_name: process.session_leader.user.group
                intermediate: true
                name: group
                node_name: group
                original_fieldset: group
                short: User's group relevant to the event.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: process-session-leader-user-group-domain
                    description: 'Name of the directory the group is a member of.

                      For example, an LDAP or Active Directory domain name.'
                    flat_name: process.session_leader.user.group.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: group
                    short: Name of the directory the group is a member of.
                    type: keyword
                id:
                  field_details:
                    dashed_name: process-session-leader-user-group-id
                    description: Unique identifier for the group on the system/platform.
                    flat_name: process.session_leader.user.group.id
                    ignore_above: 1024
                    level: extended
                    name: id
                    node_name: id
                    normalize: []
                    original_fieldset: group
                    short: Unique identifier for the group on the system/platform.
                    type: keyword
                name:
                  field_details:
                    dashed_name: process-session-leader-user-group-name
                    description: Name of the group.
                    flat_name: process.session_leader.user.group.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: group
                    short: Name of the group.
                    type: keyword
            hash:
              field_details:
                dashed_name: process-session-leader-user-hash
                description: 'Unique user hash to correlate information for a user
                  in anonymized form.

                  Useful if `user.id` or `user.name` contain confidential information
                  and cannot be used.'
                flat_name: process.session_leader.user.hash
                ignore_above: 1024
                level: extended
                name: hash
                node_name: hash
                normalize: []
                original_fieldset: user
                short: Unique user hash to correlate information for a user in anonymized
                  form.
                type: keyword
            id:
              field_details:
                dashed_name: process-session-leader-user-id
                description: Unique identifier of the user.
                example: S-1-5-21-202424912787-2692429404-2351956786-1000
                flat_name: process.session_leader.user.id
                ignore_above: 1024
                level: core
                name: id
                node_name: id
                normalize: []
                original_fieldset: user
                short: Unique identifier of the user.
                type: keyword
            name:
              field_details:
                dashed_name: process-session-leader-user-name
                description: Short name or login of the user.
                example: a.einstein
                flat_name: process.session_leader.user.name
                ignore_above: 1024
                level: core
                multi_fields:
                - flat_name: process.session_leader.user.name.text
                  name: text
                  type: match_only_text
                name: name
                node_name: name
                normalize: []
                original_fieldset: user
                short: Short name or login of the user.
                type: keyword
            risk:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: process-session-leader-user-risk
                description: Fields for describing risk score and risk level of entities
                  such as hosts and users.  These fields are not allowed to be nested
                  under `event.*`. Please continue to use  `event.risk_score` and
                  `event.risk_score_norm` for event risk.
                flat_name: process.session_leader.user.risk
                intermediate: true
                name: risk
                node_name: risk
                original_fieldset: risk
                short: Fields for describing risk score and level.
                type: group
              fields:
                calculated_level:
                  field_details:
                    dashed_name: process-session-leader-user-risk-calculated-level
                    description: A risk classification level calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: High
                    flat_name: process.session_leader.user.risk.calculated_level
                    ignore_above: 1024
                    level: extended
                    name: calculated_level
                    node_name: calculated_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: keyword
                calculated_score:
                  field_details:
                    dashed_name: process-session-leader-user-risk-calculated-score
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring.
                    example: 880.73
                    flat_name: process.session_leader.user.risk.calculated_score
                    level: extended
                    name: calculated_score
                    node_name: calculated_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score calculated by an internal system
                      as part of entity analytics and entity risk scoring.
                    type: float
                calculated_score_norm:
                  field_details:
                    dashed_name: process-session-leader-user-risk-calculated-score-norm
                    description: A risk classification score calculated by an internal
                      system as part of entity analytics and entity risk scoring,
                      and normalized to a range of 0 to 100.
                    example: 88.73
                    flat_name: process.session_leader.user.risk.calculated_score_norm
                    level: extended
                    name: calculated_score_norm
                    node_name: calculated_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an internal system.
                    type: float
                static_level:
                  field_details:
                    dashed_name: process-session-leader-user-risk-static-level
                    description: A risk classification level obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: High
                    flat_name: process.session_leader.user.risk.static_level
                    ignore_above: 1024
                    level: extended
                    name: static_level
                    node_name: static_level
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification level obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: keyword
                static_score:
                  field_details:
                    dashed_name: process-session-leader-user-risk-static-score
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform.
                    example: 830.0
                    flat_name: process.session_leader.user.risk.static_score
                    level: extended
                    name: static_score
                    node_name: static_score
                    normalize: []
                    original_fieldset: risk
                    short: A risk classification score obtained from outside the system,
                      such as from some external Threat Intelligence Platform.
                    type: float
                static_score_norm:
                  field_details:
                    dashed_name: process-session-leader-user-risk-static-score-norm
                    description: A risk classification score obtained from outside
                      the system, such as from some external Threat Intelligence Platform,
                      and normalized to a range of 0 to 100.
                    example: 83.0
                    flat_name: process.session_leader.user.risk.static_score_norm
                    level: extended
                    name: static_score_norm
                    node_name: static_score_norm
                    normalize: []
                    original_fieldset: risk
                    short: A normalized risk score calculated by an external system.
                    type: float
            roles:
              field_details:
                dashed_name: process-session-leader-user-roles
                description: Array of user roles at the time of the event.
                example: '["kibana_admin", "reporting_user"]'
                flat_name: process.session_leader.user.roles
                ignore_above: 1024
                level: extended
                name: roles
                node_name: roles
                normalize:
                - array
                original_fieldset: user
                short: Array of user roles at the time of the event.
                type: keyword
        vpid:
          field_details:
            dashed_name: process-session-leader-vpid
            description: 'Virtual process id.

              The process id within a pid namespace. This is not necessarily unique
              across all processes on the host but it is unique within the process
              namespace that the process exists within.'
            example: 4242
            flat_name: process.session_leader.vpid
            format: string
            level: core
            name: vpid
            node_name: vpid
            normalize: []
            original_fieldset: process
            short: Virtual process id.
            type: long
        working_directory:
          field_details:
            dashed_name: process-session-leader-working-directory
            description: The working directory of the process.
            example: /home/alice
            flat_name: process.session_leader.working_directory
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.session_leader.working_directory.text
              name: text
              type: match_only_text
            name: working_directory
            node_name: working_directory
            normalize: []
            original_fieldset: process
            short: The working directory of the process.
            type: keyword
    start:
      field_details:
        dashed_name: process-start
        description: The time the process started.
        example: '2016-05-23T08:05:34.853Z'
        flat_name: process.start
        level: extended
        name: start
        node_name: start
        normalize: []
        short: The time the process started.
        type: date
    supplemental_groups:
      field_details:
        dashed_name: process-group
        description: The group fields are meant to represent groups that are relevant
          to the event.
        flat_name: process.group
        intermediate: true
        name: supplemental_groups
        node_name: group
        original_fieldset: group
        short: User's group relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-supplemental-groups-domain
            description: 'Name of the directory the group is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.supplemental_groups.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: group
            short: Name of the directory the group is a member of.
            type: keyword
        id:
          field_details:
            dashed_name: process-supplemental-groups-id
            description: Unique identifier for the group on the system/platform.
            flat_name: process.supplemental_groups.id
            ignore_above: 1024
            level: extended
            name: id
            node_name: id
            normalize: []
            original_fieldset: group
            short: Unique identifier for the group on the system/platform.
            type: keyword
        name:
          field_details:
            dashed_name: process-supplemental-groups-name
            description: Name of the group.
            flat_name: process.supplemental_groups.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: group
            short: Name of the group.
            type: keyword
    thread:
      field_details:
        dashed_name: process-thread
        flat_name: process.thread
        intermediate: true
        name: thread
        node_name: thread
        type: object
      fields:
        capabilities:
          field_details:
            dashed_name: process-thread-capabilities
            flat_name: process.thread.capabilities
            intermediate: true
            name: thread.capabilities
            node_name: capabilities
            type: object
          fields:
            effective:
              field_details:
                dashed_name: process-thread-capabilities-effective
                description: This is the set of capabilities used by the kernel to
                  perform permission checks for the thread.
                example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                flat_name: process.thread.capabilities.effective
                ignore_above: 1024
                level: extended
                name: thread.capabilities.effective
                node_name: effective
                normalize:
                - array
                pattern: ^(CAP_[A-Z_]+|\d+)$
                short: Array of capabilities used for permission checks.
                type: keyword
            permitted:
              field_details:
                dashed_name: process-thread-capabilities-permitted
                description: This is a limiting superset for the effective capabilities
                  that the thread may assume.
                example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
                flat_name: process.thread.capabilities.permitted
                ignore_above: 1024
                level: extended
                name: thread.capabilities.permitted
                node_name: permitted
                normalize:
                - array
                pattern: ^(CAP_[A-Z_]+|\d+)$
                short: Array of capabilities a thread could assume.
                type: keyword
        id:
          field_details:
            dashed_name: process-thread-id
            description: Thread ID.
            example: 4242
            flat_name: process.thread.id
            format: string
            level: extended
            name: thread.id
            node_name: id
            normalize: []
            short: Thread ID.
            type: long
        name:
          field_details:
            dashed_name: process-thread-name
            description: Thread name.
            example: thread-0
            flat_name: process.thread.name
            ignore_above: 1024
            level: extended
            name: thread.name
            node_name: name
            normalize: []
            short: Thread name.
            type: keyword
    title:
      field_details:
        dashed_name: process-title
        description: 'Process title.

          The proctitle, some times the same as process name. Can also be different:
          for example a browser setting its title to the web page currently opened.'
        flat_name: process.title
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: process.title.text
          name: text
          type: match_only_text
        name: title
        node_name: title
        normalize: []
        short: Process title.
        type: keyword
    tty:
      field_details:
        dashed_name: process-tty
        description: Information about the controlling TTY device. If set, the process
          belongs to an interactive session.
        flat_name: process.tty
        intermediate: false
        level: extended
        name: tty
        node_name: tty
        normalize: []
        short: Information about the controlling TTY device.
        type: object
      fields:
        char_device:
          field_details:
            dashed_name: process-tty-char-device
            flat_name: process.tty.char_device
            intermediate: true
            name: tty.char_device
            node_name: char_device
            type: object
          fields:
            major:
              field_details:
                dashed_name: process-tty-char-device-major
                description: The major number identifies the driver associated with
                  the device. The character device's major and minor numbers can be
                  algorithmically combined to produce the more familiar terminal identifiers
                  such as "ttyS0" and "pts/0". For more details, please refer to the
                  Linux kernel documentation.
                example: 4
                flat_name: process.tty.char_device.major
                level: extended
                name: tty.char_device.major
                node_name: major
                normalize: []
                short: The TTY character device's major number.
                type: long
            minor:
              field_details:
                dashed_name: process-tty-char-device-minor
                description: "The minor number is used only by the driver specified\
                  \ by the major number; other parts of the kernel don\u2019t use\
                  \ it, and merely pass it along to the driver. It is common for a\
                  \ driver to control several devices; the minor number provides a\
                  \ way for the driver to differentiate among them."
                example: 1
                flat_name: process.tty.char_device.minor
                level: extended
                name: tty.char_device.minor
                node_name: minor
                normalize: []
                short: The TTY character device's minor number.
                type: long
        columns:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-tty-columns
            description: 'The number of character columns per line. e.g terminal width

              Terminal sizes can change, so this value reflects the maximum value
              for a given IO event. i.e. where event.action = ''text_output'''
            example: 80
            flat_name: process.tty.columns
            level: extended
            name: tty.columns
            node_name: columns
            normalize: []
            short: The number of character columns per line. e.g terminal width
            type: long
        rows:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: process-tty-rows
            description: 'The number of character rows in the terminal. e.g terminal
              height

              Terminal sizes can change, so this value reflects the maximum value
              for a given IO event. i.e. where event.action = ''text_output'''
            example: 24
            flat_name: process.tty.rows
            level: extended
            name: tty.rows
            node_name: rows
            normalize: []
            short: The number of character rows in the terminal. e.g terminal height
            type: long
    uptime:
      field_details:
        dashed_name: process-uptime
        description: Seconds the process has been up.
        example: 1325
        flat_name: process.uptime
        level: extended
        name: uptime
        node_name: uptime
        normalize: []
        short: Seconds the process has been up.
        type: long
    user:
      field_details:
        dashed_name: process-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: process.user
        intermediate: true
        name: user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: process-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: process.user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: process-user-email
            description: User email address.
            flat_name: process.user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: process-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: process.user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: process.user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: process-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: process.user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: process-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: process.user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: process-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: process.user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: process-user-group-name
                description: Name of the group.
                flat_name: process.user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: process-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: process.user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: process-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: process.user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: process-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: process.user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: process.user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: process-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: process.user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: process-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: process.user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: process-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: process.user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: process-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: process.user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: process-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: process.user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: process-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: process.user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: process-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: process.user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: process-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: process.user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
    vpid:
      field_details:
        dashed_name: process-vpid
        description: 'Virtual process id.

          The process id within a pid namespace. This is not necessarily unique across
          all processes on the host but it is unique within the process namespace
          that the process exists within.'
        example: 4242
        flat_name: process.vpid
        format: string
        level: core
        name: vpid
        node_name: vpid
        normalize: []
        short: Virtual process id.
        type: long
    working_directory:
      field_details:
        dashed_name: process-working-directory
        description: The working directory of the process.
        example: /home/alice
        flat_name: process.working_directory
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: process.working_directory.text
          name: text
          type: match_only_text
        name: working_directory
        node_name: working_directory
        normalize: []
        short: The working directory of the process.
        type: keyword
  schema_details:
    group: 2
    nestings:
    - process.attested_groups
    - process.attested_user
    - process.code_signature
    - process.elf
    - process.entry_leader
    - process.entry_leader.parent
    - process.entry_leader.parent.session_leader
    - process.entry_meta.source
    - process.group
    - process.group_leader
    - process.hash
    - process.macho
    - process.parent
    - process.parent.group_leader
    - process.pe
    - process.previous
    - process.real_group
    - process.real_user
    - process.saved_group
    - process.saved_user
    - process.session_leader
    - process.session_leader.parent
    - process.session_leader.parent.session_leader
    - process.supplemental_groups
    - process.user
    prefix: process.
    reusable:
      expected:
      - as: parent
        at: process
        full: process.parent
        short_override: Information about the parent process.
      - as: entry_leader
        at: process
        full: process.entry_leader
        short_override: First process from terminal or remote access via SSH, SSM,
          etc OR a service directly started by the init process.
      - as: session_leader
        at: process
        full: process.session_leader
        short_override: Often the same as entry_leader. When it differs, it represents
          a session started within another session. e.g. using tmux
      - as: group_leader
        at: process
        full: process.group_leader
        short_override: Information about the process group leader. In some cases
          this may be the same as the top level process.
      - as: group_leader
        at: process.parent
        full: process.parent.group_leader
        short_override: Information about the parent's process group leader. Only
          pid, start and entity_id fields are set.
      - as: parent
        at: process.entry_leader
        full: process.entry_leader.parent
        short_override: Information about the entry leader's parent process. Only
          pid, start and entity_id fields are set.
      - as: parent
        at: process.session_leader
        full: process.session_leader.parent
        short_override: Information about the session leader's parent process. Only
          pid, start and entity_id fields are set.
      - as: session_leader
        at: process.entry_leader.parent
        full: process.entry_leader.parent.session_leader
        short_override: Information about the parent session of the entry leader.
          Only pid, start and entity_id fields are set.
      - as: session_leader
        at: process.session_leader.parent
        full: process.session_leader.parent.session_leader
        short_override: Information about the parent session of the session leader.
          Only pid, start and entity_id fields are set.
      - as: previous
        at: process
        full: process.previous
        normalize: &id003
        - array
        short_override: An array of previous executions for the process, including
          the initial fork. Only executable and args are set.
      order: 2
      top_level: true
    reused_here:
    - full: process.group
      schema_name: group
      short: The effective group (egid).
    - full: process.real_group
      schema_name: group
      short: The real group (rgid).
    - full: process.saved_group
      schema_name: group
      short: The saved group (sgid).
    - full: process.supplemental_groups
      normalize: *id001
      schema_name: group
      short: An array of supplemental groups.
    - beta: Reusing the `group` fields in this location is currently considered beta.
      full: process.attested_groups
      normalize: *id002
      schema_name: group
      short: The externally attested groups based on an external source such as the
        Kube API.
    - full: process.hash
      schema_name: hash
      short: Hashes, usually file hashes.
    - full: process.pe
      schema_name: pe
      short: These fields contain Windows Portable Executable (PE) metadata.
    - full: process.code_signature
      schema_name: code_signature
      short: These fields contain information about binary code signatures.
    - beta: This field reuse is beta and subject to change.
      full: process.elf
      schema_name: elf
      short: These fields contain Linux Executable Linkable Format (ELF) metadata.
    - beta: This field reuse is beta and subject to change.
      full: process.macho
      schema_name: macho
      short: These fields contain Mac OS Mach Object file format (Mach-O) metadata.
    - full: process.entry_meta.source
      schema_name: source
      short: Remote client information such as ip, port and geo location.
    - full: process.user
      schema_name: user
      short: The effective user (euid).
    - full: process.saved_user
      schema_name: user
      short: The saved user (suid).
    - full: process.real_user
      schema_name: user
      short: The real user (ruid). Identifies the real owner of the process.
    - beta: Reusing the `user` fields in this location is currently considered beta.
      full: process.attested_user
      schema_name: user
      short: The externally attested user based on an external source such as the
        Kube API.
    - full: process.parent
      schema_name: process
      short: Information about the parent process.
    - full: process.entry_leader
      schema_name: process
      short: First process from terminal or remote access via SSH, SSM, etc OR a service
        directly started by the init process.
    - full: process.session_leader
      schema_name: process
      short: Often the same as entry_leader. When it differs, it represents a session
        started within another session. e.g. using tmux
    - full: process.group_leader
      schema_name: process
      short: Information about the process group leader. In some cases this may be
        the same as the top level process.
    - full: process.parent.group_leader
      schema_name: process
      short: Information about the parent's process group leader. Only pid, start
        and entity_id fields are set.
    - full: process.entry_leader.parent
      schema_name: process
      short: Information about the entry leader's parent process. Only pid, start
        and entity_id fields are set.
    - full: process.session_leader.parent
      schema_name: process
      short: Information about the session leader's parent process. Only pid, start
        and entity_id fields are set.
    - full: process.entry_leader.parent.session_leader
      schema_name: process
      short: Information about the parent session of the entry leader. Only pid, start
        and entity_id fields are set.
    - full: process.session_leader.parent.session_leader
      schema_name: process
      short: Information about the parent session of the session leader. Only pid,
        start and entity_id fields are set.
    - full: process.previous
      normalize: *id003
      schema_name: process
      short: An array of previous executions for the process, including the initial
        fork. Only executable and args are set.
    root: false
    title: Process
registry:
  field_details:
    dashed_name: registry
    description: Fields related to Windows Registry operations.
    flat_name: registry
    name: registry
    node_name: registry
    short: Fields related to Windows Registry operations.
    type: group
  fields:
    data:
      field_details:
        dashed_name: registry-data
        flat_name: registry.data
        intermediate: true
        name: data
        node_name: data
        type: object
      fields:
        bytes:
          field_details:
            dashed_name: registry-data-bytes
            description: 'Original bytes written with base64 encoding.

              For Windows registry operations, such as SetValueEx and RegQueryValueEx,
              this corresponds to the data pointed by `lp_data`. This is optional
              but provides better recoverability and should be populated for REG_BINARY
              encoded values.'
            example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=
            flat_name: registry.data.bytes
            ignore_above: 1024
            level: extended
            name: data.bytes
            node_name: bytes
            normalize: []
            short: Original bytes written with base64 encoding.
            type: keyword
        strings:
          field_details:
            dashed_name: registry-data-strings
            description: 'Content when writing string types.

              Populated as an array when writing string data to the registry. For
              single string registry types (REG_SZ, REG_EXPAND_SZ), this should be
              an array with one string. For sequences of string with REG_MULTI_SZ,
              this array will be variable length. For numeric data, such as REG_DWORD
              and REG_QWORD, this should be populated with the decimal representation
              (e.g `"1"`).'
            example: '["C:\rta\red_ttp\bin\myapp.exe"]'
            flat_name: registry.data.strings
            level: core
            name: data.strings
            node_name: strings
            normalize:
            - array
            short: List of strings representing what was written to the registry.
            type: wildcard
        type:
          field_details:
            dashed_name: registry-data-type
            description: Standard registry type for encoding contents
            example: REG_SZ
            flat_name: registry.data.type
            ignore_above: 1024
            level: core
            name: data.type
            node_name: type
            normalize: []
            short: Standard registry type for encoding contents
            type: keyword
    hive:
      field_details:
        dashed_name: registry-hive
        description: Abbreviated name for the hive.
        example: HKLM
        flat_name: registry.hive
        ignore_above: 1024
        level: core
        name: hive
        node_name: hive
        normalize: []
        short: Abbreviated name for the hive.
        type: keyword
    key:
      field_details:
        dashed_name: registry-key
        description: Hive-relative path of keys.
        example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution
          Options\winword.exe
        flat_name: registry.key
        ignore_above: 1024
        level: core
        name: key
        node_name: key
        normalize: []
        short: Hive-relative path of keys.
        type: keyword
    path:
      field_details:
        dashed_name: registry-path
        description: Full path, including hive, key and value
        example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution
          Options\winword.exe\Debugger
        flat_name: registry.path
        ignore_above: 1024
        level: core
        name: path
        node_name: path
        normalize: []
        short: Full path, including hive, key and value
        type: keyword
    value:
      field_details:
        dashed_name: registry-value
        description: Name of the value written.
        example: Debugger
        flat_name: registry.value
        ignore_above: 1024
        level: core
        name: value
        node_name: value
        normalize: []
        short: Name of the value written.
        type: keyword
  schema_details:
    group: 2
    prefix: registry.
    reusable:
      expected:
      - as: registry
        at: threat.indicator
        full: threat.indicator.registry
      - as: registry
        at: threat.enrichments.indicator
        full: threat.enrichments.indicator.registry
      order: 2
      top_level: true
    root: false
    title: Registry
related:
  field_details:
    dashed_name: related
    description: 'This field set is meant to facilitate pivoting around a piece of
      data.

      Some pieces of information can be seen in many places in an ECS event. To facilitate
      searching for them, store an array of all seen values to their corresponding
      field in `related.`.

      A concrete example is IP addresses, which can be under host, observer, source,
      destination, client, server, and network.forwarded_ip. If you append all IPs
      to `related.ip`, you can then search for a given IP trivially, no matter where
      it appeared, by querying `related.ip:192.0.2.15`.'
    flat_name: related
    name: related
    node_name: related
    short: Fields meant to facilitate pivoting around a piece of data.
    type: group
  fields:
    hash:
      field_details:
        dashed_name: related-hash
        description: All the hashes seen on your event. Populating this field, then
          using it to search for hashes can help in situations where you're unsure
          what the hash algorithm is (and therefore which key name to search).
        flat_name: related.hash
        ignore_above: 1024
        level: extended
        name: hash
        node_name: hash
        normalize:
        - array
        short: All the hashes seen on your event.
        type: keyword
    hosts:
      field_details:
        dashed_name: related-hosts
        description: All hostnames or other host identifiers seen on your event. Example
          identifiers include FQDNs, domain names, workstation names, or aliases.
        flat_name: related.hosts
        ignore_above: 1024
        level: extended
        name: hosts
        node_name: hosts
        normalize:
        - array
        short: All the host identifiers seen on your event.
        type: keyword
    ip:
      field_details:
        dashed_name: related-ip
        description: All of the IPs seen on your event.
        flat_name: related.ip
        level: extended
        name: ip
        node_name: ip
        normalize:
        - array
        short: All of the IPs seen on your event.
        type: ip
    user:
      field_details:
        dashed_name: related-user
        description: All the user names or other user identifiers seen on the event.
        flat_name: related.user
        ignore_above: 1024
        level: extended
        name: user
        node_name: user
        normalize:
        - array
        short: All the user names or other user identifiers seen on the event.
        type: keyword
  schema_details:
    group: 2
    prefix: related.
    root: false
    title: Related
risk:
  field_details:
    beta: These fields are in beta and are subject to change.
    dashed_name: risk
    description: Fields for describing risk score and risk level of entities such
      as hosts and users.  These fields are not allowed to be nested under `event.*`.
      Please continue to use  `event.risk_score` and `event.risk_score_norm` for event
      risk.
    flat_name: risk
    name: risk
    node_name: risk
    short: Fields for describing risk score and level.
    type: group
  fields:
    calculated_level:
      field_details:
        dashed_name: risk-calculated-level
        description: A risk classification level calculated by an internal system
          as part of entity analytics and entity risk scoring.
        example: High
        flat_name: risk.calculated_level
        ignore_above: 1024
        level: extended
        name: calculated_level
        node_name: calculated_level
        normalize: []
        short: A risk classification level calculated by an internal system as part
          of entity analytics and entity risk scoring.
        type: keyword
    calculated_score:
      field_details:
        dashed_name: risk-calculated-score
        description: A risk classification score calculated by an internal system
          as part of entity analytics and entity risk scoring.
        example: 880.73
        flat_name: risk.calculated_score
        level: extended
        name: calculated_score
        node_name: calculated_score
        normalize: []
        short: A risk classification score calculated by an internal system as part
          of entity analytics and entity risk scoring.
        type: float
    calculated_score_norm:
      field_details:
        dashed_name: risk-calculated-score-norm
        description: A risk classification score calculated by an internal system
          as part of entity analytics and entity risk scoring, and normalized to a
          range of 0 to 100.
        example: 88.73
        flat_name: risk.calculated_score_norm
        level: extended
        name: calculated_score_norm
        node_name: calculated_score_norm
        normalize: []
        short: A normalized risk score calculated by an internal system.
        type: float
    static_level:
      field_details:
        dashed_name: risk-static-level
        description: A risk classification level obtained from outside the system,
          such as from some external Threat Intelligence Platform.
        example: High
        flat_name: risk.static_level
        ignore_above: 1024
        level: extended
        name: static_level
        node_name: static_level
        normalize: []
        short: A risk classification level obtained from outside the system, such
          as from some external Threat Intelligence Platform.
        type: keyword
    static_score:
      field_details:
        dashed_name: risk-static-score
        description: A risk classification score obtained from outside the system,
          such as from some external Threat Intelligence Platform.
        example: 830.0
        flat_name: risk.static_score
        level: extended
        name: static_score
        node_name: static_score
        normalize: []
        short: A risk classification score obtained from outside the system, such
          as from some external Threat Intelligence Platform.
        type: float
    static_score_norm:
      field_details:
        dashed_name: risk-static-score-norm
        description: A risk classification score obtained from outside the system,
          such as from some external Threat Intelligence Platform, and normalized
          to a range of 0 to 100.
        example: 83.0
        flat_name: risk.static_score_norm
        level: extended
        name: static_score_norm
        node_name: static_score_norm
        normalize: []
        short: A normalized risk score calculated by an external system.
        type: float
  schema_details:
    group: 2
    prefix: risk.
    reusable:
      expected:
      - as: risk
        at: host
        full: host.risk
      - as: risk
        at: user
        full: user.risk
      order: 2
      top_level: false
    root: false
    title: Risk information
rule:
  field_details:
    dashed_name: rule
    description: 'Rule fields are used to capture the specifics of any observer or
      agent rules that generate alerts or other notable events.

      Examples of data sources that would populate the rule fields include: network
      admission control platforms, network or host IDS/IPS, network firewalls, web
      application firewalls, url filters, endpoint detection and response (EDR) systems,
      etc.'
    flat_name: rule
    name: rule
    node_name: rule
    short: Fields to capture details about rules used to generate alerts or other
      notable events.
    type: group
  fields:
    author:
      field_details:
        dashed_name: rule-author
        description: Name, organization, or pseudonym of the author or authors who
          created the rule used to generate this event.
        example: '["Star-Lord"]'
        flat_name: rule.author
        ignore_above: 1024
        level: extended
        name: author
        node_name: author
        normalize:
        - array
        short: Rule author
        type: keyword
    category:
      field_details:
        dashed_name: rule-category
        description: A categorization value keyword used by the entity using the rule
          for detection of this event.
        example: Attempted Information Leak
        flat_name: rule.category
        ignore_above: 1024
        level: extended
        name: category
        node_name: category
        normalize: []
        short: Rule category
        type: keyword
    description:
      field_details:
        dashed_name: rule-description
        description: The description of the rule generating the event.
        example: Block requests to public DNS over HTTPS / TLS protocols
        flat_name: rule.description
        ignore_above: 1024
        level: extended
        name: description
        node_name: description
        normalize: []
        short: Rule description
        type: keyword
    id:
      field_details:
        dashed_name: rule-id
        description: A rule ID that is unique within the scope of an agent, observer,
          or other entity using the rule for detection of this event.
        example: 101
        flat_name: rule.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: Rule ID
        type: keyword
    license:
      field_details:
        dashed_name: rule-license
        description: Name of the license under which the rule used to generate this
          event is made available.
        example: Apache 2.0
        flat_name: rule.license
        ignore_above: 1024
        level: extended
        name: license
        node_name: license
        normalize: []
        short: Rule license
        type: keyword
    name:
      field_details:
        dashed_name: rule-name
        description: The name of the rule or signature generating the event.
        example: BLOCK_DNS_over_TLS
        flat_name: rule.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Rule name
        type: keyword
    reference:
      field_details:
        dashed_name: rule-reference
        description: 'Reference URL to additional information about the rule used
          to generate this event.

          The URL can point to the vendor''s documentation about the rule. If that''s
          not available, it can also be a link to a more general page describing this
          type of alert.'
        example: https://en.wikipedia.org/wiki/DNS_over_TLS
        flat_name: rule.reference
        ignore_above: 1024
        level: extended
        name: reference
        node_name: reference
        normalize: []
        short: Rule reference URL
        type: keyword
    ruleset:
      field_details:
        dashed_name: rule-ruleset
        description: Name of the ruleset, policy, group, or parent category in which
          the rule used to generate this event is a member.
        example: Standard_Protocol_Filters
        flat_name: rule.ruleset
        ignore_above: 1024
        level: extended
        name: ruleset
        node_name: ruleset
        normalize: []
        short: Rule ruleset
        type: keyword
    uuid:
      field_details:
        dashed_name: rule-uuid
        description: A rule ID that is unique within the scope of a set or group of
          agents, observers, or other entities using the rule for detection of this
          event.
        example: 1100110011
        flat_name: rule.uuid
        ignore_above: 1024
        level: extended
        name: uuid
        node_name: uuid
        normalize: []
        short: Rule UUID
        type: keyword
    version:
      field_details:
        dashed_name: rule-version
        description: The version / revision of the rule being used for analysis.
        example: 1.1
        flat_name: rule.version
        ignore_above: 1024
        level: extended
        name: version
        node_name: version
        normalize: []
        short: Rule version
        type: keyword
  schema_details:
    group: 2
    prefix: rule.
    root: false
    title: Rule
server:
  field_details:
    dashed_name: server
    description: 'A Server is defined as the responder in a network connection for
      events regarding sessions, connections, or bidirectional flow records.

      For TCP events, the server is the receiver of the initial SYN packet(s) of the
      TCP connection. For other protocols, the server is generally the responder in
      the network transaction. Some systems actually use the term "responder" to refer
      the server in TCP connections. The server fields describe details about the
      system acting as the server in the network event. Server fields are usually
      populated in conjunction with client fields. Server fields are generally not
      populated for packet-level events.

      Client / server representations can add semantic context to an exchange, which
      is helpful to visualize the data in certain situations. If your context falls
      in that category, you should still ensure that source and destination are filled
      appropriately.'
    flat_name: server
    name: server
    node_name: server
    short: Fields about the server side of a network connection, used with client.
    type: group
  fields:
    address:
      field_details:
        dashed_name: server-address
        description: 'Some event server addresses are defined ambiguously. The event
          will sometimes list an IP, a domain or a unix socket.  You should always
          store the raw address in the `.address` field.

          Then it should be duplicated to `.ip` or `.domain`, depending on which one
          it is.'
        flat_name: server.address
        ignore_above: 1024
        level: extended
        name: address
        node_name: address
        normalize: []
        short: Server network address.
        type: keyword
    as:
      field_details:
        dashed_name: server-as
        description: An autonomous system (AS) is a collection of connected Internet
          Protocol (IP) routing prefixes under the control of one or more network
          operators on behalf of a single administrative entity or domain that presents
          a common, clearly defined routing policy to the internet.
        flat_name: server.as
        intermediate: true
        name: as
        node_name: as
        original_fieldset: as
        short: Fields describing an Autonomous System (Internet routing prefix).
        type: group
      fields:
        number:
          field_details:
            dashed_name: server-as-number
            description: Unique number allocated to the autonomous system. The autonomous
              system number (ASN) uniquely identifies each network on the Internet.
            example: 15169
            flat_name: server.as.number
            level: extended
            name: number
            node_name: number
            normalize: []
            original_fieldset: as
            short: Unique number allocated to the autonomous system.
            type: long
        organization:
          field_details:
            dashed_name: server-as-organization
            flat_name: server.as.organization
            intermediate: true
            name: organization
            node_name: organization
            original_fieldset: as
            type: object
          fields:
            name:
              field_details:
                dashed_name: server-as-organization-name
                description: Organization name.
                example: Google LLC
                flat_name: server.as.organization.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: server.as.organization.name.text
                  name: text
                  type: match_only_text
                name: organization.name
                node_name: name
                normalize: []
                original_fieldset: as
                short: Organization name.
                type: keyword
    bytes:
      field_details:
        dashed_name: server-bytes
        description: Bytes sent from the server to the client.
        example: 184
        flat_name: server.bytes
        format: bytes
        level: core
        name: bytes
        node_name: bytes
        normalize: []
        short: Bytes sent from the server to the client.
        type: long
    domain:
      field_details:
        dashed_name: server-domain
        description: 'The domain name of the server system.

          This value may be a host name, a fully qualified domain name, or another
          host naming format. The value may derive from the original event or be added
          from enrichment.'
        example: foo.example.com
        flat_name: server.domain
        ignore_above: 1024
        level: core
        name: domain
        node_name: domain
        normalize: []
        short: The domain name of the server.
        type: keyword
    geo:
      field_details:
        dashed_name: server-geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        flat_name: server.geo
        intermediate: true
        name: geo
        node_name: geo
        original_fieldset: geo
        short: Fields describing a location.
        type: group
      fields:
        city_name:
          field_details:
            dashed_name: server-geo-city-name
            description: City name.
            example: Montreal
            flat_name: server.geo.city_name
            ignore_above: 1024
            level: core
            name: city_name
            node_name: city_name
            normalize: []
            original_fieldset: geo
            short: City name.
            type: keyword
        continent_code:
          field_details:
            dashed_name: server-geo-continent-code
            description: Two-letter code representing continent's name.
            example: NA
            flat_name: server.geo.continent_code
            ignore_above: 1024
            level: core
            name: continent_code
            node_name: continent_code
            normalize: []
            original_fieldset: geo
            short: Continent code.
            type: keyword
        continent_name:
          field_details:
            dashed_name: server-geo-continent-name
            description: Name of the continent.
            example: North America
            flat_name: server.geo.continent_name
            ignore_above: 1024
            level: core
            name: continent_name
            node_name: continent_name
            normalize: []
            original_fieldset: geo
            short: Name of the continent.
            type: keyword
        country_iso_code:
          field_details:
            dashed_name: server-geo-country-iso-code
            description: Country ISO code.
            example: CA
            flat_name: server.geo.country_iso_code
            ignore_above: 1024
            level: core
            name: country_iso_code
            node_name: country_iso_code
            normalize: []
            original_fieldset: geo
            short: Country ISO code.
            type: keyword
        country_name:
          field_details:
            dashed_name: server-geo-country-name
            description: Country name.
            example: Canada
            flat_name: server.geo.country_name
            ignore_above: 1024
            level: core
            name: country_name
            node_name: country_name
            normalize: []
            original_fieldset: geo
            short: Country name.
            type: keyword
        location:
          field_details:
            dashed_name: server-geo-location
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'
            flat_name: server.geo.location
            level: core
            name: location
            node_name: location
            normalize: []
            original_fieldset: geo
            short: Longitude and latitude.
            type: geo_point
        name:
          field_details:
            dashed_name: server-geo-name
            description: 'User-defined description of a location, at the level of
              granularity they care about.

              Could be the name of their data centers, the floor number, if this describes
              a local physical entity, city names.

              Not typically used in automated geolocation.'
            example: boston-dc
            flat_name: server.geo.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: geo
            short: User-defined description of a location.
            type: keyword
        postal_code:
          field_details:
            dashed_name: server-geo-postal-code
            description: 'Postal code associated with the location.

              Values appropriate for this field may also be known as a postcode or
              ZIP code and will vary widely from country to country.'
            example: 94040
            flat_name: server.geo.postal_code
            ignore_above: 1024
            level: core
            name: postal_code
            node_name: postal_code
            normalize: []
            original_fieldset: geo
            short: Postal code.
            type: keyword
        region_iso_code:
          field_details:
            dashed_name: server-geo-region-iso-code
            description: Region ISO code.
            example: CA-QC
            flat_name: server.geo.region_iso_code
            ignore_above: 1024
            level: core
            name: region_iso_code
            node_name: region_iso_code
            normalize: []
            original_fieldset: geo
            short: Region ISO code.
            type: keyword
        region_name:
          field_details:
            dashed_name: server-geo-region-name
            description: Region name.
            example: Quebec
            flat_name: server.geo.region_name
            ignore_above: 1024
            level: core
            name: region_name
            node_name: region_name
            normalize: []
            original_fieldset: geo
            short: Region name.
            type: keyword
        timezone:
          field_details:
            dashed_name: server-geo-timezone
            description: The time zone of the location, such as IANA time zone name.
            example: America/Argentina/Buenos_Aires
            flat_name: server.geo.timezone
            ignore_above: 1024
            level: core
            name: timezone
            node_name: timezone
            normalize: []
            original_fieldset: geo
            short: Time zone.
            type: keyword
    ip:
      field_details:
        dashed_name: server-ip
        description: IP address of the server (IPv4 or IPv6).
        flat_name: server.ip
        level: core
        name: ip
        node_name: ip
        normalize: []
        short: IP address of the server.
        type: ip
    mac:
      field_details:
        dashed_name: server-mac
        description: 'MAC address of the server.

          The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit
          byte) is represented by two [uppercase] hexadecimal digits giving the value
          of the octet as an unsigned integer. Successive octets are separated by
          a hyphen.'
        example: 00-00-5E-00-53-23
        flat_name: server.mac
        ignore_above: 1024
        level: core
        name: mac
        node_name: mac
        normalize: []
        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
        short: MAC address of the server.
        type: keyword
    nat:
      field_details:
        dashed_name: server-nat
        flat_name: server.nat
        intermediate: true
        name: nat
        node_name: nat
        type: object
      fields:
        ip:
          field_details:
            dashed_name: server-nat-ip
            description: 'Translated ip of destination based NAT sessions (e.g. internet
              to private DMZ)

              Typically used with load balancers, firewalls, or routers.'
            flat_name: server.nat.ip
            level: extended
            name: nat.ip
            node_name: ip
            normalize: []
            short: Server NAT ip
            type: ip
        port:
          field_details:
            dashed_name: server-nat-port
            description: 'Translated port of destination based NAT sessions (e.g.
              internet to private DMZ)

              Typically used with load balancers, firewalls, or routers.'
            flat_name: server.nat.port
            format: string
            level: extended
            name: nat.port
            node_name: port
            normalize: []
            short: Server NAT port
            type: long
    packets:
      field_details:
        dashed_name: server-packets
        description: Packets sent from the server to the client.
        example: 12
        flat_name: server.packets
        level: core
        name: packets
        node_name: packets
        normalize: []
        short: Packets sent from the server to the client.
        type: long
    port:
      field_details:
        dashed_name: server-port
        description: Port of the server.
        flat_name: server.port
        format: string
        level: core
        name: port
        node_name: port
        normalize: []
        short: Port of the server.
        type: long
    registered_domain:
      field_details:
        dashed_name: server-registered-domain
        description: 'The highest registered server domain, stripped of the subdomain.

          For example, the registered domain for "foo.example.com" is "example.com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last two labels will not work well for TLDs such as "co.uk".'
        example: example.com
        flat_name: server.registered_domain
        ignore_above: 1024
        level: extended
        name: registered_domain
        node_name: registered_domain
        normalize: []
        short: The highest registered server domain, stripped of the subdomain.
        type: keyword
    subdomain:
      field_details:
        dashed_name: server-subdomain
        description: 'The subdomain portion of a fully qualified domain name includes
          all of the names except the host name under the registered_domain.  In a
          partially qualified domain, or if the the qualification level of the full
          name cannot be determined, subdomain contains all of the names below the
          registered domain.

          For example the subdomain portion of "www.east.mydomain.co.uk" is "east".
          If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
          the subdomain field should contain "sub2.sub1", with no trailing period.'
        example: east
        flat_name: server.subdomain
        ignore_above: 1024
        level: extended
        name: subdomain
        node_name: subdomain
        normalize: []
        short: The subdomain of the domain.
        type: keyword
    top_level_domain:
      field_details:
        dashed_name: server-top-level-domain
        description: 'The effective top level domain (eTLD), also known as the domain
          suffix, is the last part of the domain name. For example, the top level
          domain for example.com is "com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last label will not work well for effective TLDs such as "co.uk".'
        example: co.uk
        flat_name: server.top_level_domain
        ignore_above: 1024
        level: extended
        name: top_level_domain
        node_name: top_level_domain
        normalize: []
        short: The effective top level domain (com, org, net, co.uk).
        type: keyword
    user:
      field_details:
        dashed_name: server-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: server.user
        intermediate: true
        name: user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: server-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: server.user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: server-user-email
            description: User email address.
            flat_name: server.user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: server-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: server.user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: server.user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: server-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: server.user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: server-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: server.user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: server-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: server.user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: server-user-group-name
                description: Name of the group.
                flat_name: server.user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: server-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: server.user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: server-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: server.user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: server-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: server.user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: server.user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: server-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: server.user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: server-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: server.user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: server-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: server.user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: server-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: server.user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: server-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: server.user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: server-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: server.user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: server-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: server.user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: server-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: server.user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
  schema_details:
    group: 2
    nestings:
    - server.as
    - server.geo
    - server.user
    prefix: server.
    reused_here:
    - full: server.as
      schema_name: as
      short: Fields describing an Autonomous System (Internet routing prefix).
    - full: server.geo
      schema_name: geo
      short: Fields describing a location.
    - full: server.user
      schema_name: user
      short: Fields to describe the user relevant to the event.
    root: false
    title: Server
service:
  field_details:
    dashed_name: service
    description: 'The service fields describe the service for or from which the data
      was collected.

      These fields help you find and correlate logs for a specific service and version.'
    flat_name: service
    footnote: The service fields may be self-nested under service.origin.* and service.target.*
      to describe origin or target services in the context of incoming or outgoing
      requests, respectively. However, the fieldsets service.origin.* and service.target.*
      must not be confused with the root service fieldset that is used to describe
      the actual service under observation. The fieldset service.origin.* may only
      be used in the context of incoming requests or events to describe the originating
      service of the request. The fieldset service.target.* may only be used in the
      context of outgoing requests or events to describe the target service of the
      request.
    name: service
    node_name: service
    short: Fields describing the service for or from which the data was collected.
    type: group
  fields:
    address:
      field_details:
        dashed_name: service-address
        description: 'Address where data about this service was collected from.

          This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource
          path (sockets).'
        example: 172.26.0.2:5432
        flat_name: service.address
        ignore_above: 1024
        level: extended
        name: address
        node_name: address
        normalize: []
        short: Address of this service.
        type: keyword
    environment:
      field_details:
        beta: This field is beta and subject to change.
        dashed_name: service-environment
        description: 'Identifies the environment where the service is running.

          If the same service runs in different environments (production, staging,
          QA, development, etc.), the environment can identify other instances of
          the same service. Can also group services and applications from the same
          environment.'
        example: production
        flat_name: service.environment
        ignore_above: 1024
        level: extended
        name: environment
        node_name: environment
        normalize: []
        short: Environment of the service.
        type: keyword
    ephemeral_id:
      field_details:
        dashed_name: service-ephemeral-id
        description: 'Ephemeral identifier of this service (if one exists).

          This id normally changes across restarts, but `service.id` does not.'
        example: 8a4f500f
        flat_name: service.ephemeral_id
        ignore_above: 1024
        level: extended
        name: ephemeral_id
        node_name: ephemeral_id
        normalize: []
        short: Ephemeral identifier of this service.
        type: keyword
    id:
      field_details:
        dashed_name: service-id
        description: 'Unique identifier of the running service. If the service is
          comprised of many nodes, the `service.id` should be the same for all nodes.

          This id should uniquely identify the service. This makes it possible to
          correlate logs and metrics for one specific service, no matter which particular
          node emitted the event.

          Note that if you need to see the events from one specific host of the service,
          you should filter on that `host.name` or `host.id` instead.'
        example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
        flat_name: service.id
        ignore_above: 1024
        level: core
        name: id
        node_name: id
        normalize: []
        short: Unique identifier of the running service.
        type: keyword
    name:
      field_details:
        dashed_name: service-name
        description: 'Name of the service data is collected from.

          The name of the service is normally user given. This allows for distributed
          services that run on multiple hosts to correlate the related instances based
          on the name.

          In the case of Elasticsearch the `service.name` could contain the cluster
          name. For Beats the `service.name` is by default a copy of the `service.type`
          field if no name is specified.'
        example: elasticsearch-metrics
        flat_name: service.name
        ignore_above: 1024
        level: core
        name: name
        node_name: name
        normalize: []
        short: Name of the service.
        type: keyword
    node:
      field_details:
        dashed_name: service-node
        flat_name: service.node
        intermediate: true
        name: node
        node_name: node
        type: object
      fields:
        name:
          field_details:
            dashed_name: service-node-name
            description: 'Name of a service node.

              This allows for two nodes of the same service running on the same host
              to be differentiated. Therefore, `service.node.name` should typically
              be unique across nodes of a given service.

              In the case of Elasticsearch, the `service.node.name` could contain
              the unique node name within the Elasticsearch cluster. In cases where
              the service doesn''t have the concept of a node name, the host name
              or container name can be used to distinguish running instances that
              make up this service. If those do not provide uniqueness (e.g. multiple
              instances of the service running on the same host) - the node name can
              be manually set.'
            example: instance-0000000016
            flat_name: service.node.name
            ignore_above: 1024
            level: extended
            name: node.name
            node_name: name
            normalize: []
            short: Name of the service node.
            type: keyword
        role:
          field_details:
            dashed_name: service-node-role
            description: 'Deprecated for removal in next major version release. This
              field will be superseded by `node.roles`.

              Role of a service node.

              This allows for distinction between different running roles of the same
              service.

              In the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.

              In the case of Elasticsearch, the `service.node.role` could be `master`
              or `data`.

              Other services could use this to distinguish between a `web` and `worker`
              role running as part of the service.'
            example: background_tasks
            flat_name: service.node.role
            ignore_above: 1024
            level: extended
            name: node.role
            node_name: role
            normalize: []
            short: Deprecated role (singular) of the service node.
            type: keyword
        roles:
          field_details:
            dashed_name: service-node-roles
            description: 'Roles of a service node.

              This allows for distinction between different running roles of the same
              service.

              In the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`
              or both.

              In the case of Elasticsearch, the `service.node.role` could be `master`
              or `data` or both.

              Other services could use this to distinguish between a `web` and `worker`
              role running as part of the service.'
            example: '["ui", "background_tasks"]'
            flat_name: service.node.roles
            ignore_above: 1024
            level: extended
            name: node.roles
            node_name: roles
            normalize:
            - array
            short: Roles of the service node.
            type: keyword
    origin:
      field_details:
        dashed_name: service-service
        description: 'The service fields describe the service for or from which the
          data was collected.

          These fields help you find and correlate logs for a specific service and
          version.'
        flat_name: service.service
        footnote: The service fields may be self-nested under service.origin.* and
          service.target.* to describe origin or target services in the context of
          incoming or outgoing requests, respectively. However, the fieldsets service.origin.*
          and service.target.* must not be confused with the root service fieldset
          that is used to describe the actual service under observation. The fieldset
          service.origin.* may only be used in the context of incoming requests or
          events to describe the originating service of the request. The fieldset
          service.target.* may only be used in the context of outgoing requests or
          events to describe the target service of the request.
        intermediate: true
        name: origin
        node_name: service
        original_fieldset: service
        short: Fields describing the service for or from which the data was collected.
        type: group
      fields:
        address:
          field_details:
            dashed_name: service-origin-address
            description: 'Address where data about this service was collected from.

              This should be a URI, network address (ipv4:port or [ipv6]:port) or
              a resource path (sockets).'
            example: 172.26.0.2:5432
            flat_name: service.origin.address
            ignore_above: 1024
            level: extended
            name: address
            node_name: address
            normalize: []
            original_fieldset: service
            short: Address of this service.
            type: keyword
        environment:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: service-origin-environment
            description: 'Identifies the environment where the service is running.

              If the same service runs in different environments (production, staging,
              QA, development, etc.), the environment can identify other instances
              of the same service. Can also group services and applications from the
              same environment.'
            example: production
            flat_name: service.origin.environment
            ignore_above: 1024
            level: extended
            name: environment
            node_name: environment
            normalize: []
            original_fieldset: service
            short: Environment of the service.
            type: keyword
        ephemeral_id:
          field_details:
            dashed_name: service-origin-ephemeral-id
            description: 'Ephemeral identifier of this service (if one exists).

              This id normally changes across restarts, but `service.id` does not.'
            example: 8a4f500f
            flat_name: service.origin.ephemeral_id
            ignore_above: 1024
            level: extended
            name: ephemeral_id
            node_name: ephemeral_id
            normalize: []
            original_fieldset: service
            short: Ephemeral identifier of this service.
            type: keyword
        id:
          field_details:
            dashed_name: service-origin-id
            description: 'Unique identifier of the running service. If the service
              is comprised of many nodes, the `service.id` should be the same for
              all nodes.

              This id should uniquely identify the service. This makes it possible
              to correlate logs and metrics for one specific service, no matter which
              particular node emitted the event.

              Note that if you need to see the events from one specific host of the
              service, you should filter on that `host.name` or `host.id` instead.'
            example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
            flat_name: service.origin.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: service
            short: Unique identifier of the running service.
            type: keyword
        name:
          field_details:
            dashed_name: service-origin-name
            description: 'Name of the service data is collected from.

              The name of the service is normally user given. This allows for distributed
              services that run on multiple hosts to correlate the related instances
              based on the name.

              In the case of Elasticsearch the `service.name` could contain the cluster
              name. For Beats the `service.name` is by default a copy of the `service.type`
              field if no name is specified.'
            example: elasticsearch-metrics
            flat_name: service.origin.name
            ignore_above: 1024
            level: core
            name: name
            node_name: name
            normalize: []
            original_fieldset: service
            short: Name of the service.
            type: keyword
        node:
          field_details:
            dashed_name: service-origin-node
            flat_name: service.origin.node
            intermediate: true
            name: node
            node_name: node
            original_fieldset: service
            type: object
          fields:
            name:
              field_details:
                dashed_name: service-origin-node-name
                description: 'Name of a service node.

                  This allows for two nodes of the same service running on the same
                  host to be differentiated. Therefore, `service.node.name` should
                  typically be unique across nodes of a given service.

                  In the case of Elasticsearch, the `service.node.name` could contain
                  the unique node name within the Elasticsearch cluster. In cases
                  where the service doesn''t have the concept of a node name, the
                  host name or container name can be used to distinguish running instances
                  that make up this service. If those do not provide uniqueness (e.g.
                  multiple instances of the service running on the same host) - the
                  node name can be manually set.'
                example: instance-0000000016
                flat_name: service.origin.node.name
                ignore_above: 1024
                level: extended
                name: node.name
                node_name: name
                normalize: []
                original_fieldset: service
                short: Name of the service node.
                type: keyword
            role:
              field_details:
                dashed_name: service-origin-node-role
                description: 'Deprecated for removal in next major version release.
                  This field will be superseded by `node.roles`.

                  Role of a service node.

                  This allows for distinction between different running roles of the
                  same service.

                  In the case of Kibana, the `service.node.role` could be `ui` or
                  `background_tasks`.

                  In the case of Elasticsearch, the `service.node.role` could be `master`
                  or `data`.

                  Other services could use this to distinguish between a `web` and
                  `worker` role running as part of the service.'
                example: background_tasks
                flat_name: service.origin.node.role
                ignore_above: 1024
                level: extended
                name: node.role
                node_name: role
                normalize: []
                original_fieldset: service
                short: Deprecated role (singular) of the service node.
                type: keyword
            roles:
              field_details:
                dashed_name: service-origin-node-roles
                description: 'Roles of a service node.

                  This allows for distinction between different running roles of the
                  same service.

                  In the case of Kibana, the `service.node.role` could be `ui` or
                  `background_tasks` or both.

                  In the case of Elasticsearch, the `service.node.role` could be `master`
                  or `data` or both.

                  Other services could use this to distinguish between a `web` and
                  `worker` role running as part of the service.'
                example: '["ui", "background_tasks"]'
                flat_name: service.origin.node.roles
                ignore_above: 1024
                level: extended
                name: node.roles
                node_name: roles
                normalize:
                - array
                original_fieldset: service
                short: Roles of the service node.
                type: keyword
        state:
          field_details:
            dashed_name: service-origin-state
            description: Current state of the service.
            flat_name: service.origin.state
            ignore_above: 1024
            level: core
            name: state
            node_name: state
            normalize: []
            original_fieldset: service
            short: Current state of the service.
            type: keyword
        type:
          field_details:
            dashed_name: service-origin-type
            description: 'The type of the service data is collected from.

              The type can be used to group and correlate logs and metrics from one
              service type.

              Example: If logs or metrics are collected from Elasticsearch, `service.type`
              would be `elasticsearch`.'
            example: elasticsearch
            flat_name: service.origin.type
            ignore_above: 1024
            level: core
            name: type
            node_name: type
            normalize: []
            original_fieldset: service
            short: The type of the service.
            type: keyword
        version:
          field_details:
            dashed_name: service-origin-version
            description: 'Version of the service the data was collected from.

              This allows to look at a data set only for a specific version of a service.'
            example: 3.2.4
            flat_name: service.origin.version
            ignore_above: 1024
            level: core
            name: version
            node_name: version
            normalize: []
            original_fieldset: service
            short: Version of the service.
            type: keyword
    state:
      field_details:
        dashed_name: service-state
        description: Current state of the service.
        flat_name: service.state
        ignore_above: 1024
        level: core
        name: state
        node_name: state
        normalize: []
        short: Current state of the service.
        type: keyword
    target:
      field_details:
        dashed_name: service-service
        description: 'The service fields describe the service for or from which the
          data was collected.

          These fields help you find and correlate logs for a specific service and
          version.'
        flat_name: service.service
        footnote: The service fields may be self-nested under service.origin.* and
          service.target.* to describe origin or target services in the context of
          incoming or outgoing requests, respectively. However, the fieldsets service.origin.*
          and service.target.* must not be confused with the root service fieldset
          that is used to describe the actual service under observation. The fieldset
          service.origin.* may only be used in the context of incoming requests or
          events to describe the originating service of the request. The fieldset
          service.target.* may only be used in the context of outgoing requests or
          events to describe the target service of the request.
        intermediate: true
        name: target
        node_name: service
        original_fieldset: service
        short: Fields describing the service for or from which the data was collected.
        type: group
      fields:
        address:
          field_details:
            dashed_name: service-target-address
            description: 'Address where data about this service was collected from.

              This should be a URI, network address (ipv4:port or [ipv6]:port) or
              a resource path (sockets).'
            example: 172.26.0.2:5432
            flat_name: service.target.address
            ignore_above: 1024
            level: extended
            name: address
            node_name: address
            normalize: []
            original_fieldset: service
            short: Address of this service.
            type: keyword
        environment:
          field_details:
            beta: This field is beta and subject to change.
            dashed_name: service-target-environment
            description: 'Identifies the environment where the service is running.

              If the same service runs in different environments (production, staging,
              QA, development, etc.), the environment can identify other instances
              of the same service. Can also group services and applications from the
              same environment.'
            example: production
            flat_name: service.target.environment
            ignore_above: 1024
            level: extended
            name: environment
            node_name: environment
            normalize: []
            original_fieldset: service
            short: Environment of the service.
            type: keyword
        ephemeral_id:
          field_details:
            dashed_name: service-target-ephemeral-id
            description: 'Ephemeral identifier of this service (if one exists).

              This id normally changes across restarts, but `service.id` does not.'
            example: 8a4f500f
            flat_name: service.target.ephemeral_id
            ignore_above: 1024
            level: extended
            name: ephemeral_id
            node_name: ephemeral_id
            normalize: []
            original_fieldset: service
            short: Ephemeral identifier of this service.
            type: keyword
        id:
          field_details:
            dashed_name: service-target-id
            description: 'Unique identifier of the running service. If the service
              is comprised of many nodes, the `service.id` should be the same for
              all nodes.

              This id should uniquely identify the service. This makes it possible
              to correlate logs and metrics for one specific service, no matter which
              particular node emitted the event.

              Note that if you need to see the events from one specific host of the
              service, you should filter on that `host.name` or `host.id` instead.'
            example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
            flat_name: service.target.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: service
            short: Unique identifier of the running service.
            type: keyword
        name:
          field_details:
            dashed_name: service-target-name
            description: 'Name of the service data is collected from.

              The name of the service is normally user given. This allows for distributed
              services that run on multiple hosts to correlate the related instances
              based on the name.

              In the case of Elasticsearch the `service.name` could contain the cluster
              name. For Beats the `service.name` is by default a copy of the `service.type`
              field if no name is specified.'
            example: elasticsearch-metrics
            flat_name: service.target.name
            ignore_above: 1024
            level: core
            name: name
            node_name: name
            normalize: []
            original_fieldset: service
            short: Name of the service.
            type: keyword
        node:
          field_details:
            dashed_name: service-target-node
            flat_name: service.target.node
            intermediate: true
            name: node
            node_name: node
            original_fieldset: service
            type: object
          fields:
            name:
              field_details:
                dashed_name: service-target-node-name
                description: 'Name of a service node.

                  This allows for two nodes of the same service running on the same
                  host to be differentiated. Therefore, `service.node.name` should
                  typically be unique across nodes of a given service.

                  In the case of Elasticsearch, the `service.node.name` could contain
                  the unique node name within the Elasticsearch cluster. In cases
                  where the service doesn''t have the concept of a node name, the
                  host name or container name can be used to distinguish running instances
                  that make up this service. If those do not provide uniqueness (e.g.
                  multiple instances of the service running on the same host) - the
                  node name can be manually set.'
                example: instance-0000000016
                flat_name: service.target.node.name
                ignore_above: 1024
                level: extended
                name: node.name
                node_name: name
                normalize: []
                original_fieldset: service
                short: Name of the service node.
                type: keyword
            role:
              field_details:
                dashed_name: service-target-node-role
                description: 'Deprecated for removal in next major version release.
                  This field will be superseded by `node.roles`.

                  Role of a service node.

                  This allows for distinction between different running roles of the
                  same service.

                  In the case of Kibana, the `service.node.role` could be `ui` or
                  `background_tasks`.

                  In the case of Elasticsearch, the `service.node.role` could be `master`
                  or `data`.

                  Other services could use this to distinguish between a `web` and
                  `worker` role running as part of the service.'
                example: background_tasks
                flat_name: service.target.node.role
                ignore_above: 1024
                level: extended
                name: node.role
                node_name: role
                normalize: []
                original_fieldset: service
                short: Deprecated role (singular) of the service node.
                type: keyword
            roles:
              field_details:
                dashed_name: service-target-node-roles
                description: 'Roles of a service node.

                  This allows for distinction between different running roles of the
                  same service.

                  In the case of Kibana, the `service.node.role` could be `ui` or
                  `background_tasks` or both.

                  In the case of Elasticsearch, the `service.node.role` could be `master`
                  or `data` or both.

                  Other services could use this to distinguish between a `web` and
                  `worker` role running as part of the service.'
                example: '["ui", "background_tasks"]'
                flat_name: service.target.node.roles
                ignore_above: 1024
                level: extended
                name: node.roles
                node_name: roles
                normalize:
                - array
                original_fieldset: service
                short: Roles of the service node.
                type: keyword
        state:
          field_details:
            dashed_name: service-target-state
            description: Current state of the service.
            flat_name: service.target.state
            ignore_above: 1024
            level: core
            name: state
            node_name: state
            normalize: []
            original_fieldset: service
            short: Current state of the service.
            type: keyword
        type:
          field_details:
            dashed_name: service-target-type
            description: 'The type of the service data is collected from.

              The type can be used to group and correlate logs and metrics from one
              service type.

              Example: If logs or metrics are collected from Elasticsearch, `service.type`
              would be `elasticsearch`.'
            example: elasticsearch
            flat_name: service.target.type
            ignore_above: 1024
            level: core
            name: type
            node_name: type
            normalize: []
            original_fieldset: service
            short: The type of the service.
            type: keyword
        version:
          field_details:
            dashed_name: service-target-version
            description: 'Version of the service the data was collected from.

              This allows to look at a data set only for a specific version of a service.'
            example: 3.2.4
            flat_name: service.target.version
            ignore_above: 1024
            level: core
            name: version
            node_name: version
            normalize: []
            original_fieldset: service
            short: Version of the service.
            type: keyword
    type:
      field_details:
        dashed_name: service-type
        description: 'The type of the service data is collected from.

          The type can be used to group and correlate logs and metrics from one service
          type.

          Example: If logs or metrics are collected from Elasticsearch, `service.type`
          would be `elasticsearch`.'
        example: elasticsearch
        flat_name: service.type
        ignore_above: 1024
        level: core
        name: type
        node_name: type
        normalize: []
        short: The type of the service.
        type: keyword
    version:
      field_details:
        dashed_name: service-version
        description: 'Version of the service the data was collected from.

          This allows to look at a data set only for a specific version of a service.'
        example: 3.2.4
        flat_name: service.version
        ignore_above: 1024
        level: core
        name: version
        node_name: version
        normalize: []
        short: Version of the service.
        type: keyword
  schema_details:
    group: 2
    nestings:
    - service.origin
    - service.target
    prefix: service.
    reusable:
      expected:
      - as: origin
        at: service
        beta: Reusing the `service` fields in this location is currently considered
          beta.
        full: service.origin
        short_override: Describes the origin service in case of an incoming request
          or event.
      - as: target
        at: service
        beta: Reusing the `service` fields in this location is currently considered
          beta.
        full: service.target
        short_override: Describes the target service in case of an outgoing request
          or event.
      order: 2
      top_level: true
    reused_here:
    - beta: Reusing the `service` fields in this location is currently considered
        beta.
      full: service.origin
      schema_name: service
      short: Describes the origin service in case of an incoming request or event.
    - beta: Reusing the `service` fields in this location is currently considered
        beta.
      full: service.target
      schema_name: service
      short: Describes the target service in case of an outgoing request or event.
    root: false
    title: Service
source:
  field_details:
    dashed_name: source
    description: 'Source fields capture details about the sender of a network exchange/packet.
      These fields are populated from a network event, packet, or other event containing
      details of a network transaction.

      Source fields are usually populated in conjunction with destination fields.
      The source and destination fields are considered the baseline and should always
      be filled if an event contains source and destination details from a network
      transaction. If the event also contains identification of the client and server
      roles, then the client and server fields should also be populated.'
    flat_name: source
    name: source
    node_name: source
    short: Fields about the source side of a network connection, used with destination.
    type: group
  fields:
    address:
      field_details:
        dashed_name: source-address
        description: 'Some event source addresses are defined ambiguously. The event
          will sometimes list an IP, a domain or a unix socket.  You should always
          store the raw address in the `.address` field.

          Then it should be duplicated to `.ip` or `.domain`, depending on which one
          it is.'
        flat_name: source.address
        ignore_above: 1024
        level: extended
        name: address
        node_name: address
        normalize: []
        short: Source network address.
        type: keyword
    as:
      field_details:
        dashed_name: source-as
        description: An autonomous system (AS) is a collection of connected Internet
          Protocol (IP) routing prefixes under the control of one or more network
          operators on behalf of a single administrative entity or domain that presents
          a common, clearly defined routing policy to the internet.
        flat_name: source.as
        intermediate: true
        name: as
        node_name: as
        original_fieldset: as
        short: Fields describing an Autonomous System (Internet routing prefix).
        type: group
      fields:
        number:
          field_details:
            dashed_name: source-as-number
            description: Unique number allocated to the autonomous system. The autonomous
              system number (ASN) uniquely identifies each network on the Internet.
            example: 15169
            flat_name: source.as.number
            level: extended
            name: number
            node_name: number
            normalize: []
            original_fieldset: as
            short: Unique number allocated to the autonomous system.
            type: long
        organization:
          field_details:
            dashed_name: source-as-organization
            flat_name: source.as.organization
            intermediate: true
            name: organization
            node_name: organization
            original_fieldset: as
            type: object
          fields:
            name:
              field_details:
                dashed_name: source-as-organization-name
                description: Organization name.
                example: Google LLC
                flat_name: source.as.organization.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: source.as.organization.name.text
                  name: text
                  type: match_only_text
                name: organization.name
                node_name: name
                normalize: []
                original_fieldset: as
                short: Organization name.
                type: keyword
    bytes:
      field_details:
        dashed_name: source-bytes
        description: Bytes sent from the source to the destination.
        example: 184
        flat_name: source.bytes
        format: bytes
        level: core
        name: bytes
        node_name: bytes
        normalize: []
        short: Bytes sent from the source to the destination.
        type: long
    domain:
      field_details:
        dashed_name: source-domain
        description: 'The domain name of the source system.

          This value may be a host name, a fully qualified domain name, or another
          host naming format. The value may derive from the original event or be added
          from enrichment.'
        example: foo.example.com
        flat_name: source.domain
        ignore_above: 1024
        level: core
        name: domain
        node_name: domain
        normalize: []
        short: The domain name of the source.
        type: keyword
    geo:
      field_details:
        dashed_name: source-geo
        description: 'Geo fields can carry data about a specific location related
          to an event.

          This geolocation information can be derived from techniques such as Geo
          IP, or be user-supplied.'
        flat_name: source.geo
        intermediate: true
        name: geo
        node_name: geo
        original_fieldset: geo
        short: Fields describing a location.
        type: group
      fields:
        city_name:
          field_details:
            dashed_name: source-geo-city-name
            description: City name.
            example: Montreal
            flat_name: source.geo.city_name
            ignore_above: 1024
            level: core
            name: city_name
            node_name: city_name
            normalize: []
            original_fieldset: geo
            short: City name.
            type: keyword
        continent_code:
          field_details:
            dashed_name: source-geo-continent-code
            description: Two-letter code representing continent's name.
            example: NA
            flat_name: source.geo.continent_code
            ignore_above: 1024
            level: core
            name: continent_code
            node_name: continent_code
            normalize: []
            original_fieldset: geo
            short: Continent code.
            type: keyword
        continent_name:
          field_details:
            dashed_name: source-geo-continent-name
            description: Name of the continent.
            example: North America
            flat_name: source.geo.continent_name
            ignore_above: 1024
            level: core
            name: continent_name
            node_name: continent_name
            normalize: []
            original_fieldset: geo
            short: Name of the continent.
            type: keyword
        country_iso_code:
          field_details:
            dashed_name: source-geo-country-iso-code
            description: Country ISO code.
            example: CA
            flat_name: source.geo.country_iso_code
            ignore_above: 1024
            level: core
            name: country_iso_code
            node_name: country_iso_code
            normalize: []
            original_fieldset: geo
            short: Country ISO code.
            type: keyword
        country_name:
          field_details:
            dashed_name: source-geo-country-name
            description: Country name.
            example: Canada
            flat_name: source.geo.country_name
            ignore_above: 1024
            level: core
            name: country_name
            node_name: country_name
            normalize: []
            original_fieldset: geo
            short: Country name.
            type: keyword
        location:
          field_details:
            dashed_name: source-geo-location
            description: Longitude and latitude.
            example: '{ "lon": -73.614830, "lat": 45.505918 }'
            flat_name: source.geo.location
            level: core
            name: location
            node_name: location
            normalize: []
            original_fieldset: geo
            short: Longitude and latitude.
            type: geo_point
        name:
          field_details:
            dashed_name: source-geo-name
            description: 'User-defined description of a location, at the level of
              granularity they care about.

              Could be the name of their data centers, the floor number, if this describes
              a local physical entity, city names.

              Not typically used in automated geolocation.'
            example: boston-dc
            flat_name: source.geo.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: geo
            short: User-defined description of a location.
            type: keyword
        postal_code:
          field_details:
            dashed_name: source-geo-postal-code
            description: 'Postal code associated with the location.

              Values appropriate for this field may also be known as a postcode or
              ZIP code and will vary widely from country to country.'
            example: 94040
            flat_name: source.geo.postal_code
            ignore_above: 1024
            level: core
            name: postal_code
            node_name: postal_code
            normalize: []
            original_fieldset: geo
            short: Postal code.
            type: keyword
        region_iso_code:
          field_details:
            dashed_name: source-geo-region-iso-code
            description: Region ISO code.
            example: CA-QC
            flat_name: source.geo.region_iso_code
            ignore_above: 1024
            level: core
            name: region_iso_code
            node_name: region_iso_code
            normalize: []
            original_fieldset: geo
            short: Region ISO code.
            type: keyword
        region_name:
          field_details:
            dashed_name: source-geo-region-name
            description: Region name.
            example: Quebec
            flat_name: source.geo.region_name
            ignore_above: 1024
            level: core
            name: region_name
            node_name: region_name
            normalize: []
            original_fieldset: geo
            short: Region name.
            type: keyword
        timezone:
          field_details:
            dashed_name: source-geo-timezone
            description: The time zone of the location, such as IANA time zone name.
            example: America/Argentina/Buenos_Aires
            flat_name: source.geo.timezone
            ignore_above: 1024
            level: core
            name: timezone
            node_name: timezone
            normalize: []
            original_fieldset: geo
            short: Time zone.
            type: keyword
    ip:
      field_details:
        dashed_name: source-ip
        description: IP address of the source (IPv4 or IPv6).
        flat_name: source.ip
        level: core
        name: ip
        node_name: ip
        normalize: []
        short: IP address of the source.
        type: ip
    mac:
      field_details:
        dashed_name: source-mac
        description: 'MAC address of the source.

          The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit
          byte) is represented by two [uppercase] hexadecimal digits giving the value
          of the octet as an unsigned integer. Successive octets are separated by
          a hyphen.'
        example: 00-00-5E-00-53-23
        flat_name: source.mac
        ignore_above: 1024
        level: core
        name: mac
        node_name: mac
        normalize: []
        pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
        short: MAC address of the source.
        type: keyword
    nat:
      field_details:
        dashed_name: source-nat
        flat_name: source.nat
        intermediate: true
        name: nat
        node_name: nat
        type: object
      fields:
        ip:
          field_details:
            dashed_name: source-nat-ip
            description: 'Translated ip of source based NAT sessions (e.g. internal
              client to internet)

              Typically connections traversing load balancers, firewalls, or routers.'
            flat_name: source.nat.ip
            level: extended
            name: nat.ip
            node_name: ip
            normalize: []
            short: Source NAT ip
            type: ip
        port:
          field_details:
            dashed_name: source-nat-port
            description: 'Translated port of source based NAT sessions. (e.g. internal
              client to internet)

              Typically used with load balancers, firewalls, or routers.'
            flat_name: source.nat.port
            format: string
            level: extended
            name: nat.port
            node_name: port
            normalize: []
            short: Source NAT port
            type: long
    packets:
      field_details:
        dashed_name: source-packets
        description: Packets sent from the source to the destination.
        example: 12
        flat_name: source.packets
        level: core
        name: packets
        node_name: packets
        normalize: []
        short: Packets sent from the source to the destination.
        type: long
    port:
      field_details:
        dashed_name: source-port
        description: Port of the source.
        flat_name: source.port
        format: string
        level: core
        name: port
        node_name: port
        normalize: []
        short: Port of the source.
        type: long
    registered_domain:
      field_details:
        dashed_name: source-registered-domain
        description: 'The highest registered source domain, stripped of the subdomain.

          For example, the registered domain for "foo.example.com" is "example.com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last two labels will not work well for TLDs such as "co.uk".'
        example: example.com
        flat_name: source.registered_domain
        ignore_above: 1024
        level: extended
        name: registered_domain
        node_name: registered_domain
        normalize: []
        short: The highest registered source domain, stripped of the subdomain.
        type: keyword
    subdomain:
      field_details:
        dashed_name: source-subdomain
        description: 'The subdomain portion of a fully qualified domain name includes
          all of the names except the host name under the registered_domain.  In a
          partially qualified domain, or if the the qualification level of the full
          name cannot be determined, subdomain contains all of the names below the
          registered domain.

          For example the subdomain portion of "www.east.mydomain.co.uk" is "east".
          If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
          the subdomain field should contain "sub2.sub1", with no trailing period.'
        example: east
        flat_name: source.subdomain
        ignore_above: 1024
        level: extended
        name: subdomain
        node_name: subdomain
        normalize: []
        short: The subdomain of the domain.
        type: keyword
    top_level_domain:
      field_details:
        dashed_name: source-top-level-domain
        description: 'The effective top level domain (eTLD), also known as the domain
          suffix, is the last part of the domain name. For example, the top level
          domain for example.com is "com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last label will not work well for effective TLDs such as "co.uk".'
        example: co.uk
        flat_name: source.top_level_domain
        ignore_above: 1024
        level: extended
        name: top_level_domain
        node_name: top_level_domain
        normalize: []
        short: The effective top level domain (com, org, net, co.uk).
        type: keyword
    user:
      field_details:
        dashed_name: source-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: source.user
        intermediate: true
        name: user
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: source-user-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: source.user.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: source-user-email
            description: User email address.
            flat_name: source.user.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: source-user-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: source.user.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: source.user.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: source-user-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: source.user.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: source-user-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: source.user.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: source-user-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: source.user.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: source-user-group-name
                description: Name of the group.
                flat_name: source.user.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: source-user-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: source.user.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: source-user-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: source.user.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: source-user-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: source.user.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: source.user.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: source-user-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: source.user.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: source-user-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: source.user.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: source-user-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: source.user.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: source-user-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: source.user.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: source-user-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: source.user.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: source-user-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: source.user.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: source-user-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: source.user.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: source-user-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: source.user.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
  schema_details:
    group: 2
    nestings:
    - source.as
    - source.geo
    - source.user
    prefix: source.
    reusable:
      expected:
      - as: source
        at: process.entry_meta
        full: process.entry_meta.source
        short_override: Remote client information such as ip, port and geo location.
      order: 2
      top_level: true
    reused_here:
    - full: source.as
      schema_name: as
      short: Fields describing an Autonomous System (Internet routing prefix).
    - full: source.geo
      schema_name: geo
      short: Fields describing a location.
    - full: source.user
      schema_name: user
      short: Fields to describe the user relevant to the event.
    root: false
    title: Source
threat:
  field_details:
    dashed_name: threat
    description: "Fields to classify events and alerts according to a threat taxonomy\
      \ such as the MITRE ATT&CK\xAE framework.\nThese fields are for users to classify\
      \ alerts from all of their sources (e.g. IDS, NGFW, etc.) within a common taxonomy.\
      \ The threat.tactic.* fields are meant to capture the high level category of\
      \ the threat (e.g. \"impact\"). The threat.technique.* fields are meant to capture\
      \ which kind of approach is used by this detected threat, to accomplish the\
      \ goal (e.g. \"endpoint denial of service\")."
    flat_name: threat
    name: threat
    node_name: threat
    short: Fields to classify events and alerts according to a threat taxonomy.
    type: group
  fields:
    enrichments:
      field_details:
        dashed_name: threat-enrichments
        description: A list of associated indicators objects enriching the event,
          and the context of that association/enrichment.
        flat_name: threat.enrichments
        intermediate: false
        level: extended
        name: enrichments
        node_name: enrichments
        normalize:
        - array
        short: List of objects containing indicators enriching the event.
        type: nested
      fields:
        indicator:
          field_details:
            dashed_name: threat-enrichments-indicator
            description: Object containing associated indicators enriching the event.
            flat_name: threat.enrichments.indicator
            intermediate: false
            level: extended
            name: enrichments.indicator
            node_name: indicator
            normalize: []
            short: Object containing indicators enriching the event.
            type: object
          fields:
            as:
              field_details:
                dashed_name: threat-enrichments-indicator-as
                description: An autonomous system (AS) is a collection of connected
                  Internet Protocol (IP) routing prefixes under the control of one
                  or more network operators on behalf of a single administrative entity
                  or domain that presents a common, clearly defined routing policy
                  to the internet.
                flat_name: threat.enrichments.indicator.as
                intermediate: true
                name: as
                node_name: as
                original_fieldset: as
                short: Fields describing an Autonomous System (Internet routing prefix).
                type: group
              fields:
                number:
                  field_details:
                    dashed_name: threat-enrichments-indicator-as-number
                    description: Unique number allocated to the autonomous system.
                      The autonomous system number (ASN) uniquely identifies each
                      network on the Internet.
                    example: 15169
                    flat_name: threat.enrichments.indicator.as.number
                    level: extended
                    name: number
                    node_name: number
                    normalize: []
                    original_fieldset: as
                    short: Unique number allocated to the autonomous system.
                    type: long
                organization:
                  field_details:
                    dashed_name: threat-enrichments-indicator-as-organization
                    flat_name: threat.enrichments.indicator.as.organization
                    intermediate: true
                    name: organization
                    node_name: organization
                    original_fieldset: as
                    type: object
                  fields:
                    name:
                      field_details:
                        dashed_name: threat-enrichments-indicator-as-organization-name
                        description: Organization name.
                        example: Google LLC
                        flat_name: threat.enrichments.indicator.as.organization.name
                        ignore_above: 1024
                        level: extended
                        multi_fields:
                        - flat_name: threat.enrichments.indicator.as.organization.name.text
                          name: text
                          type: match_only_text
                        name: organization.name
                        node_name: name
                        normalize: []
                        original_fieldset: as
                        short: Organization name.
                        type: keyword
            confidence:
              field_details:
                dashed_name: threat-enrichments-indicator-confidence
                description: Identifies the vendor-neutral confidence rating using
                  the None/Low/Medium/High scale defined in Appendix A of the STIX
                  2.1 framework. Vendor-specific confidence scales may be added as
                  custom fields.
                example: Medium
                expected_values:
                - Not Specified
                - None
                - Low
                - Medium
                - High
                flat_name: threat.enrichments.indicator.confidence
                ignore_above: 1024
                level: extended
                name: enrichments.indicator.confidence
                node_name: confidence
                normalize: []
                short: Indicator confidence rating
                type: keyword
            description:
              field_details:
                dashed_name: threat-enrichments-indicator-description
                description: Describes the type of action conducted by the threat.
                example: IP x.x.x.x was observed delivering the Angler EK.
                flat_name: threat.enrichments.indicator.description
                ignore_above: 1024
                level: extended
                name: enrichments.indicator.description
                node_name: description
                normalize: []
                short: Indicator description
                type: keyword
            email:
              field_details:
                dashed_name: threat-enrichments-indicator-email
                flat_name: threat.enrichments.indicator.email
                intermediate: true
                name: enrichments.indicator.email
                node_name: email
                type: object
              fields:
                address:
                  field_details:
                    dashed_name: threat-enrichments-indicator-email-address
                    description: Identifies a threat indicator as an email address
                      (irrespective of direction).
                    example: phish@example.com
                    flat_name: threat.enrichments.indicator.email.address
                    ignore_above: 1024
                    level: extended
                    name: enrichments.indicator.email.address
                    node_name: address
                    normalize: []
                    short: Indicator email address
                    type: keyword
            file:
              field_details:
                dashed_name: threat-enrichments-indicator-file
                description: 'A file is defined as a set of information that has been
                  created on, or has existed on a filesystem.

                  File objects can be associated with host events, network events,
                  and/or file events (e.g., those produced by File Integrity Monitoring
                  [FIM] products or services). File fields provide details about the
                  affected file associated with the event or metric.'
                flat_name: threat.enrichments.indicator.file
                intermediate: true
                name: file
                node_name: file
                original_fieldset: file
                short: Fields describing files.
                type: group
              fields:
                accessed:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-accessed
                    description: 'Last time the file was accessed.

                      Note that not all filesystems keep track of access time.'
                    flat_name: threat.enrichments.indicator.file.accessed
                    level: extended
                    name: accessed
                    node_name: accessed
                    normalize: []
                    original_fieldset: file
                    short: Last time the file was accessed.
                    type: date
                attributes:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-attributes
                    description: 'Array of file attributes.

                      Attributes names will vary by platform. Here''s a non-exhaustive
                      list of values that are expected in this field: archive, compressed,
                      directory, encrypted, execute, hidden, read, readonly, system,
                      write.'
                    example: '["readonly", "system"]'
                    flat_name: threat.enrichments.indicator.file.attributes
                    ignore_above: 1024
                    level: extended
                    name: attributes
                    node_name: attributes
                    normalize:
                    - array
                    original_fieldset: file
                    short: Array of file attributes.
                    type: keyword
                code_signature:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-code-signature
                    description: These fields contain information about binary code
                      signatures.
                    flat_name: threat.enrichments.indicator.file.code_signature
                    intermediate: true
                    name: code_signature
                    node_name: code_signature
                    original_fieldset: code_signature
                    short: These fields contain information about binary code signatures.
                    type: group
                  fields:
                    digest_algorithm:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-digest-algorithm
                        description: 'The hashing algorithm used to sign the process.

                          This value can distinguish signatures when a file is signed
                          multiple times by the same signer but with a different digest
                          algorithm.'
                        example: sha256
                        flat_name: threat.enrichments.indicator.file.code_signature.digest_algorithm
                        ignore_above: 1024
                        level: extended
                        name: digest_algorithm
                        node_name: digest_algorithm
                        normalize: []
                        original_fieldset: code_signature
                        short: Hashing algorithm used to sign the process.
                        type: keyword
                    exists:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-exists
                        description: Boolean to capture if a signature is present.
                        example: 'true'
                        flat_name: threat.enrichments.indicator.file.code_signature.exists
                        level: core
                        name: exists
                        node_name: exists
                        normalize: []
                        original_fieldset: code_signature
                        short: Boolean to capture if a signature is present.
                        type: boolean
                    signing_id:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-signing-id
                        description: 'The identifier used to sign the process.

                          This is used to identify the application manufactured by
                          a software vendor. The field is relevant to Apple *OS only.'
                        example: com.apple.xpc.proxy
                        flat_name: threat.enrichments.indicator.file.code_signature.signing_id
                        ignore_above: 1024
                        level: extended
                        name: signing_id
                        node_name: signing_id
                        normalize: []
                        original_fieldset: code_signature
                        short: The identifier used to sign the process.
                        type: keyword
                    status:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-status
                        description: 'Additional information about the certificate
                          status.

                          This is useful for logging cryptographic errors with the
                          certificate validity or trust status. Leave unpopulated
                          if the validity or trust of the certificate was unchecked.'
                        example: ERROR_UNTRUSTED_ROOT
                        flat_name: threat.enrichments.indicator.file.code_signature.status
                        ignore_above: 1024
                        level: extended
                        name: status
                        node_name: status
                        normalize: []
                        original_fieldset: code_signature
                        short: Additional information about the certificate status.
                        type: keyword
                    subject_name:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-subject-name
                        description: Subject name of the code signer
                        example: Microsoft Corporation
                        flat_name: threat.enrichments.indicator.file.code_signature.subject_name
                        ignore_above: 1024
                        level: core
                        name: subject_name
                        node_name: subject_name
                        normalize: []
                        original_fieldset: code_signature
                        short: Subject name of the code signer
                        type: keyword
                    team_id:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-team-id
                        description: 'The team identifier used to sign the process.

                          This is used to identify the team or vendor of a software
                          product. The field is relevant to Apple *OS only.'
                        example: EQHXZ8M8AV
                        flat_name: threat.enrichments.indicator.file.code_signature.team_id
                        ignore_above: 1024
                        level: extended
                        name: team_id
                        node_name: team_id
                        normalize: []
                        original_fieldset: code_signature
                        short: The team identifier used to sign the process.
                        type: keyword
                    timestamp:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-timestamp
                        description: Date and time when the code signature was generated
                          and signed.
                        example: '2021-01-01T12:10:30Z'
                        flat_name: threat.enrichments.indicator.file.code_signature.timestamp
                        level: extended
                        name: timestamp
                        node_name: timestamp
                        normalize: []
                        original_fieldset: code_signature
                        short: When the signature was generated and signed.
                        type: date
                    trusted:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-trusted
                        description: 'Stores the trust status of the certificate chain.

                          Validating the trust of the certificate chain may be complicated,
                          and this field should only be populated by tools that actively
                          check the status.'
                        example: 'true'
                        flat_name: threat.enrichments.indicator.file.code_signature.trusted
                        level: extended
                        name: trusted
                        node_name: trusted
                        normalize: []
                        original_fieldset: code_signature
                        short: Stores the trust status of the certificate chain.
                        type: boolean
                    valid:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-code-signature-valid
                        description: 'Boolean to capture if the digital signature
                          is verified against the binary content.

                          Leave unpopulated if a certificate was unchecked.'
                        example: 'true'
                        flat_name: threat.enrichments.indicator.file.code_signature.valid
                        level: extended
                        name: valid
                        node_name: valid
                        normalize: []
                        original_fieldset: code_signature
                        short: Boolean to capture if the digital signature is verified
                          against the binary content.
                        type: boolean
                created:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-created
                    description: 'File creation time.

                      Note that not all filesystems store the creation time.'
                    flat_name: threat.enrichments.indicator.file.created
                    level: extended
                    name: created
                    node_name: created
                    normalize: []
                    original_fieldset: file
                    short: File creation time.
                    type: date
                ctime:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-ctime
                    description: 'Last time the file attributes or metadata changed.

                      Note that changes to the file content will update `mtime`. This
                      implies `ctime` will be adjusted at the same time, since `mtime`
                      is an attribute of the file.'
                    flat_name: threat.enrichments.indicator.file.ctime
                    level: extended
                    name: ctime
                    node_name: ctime
                    normalize: []
                    original_fieldset: file
                    short: Last time the file attributes or metadata changed.
                    type: date
                device:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-device
                    description: Device that is the source of the file.
                    example: sda
                    flat_name: threat.enrichments.indicator.file.device
                    ignore_above: 1024
                    level: extended
                    name: device
                    node_name: device
                    normalize: []
                    original_fieldset: file
                    short: Device that is the source of the file.
                    type: keyword
                directory:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-directory
                    description: Directory where the file is located. It should include
                      the drive letter, when appropriate.
                    example: /home/alice
                    flat_name: threat.enrichments.indicator.file.directory
                    ignore_above: 1024
                    level: extended
                    name: directory
                    node_name: directory
                    normalize: []
                    original_fieldset: file
                    short: Directory where the file is located.
                    type: keyword
                drive_letter:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-drive-letter
                    description: 'Drive letter where the file is located. This field
                      is only relevant on Windows.

                      The value should be uppercase, and not include the colon.'
                    example: C
                    flat_name: threat.enrichments.indicator.file.drive_letter
                    ignore_above: 1
                    level: extended
                    name: drive_letter
                    node_name: drive_letter
                    normalize: []
                    original_fieldset: file
                    short: Drive letter where the file is located.
                    type: keyword
                elf:
                  field_details:
                    beta: These fields are in beta and are subject to change.
                    dashed_name: threat-enrichments-indicator-file-elf
                    description: These fields contain Linux Executable Linkable Format
                      (ELF) metadata.
                    flat_name: threat.enrichments.indicator.file.elf
                    intermediate: true
                    name: elf
                    node_name: elf
                    original_fieldset: elf
                    short: These fields contain Linux Executable Linkable Format (ELF)
                      metadata.
                    type: group
                  fields:
                    architecture:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-architecture
                        description: Machine architecture of the ELF file.
                        example: x86-64
                        flat_name: threat.enrichments.indicator.file.elf.architecture
                        ignore_above: 1024
                        level: extended
                        name: architecture
                        node_name: architecture
                        normalize: []
                        original_fieldset: elf
                        short: Machine architecture of the ELF file.
                        type: keyword
                    byte_order:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-byte-order
                        description: Byte sequence of ELF file.
                        example: Little Endian
                        flat_name: threat.enrichments.indicator.file.elf.byte_order
                        ignore_above: 1024
                        level: extended
                        name: byte_order
                        node_name: byte_order
                        normalize: []
                        original_fieldset: elf
                        short: Byte sequence of ELF file.
                        type: keyword
                    cpu_type:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-cpu-type
                        description: CPU type of the ELF file.
                        example: Intel
                        flat_name: threat.enrichments.indicator.file.elf.cpu_type
                        ignore_above: 1024
                        level: extended
                        name: cpu_type
                        node_name: cpu_type
                        normalize: []
                        original_fieldset: elf
                        short: CPU type of the ELF file.
                        type: keyword
                    creation_date:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-creation-date
                        description: Extracted when possible from the file's metadata.
                          Indicates when it was built or compiled. It can also be
                          faked by malware creators.
                        flat_name: threat.enrichments.indicator.file.elf.creation_date
                        level: extended
                        name: creation_date
                        node_name: creation_date
                        normalize: []
                        original_fieldset: elf
                        short: Build or compile date.
                        type: date
                    exports:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-exports
                        description: List of exported element names and types.
                        flat_name: threat.enrichments.indicator.file.elf.exports
                        level: extended
                        name: exports
                        node_name: exports
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of exported element names and types.
                        type: flattened
                    go_import_hash:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-go-import-hash
                        description: 'A hash of the Go language imports in an ELF
                          file excluding standard library imports. An import hash
                          can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: threat.enrichments.indicator.file.elf.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: elf
                        short: A hash of the Go language imports in an ELF file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: threat.enrichments.indicator.file.elf.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: elf
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: threat.enrichments.indicator.file.elf.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: threat.enrichments.indicator.file.elf.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: threat.enrichments.indicator.file.elf.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: elf
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    header:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-header
                        flat_name: threat.enrichments.indicator.file.elf.header
                        intermediate: true
                        name: header
                        node_name: header
                        original_fieldset: elf
                        type: object
                      fields:
                        abi_version:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-abi-version
                            description: Version of the ELF Application Binary Interface
                              (ABI).
                            flat_name: threat.enrichments.indicator.file.elf.header.abi_version
                            ignore_above: 1024
                            level: extended
                            name: header.abi_version
                            node_name: abi_version
                            normalize: []
                            original_fieldset: elf
                            short: Version of the ELF Application Binary Interface
                              (ABI).
                            type: keyword
                        class:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-class
                            description: Header class of the ELF file.
                            flat_name: threat.enrichments.indicator.file.elf.header.class
                            ignore_above: 1024
                            level: extended
                            name: header.class
                            node_name: class
                            normalize: []
                            original_fieldset: elf
                            short: Header class of the ELF file.
                            type: keyword
                        data:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-data
                            description: Data table of the ELF header.
                            flat_name: threat.enrichments.indicator.file.elf.header.data
                            ignore_above: 1024
                            level: extended
                            name: header.data
                            node_name: data
                            normalize: []
                            original_fieldset: elf
                            short: Data table of the ELF header.
                            type: keyword
                        entrypoint:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-entrypoint
                            description: Header entrypoint of the ELF file.
                            flat_name: threat.enrichments.indicator.file.elf.header.entrypoint
                            format: string
                            level: extended
                            name: header.entrypoint
                            node_name: entrypoint
                            normalize: []
                            original_fieldset: elf
                            short: Header entrypoint of the ELF file.
                            type: long
                        object_version:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-object-version
                            description: '"0x1" for original ELF files.'
                            flat_name: threat.enrichments.indicator.file.elf.header.object_version
                            ignore_above: 1024
                            level: extended
                            name: header.object_version
                            node_name: object_version
                            normalize: []
                            original_fieldset: elf
                            short: '"0x1" for original ELF files.'
                            type: keyword
                        os_abi:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-os-abi
                            description: Application Binary Interface (ABI) of the
                              Linux OS.
                            flat_name: threat.enrichments.indicator.file.elf.header.os_abi
                            ignore_above: 1024
                            level: extended
                            name: header.os_abi
                            node_name: os_abi
                            normalize: []
                            original_fieldset: elf
                            short: Application Binary Interface (ABI) of the Linux
                              OS.
                            type: keyword
                        type:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-type
                            description: Header type of the ELF file.
                            flat_name: threat.enrichments.indicator.file.elf.header.type
                            ignore_above: 1024
                            level: extended
                            name: header.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: Header type of the ELF file.
                            type: keyword
                        version:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-header-version
                            description: Version of the ELF header.
                            flat_name: threat.enrichments.indicator.file.elf.header.version
                            ignore_above: 1024
                            level: extended
                            name: header.version
                            node_name: version
                            normalize: []
                            original_fieldset: elf
                            short: Version of the ELF header.
                            type: keyword
                    import_hash:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-import-hash
                        description: 'A hash of the imports in an ELF file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is an ELF implementation of the Windows PE imphash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: threat.enrichments.indicator.file.elf.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: elf
                        short: A hash of the imports in an ELF file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-imports
                        description: List of imported element names and types.
                        flat_name: threat.enrichments.indicator.file.elf.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: threat.enrichments.indicator.file.elf.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: threat.enrichments.indicator.file.elf.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    sections:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-sections
                        description: 'An array containing an object for each section
                          of the ELF file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `elf.sections.*`.'
                        flat_name: threat.enrichments.indicator.file.elf.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: elf
                        short: Section information of the ELF file.
                        type: nested
                      fields:
                        chi2:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-chi2
                            description: Chi-square probability distribution of the
                              section.
                            flat_name: threat.enrichments.indicator.file.elf.sections.chi2
                            format: number
                            level: extended
                            name: sections.chi2
                            node_name: chi2
                            normalize: []
                            original_fieldset: elf
                            short: Chi-square probability distribution of the section.
                            type: long
                        entropy:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: threat.enrichments.indicator.file.elf.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: elf
                            short: Shannon entropy calculation from the section.
                            type: long
                        flags:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-flags
                            description: ELF Section List flags.
                            flat_name: threat.enrichments.indicator.file.elf.sections.flags
                            ignore_above: 1024
                            level: extended
                            name: sections.flags
                            node_name: flags
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List flags.
                            type: keyword
                        name:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-name
                            description: ELF Section List name.
                            flat_name: threat.enrichments.indicator.file.elf.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List name.
                            type: keyword
                        physical_offset:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-physical-offset
                            description: ELF Section List offset.
                            flat_name: threat.enrichments.indicator.file.elf.sections.physical_offset
                            ignore_above: 1024
                            level: extended
                            name: sections.physical_offset
                            node_name: physical_offset
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List offset.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-physical-size
                            description: ELF Section List physical size.
                            flat_name: threat.enrichments.indicator.file.elf.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List physical size.
                            type: long
                        type:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-type
                            description: ELF Section List type.
                            flat_name: threat.enrichments.indicator.file.elf.sections.type
                            ignore_above: 1024
                            level: extended
                            name: sections.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List type.
                            type: keyword
                        var_entropy:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: threat.enrichments.indicator.file.elf.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: elf
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_address:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-virtual-address
                            description: ELF Section List virtual address.
                            flat_name: threat.enrichments.indicator.file.elf.sections.virtual_address
                            format: string
                            level: extended
                            name: sections.virtual_address
                            node_name: virtual_address
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List virtual address.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-sections-virtual-size
                            description: ELF Section List virtual size.
                            flat_name: threat.enrichments.indicator.file.elf.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: elf
                            short: ELF Section List virtual size.
                            type: long
                    segments:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-segments
                        description: 'An array containing an object for each segment
                          of the ELF file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `elf.segments.*`.'
                        flat_name: threat.enrichments.indicator.file.elf.segments
                        intermediate: false
                        level: extended
                        name: segments
                        node_name: segments
                        normalize:
                        - array
                        original_fieldset: elf
                        short: ELF object segment list.
                        type: nested
                      fields:
                        sections:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-segments-sections
                            description: ELF object segment sections.
                            flat_name: threat.enrichments.indicator.file.elf.segments.sections
                            ignore_above: 1024
                            level: extended
                            name: segments.sections
                            node_name: sections
                            normalize: []
                            original_fieldset: elf
                            short: ELF object segment sections.
                            type: keyword
                        type:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-elf-segments-type
                            description: ELF object segment type.
                            flat_name: threat.enrichments.indicator.file.elf.segments.type
                            ignore_above: 1024
                            level: extended
                            name: segments.type
                            node_name: type
                            normalize: []
                            original_fieldset: elf
                            short: ELF object segment type.
                            type: keyword
                    shared_libraries:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-shared-libraries
                        description: List of shared libraries used by this ELF object.
                        flat_name: threat.enrichments.indicator.file.elf.shared_libraries
                        ignore_above: 1024
                        level: extended
                        name: shared_libraries
                        node_name: shared_libraries
                        normalize:
                        - array
                        original_fieldset: elf
                        short: List of shared libraries used by this ELF object.
                        type: keyword
                    telfhash:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-elf-telfhash
                        description: telfhash symbol hash for ELF file.
                        flat_name: threat.enrichments.indicator.file.elf.telfhash
                        ignore_above: 1024
                        level: extended
                        name: telfhash
                        node_name: telfhash
                        normalize: []
                        original_fieldset: elf
                        short: telfhash hash for ELF file.
                        type: keyword
                extension:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-extension
                    description: 'File extension, excluding the leading dot.

                      Note that when the file name has multiple extensions (example.tar.gz),
                      only the last one should be captured ("gz", not "tar.gz").'
                    example: png
                    flat_name: threat.enrichments.indicator.file.extension
                    ignore_above: 1024
                    level: extended
                    name: extension
                    node_name: extension
                    normalize: []
                    original_fieldset: file
                    short: File extension, excluding the leading dot.
                    type: keyword
                fork_name:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-fork-name
                    description: 'A fork is additional data associated with a filesystem
                      object.

                      On Linux, a resource fork is used to store additional data with
                      a filesystem object. A file always has at least one fork for
                      the data portion, and additional forks may exist.

                      On NTFS, this is analogous to an Alternate Data Stream (ADS),
                      and the default data stream for a file is just called $DATA.
                      Zone.Identifier is commonly used by Windows to track contents
                      downloaded from the Internet. An ADS is typically of the form:
                      `C:\path\to\filename.extension:some_fork_name`, and `some_fork_name`
                      is the value that should populate `fork_name`. `filename.extension`
                      should populate `file.name`, and `extension` should populate
                      `file.extension`. The full path, `file.path`, will include the
                      fork name.'
                    example: Zone.Identifer
                    flat_name: threat.enrichments.indicator.file.fork_name
                    ignore_above: 1024
                    level: extended
                    name: fork_name
                    node_name: fork_name
                    normalize: []
                    original_fieldset: file
                    short: A fork is additional data associated with a filesystem
                      object.
                    type: keyword
                gid:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-gid
                    description: Primary group ID (GID) of the file.
                    example: '1001'
                    flat_name: threat.enrichments.indicator.file.gid
                    ignore_above: 1024
                    level: extended
                    name: gid
                    node_name: gid
                    normalize: []
                    original_fieldset: file
                    short: Primary group ID (GID) of the file.
                    type: keyword
                group:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-group
                    description: Primary group name of the file.
                    example: alice
                    flat_name: threat.enrichments.indicator.file.group
                    ignore_above: 1024
                    level: extended
                    name: group
                    node_name: group
                    normalize: []
                    original_fieldset: file
                    short: Primary group name of the file.
                    type: keyword
                hash:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-hash
                    description: 'The hash fields represent different bitwise hash
                      algorithms and their values.

                      Field names for common hashes (e.g. MD5, SHA1) are predefined.
                      Add fields for other hashes by lowercasing the hash algorithm
                      name and using underscore separators as appropriate (snake case,
                      e.g. sha3_512).

                      Note that this fieldset is used for common hashes that may be
                      computed over a range of generic bytes. Entity-specific hashes
                      such as ja3 or imphash are placed in the fieldsets to which
                      they relate (tls and pe, respectively).'
                    flat_name: threat.enrichments.indicator.file.hash
                    intermediate: true
                    name: hash
                    node_name: hash
                    original_fieldset: hash
                    short: Hashes, usually file hashes.
                    type: group
                  fields:
                    md5:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-hash-md5
                        description: MD5 hash.
                        flat_name: threat.enrichments.indicator.file.hash.md5
                        ignore_above: 1024
                        level: extended
                        name: md5
                        node_name: md5
                        normalize: []
                        original_fieldset: hash
                        short: MD5 hash.
                        type: keyword
                    sha1:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-hash-sha1
                        description: SHA1 hash.
                        flat_name: threat.enrichments.indicator.file.hash.sha1
                        ignore_above: 1024
                        level: extended
                        name: sha1
                        node_name: sha1
                        normalize: []
                        original_fieldset: hash
                        short: SHA1 hash.
                        type: keyword
                    sha256:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-hash-sha256
                        description: SHA256 hash.
                        flat_name: threat.enrichments.indicator.file.hash.sha256
                        ignore_above: 1024
                        level: extended
                        name: sha256
                        node_name: sha256
                        normalize: []
                        original_fieldset: hash
                        short: SHA256 hash.
                        type: keyword
                    sha384:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-hash-sha384
                        description: SHA384 hash.
                        flat_name: threat.enrichments.indicator.file.hash.sha384
                        ignore_above: 1024
                        level: extended
                        name: sha384
                        node_name: sha384
                        normalize: []
                        original_fieldset: hash
                        short: SHA384 hash.
                        type: keyword
                    sha512:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-hash-sha512
                        description: SHA512 hash.
                        flat_name: threat.enrichments.indicator.file.hash.sha512
                        ignore_above: 1024
                        level: extended
                        name: sha512
                        node_name: sha512
                        normalize: []
                        original_fieldset: hash
                        short: SHA512 hash.
                        type: keyword
                    ssdeep:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-hash-ssdeep
                        description: SSDEEP hash.
                        flat_name: threat.enrichments.indicator.file.hash.ssdeep
                        ignore_above: 1024
                        level: extended
                        name: ssdeep
                        node_name: ssdeep
                        normalize: []
                        original_fieldset: hash
                        short: SSDEEP hash.
                        type: keyword
                    tlsh:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-hash-tlsh
                        description: TLSH hash.
                        flat_name: threat.enrichments.indicator.file.hash.tlsh
                        ignore_above: 1024
                        level: extended
                        name: tlsh
                        node_name: tlsh
                        normalize: []
                        original_fieldset: hash
                        short: TLSH hash.
                        type: keyword
                inode:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-inode
                    description: Inode representing the file in the filesystem.
                    example: '256383'
                    flat_name: threat.enrichments.indicator.file.inode
                    ignore_above: 1024
                    level: extended
                    name: inode
                    node_name: inode
                    normalize: []
                    original_fieldset: file
                    short: Inode representing the file in the filesystem.
                    type: keyword
                mime_type:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-mime-type
                    description: MIME type should identify the format of the file
                      or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA
                      official types], where possible. When more than one type is
                      applicable, the most specific type should be used.
                    flat_name: threat.enrichments.indicator.file.mime_type
                    ignore_above: 1024
                    level: extended
                    name: mime_type
                    node_name: mime_type
                    normalize: []
                    original_fieldset: file
                    short: Media type of file, document, or arrangement of bytes.
                    type: keyword
                mode:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-mode
                    description: Mode of the file in octal representation.
                    example: '0640'
                    flat_name: threat.enrichments.indicator.file.mode
                    ignore_above: 1024
                    level: extended
                    name: mode
                    node_name: mode
                    normalize: []
                    original_fieldset: file
                    short: Mode of the file in octal representation.
                    type: keyword
                mtime:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-mtime
                    description: Last time the file content was modified.
                    flat_name: threat.enrichments.indicator.file.mtime
                    level: extended
                    name: mtime
                    node_name: mtime
                    normalize: []
                    original_fieldset: file
                    short: Last time the file content was modified.
                    type: date
                name:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-name
                    description: Name of the file including the extension, without
                      the directory.
                    example: example.png
                    flat_name: threat.enrichments.indicator.file.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: file
                    short: Name of the file including the extension, without the directory.
                    type: keyword
                owner:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-owner
                    description: File owner's username.
                    example: alice
                    flat_name: threat.enrichments.indicator.file.owner
                    ignore_above: 1024
                    level: extended
                    name: owner
                    node_name: owner
                    normalize: []
                    original_fieldset: file
                    short: File owner's username.
                    type: keyword
                path:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-path
                    description: Full path to the file, including the file name. It
                      should include the drive letter, when appropriate.
                    example: /home/alice/example.png
                    flat_name: threat.enrichments.indicator.file.path
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: threat.enrichments.indicator.file.path.text
                      name: text
                      type: match_only_text
                    name: path
                    node_name: path
                    normalize: []
                    original_fieldset: file
                    short: Full path to the file, including the file name.
                    type: keyword
                pe:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-pe
                    description: These fields contain Windows Portable Executable
                      (PE) metadata.
                    flat_name: threat.enrichments.indicator.file.pe
                    intermediate: true
                    name: pe
                    node_name: pe
                    original_fieldset: pe
                    short: These fields contain Windows Portable Executable (PE) metadata.
                    type: group
                  fields:
                    architecture:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-architecture
                        description: CPU architecture target for the file.
                        example: x64
                        flat_name: threat.enrichments.indicator.file.pe.architecture
                        ignore_above: 1024
                        level: extended
                        name: architecture
                        node_name: architecture
                        normalize: []
                        original_fieldset: pe
                        short: CPU architecture target for the file.
                        type: keyword
                    company:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-company
                        description: Internal company name of the file, provided at
                          compile-time.
                        example: Microsoft Corporation
                        flat_name: threat.enrichments.indicator.file.pe.company
                        ignore_above: 1024
                        level: extended
                        name: company
                        node_name: company
                        normalize: []
                        original_fieldset: pe
                        short: Internal company name of the file, provided at compile-time.
                        type: keyword
                    description:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-description
                        description: Internal description of the file, provided at
                          compile-time.
                        example: Paint
                        flat_name: threat.enrichments.indicator.file.pe.description
                        ignore_above: 1024
                        level: extended
                        name: description
                        node_name: description
                        normalize: []
                        original_fieldset: pe
                        short: Internal description of the file, provided at compile-time.
                        type: keyword
                    file_version:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-file-version
                        description: Internal version of the file, provided at compile-time.
                        example: 6.3.9600.17415
                        flat_name: threat.enrichments.indicator.file.pe.file_version
                        ignore_above: 1024
                        level: extended
                        name: file_version
                        node_name: file_version
                        normalize: []
                        original_fieldset: pe
                        short: Process name.
                        type: keyword
                    go_import_hash:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-go-import-hash
                        description: 'A hash of the Go language imports in a PE file
                          excluding standard library imports. An import hash can be
                          used to fingerprint binaries even after recompilation or
                          other code-level transformations have occurred, which would
                          change more traditional hash values.

                          The algorithm used to calculate the Go symbol hash and a
                          reference implementation are available [here](https://github.com/elastic/toutoumomoma).'
                        example: 10bddcb4cee42080f76c88d9ff964491
                        flat_name: threat.enrichments.indicator.file.pe.go_import_hash
                        ignore_above: 1024
                        level: extended
                        name: go_import_hash
                        node_name: go_import_hash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the Go language imports in a PE file.
                        type: keyword
                    go_imports:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-go-imports
                        description: List of imported Go language element names and
                          types.
                        flat_name: threat.enrichments.indicator.file.pe.go_imports
                        level: extended
                        name: go_imports
                        node_name: go_imports
                        normalize: []
                        original_fieldset: pe
                        short: List of imported Go language element names and types.
                        type: flattened
                    go_imports_names_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-go-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          Go imports.
                        flat_name: threat.enrichments.indicator.file.pe.go_imports_names_entropy
                        format: number
                        level: extended
                        name: go_imports_names_entropy
                        node_name: go_imports_names_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the list of Go imports.
                        type: long
                    go_imports_names_var_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-go-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of Go imports.
                        flat_name: threat.enrichments.indicator.file.pe.go_imports_names_var_entropy
                        format: number
                        level: extended
                        name: go_imports_names_var_entropy
                        node_name: go_imports_names_var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the list
                          of Go imports.
                        type: long
                    go_stripped:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-go-stripped
                        description: Set to true if the file is a Go executable that
                          has had its symbols stripped or obfuscated and false if
                          an unobfuscated Go executable.
                        flat_name: threat.enrichments.indicator.file.pe.go_stripped
                        level: extended
                        name: go_stripped
                        node_name: go_stripped
                        normalize: []
                        original_fieldset: pe
                        short: Whether the file is a stripped or obfuscated Go executable.
                        type: boolean
                    imphash:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-imphash
                        description: 'A hash of the imports in a PE file. An imphash
                          -- or import hash -- can be used to fingerprint binaries
                          even after recompilation or other code-level transformations
                          have occurred, which would change more traditional hash
                          values.

                          Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                        example: 0c6803c4e922103c4dca5963aad36ddf
                        flat_name: threat.enrichments.indicator.file.pe.imphash
                        ignore_above: 1024
                        level: extended
                        name: imphash
                        node_name: imphash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the imports in a PE file.
                        type: keyword
                    import_hash:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-import-hash
                        description: 'A hash of the imports in a PE file. An import
                          hash can be used to fingerprint binaries even after recompilation
                          or other code-level transformations have occurred, which
                          would change more traditional hash values.

                          This is a synonym for imphash.'
                        example: d41d8cd98f00b204e9800998ecf8427e
                        flat_name: threat.enrichments.indicator.file.pe.import_hash
                        ignore_above: 1024
                        level: extended
                        name: import_hash
                        node_name: import_hash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the imports in a PE file.
                        type: keyword
                    imports:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-imports
                        description: List of imported element names and types.
                        flat_name: threat.enrichments.indicator.file.pe.imports
                        level: extended
                        name: imports
                        node_name: imports
                        normalize:
                        - array
                        original_fieldset: pe
                        short: List of imported element names and types.
                        type: flattened
                    imports_names_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-imports-names-entropy
                        description: Shannon entropy calculation from the list of
                          imported element names and types.
                        flat_name: threat.enrichments.indicator.file.pe.imports_names_entropy
                        format: number
                        level: extended
                        name: imports_names_entropy
                        node_name: imports_names_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the list of imported
                          element names and types.
                        type: long
                    imports_names_var_entropy:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-imports-names-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the list of imported element names and types.
                        flat_name: threat.enrichments.indicator.file.pe.imports_names_var_entropy
                        format: number
                        level: extended
                        name: imports_names_var_entropy
                        node_name: imports_names_var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the list
                          of imported element names and types.
                        type: long
                    original_file_name:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-original-file-name
                        description: Internal name of the file, provided at compile-time.
                        example: MSPAINT.EXE
                        flat_name: threat.enrichments.indicator.file.pe.original_file_name
                        ignore_above: 1024
                        level: extended
                        name: original_file_name
                        node_name: original_file_name
                        normalize: []
                        original_fieldset: pe
                        short: Internal name of the file, provided at compile-time.
                        type: keyword
                    pehash:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-pehash
                        description: 'A hash of the PE header and data from one or
                          more PE sections. An pehash can be used to cluster files
                          by transforming structural information about a file into
                          a hash value.

                          Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                        example: 73ff189b63cd6be375a7ff25179a38d347651975
                        flat_name: threat.enrichments.indicator.file.pe.pehash
                        ignore_above: 1024
                        level: extended
                        name: pehash
                        node_name: pehash
                        normalize: []
                        original_fieldset: pe
                        short: A hash of the PE header and data from one or more PE
                          sections.
                        type: keyword
                    product:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-product
                        description: Internal product name of the file, provided at
                          compile-time.
                        example: "Microsoft\xAE Windows\xAE Operating System"
                        flat_name: threat.enrichments.indicator.file.pe.product
                        ignore_above: 1024
                        level: extended
                        name: product
                        node_name: product
                        normalize: []
                        original_fieldset: pe
                        short: Internal product name of the file, provided at compile-time.
                        type: keyword
                    sections:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-pe-sections
                        description: 'An array containing an object for each section
                          of the PE file.

                          The keys that should be present in these objects are defined
                          by sub-fields underneath `pe.sections.*`.'
                        flat_name: threat.enrichments.indicator.file.pe.sections
                        intermediate: false
                        level: extended
                        name: sections
                        node_name: sections
                        normalize:
                        - array
                        original_fieldset: pe
                        short: Section information of the PE file.
                        type: nested
                      fields:
                        entropy:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-pe-sections-entropy
                            description: Shannon entropy calculation from the section.
                            flat_name: threat.enrichments.indicator.file.pe.sections.entropy
                            format: number
                            level: extended
                            name: sections.entropy
                            node_name: entropy
                            normalize: []
                            original_fieldset: pe
                            short: Shannon entropy calculation from the section.
                            type: long
                        name:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-pe-sections-name
                            description: PE Section List name.
                            flat_name: threat.enrichments.indicator.file.pe.sections.name
                            ignore_above: 1024
                            level: extended
                            name: sections.name
                            node_name: name
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List name.
                            type: keyword
                        physical_size:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-pe-sections-physical-size
                            description: PE Section List physical size.
                            flat_name: threat.enrichments.indicator.file.pe.sections.physical_size
                            format: bytes
                            level: extended
                            name: sections.physical_size
                            node_name: physical_size
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List physical size.
                            type: long
                        var_entropy:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-pe-sections-var-entropy
                            description: Variance for Shannon entropy calculation
                              from the section.
                            flat_name: threat.enrichments.indicator.file.pe.sections.var_entropy
                            format: number
                            level: extended
                            name: sections.var_entropy
                            node_name: var_entropy
                            normalize: []
                            original_fieldset: pe
                            short: Variance for Shannon entropy calculation from the
                              section.
                            type: long
                        virtual_size:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-pe-sections-virtual-size
                            description: PE Section List virtual size. This is always
                              the same as `physical_size`.
                            flat_name: threat.enrichments.indicator.file.pe.sections.virtual_size
                            format: string
                            level: extended
                            name: sections.virtual_size
                            node_name: virtual_size
                            normalize: []
                            original_fieldset: pe
                            short: PE Section List virtual size. This is always the
                              same as `physical_size`.
                            type: long
                size:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-size
                    description: 'File size in bytes.

                      Only relevant when `file.type` is "file".'
                    example: 16384
                    flat_name: threat.enrichments.indicator.file.size
                    level: extended
                    name: size
                    node_name: size
                    normalize: []
                    original_fieldset: file
                    short: File size in bytes.
                    type: long
                target_path:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-target-path
                    description: Target path for symlinks.
                    flat_name: threat.enrichments.indicator.file.target_path
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: threat.enrichments.indicator.file.target_path.text
                      name: text
                      type: match_only_text
                    name: target_path
                    node_name: target_path
                    normalize: []
                    original_fieldset: file
                    short: Target path for symlinks.
                    type: keyword
                type:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-type
                    description: File type (file, dir, or symlink).
                    example: file
                    flat_name: threat.enrichments.indicator.file.type
                    ignore_above: 1024
                    level: extended
                    name: type
                    node_name: type
                    normalize: []
                    original_fieldset: file
                    short: File type (file, dir, or symlink).
                    type: keyword
                uid:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-uid
                    description: The user ID (UID) or security identifier (SID) of
                      the file owner.
                    example: '1001'
                    flat_name: threat.enrichments.indicator.file.uid
                    ignore_above: 1024
                    level: extended
                    name: uid
                    node_name: uid
                    normalize: []
                    original_fieldset: file
                    short: The user ID (UID) or security identifier (SID) of the file
                      owner.
                    type: keyword
                x509:
                  field_details:
                    dashed_name: threat-enrichments-indicator-file-x509
                    description: 'This implements the common core fields for x509
                      certificates. This information is likely logged with TLS sessions,
                      digital signatures found in executable binaries, S/MIME information
                      in email bodies, or analysis of files on disk.

                      When the certificate relates to a file, use the fields at `file.x509`.
                      When hashes of the DER-encoded certificate are available, the
                      `hash` data set should be populated as well (e.g. `file.hash.sha256`).

                      Events that contain certificate information about network connections,
                      should use the x509 fields under the relevant TLS fields: `tls.server.x509`
                      and/or `tls.client.x509`.'
                    flat_name: threat.enrichments.indicator.file.x509
                    intermediate: true
                    name: x509
                    node_name: x509
                    original_fieldset: x509
                    short: These fields contain x509 certificate metadata.
                    type: group
                  fields:
                    alternative_names:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-alternative-names
                        description: List of subject alternative names (SAN). Name
                          types vary by certificate authority and certificate type
                          but commonly contain IP addresses, DNS names (and wildcards),
                          and email addresses.
                        example: '*.elastic.co'
                        flat_name: threat.enrichments.indicator.file.x509.alternative_names
                        ignore_above: 1024
                        level: extended
                        name: alternative_names
                        node_name: alternative_names
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of subject alternative names (SAN).
                        type: keyword
                    issuer:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-issuer
                        flat_name: threat.enrichments.indicator.file.x509.issuer
                        intermediate: true
                        name: issuer
                        node_name: issuer
                        original_fieldset: x509
                        type: object
                      fields:
                        common_name:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-issuer-common-name
                            description: List of common name (CN) of issuing certificate
                              authority.
                            example: Example SHA2 High Assurance Server CA
                            flat_name: threat.enrichments.indicator.file.x509.issuer.common_name
                            ignore_above: 1024
                            level: extended
                            name: issuer.common_name
                            node_name: common_name
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of common name (CN) of issuing certificate
                              authority.
                            type: keyword
                        country:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-issuer-country
                            description: List of country \(C) codes
                            example: US
                            flat_name: threat.enrichments.indicator.file.x509.issuer.country
                            ignore_above: 1024
                            level: extended
                            name: issuer.country
                            node_name: country
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of country \(C) codes
                            type: keyword
                        distinguished_name:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-issuer-distinguished-name
                            description: Distinguished name (DN) of issuing certificate
                              authority.
                            example: C=US, O=Example Inc, OU=www.example.com, CN=Example
                              SHA2 High Assurance Server CA
                            flat_name: threat.enrichments.indicator.file.x509.issuer.distinguished_name
                            ignore_above: 1024
                            level: extended
                            name: issuer.distinguished_name
                            node_name: distinguished_name
                            normalize: []
                            original_fieldset: x509
                            short: Distinguished name (DN) of issuing certificate
                              authority.
                            type: keyword
                        locality:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-issuer-locality
                            description: List of locality names (L)
                            example: Mountain View
                            flat_name: threat.enrichments.indicator.file.x509.issuer.locality
                            ignore_above: 1024
                            level: extended
                            name: issuer.locality
                            node_name: locality
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of locality names (L)
                            type: keyword
                        organization:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-issuer-organization
                            description: List of organizations (O) of issuing certificate
                              authority.
                            example: Example Inc
                            flat_name: threat.enrichments.indicator.file.x509.issuer.organization
                            ignore_above: 1024
                            level: extended
                            name: issuer.organization
                            node_name: organization
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of organizations (O) of issuing certificate
                              authority.
                            type: keyword
                        organizational_unit:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-issuer-organizational-unit
                            description: List of organizational units (OU) of issuing
                              certificate authority.
                            example: www.example.com
                            flat_name: threat.enrichments.indicator.file.x509.issuer.organizational_unit
                            ignore_above: 1024
                            level: extended
                            name: issuer.organizational_unit
                            node_name: organizational_unit
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of organizational units (OU) of issuing certificate
                              authority.
                            type: keyword
                        state_or_province:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-issuer-state-or-province
                            description: List of state or province names (ST, S, or
                              P)
                            example: California
                            flat_name: threat.enrichments.indicator.file.x509.issuer.state_or_province
                            ignore_above: 1024
                            level: extended
                            name: issuer.state_or_province
                            node_name: state_or_province
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of state or province names (ST, S, or P)
                            type: keyword
                    not_after:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-not-after
                        description: Time at which the certificate is no longer considered
                          valid.
                        example: '2020-07-16T03:15:39Z'
                        flat_name: threat.enrichments.indicator.file.x509.not_after
                        level: extended
                        name: not_after
                        node_name: not_after
                        normalize: []
                        original_fieldset: x509
                        short: Time at which the certificate is no longer considered
                          valid.
                        type: date
                    not_before:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-not-before
                        description: Time at which the certificate is first considered
                          valid.
                        example: '2019-08-16T01:40:25Z'
                        flat_name: threat.enrichments.indicator.file.x509.not_before
                        level: extended
                        name: not_before
                        node_name: not_before
                        normalize: []
                        original_fieldset: x509
                        short: Time at which the certificate is first considered valid.
                        type: date
                    public_key_algorithm:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-public-key-algorithm
                        description: Algorithm used to generate the public key.
                        example: RSA
                        flat_name: threat.enrichments.indicator.file.x509.public_key_algorithm
                        ignore_above: 1024
                        level: extended
                        name: public_key_algorithm
                        node_name: public_key_algorithm
                        normalize: []
                        original_fieldset: x509
                        short: Algorithm used to generate the public key.
                        type: keyword
                    public_key_curve:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-public-key-curve
                        description: The curve used by the elliptic curve public key
                          algorithm. This is algorithm specific.
                        example: nistp521
                        flat_name: threat.enrichments.indicator.file.x509.public_key_curve
                        ignore_above: 1024
                        level: extended
                        name: public_key_curve
                        node_name: public_key_curve
                        normalize: []
                        original_fieldset: x509
                        short: The curve used by the elliptic curve public key algorithm.
                          This is algorithm specific.
                        type: keyword
                    public_key_exponent:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-public-key-exponent
                        description: Exponent used to derive the public key. This
                          is algorithm specific.
                        doc_values: false
                        example: 65537
                        flat_name: threat.enrichments.indicator.file.x509.public_key_exponent
                        index: false
                        level: extended
                        name: public_key_exponent
                        node_name: public_key_exponent
                        normalize: []
                        original_fieldset: x509
                        short: Exponent used to derive the public key. This is algorithm
                          specific.
                        type: long
                    public_key_size:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-public-key-size
                        description: The size of the public key space in bits.
                        example: 2048
                        flat_name: threat.enrichments.indicator.file.x509.public_key_size
                        level: extended
                        name: public_key_size
                        node_name: public_key_size
                        normalize: []
                        original_fieldset: x509
                        short: The size of the public key space in bits.
                        type: long
                    serial_number:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-serial-number
                        description: Unique serial number issued by the certificate
                          authority. For consistency, if this value is alphanumeric,
                          it should be formatted without colons and uppercase characters.
                        example: 55FBB9C7DEBF09809D12CCAA
                        flat_name: threat.enrichments.indicator.file.x509.serial_number
                        ignore_above: 1024
                        level: extended
                        name: serial_number
                        node_name: serial_number
                        normalize: []
                        original_fieldset: x509
                        short: Unique serial number issued by the certificate authority.
                        type: keyword
                    signature_algorithm:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-signature-algorithm
                        description: Identifier for certificate signature algorithm.
                          We recommend using names found in Go Lang Crypto library.
                          See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
                        example: SHA256-RSA
                        flat_name: threat.enrichments.indicator.file.x509.signature_algorithm
                        ignore_above: 1024
                        level: extended
                        name: signature_algorithm
                        node_name: signature_algorithm
                        normalize: []
                        original_fieldset: x509
                        short: Identifier for certificate signature algorithm.
                        type: keyword
                    subject:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-subject
                        flat_name: threat.enrichments.indicator.file.x509.subject
                        intermediate: true
                        name: subject
                        node_name: subject
                        original_fieldset: x509
                        type: object
                      fields:
                        common_name:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-subject-common-name
                            description: List of common names (CN) of subject.
                            example: shared.global.example.net
                            flat_name: threat.enrichments.indicator.file.x509.subject.common_name
                            ignore_above: 1024
                            level: extended
                            name: subject.common_name
                            node_name: common_name
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of common names (CN) of subject.
                            type: keyword
                        country:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-subject-country
                            description: List of country \(C) code
                            example: US
                            flat_name: threat.enrichments.indicator.file.x509.subject.country
                            ignore_above: 1024
                            level: extended
                            name: subject.country
                            node_name: country
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of country \(C) code
                            type: keyword
                        distinguished_name:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-subject-distinguished-name
                            description: Distinguished name (DN) of the certificate
                              subject entity.
                            example: C=US, ST=California, L=San Francisco, O=Example,
                              Inc., CN=shared.global.example.net
                            flat_name: threat.enrichments.indicator.file.x509.subject.distinguished_name
                            ignore_above: 1024
                            level: extended
                            name: subject.distinguished_name
                            node_name: distinguished_name
                            normalize: []
                            original_fieldset: x509
                            short: Distinguished name (DN) of the certificate subject
                              entity.
                            type: keyword
                        locality:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-subject-locality
                            description: List of locality names (L)
                            example: San Francisco
                            flat_name: threat.enrichments.indicator.file.x509.subject.locality
                            ignore_above: 1024
                            level: extended
                            name: subject.locality
                            node_name: locality
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of locality names (L)
                            type: keyword
                        organization:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-subject-organization
                            description: List of organizations (O) of subject.
                            example: Example, Inc.
                            flat_name: threat.enrichments.indicator.file.x509.subject.organization
                            ignore_above: 1024
                            level: extended
                            name: subject.organization
                            node_name: organization
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of organizations (O) of subject.
                            type: keyword
                        organizational_unit:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-subject-organizational-unit
                            description: List of organizational units (OU) of subject.
                            flat_name: threat.enrichments.indicator.file.x509.subject.organizational_unit
                            ignore_above: 1024
                            level: extended
                            name: subject.organizational_unit
                            node_name: organizational_unit
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of organizational units (OU) of subject.
                            type: keyword
                        state_or_province:
                          field_details:
                            dashed_name: threat-enrichments-indicator-file-x509-subject-state-or-province
                            description: List of state or province names (ST, S, or
                              P)
                            example: California
                            flat_name: threat.enrichments.indicator.file.x509.subject.state_or_province
                            ignore_above: 1024
                            level: extended
                            name: subject.state_or_province
                            node_name: state_or_province
                            normalize:
                            - array
                            original_fieldset: x509
                            short: List of state or province names (ST, S, or P)
                            type: keyword
                    version_number:
                      field_details:
                        dashed_name: threat-enrichments-indicator-file-x509-version-number
                        description: Version of x509 format.
                        example: 3
                        flat_name: threat.enrichments.indicator.file.x509.version_number
                        ignore_above: 1024
                        level: extended
                        name: version_number
                        node_name: version_number
                        normalize: []
                        original_fieldset: x509
                        short: Version of x509 format.
                        type: keyword
            first_seen:
              field_details:
                dashed_name: threat-enrichments-indicator-first-seen
                description: The date and time when intelligence source first reported
                  sighting this indicator.
                example: '2020-11-05T17:25:47.000Z'
                flat_name: threat.enrichments.indicator.first_seen
                level: extended
                name: enrichments.indicator.first_seen
                node_name: first_seen
                normalize: []
                short: Date/time indicator was first reported.
                type: date
            geo:
              field_details:
                dashed_name: threat-enrichments-indicator-geo
                description: 'Geo fields can carry data about a specific location
                  related to an event.

                  This geolocation information can be derived from techniques such
                  as Geo IP, or be user-supplied.'
                flat_name: threat.enrichments.indicator.geo
                intermediate: true
                name: geo
                node_name: geo
                original_fieldset: geo
                short: Fields describing a location.
                type: group
              fields:
                city_name:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-city-name
                    description: City name.
                    example: Montreal
                    flat_name: threat.enrichments.indicator.geo.city_name
                    ignore_above: 1024
                    level: core
                    name: city_name
                    node_name: city_name
                    normalize: []
                    original_fieldset: geo
                    short: City name.
                    type: keyword
                continent_code:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-continent-code
                    description: Two-letter code representing continent's name.
                    example: NA
                    flat_name: threat.enrichments.indicator.geo.continent_code
                    ignore_above: 1024
                    level: core
                    name: continent_code
                    node_name: continent_code
                    normalize: []
                    original_fieldset: geo
                    short: Continent code.
                    type: keyword
                continent_name:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-continent-name
                    description: Name of the continent.
                    example: North America
                    flat_name: threat.enrichments.indicator.geo.continent_name
                    ignore_above: 1024
                    level: core
                    name: continent_name
                    node_name: continent_name
                    normalize: []
                    original_fieldset: geo
                    short: Name of the continent.
                    type: keyword
                country_iso_code:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-country-iso-code
                    description: Country ISO code.
                    example: CA
                    flat_name: threat.enrichments.indicator.geo.country_iso_code
                    ignore_above: 1024
                    level: core
                    name: country_iso_code
                    node_name: country_iso_code
                    normalize: []
                    original_fieldset: geo
                    short: Country ISO code.
                    type: keyword
                country_name:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-country-name
                    description: Country name.
                    example: Canada
                    flat_name: threat.enrichments.indicator.geo.country_name
                    ignore_above: 1024
                    level: core
                    name: country_name
                    node_name: country_name
                    normalize: []
                    original_fieldset: geo
                    short: Country name.
                    type: keyword
                location:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-location
                    description: Longitude and latitude.
                    example: '{ "lon": -73.614830, "lat": 45.505918 }'
                    flat_name: threat.enrichments.indicator.geo.location
                    level: core
                    name: location
                    node_name: location
                    normalize: []
                    original_fieldset: geo
                    short: Longitude and latitude.
                    type: geo_point
                name:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-name
                    description: 'User-defined description of a location, at the level
                      of granularity they care about.

                      Could be the name of their data centers, the floor number, if
                      this describes a local physical entity, city names.

                      Not typically used in automated geolocation.'
                    example: boston-dc
                    flat_name: threat.enrichments.indicator.geo.name
                    ignore_above: 1024
                    level: extended
                    name: name
                    node_name: name
                    normalize: []
                    original_fieldset: geo
                    short: User-defined description of a location.
                    type: keyword
                postal_code:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-postal-code
                    description: 'Postal code associated with the location.

                      Values appropriate for this field may also be known as a postcode
                      or ZIP code and will vary widely from country to country.'
                    example: 94040
                    flat_name: threat.enrichments.indicator.geo.postal_code
                    ignore_above: 1024
                    level: core
                    name: postal_code
                    node_name: postal_code
                    normalize: []
                    original_fieldset: geo
                    short: Postal code.
                    type: keyword
                region_iso_code:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-region-iso-code
                    description: Region ISO code.
                    example: CA-QC
                    flat_name: threat.enrichments.indicator.geo.region_iso_code
                    ignore_above: 1024
                    level: core
                    name: region_iso_code
                    node_name: region_iso_code
                    normalize: []
                    original_fieldset: geo
                    short: Region ISO code.
                    type: keyword
                region_name:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-region-name
                    description: Region name.
                    example: Quebec
                    flat_name: threat.enrichments.indicator.geo.region_name
                    ignore_above: 1024
                    level: core
                    name: region_name
                    node_name: region_name
                    normalize: []
                    original_fieldset: geo
                    short: Region name.
                    type: keyword
                timezone:
                  field_details:
                    dashed_name: threat-enrichments-indicator-geo-timezone
                    description: The time zone of the location, such as IANA time
                      zone name.
                    example: America/Argentina/Buenos_Aires
                    flat_name: threat.enrichments.indicator.geo.timezone
                    ignore_above: 1024
                    level: core
                    name: timezone
                    node_name: timezone
                    normalize: []
                    original_fieldset: geo
                    short: Time zone.
                    type: keyword
            ip:
              field_details:
                dashed_name: threat-enrichments-indicator-ip
                description: Identifies a threat indicator as an IP address (irrespective
                  of direction).
                example: 1.2.3.4
                flat_name: threat.enrichments.indicator.ip
                level: extended
                name: enrichments.indicator.ip
                node_name: ip
                normalize: []
                short: Indicator IP address
                type: ip
            last_seen:
              field_details:
                dashed_name: threat-enrichments-indicator-last-seen
                description: The date and time when intelligence source last reported
                  sighting this indicator.
                example: '2020-11-05T17:25:47.000Z'
                flat_name: threat.enrichments.indicator.last_seen
                level: extended
                name: enrichments.indicator.last_seen
                node_name: last_seen
                normalize: []
                short: Date/time indicator was last reported.
                type: date
            marking:
              field_details:
                dashed_name: threat-enrichments-indicator-marking
                flat_name: threat.enrichments.indicator.marking
                intermediate: true
                name: enrichments.indicator.marking
                node_name: marking
                type: object
              fields:
                tlp:
                  field_details:
                    dashed_name: threat-enrichments-indicator-marking-tlp
                    description: Traffic Light Protocol sharing markings.
                    example: CLEAR
                    expected_values:
                    - WHITE
                    - CLEAR
                    - GREEN
                    - AMBER
                    - AMBER+STRICT
                    - RED
                    flat_name: threat.enrichments.indicator.marking.tlp
                    ignore_above: 1024
                    level: extended
                    name: enrichments.indicator.marking.tlp
                    node_name: tlp
                    normalize: []
                    short: Indicator TLP marking
                    type: keyword
                tlp_version:
                  field_details:
                    dashed_name: threat-enrichments-indicator-marking-tlp-version
                    description: Traffic Light Protocol version.
                    example: 2.0
                    flat_name: threat.enrichments.indicator.marking.tlp_version
                    ignore_above: 1024
                    level: extended
                    name: enrichments.indicator.marking.tlp_version
                    node_name: tlp_version
                    normalize: []
                    short: Indicator TLP version
                    type: keyword
            modified_at:
              field_details:
                dashed_name: threat-enrichments-indicator-modified-at
                description: The date and time when intelligence source last modified
                  information for this indicator.
                example: '2020-11-05T17:25:47.000Z'
                flat_name: threat.enrichments.indicator.modified_at
                level: extended
                name: enrichments.indicator.modified_at
                node_name: modified_at
                normalize: []
                short: Date/time indicator was last updated.
                type: date
            name:
              field_details:
                dashed_name: threat-enrichments-indicator-name
                description: 'The display name indicator in an UI friendly format

                  URL, IP address, email address, registry key, port number, hash
                  value, or other relevant name can serve as the display name.'
                example: 5.2.75.227
                flat_name: threat.enrichments.indicator.name
                ignore_above: 1024
                level: extended
                name: enrichments.indicator.name
                node_name: name
                normalize: []
                short: Indicator display name
                type: keyword
            port:
              field_details:
                dashed_name: threat-enrichments-indicator-port
                description: Identifies a threat indicator as a port number (irrespective
                  of direction).
                example: 443
                flat_name: threat.enrichments.indicator.port
                level: extended
                name: enrichments.indicator.port
                node_name: port
                normalize: []
                short: Indicator port
                type: long
            provider:
              field_details:
                dashed_name: threat-enrichments-indicator-provider
                description: The name of the indicator's provider.
                example: lrz_urlhaus
                flat_name: threat.enrichments.indicator.provider
                ignore_above: 1024
                level: extended
                name: enrichments.indicator.provider
                node_name: provider
                normalize: []
                short: Indicator provider
                type: keyword
            reference:
              field_details:
                dashed_name: threat-enrichments-indicator-reference
                description: Reference URL linking to additional information about
                  this indicator.
                example: https://system.example.com/indicator/0001234
                flat_name: threat.enrichments.indicator.reference
                ignore_above: 1024
                level: extended
                name: enrichments.indicator.reference
                node_name: reference
                normalize: []
                short: Indicator reference URL
                type: keyword
            registry:
              field_details:
                dashed_name: threat-enrichments-indicator-registry
                description: Fields related to Windows Registry operations.
                flat_name: threat.enrichments.indicator.registry
                intermediate: true
                name: registry
                node_name: registry
                original_fieldset: registry
                short: Fields related to Windows Registry operations.
                type: group
              fields:
                data:
                  field_details:
                    dashed_name: threat-enrichments-indicator-registry-data
                    flat_name: threat.enrichments.indicator.registry.data
                    intermediate: true
                    name: data
                    node_name: data
                    original_fieldset: registry
                    type: object
                  fields:
                    bytes:
                      field_details:
                        dashed_name: threat-enrichments-indicator-registry-data-bytes
                        description: 'Original bytes written with base64 encoding.

                          For Windows registry operations, such as SetValueEx and
                          RegQueryValueEx, this corresponds to the data pointed by
                          `lp_data`. This is optional but provides better recoverability
                          and should be populated for REG_BINARY encoded values.'
                        example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=
                        flat_name: threat.enrichments.indicator.registry.data.bytes
                        ignore_above: 1024
                        level: extended
                        name: data.bytes
                        node_name: bytes
                        normalize: []
                        original_fieldset: registry
                        short: Original bytes written with base64 encoding.
                        type: keyword
                    strings:
                      field_details:
                        dashed_name: threat-enrichments-indicator-registry-data-strings
                        description: 'Content when writing string types.

                          Populated as an array when writing string data to the registry.
                          For single string registry types (REG_SZ, REG_EXPAND_SZ),
                          this should be an array with one string. For sequences of
                          string with REG_MULTI_SZ, this array will be variable length.
                          For numeric data, such as REG_DWORD and REG_QWORD, this
                          should be populated with the decimal representation (e.g
                          `"1"`).'
                        example: '["C:\rta\red_ttp\bin\myapp.exe"]'
                        flat_name: threat.enrichments.indicator.registry.data.strings
                        level: core
                        name: data.strings
                        node_name: strings
                        normalize:
                        - array
                        original_fieldset: registry
                        short: List of strings representing what was written to the
                          registry.
                        type: wildcard
                    type:
                      field_details:
                        dashed_name: threat-enrichments-indicator-registry-data-type
                        description: Standard registry type for encoding contents
                        example: REG_SZ
                        flat_name: threat.enrichments.indicator.registry.data.type
                        ignore_above: 1024
                        level: core
                        name: data.type
                        node_name: type
                        normalize: []
                        original_fieldset: registry
                        short: Standard registry type for encoding contents
                        type: keyword
                hive:
                  field_details:
                    dashed_name: threat-enrichments-indicator-registry-hive
                    description: Abbreviated name for the hive.
                    example: HKLM
                    flat_name: threat.enrichments.indicator.registry.hive
                    ignore_above: 1024
                    level: core
                    name: hive
                    node_name: hive
                    normalize: []
                    original_fieldset: registry
                    short: Abbreviated name for the hive.
                    type: keyword
                key:
                  field_details:
                    dashed_name: threat-enrichments-indicator-registry-key
                    description: Hive-relative path of keys.
                    example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File
                      Execution Options\winword.exe
                    flat_name: threat.enrichments.indicator.registry.key
                    ignore_above: 1024
                    level: core
                    name: key
                    node_name: key
                    normalize: []
                    original_fieldset: registry
                    short: Hive-relative path of keys.
                    type: keyword
                path:
                  field_details:
                    dashed_name: threat-enrichments-indicator-registry-path
                    description: Full path, including hive, key and value
                    example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image
                      File Execution Options\winword.exe\Debugger
                    flat_name: threat.enrichments.indicator.registry.path
                    ignore_above: 1024
                    level: core
                    name: path
                    node_name: path
                    normalize: []
                    original_fieldset: registry
                    short: Full path, including hive, key and value
                    type: keyword
                value:
                  field_details:
                    dashed_name: threat-enrichments-indicator-registry-value
                    description: Name of the value written.
                    example: Debugger
                    flat_name: threat.enrichments.indicator.registry.value
                    ignore_above: 1024
                    level: core
                    name: value
                    node_name: value
                    normalize: []
                    original_fieldset: registry
                    short: Name of the value written.
                    type: keyword
            scanner_stats:
              field_details:
                dashed_name: threat-enrichments-indicator-scanner-stats
                description: Count of AV/EDR vendors that successfully detected malicious
                  file or URL.
                example: 4
                flat_name: threat.enrichments.indicator.scanner_stats
                level: extended
                name: enrichments.indicator.scanner_stats
                node_name: scanner_stats
                normalize: []
                short: Scanner statistics
                type: long
            sightings:
              field_details:
                dashed_name: threat-enrichments-indicator-sightings
                description: Number of times this indicator was observed conducting
                  threat activity.
                example: 20
                flat_name: threat.enrichments.indicator.sightings
                level: extended
                name: enrichments.indicator.sightings
                node_name: sightings
                normalize: []
                short: Number of times indicator observed
                type: long
            type:
              field_details:
                dashed_name: threat-enrichments-indicator-type
                description: Type of indicator as represented by Cyber Observable
                  in STIX 2.0.
                example: ipv4-addr
                expected_values:
                - autonomous-system
                - artifact
                - directory
                - domain-name
                - email-addr
                - file
                - ipv4-addr
                - ipv6-addr
                - mac-addr
                - mutex
                - port
                - process
                - software
                - url
                - user-account
                - windows-registry-key
                - x509-certificate
                flat_name: threat.enrichments.indicator.type
                ignore_above: 1024
                level: extended
                name: enrichments.indicator.type
                node_name: type
                normalize: []
                short: Type of indicator
                type: keyword
            url:
              field_details:
                dashed_name: threat-enrichments-indicator-url
                description: URL fields provide support for complete or partial URLs,
                  and supports the breaking down into scheme, domain, path, and so
                  on.
                flat_name: threat.enrichments.indicator.url
                intermediate: true
                name: url
                node_name: url
                original_fieldset: url
                short: Fields that let you store URLs in various forms.
                type: group
              fields:
                domain:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-domain
                    description: 'Domain of the url, such as "www.elastic.co".

                      In some cases a URL may refer to an IP and/or port directly,
                      without a domain name. In this case, the IP address would go
                      to the `domain` field.

                      If the URL contains a literal IPv6 address enclosed by `[` and
                      `]` (IETF RFC 2732), the `[` and `]` characters should also
                      be captured in the `domain` field.'
                    example: www.elastic.co
                    flat_name: threat.enrichments.indicator.url.domain
                    ignore_above: 1024
                    level: extended
                    name: domain
                    node_name: domain
                    normalize: []
                    original_fieldset: url
                    short: Domain of the url.
                    type: keyword
                extension:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-extension
                    description: 'The field contains the file extension from the original
                      request url, excluding the leading dot.

                      The file extension is only set if it exists, as not every url
                      has a file extension.

                      The leading period must not be included. For example, the value
                      must be "png", not ".png".

                      Note that when the file name has multiple extensions (example.tar.gz),
                      only the last one should be captured ("gz", not "tar.gz").'
                    example: png
                    flat_name: threat.enrichments.indicator.url.extension
                    ignore_above: 1024
                    level: extended
                    name: extension
                    node_name: extension
                    normalize: []
                    original_fieldset: url
                    short: File extension from the request url, excluding the leading
                      dot.
                    type: keyword
                fragment:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-fragment
                    description: 'Portion of the url after the `#`, such as "top".

                      The `#` is not part of the fragment.'
                    flat_name: threat.enrichments.indicator.url.fragment
                    ignore_above: 1024
                    level: extended
                    name: fragment
                    node_name: fragment
                    normalize: []
                    original_fieldset: url
                    short: Portion of the url after the `#`.
                    type: keyword
                full:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-full
                    description: If full URLs are important to your use case, they
                      should be stored in `url.full`, whether this field is reconstructed
                      or present in the event source.
                    example: https://www.elastic.co:443/search?q=elasticsearch#top
                    flat_name: threat.enrichments.indicator.url.full
                    level: extended
                    multi_fields:
                    - flat_name: threat.enrichments.indicator.url.full.text
                      name: text
                      type: match_only_text
                    name: full
                    node_name: full
                    normalize: []
                    original_fieldset: url
                    short: Full unparsed URL.
                    type: wildcard
                original:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-original
                    description: 'Unmodified original url as seen in the event source.

                      Note that in network monitoring, the observed URL may be a full
                      URL, whereas in access logs, the URL is often just represented
                      as a path.

                      This field is meant to represent the URL as it was observed,
                      complete or not.'
                    example: https://www.elastic.co:443/search?q=elasticsearch#top
                      or /search?q=elasticsearch
                    flat_name: threat.enrichments.indicator.url.original
                    level: extended
                    multi_fields:
                    - flat_name: threat.enrichments.indicator.url.original.text
                      name: text
                      type: match_only_text
                    name: original
                    node_name: original
                    normalize: []
                    original_fieldset: url
                    short: Unmodified original url as seen in the event source.
                    type: wildcard
                password:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-password
                    description: Password of the request.
                    flat_name: threat.enrichments.indicator.url.password
                    ignore_above: 1024
                    level: extended
                    name: password
                    node_name: password
                    normalize: []
                    original_fieldset: url
                    short: Password of the request.
                    type: keyword
                path:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-path
                    description: Path of the request, such as "/search".
                    flat_name: threat.enrichments.indicator.url.path
                    level: extended
                    name: path
                    node_name: path
                    normalize: []
                    original_fieldset: url
                    short: Path of the request, such as "/search".
                    type: wildcard
                port:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-port
                    description: Port of the request, such as 443.
                    example: 443
                    flat_name: threat.enrichments.indicator.url.port
                    format: string
                    level: extended
                    name: port
                    node_name: port
                    normalize: []
                    original_fieldset: url
                    short: Port of the request, such as 443.
                    type: long
                query:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-query
                    description: 'The query field describes the query string of the
                      request, such as "q=elasticsearch".

                      The `?` is excluded from the query string. If a URL contains
                      no `?`, there is no query field. If there is a `?` but no query,
                      the query field exists with an empty string. The `exists` query
                      can be used to differentiate between the two cases.'
                    flat_name: threat.enrichments.indicator.url.query
                    ignore_above: 1024
                    level: extended
                    name: query
                    node_name: query
                    normalize: []
                    original_fieldset: url
                    short: Query string of the request.
                    type: keyword
                registered_domain:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-registered-domain
                    description: 'The highest registered url domain, stripped of the
                      subdomain.

                      For example, the registered domain for "foo.example.com" is
                      "example.com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last two labels will not work well
                      for TLDs such as "co.uk".'
                    example: example.com
                    flat_name: threat.enrichments.indicator.url.registered_domain
                    ignore_above: 1024
                    level: extended
                    name: registered_domain
                    node_name: registered_domain
                    normalize: []
                    original_fieldset: url
                    short: The highest registered url domain, stripped of the subdomain.
                    type: keyword
                scheme:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-scheme
                    description: 'Scheme of the request, such as "https".

                      Note: The `:` is not part of the scheme.'
                    example: https
                    flat_name: threat.enrichments.indicator.url.scheme
                    ignore_above: 1024
                    level: extended
                    name: scheme
                    node_name: scheme
                    normalize: []
                    original_fieldset: url
                    short: Scheme of the url.
                    type: keyword
                subdomain:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-subdomain
                    description: 'The subdomain portion of a fully qualified domain
                      name includes all of the names except the host name under the
                      registered_domain.  In a partially qualified domain, or if the
                      the qualification level of the full name cannot be determined,
                      subdomain contains all of the names below the registered domain.

                      For example the subdomain portion of "www.east.mydomain.co.uk"
                      is "east". If the domain has multiple levels of subdomain, such
                      as "sub2.sub1.example.com", the subdomain field should contain
                      "sub2.sub1", with no trailing period.'
                    example: east
                    flat_name: threat.enrichments.indicator.url.subdomain
                    ignore_above: 1024
                    level: extended
                    name: subdomain
                    node_name: subdomain
                    normalize: []
                    original_fieldset: url
                    short: The subdomain of the domain.
                    type: keyword
                top_level_domain:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-top-level-domain
                    description: 'The effective top level domain (eTLD), also known
                      as the domain suffix, is the last part of the domain name. For
                      example, the top level domain for example.com is "com".

                      This value can be determined precisely with a list like the
                      public suffix list (http://publicsuffix.org). Trying to approximate
                      this by simply taking the last label will not work well for
                      effective TLDs such as "co.uk".'
                    example: co.uk
                    flat_name: threat.enrichments.indicator.url.top_level_domain
                    ignore_above: 1024
                    level: extended
                    name: top_level_domain
                    node_name: top_level_domain
                    normalize: []
                    original_fieldset: url
                    short: The effective top level domain (com, org, net, co.uk).
                    type: keyword
                username:
                  field_details:
                    dashed_name: threat-enrichments-indicator-url-username
                    description: Username of the request.
                    flat_name: threat.enrichments.indicator.url.username
                    ignore_above: 1024
                    level: extended
                    name: username
                    node_name: username
                    normalize: []
                    original_fieldset: url
                    short: Username of the request.
                    type: keyword
            x509:
              field_details:
                dashed_name: threat-enrichments-indicator-x509
                description: 'This implements the common core fields for x509 certificates.
                  This information is likely logged with TLS sessions, digital signatures
                  found in executable binaries, S/MIME information in email bodies,
                  or analysis of files on disk.

                  When the certificate relates to a file, use the fields at `file.x509`.
                  When hashes of the DER-encoded certificate are available, the `hash`
                  data set should be populated as well (e.g. `file.hash.sha256`).

                  Events that contain certificate information about network connections,
                  should use the x509 fields under the relevant TLS fields: `tls.server.x509`
                  and/or `tls.client.x509`.'
                flat_name: threat.enrichments.indicator.x509
                intermediate: true
                name: x509
                node_name: x509
                original_fieldset: x509
                short: These fields contain x509 certificate metadata.
                type: group
              fields:
                alternative_names:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-alternative-names
                    description: List of subject alternative names (SAN). Name types
                      vary by certificate authority and certificate type but commonly
                      contain IP addresses, DNS names (and wildcards), and email addresses.
                    example: '*.elastic.co'
                    flat_name: threat.enrichments.indicator.x509.alternative_names
                    ignore_above: 1024
                    level: extended
                    name: alternative_names
                    node_name: alternative_names
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of subject alternative names (SAN).
                    type: keyword
                issuer:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-issuer
                    flat_name: threat.enrichments.indicator.x509.issuer
                    intermediate: true
                    name: issuer
                    node_name: issuer
                    original_fieldset: x509
                    type: object
                  fields:
                    common_name:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-issuer-common-name
                        description: List of common name (CN) of issuing certificate
                          authority.
                        example: Example SHA2 High Assurance Server CA
                        flat_name: threat.enrichments.indicator.x509.issuer.common_name
                        ignore_above: 1024
                        level: extended
                        name: issuer.common_name
                        node_name: common_name
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of common name (CN) of issuing certificate authority.
                        type: keyword
                    country:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-issuer-country
                        description: List of country \(C) codes
                        example: US
                        flat_name: threat.enrichments.indicator.x509.issuer.country
                        ignore_above: 1024
                        level: extended
                        name: issuer.country
                        node_name: country
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of country \(C) codes
                        type: keyword
                    distinguished_name:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-issuer-distinguished-name
                        description: Distinguished name (DN) of issuing certificate
                          authority.
                        example: C=US, O=Example Inc, OU=www.example.com, CN=Example
                          SHA2 High Assurance Server CA
                        flat_name: threat.enrichments.indicator.x509.issuer.distinguished_name
                        ignore_above: 1024
                        level: extended
                        name: issuer.distinguished_name
                        node_name: distinguished_name
                        normalize: []
                        original_fieldset: x509
                        short: Distinguished name (DN) of issuing certificate authority.
                        type: keyword
                    locality:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-issuer-locality
                        description: List of locality names (L)
                        example: Mountain View
                        flat_name: threat.enrichments.indicator.x509.issuer.locality
                        ignore_above: 1024
                        level: extended
                        name: issuer.locality
                        node_name: locality
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of locality names (L)
                        type: keyword
                    organization:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-issuer-organization
                        description: List of organizations (O) of issuing certificate
                          authority.
                        example: Example Inc
                        flat_name: threat.enrichments.indicator.x509.issuer.organization
                        ignore_above: 1024
                        level: extended
                        name: issuer.organization
                        node_name: organization
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizations (O) of issuing certificate authority.
                        type: keyword
                    organizational_unit:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-issuer-organizational-unit
                        description: List of organizational units (OU) of issuing
                          certificate authority.
                        example: www.example.com
                        flat_name: threat.enrichments.indicator.x509.issuer.organizational_unit
                        ignore_above: 1024
                        level: extended
                        name: issuer.organizational_unit
                        node_name: organizational_unit
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizational units (OU) of issuing certificate
                          authority.
                        type: keyword
                    state_or_province:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-issuer-state-or-province
                        description: List of state or province names (ST, S, or P)
                        example: California
                        flat_name: threat.enrichments.indicator.x509.issuer.state_or_province
                        ignore_above: 1024
                        level: extended
                        name: issuer.state_or_province
                        node_name: state_or_province
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of state or province names (ST, S, or P)
                        type: keyword
                not_after:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-not-after
                    description: Time at which the certificate is no longer considered
                      valid.
                    example: '2020-07-16T03:15:39Z'
                    flat_name: threat.enrichments.indicator.x509.not_after
                    level: extended
                    name: not_after
                    node_name: not_after
                    normalize: []
                    original_fieldset: x509
                    short: Time at which the certificate is no longer considered valid.
                    type: date
                not_before:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-not-before
                    description: Time at which the certificate is first considered
                      valid.
                    example: '2019-08-16T01:40:25Z'
                    flat_name: threat.enrichments.indicator.x509.not_before
                    level: extended
                    name: not_before
                    node_name: not_before
                    normalize: []
                    original_fieldset: x509
                    short: Time at which the certificate is first considered valid.
                    type: date
                public_key_algorithm:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-public-key-algorithm
                    description: Algorithm used to generate the public key.
                    example: RSA
                    flat_name: threat.enrichments.indicator.x509.public_key_algorithm
                    ignore_above: 1024
                    level: extended
                    name: public_key_algorithm
                    node_name: public_key_algorithm
                    normalize: []
                    original_fieldset: x509
                    short: Algorithm used to generate the public key.
                    type: keyword
                public_key_curve:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-public-key-curve
                    description: The curve used by the elliptic curve public key algorithm.
                      This is algorithm specific.
                    example: nistp521
                    flat_name: threat.enrichments.indicator.x509.public_key_curve
                    ignore_above: 1024
                    level: extended
                    name: public_key_curve
                    node_name: public_key_curve
                    normalize: []
                    original_fieldset: x509
                    short: The curve used by the elliptic curve public key algorithm.
                      This is algorithm specific.
                    type: keyword
                public_key_exponent:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-public-key-exponent
                    description: Exponent used to derive the public key. This is algorithm
                      specific.
                    doc_values: false
                    example: 65537
                    flat_name: threat.enrichments.indicator.x509.public_key_exponent
                    index: false
                    level: extended
                    name: public_key_exponent
                    node_name: public_key_exponent
                    normalize: []
                    original_fieldset: x509
                    short: Exponent used to derive the public key. This is algorithm
                      specific.
                    type: long
                public_key_size:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-public-key-size
                    description: The size of the public key space in bits.
                    example: 2048
                    flat_name: threat.enrichments.indicator.x509.public_key_size
                    level: extended
                    name: public_key_size
                    node_name: public_key_size
                    normalize: []
                    original_fieldset: x509
                    short: The size of the public key space in bits.
                    type: long
                serial_number:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-serial-number
                    description: Unique serial number issued by the certificate authority.
                      For consistency, if this value is alphanumeric, it should be
                      formatted without colons and uppercase characters.
                    example: 55FBB9C7DEBF09809D12CCAA
                    flat_name: threat.enrichments.indicator.x509.serial_number
                    ignore_above: 1024
                    level: extended
                    name: serial_number
                    node_name: serial_number
                    normalize: []
                    original_fieldset: x509
                    short: Unique serial number issued by the certificate authority.
                    type: keyword
                signature_algorithm:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-signature-algorithm
                    description: Identifier for certificate signature algorithm. We
                      recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
                    example: SHA256-RSA
                    flat_name: threat.enrichments.indicator.x509.signature_algorithm
                    ignore_above: 1024
                    level: extended
                    name: signature_algorithm
                    node_name: signature_algorithm
                    normalize: []
                    original_fieldset: x509
                    short: Identifier for certificate signature algorithm.
                    type: keyword
                subject:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-subject
                    flat_name: threat.enrichments.indicator.x509.subject
                    intermediate: true
                    name: subject
                    node_name: subject
                    original_fieldset: x509
                    type: object
                  fields:
                    common_name:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-subject-common-name
                        description: List of common names (CN) of subject.
                        example: shared.global.example.net
                        flat_name: threat.enrichments.indicator.x509.subject.common_name
                        ignore_above: 1024
                        level: extended
                        name: subject.common_name
                        node_name: common_name
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of common names (CN) of subject.
                        type: keyword
                    country:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-subject-country
                        description: List of country \(C) code
                        example: US
                        flat_name: threat.enrichments.indicator.x509.subject.country
                        ignore_above: 1024
                        level: extended
                        name: subject.country
                        node_name: country
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of country \(C) code
                        type: keyword
                    distinguished_name:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-subject-distinguished-name
                        description: Distinguished name (DN) of the certificate subject
                          entity.
                        example: C=US, ST=California, L=San Francisco, O=Example,
                          Inc., CN=shared.global.example.net
                        flat_name: threat.enrichments.indicator.x509.subject.distinguished_name
                        ignore_above: 1024
                        level: extended
                        name: subject.distinguished_name
                        node_name: distinguished_name
                        normalize: []
                        original_fieldset: x509
                        short: Distinguished name (DN) of the certificate subject
                          entity.
                        type: keyword
                    locality:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-subject-locality
                        description: List of locality names (L)
                        example: San Francisco
                        flat_name: threat.enrichments.indicator.x509.subject.locality
                        ignore_above: 1024
                        level: extended
                        name: subject.locality
                        node_name: locality
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of locality names (L)
                        type: keyword
                    organization:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-subject-organization
                        description: List of organizations (O) of subject.
                        example: Example, Inc.
                        flat_name: threat.enrichments.indicator.x509.subject.organization
                        ignore_above: 1024
                        level: extended
                        name: subject.organization
                        node_name: organization
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizations (O) of subject.
                        type: keyword
                    organizational_unit:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-subject-organizational-unit
                        description: List of organizational units (OU) of subject.
                        flat_name: threat.enrichments.indicator.x509.subject.organizational_unit
                        ignore_above: 1024
                        level: extended
                        name: subject.organizational_unit
                        node_name: organizational_unit
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizational units (OU) of subject.
                        type: keyword
                    state_or_province:
                      field_details:
                        dashed_name: threat-enrichments-indicator-x509-subject-state-or-province
                        description: List of state or province names (ST, S, or P)
                        example: California
                        flat_name: threat.enrichments.indicator.x509.subject.state_or_province
                        ignore_above: 1024
                        level: extended
                        name: subject.state_or_province
                        node_name: state_or_province
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of state or province names (ST, S, or P)
                        type: keyword
                version_number:
                  field_details:
                    dashed_name: threat-enrichments-indicator-x509-version-number
                    description: Version of x509 format.
                    example: 3
                    flat_name: threat.enrichments.indicator.x509.version_number
                    ignore_above: 1024
                    level: extended
                    name: version_number
                    node_name: version_number
                    normalize: []
                    original_fieldset: x509
                    short: Version of x509 format.
                    type: keyword
        matched:
          field_details:
            dashed_name: threat-enrichments-matched
            flat_name: threat.enrichments.matched
            intermediate: true
            name: enrichments.matched
            node_name: matched
            type: object
          fields:
            atomic:
              field_details:
                dashed_name: threat-enrichments-matched-atomic
                description: Identifies the atomic indicator value that matched a
                  local environment endpoint or network event.
                example: bad-domain.com
                flat_name: threat.enrichments.matched.atomic
                ignore_above: 1024
                level: extended
                name: enrichments.matched.atomic
                node_name: atomic
                normalize: []
                short: Matched indicator value
                type: keyword
            field:
              field_details:
                dashed_name: threat-enrichments-matched-field
                description: Identifies the field of the atomic indicator that matched
                  a local environment endpoint or network event.
                example: file.hash.sha256
                flat_name: threat.enrichments.matched.field
                ignore_above: 1024
                level: extended
                name: enrichments.matched.field
                node_name: field
                normalize: []
                short: Matched indicator field
                type: keyword
            id:
              field_details:
                dashed_name: threat-enrichments-matched-id
                description: Identifies the _id of the indicator document enriching
                  the event.
                example: ff93aee5-86a1-4a61-b0e6-0cdc313d01b5
                flat_name: threat.enrichments.matched.id
                ignore_above: 1024
                level: extended
                name: enrichments.matched.id
                node_name: id
                normalize: []
                short: Matched indicator identifier
                type: keyword
            index:
              field_details:
                dashed_name: threat-enrichments-matched-index
                description: Identifies the _index of the indicator document enriching
                  the event.
                example: filebeat-8.0.0-2021.05.23-000011
                flat_name: threat.enrichments.matched.index
                ignore_above: 1024
                level: extended
                name: enrichments.matched.index
                node_name: index
                normalize: []
                short: Matched indicator index
                type: keyword
            occurred:
              field_details:
                dashed_name: threat-enrichments-matched-occurred
                description: Indicates when the indicator match was generated
                example: '2021-10-05T17:00:58.326Z'
                flat_name: threat.enrichments.matched.occurred
                level: extended
                name: enrichments.matched.occurred
                node_name: occurred
                normalize: []
                short: Date of match
                type: date
            type:
              field_details:
                dashed_name: threat-enrichments-matched-type
                description: Identifies the type of match that caused the event to
                  be enriched with the given indicator
                example: indicator_match_rule
                flat_name: threat.enrichments.matched.type
                ignore_above: 1024
                level: extended
                name: enrichments.matched.type
                node_name: type
                normalize: []
                short: Type of indicator match
                type: keyword
    feed:
      field_details:
        dashed_name: threat-feed
        flat_name: threat.feed
        intermediate: true
        name: feed
        node_name: feed
        type: object
      fields:
        dashboard_id:
          field_details:
            dashed_name: threat-feed-dashboard-id
            description: The saved object ID of the dashboard belonging to the threat
              feed for displaying dashboard links to threat feeds in Kibana.
            example: 5ba16340-72e6-11eb-a3e3-b3cc7c78a70f
            flat_name: threat.feed.dashboard_id
            ignore_above: 1024
            level: extended
            name: feed.dashboard_id
            node_name: dashboard_id
            normalize: []
            short: Feed dashboard ID.
            type: keyword
        description:
          field_details:
            dashed_name: threat-feed-description
            description: Description of the threat feed in a UI friendly format.
            example: Threat feed from the AlienVault Open Threat eXchange network.
            flat_name: threat.feed.description
            ignore_above: 1024
            level: extended
            name: feed.description
            node_name: description
            normalize: []
            short: Description of the threat feed.
            type: keyword
        name:
          field_details:
            dashed_name: threat-feed-name
            description: The name of the threat feed in UI friendly format.
            example: AlienVault OTX
            flat_name: threat.feed.name
            ignore_above: 1024
            level: extended
            name: feed.name
            node_name: name
            normalize: []
            short: Name of the threat feed.
            type: keyword
        reference:
          field_details:
            dashed_name: threat-feed-reference
            description: Reference information for the threat feed in a UI friendly
              format.
            example: https://otx.alienvault.com
            flat_name: threat.feed.reference
            ignore_above: 1024
            level: extended
            name: feed.reference
            node_name: reference
            normalize: []
            short: Reference for the threat feed.
            type: keyword
    framework:
      field_details:
        dashed_name: threat-framework
        description: Name of the threat framework used to further categorize and classify
          the tactic and technique of the reported threat. Framework classification
          can be provided by detecting systems, evaluated at ingest time, or retrospectively
          tagged to events.
        example: MITRE ATT&CK
        flat_name: threat.framework
        ignore_above: 1024
        level: extended
        name: framework
        node_name: framework
        normalize: []
        short: Threat classification framework.
        type: keyword
    group:
      field_details:
        dashed_name: threat-group
        flat_name: threat.group
        intermediate: true
        name: group
        node_name: group
        type: object
      fields:
        alias:
          field_details:
            dashed_name: threat-group-alias
            description: "The alias(es) of the group for a set of related intrusion\
              \ activity that are tracked by a common name in the security community.\n\
              While not required, you can use a MITRE ATT&CK\xAE group alias(es)."
            example: '[ "Magecart Group 6" ]'
            flat_name: threat.group.alias
            ignore_above: 1024
            level: extended
            name: group.alias
            node_name: alias
            normalize:
            - array
            short: Alias of the group.
            type: keyword
        id:
          field_details:
            dashed_name: threat-group-id
            description: "The id of the group for a set of related intrusion activity\
              \ that are tracked by a common name in the security community.\nWhile\
              \ not required, you can use a MITRE ATT&CK\xAE group id."
            example: G0037
            flat_name: threat.group.id
            ignore_above: 1024
            level: extended
            name: group.id
            node_name: id
            normalize: []
            short: ID of the group.
            type: keyword
        name:
          field_details:
            dashed_name: threat-group-name
            description: "The name of the group for a set of related intrusion activity\
              \ that are tracked by a common name in the security community.\nWhile\
              \ not required, you can use a MITRE ATT&CK\xAE group name."
            example: FIN6
            flat_name: threat.group.name
            ignore_above: 1024
            level: extended
            name: group.name
            node_name: name
            normalize: []
            short: Name of the group.
            type: keyword
        reference:
          field_details:
            dashed_name: threat-group-reference
            description: "The reference URL of the group for a set of related intrusion\
              \ activity that are tracked by a common name in the security community.\n\
              While not required, you can use a MITRE ATT&CK\xAE group reference URL."
            example: https://attack.mitre.org/groups/G0037/
            flat_name: threat.group.reference
            ignore_above: 1024
            level: extended
            name: group.reference
            node_name: reference
            normalize: []
            short: Reference URL of the group.
            type: keyword
    indicator:
      field_details:
        dashed_name: threat-indicator
        flat_name: threat.indicator
        intermediate: true
        name: indicator
        node_name: indicator
        type: object
      fields:
        as:
          field_details:
            dashed_name: threat-indicator-as
            description: An autonomous system (AS) is a collection of connected Internet
              Protocol (IP) routing prefixes under the control of one or more network
              operators on behalf of a single administrative entity or domain that
              presents a common, clearly defined routing policy to the internet.
            flat_name: threat.indicator.as
            intermediate: true
            name: as
            node_name: as
            original_fieldset: as
            short: Fields describing an Autonomous System (Internet routing prefix).
            type: group
          fields:
            number:
              field_details:
                dashed_name: threat-indicator-as-number
                description: Unique number allocated to the autonomous system. The
                  autonomous system number (ASN) uniquely identifies each network
                  on the Internet.
                example: 15169
                flat_name: threat.indicator.as.number
                level: extended
                name: number
                node_name: number
                normalize: []
                original_fieldset: as
                short: Unique number allocated to the autonomous system.
                type: long
            organization:
              field_details:
                dashed_name: threat-indicator-as-organization
                flat_name: threat.indicator.as.organization
                intermediate: true
                name: organization
                node_name: organization
                original_fieldset: as
                type: object
              fields:
                name:
                  field_details:
                    dashed_name: threat-indicator-as-organization-name
                    description: Organization name.
                    example: Google LLC
                    flat_name: threat.indicator.as.organization.name
                    ignore_above: 1024
                    level: extended
                    multi_fields:
                    - flat_name: threat.indicator.as.organization.name.text
                      name: text
                      type: match_only_text
                    name: organization.name
                    node_name: name
                    normalize: []
                    original_fieldset: as
                    short: Organization name.
                    type: keyword
        confidence:
          field_details:
            dashed_name: threat-indicator-confidence
            description: Identifies the vendor-neutral confidence rating using the
              None/Low/Medium/High scale defined in Appendix A of the STIX 2.1 framework.
              Vendor-specific confidence scales may be added as custom fields.
            example: Medium
            expected_values:
            - Not Specified
            - None
            - Low
            - Medium
            - High
            flat_name: threat.indicator.confidence
            ignore_above: 1024
            level: extended
            name: indicator.confidence
            node_name: confidence
            normalize: []
            short: Indicator confidence rating
            type: keyword
        description:
          field_details:
            dashed_name: threat-indicator-description
            description: Describes the type of action conducted by the threat.
            example: IP x.x.x.x was observed delivering the Angler EK.
            flat_name: threat.indicator.description
            ignore_above: 1024
            level: extended
            name: indicator.description
            node_name: description
            normalize: []
            short: Indicator description
            type: keyword
        email:
          field_details:
            dashed_name: threat-indicator-email
            flat_name: threat.indicator.email
            intermediate: true
            name: indicator.email
            node_name: email
            type: object
          fields:
            address:
              field_details:
                dashed_name: threat-indicator-email-address
                description: Identifies a threat indicator as an email address (irrespective
                  of direction).
                example: phish@example.com
                flat_name: threat.indicator.email.address
                ignore_above: 1024
                level: extended
                name: indicator.email.address
                node_name: address
                normalize: []
                short: Indicator email address
                type: keyword
        file:
          field_details:
            dashed_name: threat-indicator-file
            description: 'A file is defined as a set of information that has been
              created on, or has existed on a filesystem.

              File objects can be associated with host events, network events, and/or
              file events (e.g., those produced by File Integrity Monitoring [FIM]
              products or services). File fields provide details about the affected
              file associated with the event or metric.'
            flat_name: threat.indicator.file
            intermediate: true
            name: file
            node_name: file
            original_fieldset: file
            short: Fields describing files.
            type: group
          fields:
            accessed:
              field_details:
                dashed_name: threat-indicator-file-accessed
                description: 'Last time the file was accessed.

                  Note that not all filesystems keep track of access time.'
                flat_name: threat.indicator.file.accessed
                level: extended
                name: accessed
                node_name: accessed
                normalize: []
                original_fieldset: file
                short: Last time the file was accessed.
                type: date
            attributes:
              field_details:
                dashed_name: threat-indicator-file-attributes
                description: 'Array of file attributes.

                  Attributes names will vary by platform. Here''s a non-exhaustive
                  list of values that are expected in this field: archive, compressed,
                  directory, encrypted, execute, hidden, read, readonly, system, write.'
                example: '["readonly", "system"]'
                flat_name: threat.indicator.file.attributes
                ignore_above: 1024
                level: extended
                name: attributes
                node_name: attributes
                normalize:
                - array
                original_fieldset: file
                short: Array of file attributes.
                type: keyword
            code_signature:
              field_details:
                dashed_name: threat-indicator-file-code-signature
                description: These fields contain information about binary code signatures.
                flat_name: threat.indicator.file.code_signature
                intermediate: true
                name: code_signature
                node_name: code_signature
                original_fieldset: code_signature
                short: These fields contain information about binary code signatures.
                type: group
              fields:
                digest_algorithm:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-digest-algorithm
                    description: 'The hashing algorithm used to sign the process.

                      This value can distinguish signatures when a file is signed
                      multiple times by the same signer but with a different digest
                      algorithm.'
                    example: sha256
                    flat_name: threat.indicator.file.code_signature.digest_algorithm
                    ignore_above: 1024
                    level: extended
                    name: digest_algorithm
                    node_name: digest_algorithm
                    normalize: []
                    original_fieldset: code_signature
                    short: Hashing algorithm used to sign the process.
                    type: keyword
                exists:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-exists
                    description: Boolean to capture if a signature is present.
                    example: 'true'
                    flat_name: threat.indicator.file.code_signature.exists
                    level: core
                    name: exists
                    node_name: exists
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if a signature is present.
                    type: boolean
                signing_id:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-signing-id
                    description: 'The identifier used to sign the process.

                      This is used to identify the application manufactured by a software
                      vendor. The field is relevant to Apple *OS only.'
                    example: com.apple.xpc.proxy
                    flat_name: threat.indicator.file.code_signature.signing_id
                    ignore_above: 1024
                    level: extended
                    name: signing_id
                    node_name: signing_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The identifier used to sign the process.
                    type: keyword
                status:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-status
                    description: 'Additional information about the certificate status.

                      This is useful for logging cryptographic errors with the certificate
                      validity or trust status. Leave unpopulated if the validity
                      or trust of the certificate was unchecked.'
                    example: ERROR_UNTRUSTED_ROOT
                    flat_name: threat.indicator.file.code_signature.status
                    ignore_above: 1024
                    level: extended
                    name: status
                    node_name: status
                    normalize: []
                    original_fieldset: code_signature
                    short: Additional information about the certificate status.
                    type: keyword
                subject_name:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-subject-name
                    description: Subject name of the code signer
                    example: Microsoft Corporation
                    flat_name: threat.indicator.file.code_signature.subject_name
                    ignore_above: 1024
                    level: core
                    name: subject_name
                    node_name: subject_name
                    normalize: []
                    original_fieldset: code_signature
                    short: Subject name of the code signer
                    type: keyword
                team_id:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-team-id
                    description: 'The team identifier used to sign the process.

                      This is used to identify the team or vendor of a software product.
                      The field is relevant to Apple *OS only.'
                    example: EQHXZ8M8AV
                    flat_name: threat.indicator.file.code_signature.team_id
                    ignore_above: 1024
                    level: extended
                    name: team_id
                    node_name: team_id
                    normalize: []
                    original_fieldset: code_signature
                    short: The team identifier used to sign the process.
                    type: keyword
                timestamp:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-timestamp
                    description: Date and time when the code signature was generated
                      and signed.
                    example: '2021-01-01T12:10:30Z'
                    flat_name: threat.indicator.file.code_signature.timestamp
                    level: extended
                    name: timestamp
                    node_name: timestamp
                    normalize: []
                    original_fieldset: code_signature
                    short: When the signature was generated and signed.
                    type: date
                trusted:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-trusted
                    description: 'Stores the trust status of the certificate chain.

                      Validating the trust of the certificate chain may be complicated,
                      and this field should only be populated by tools that actively
                      check the status.'
                    example: 'true'
                    flat_name: threat.indicator.file.code_signature.trusted
                    level: extended
                    name: trusted
                    node_name: trusted
                    normalize: []
                    original_fieldset: code_signature
                    short: Stores the trust status of the certificate chain.
                    type: boolean
                valid:
                  field_details:
                    dashed_name: threat-indicator-file-code-signature-valid
                    description: 'Boolean to capture if the digital signature is verified
                      against the binary content.

                      Leave unpopulated if a certificate was unchecked.'
                    example: 'true'
                    flat_name: threat.indicator.file.code_signature.valid
                    level: extended
                    name: valid
                    node_name: valid
                    normalize: []
                    original_fieldset: code_signature
                    short: Boolean to capture if the digital signature is verified
                      against the binary content.
                    type: boolean
            created:
              field_details:
                dashed_name: threat-indicator-file-created
                description: 'File creation time.

                  Note that not all filesystems store the creation time.'
                flat_name: threat.indicator.file.created
                level: extended
                name: created
                node_name: created
                normalize: []
                original_fieldset: file
                short: File creation time.
                type: date
            ctime:
              field_details:
                dashed_name: threat-indicator-file-ctime
                description: 'Last time the file attributes or metadata changed.

                  Note that changes to the file content will update `mtime`. This
                  implies `ctime` will be adjusted at the same time, since `mtime`
                  is an attribute of the file.'
                flat_name: threat.indicator.file.ctime
                level: extended
                name: ctime
                node_name: ctime
                normalize: []
                original_fieldset: file
                short: Last time the file attributes or metadata changed.
                type: date
            device:
              field_details:
                dashed_name: threat-indicator-file-device
                description: Device that is the source of the file.
                example: sda
                flat_name: threat.indicator.file.device
                ignore_above: 1024
                level: extended
                name: device
                node_name: device
                normalize: []
                original_fieldset: file
                short: Device that is the source of the file.
                type: keyword
            directory:
              field_details:
                dashed_name: threat-indicator-file-directory
                description: Directory where the file is located. It should include
                  the drive letter, when appropriate.
                example: /home/alice
                flat_name: threat.indicator.file.directory
                ignore_above: 1024
                level: extended
                name: directory
                node_name: directory
                normalize: []
                original_fieldset: file
                short: Directory where the file is located.
                type: keyword
            drive_letter:
              field_details:
                dashed_name: threat-indicator-file-drive-letter
                description: 'Drive letter where the file is located. This field is
                  only relevant on Windows.

                  The value should be uppercase, and not include the colon.'
                example: C
                flat_name: threat.indicator.file.drive_letter
                ignore_above: 1
                level: extended
                name: drive_letter
                node_name: drive_letter
                normalize: []
                original_fieldset: file
                short: Drive letter where the file is located.
                type: keyword
            elf:
              field_details:
                beta: These fields are in beta and are subject to change.
                dashed_name: threat-indicator-file-elf
                description: These fields contain Linux Executable Linkable Format
                  (ELF) metadata.
                flat_name: threat.indicator.file.elf
                intermediate: true
                name: elf
                node_name: elf
                original_fieldset: elf
                short: These fields contain Linux Executable Linkable Format (ELF)
                  metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: threat-indicator-file-elf-architecture
                    description: Machine architecture of the ELF file.
                    example: x86-64
                    flat_name: threat.indicator.file.elf.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: elf
                    short: Machine architecture of the ELF file.
                    type: keyword
                byte_order:
                  field_details:
                    dashed_name: threat-indicator-file-elf-byte-order
                    description: Byte sequence of ELF file.
                    example: Little Endian
                    flat_name: threat.indicator.file.elf.byte_order
                    ignore_above: 1024
                    level: extended
                    name: byte_order
                    node_name: byte_order
                    normalize: []
                    original_fieldset: elf
                    short: Byte sequence of ELF file.
                    type: keyword
                cpu_type:
                  field_details:
                    dashed_name: threat-indicator-file-elf-cpu-type
                    description: CPU type of the ELF file.
                    example: Intel
                    flat_name: threat.indicator.file.elf.cpu_type
                    ignore_above: 1024
                    level: extended
                    name: cpu_type
                    node_name: cpu_type
                    normalize: []
                    original_fieldset: elf
                    short: CPU type of the ELF file.
                    type: keyword
                creation_date:
                  field_details:
                    dashed_name: threat-indicator-file-elf-creation-date
                    description: Extracted when possible from the file's metadata.
                      Indicates when it was built or compiled. It can also be faked
                      by malware creators.
                    flat_name: threat.indicator.file.elf.creation_date
                    level: extended
                    name: creation_date
                    node_name: creation_date
                    normalize: []
                    original_fieldset: elf
                    short: Build or compile date.
                    type: date
                exports:
                  field_details:
                    dashed_name: threat-indicator-file-elf-exports
                    description: List of exported element names and types.
                    flat_name: threat.indicator.file.elf.exports
                    level: extended
                    name: exports
                    node_name: exports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of exported element names and types.
                    type: flattened
                go_import_hash:
                  field_details:
                    dashed_name: threat-indicator-file-elf-go-import-hash
                    description: 'A hash of the Go language imports in an ELF file
                      excluding standard library imports. An import hash can be used
                      to fingerprint binaries even after recompilation or other code-level
                      transformations have occurred, which would change more traditional
                      hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: threat.indicator.file.elf.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the Go language imports in an ELF file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: threat-indicator-file-elf-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: threat.indicator.file.elf.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: elf
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-elf-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: threat.indicator.file.elf.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-elf-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: threat.indicator.file.elf.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: threat-indicator-file-elf-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: threat.indicator.file.elf.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: elf
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                header:
                  field_details:
                    dashed_name: threat-indicator-file-elf-header
                    flat_name: threat.indicator.file.elf.header
                    intermediate: true
                    name: header
                    node_name: header
                    original_fieldset: elf
                    type: object
                  fields:
                    abi_version:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-abi-version
                        description: Version of the ELF Application Binary Interface
                          (ABI).
                        flat_name: threat.indicator.file.elf.header.abi_version
                        ignore_above: 1024
                        level: extended
                        name: header.abi_version
                        node_name: abi_version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF Application Binary Interface (ABI).
                        type: keyword
                    class:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-class
                        description: Header class of the ELF file.
                        flat_name: threat.indicator.file.elf.header.class
                        ignore_above: 1024
                        level: extended
                        name: header.class
                        node_name: class
                        normalize: []
                        original_fieldset: elf
                        short: Header class of the ELF file.
                        type: keyword
                    data:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-data
                        description: Data table of the ELF header.
                        flat_name: threat.indicator.file.elf.header.data
                        ignore_above: 1024
                        level: extended
                        name: header.data
                        node_name: data
                        normalize: []
                        original_fieldset: elf
                        short: Data table of the ELF header.
                        type: keyword
                    entrypoint:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-entrypoint
                        description: Header entrypoint of the ELF file.
                        flat_name: threat.indicator.file.elf.header.entrypoint
                        format: string
                        level: extended
                        name: header.entrypoint
                        node_name: entrypoint
                        normalize: []
                        original_fieldset: elf
                        short: Header entrypoint of the ELF file.
                        type: long
                    object_version:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-object-version
                        description: '"0x1" for original ELF files.'
                        flat_name: threat.indicator.file.elf.header.object_version
                        ignore_above: 1024
                        level: extended
                        name: header.object_version
                        node_name: object_version
                        normalize: []
                        original_fieldset: elf
                        short: '"0x1" for original ELF files.'
                        type: keyword
                    os_abi:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-os-abi
                        description: Application Binary Interface (ABI) of the Linux
                          OS.
                        flat_name: threat.indicator.file.elf.header.os_abi
                        ignore_above: 1024
                        level: extended
                        name: header.os_abi
                        node_name: os_abi
                        normalize: []
                        original_fieldset: elf
                        short: Application Binary Interface (ABI) of the Linux OS.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-type
                        description: Header type of the ELF file.
                        flat_name: threat.indicator.file.elf.header.type
                        ignore_above: 1024
                        level: extended
                        name: header.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: Header type of the ELF file.
                        type: keyword
                    version:
                      field_details:
                        dashed_name: threat-indicator-file-elf-header-version
                        description: Version of the ELF header.
                        flat_name: threat.indicator.file.elf.header.version
                        ignore_above: 1024
                        level: extended
                        name: header.version
                        node_name: version
                        normalize: []
                        original_fieldset: elf
                        short: Version of the ELF header.
                        type: keyword
                import_hash:
                  field_details:
                    dashed_name: threat-indicator-file-elf-import-hash
                    description: 'A hash of the imports in an ELF file. An import
                      hash can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is an ELF implementation of the Windows PE imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: threat.indicator.file.elf.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: elf
                    short: A hash of the imports in an ELF file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: threat-indicator-file-elf-imports
                    description: List of imported element names and types.
                    flat_name: threat.indicator.file.elf.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-elf-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: threat.indicator.file.elf.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-elf-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: threat.indicator.file.elf.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: elf
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                sections:
                  field_details:
                    dashed_name: threat-indicator-file-elf-sections
                    description: 'An array containing an object for each section of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.sections.*`.'
                    flat_name: threat.indicator.file.elf.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: elf
                    short: Section information of the ELF file.
                    type: nested
                  fields:
                    chi2:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-chi2
                        description: Chi-square probability distribution of the section.
                        flat_name: threat.indicator.file.elf.sections.chi2
                        format: number
                        level: extended
                        name: sections.chi2
                        node_name: chi2
                        normalize: []
                        original_fieldset: elf
                        short: Chi-square probability distribution of the section.
                        type: long
                    entropy:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: threat.indicator.file.elf.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: elf
                        short: Shannon entropy calculation from the section.
                        type: long
                    flags:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-flags
                        description: ELF Section List flags.
                        flat_name: threat.indicator.file.elf.sections.flags
                        ignore_above: 1024
                        level: extended
                        name: sections.flags
                        node_name: flags
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List flags.
                        type: keyword
                    name:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-name
                        description: ELF Section List name.
                        flat_name: threat.indicator.file.elf.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List name.
                        type: keyword
                    physical_offset:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-physical-offset
                        description: ELF Section List offset.
                        flat_name: threat.indicator.file.elf.sections.physical_offset
                        ignore_above: 1024
                        level: extended
                        name: sections.physical_offset
                        node_name: physical_offset
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List offset.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-physical-size
                        description: ELF Section List physical size.
                        flat_name: threat.indicator.file.elf.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List physical size.
                        type: long
                    type:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-type
                        description: ELF Section List type.
                        flat_name: threat.indicator.file.elf.sections.type
                        ignore_above: 1024
                        level: extended
                        name: sections.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List type.
                        type: keyword
                    var_entropy:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: threat.indicator.file.elf.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: elf
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_address:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-virtual-address
                        description: ELF Section List virtual address.
                        flat_name: threat.indicator.file.elf.sections.virtual_address
                        format: string
                        level: extended
                        name: sections.virtual_address
                        node_name: virtual_address
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual address.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: threat-indicator-file-elf-sections-virtual-size
                        description: ELF Section List virtual size.
                        flat_name: threat.indicator.file.elf.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: elf
                        short: ELF Section List virtual size.
                        type: long
                segments:
                  field_details:
                    dashed_name: threat-indicator-file-elf-segments
                    description: 'An array containing an object for each segment of
                      the ELF file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `elf.segments.*`.'
                    flat_name: threat.indicator.file.elf.segments
                    intermediate: false
                    level: extended
                    name: segments
                    node_name: segments
                    normalize:
                    - array
                    original_fieldset: elf
                    short: ELF object segment list.
                    type: nested
                  fields:
                    sections:
                      field_details:
                        dashed_name: threat-indicator-file-elf-segments-sections
                        description: ELF object segment sections.
                        flat_name: threat.indicator.file.elf.segments.sections
                        ignore_above: 1024
                        level: extended
                        name: segments.sections
                        node_name: sections
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment sections.
                        type: keyword
                    type:
                      field_details:
                        dashed_name: threat-indicator-file-elf-segments-type
                        description: ELF object segment type.
                        flat_name: threat.indicator.file.elf.segments.type
                        ignore_above: 1024
                        level: extended
                        name: segments.type
                        node_name: type
                        normalize: []
                        original_fieldset: elf
                        short: ELF object segment type.
                        type: keyword
                shared_libraries:
                  field_details:
                    dashed_name: threat-indicator-file-elf-shared-libraries
                    description: List of shared libraries used by this ELF object.
                    flat_name: threat.indicator.file.elf.shared_libraries
                    ignore_above: 1024
                    level: extended
                    name: shared_libraries
                    node_name: shared_libraries
                    normalize:
                    - array
                    original_fieldset: elf
                    short: List of shared libraries used by this ELF object.
                    type: keyword
                telfhash:
                  field_details:
                    dashed_name: threat-indicator-file-elf-telfhash
                    description: telfhash symbol hash for ELF file.
                    flat_name: threat.indicator.file.elf.telfhash
                    ignore_above: 1024
                    level: extended
                    name: telfhash
                    node_name: telfhash
                    normalize: []
                    original_fieldset: elf
                    short: telfhash hash for ELF file.
                    type: keyword
            extension:
              field_details:
                dashed_name: threat-indicator-file-extension
                description: 'File extension, excluding the leading dot.

                  Note that when the file name has multiple extensions (example.tar.gz),
                  only the last one should be captured ("gz", not "tar.gz").'
                example: png
                flat_name: threat.indicator.file.extension
                ignore_above: 1024
                level: extended
                name: extension
                node_name: extension
                normalize: []
                original_fieldset: file
                short: File extension, excluding the leading dot.
                type: keyword
            fork_name:
              field_details:
                dashed_name: threat-indicator-file-fork-name
                description: 'A fork is additional data associated with a filesystem
                  object.

                  On Linux, a resource fork is used to store additional data with
                  a filesystem object. A file always has at least one fork for the
                  data portion, and additional forks may exist.

                  On NTFS, this is analogous to an Alternate Data Stream (ADS), and
                  the default data stream for a file is just called $DATA. Zone.Identifier
                  is commonly used by Windows to track contents downloaded from the
                  Internet. An ADS is typically of the form: `C:\path\to\filename.extension:some_fork_name`,
                  and `some_fork_name` is the value that should populate `fork_name`.
                  `filename.extension` should populate `file.name`, and `extension`
                  should populate `file.extension`. The full path, `file.path`, will
                  include the fork name.'
                example: Zone.Identifer
                flat_name: threat.indicator.file.fork_name
                ignore_above: 1024
                level: extended
                name: fork_name
                node_name: fork_name
                normalize: []
                original_fieldset: file
                short: A fork is additional data associated with a filesystem object.
                type: keyword
            gid:
              field_details:
                dashed_name: threat-indicator-file-gid
                description: Primary group ID (GID) of the file.
                example: '1001'
                flat_name: threat.indicator.file.gid
                ignore_above: 1024
                level: extended
                name: gid
                node_name: gid
                normalize: []
                original_fieldset: file
                short: Primary group ID (GID) of the file.
                type: keyword
            group:
              field_details:
                dashed_name: threat-indicator-file-group
                description: Primary group name of the file.
                example: alice
                flat_name: threat.indicator.file.group
                ignore_above: 1024
                level: extended
                name: group
                node_name: group
                normalize: []
                original_fieldset: file
                short: Primary group name of the file.
                type: keyword
            hash:
              field_details:
                dashed_name: threat-indicator-file-hash
                description: 'The hash fields represent different bitwise hash algorithms
                  and their values.

                  Field names for common hashes (e.g. MD5, SHA1) are predefined. Add
                  fields for other hashes by lowercasing the hash algorithm name and
                  using underscore separators as appropriate (snake case, e.g. sha3_512).

                  Note that this fieldset is used for common hashes that may be computed
                  over a range of generic bytes. Entity-specific hashes such as ja3
                  or imphash are placed in the fieldsets to which they relate (tls
                  and pe, respectively).'
                flat_name: threat.indicator.file.hash
                intermediate: true
                name: hash
                node_name: hash
                original_fieldset: hash
                short: Hashes, usually file hashes.
                type: group
              fields:
                md5:
                  field_details:
                    dashed_name: threat-indicator-file-hash-md5
                    description: MD5 hash.
                    flat_name: threat.indicator.file.hash.md5
                    ignore_above: 1024
                    level: extended
                    name: md5
                    node_name: md5
                    normalize: []
                    original_fieldset: hash
                    short: MD5 hash.
                    type: keyword
                sha1:
                  field_details:
                    dashed_name: threat-indicator-file-hash-sha1
                    description: SHA1 hash.
                    flat_name: threat.indicator.file.hash.sha1
                    ignore_above: 1024
                    level: extended
                    name: sha1
                    node_name: sha1
                    normalize: []
                    original_fieldset: hash
                    short: SHA1 hash.
                    type: keyword
                sha256:
                  field_details:
                    dashed_name: threat-indicator-file-hash-sha256
                    description: SHA256 hash.
                    flat_name: threat.indicator.file.hash.sha256
                    ignore_above: 1024
                    level: extended
                    name: sha256
                    node_name: sha256
                    normalize: []
                    original_fieldset: hash
                    short: SHA256 hash.
                    type: keyword
                sha384:
                  field_details:
                    dashed_name: threat-indicator-file-hash-sha384
                    description: SHA384 hash.
                    flat_name: threat.indicator.file.hash.sha384
                    ignore_above: 1024
                    level: extended
                    name: sha384
                    node_name: sha384
                    normalize: []
                    original_fieldset: hash
                    short: SHA384 hash.
                    type: keyword
                sha512:
                  field_details:
                    dashed_name: threat-indicator-file-hash-sha512
                    description: SHA512 hash.
                    flat_name: threat.indicator.file.hash.sha512
                    ignore_above: 1024
                    level: extended
                    name: sha512
                    node_name: sha512
                    normalize: []
                    original_fieldset: hash
                    short: SHA512 hash.
                    type: keyword
                ssdeep:
                  field_details:
                    dashed_name: threat-indicator-file-hash-ssdeep
                    description: SSDEEP hash.
                    flat_name: threat.indicator.file.hash.ssdeep
                    ignore_above: 1024
                    level: extended
                    name: ssdeep
                    node_name: ssdeep
                    normalize: []
                    original_fieldset: hash
                    short: SSDEEP hash.
                    type: keyword
                tlsh:
                  field_details:
                    dashed_name: threat-indicator-file-hash-tlsh
                    description: TLSH hash.
                    flat_name: threat.indicator.file.hash.tlsh
                    ignore_above: 1024
                    level: extended
                    name: tlsh
                    node_name: tlsh
                    normalize: []
                    original_fieldset: hash
                    short: TLSH hash.
                    type: keyword
            inode:
              field_details:
                dashed_name: threat-indicator-file-inode
                description: Inode representing the file in the filesystem.
                example: '256383'
                flat_name: threat.indicator.file.inode
                ignore_above: 1024
                level: extended
                name: inode
                node_name: inode
                normalize: []
                original_fieldset: file
                short: Inode representing the file in the filesystem.
                type: keyword
            mime_type:
              field_details:
                dashed_name: threat-indicator-file-mime-type
                description: MIME type should identify the format of the file or stream
                  of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA
                  official types], where possible. When more than one type is applicable,
                  the most specific type should be used.
                flat_name: threat.indicator.file.mime_type
                ignore_above: 1024
                level: extended
                name: mime_type
                node_name: mime_type
                normalize: []
                original_fieldset: file
                short: Media type of file, document, or arrangement of bytes.
                type: keyword
            mode:
              field_details:
                dashed_name: threat-indicator-file-mode
                description: Mode of the file in octal representation.
                example: '0640'
                flat_name: threat.indicator.file.mode
                ignore_above: 1024
                level: extended
                name: mode
                node_name: mode
                normalize: []
                original_fieldset: file
                short: Mode of the file in octal representation.
                type: keyword
            mtime:
              field_details:
                dashed_name: threat-indicator-file-mtime
                description: Last time the file content was modified.
                flat_name: threat.indicator.file.mtime
                level: extended
                name: mtime
                node_name: mtime
                normalize: []
                original_fieldset: file
                short: Last time the file content was modified.
                type: date
            name:
              field_details:
                dashed_name: threat-indicator-file-name
                description: Name of the file including the extension, without the
                  directory.
                example: example.png
                flat_name: threat.indicator.file.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: file
                short: Name of the file including the extension, without the directory.
                type: keyword
            owner:
              field_details:
                dashed_name: threat-indicator-file-owner
                description: File owner's username.
                example: alice
                flat_name: threat.indicator.file.owner
                ignore_above: 1024
                level: extended
                name: owner
                node_name: owner
                normalize: []
                original_fieldset: file
                short: File owner's username.
                type: keyword
            path:
              field_details:
                dashed_name: threat-indicator-file-path
                description: Full path to the file, including the file name. It should
                  include the drive letter, when appropriate.
                example: /home/alice/example.png
                flat_name: threat.indicator.file.path
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: threat.indicator.file.path.text
                  name: text
                  type: match_only_text
                name: path
                node_name: path
                normalize: []
                original_fieldset: file
                short: Full path to the file, including the file name.
                type: keyword
            pe:
              field_details:
                dashed_name: threat-indicator-file-pe
                description: These fields contain Windows Portable Executable (PE)
                  metadata.
                flat_name: threat.indicator.file.pe
                intermediate: true
                name: pe
                node_name: pe
                original_fieldset: pe
                short: These fields contain Windows Portable Executable (PE) metadata.
                type: group
              fields:
                architecture:
                  field_details:
                    dashed_name: threat-indicator-file-pe-architecture
                    description: CPU architecture target for the file.
                    example: x64
                    flat_name: threat.indicator.file.pe.architecture
                    ignore_above: 1024
                    level: extended
                    name: architecture
                    node_name: architecture
                    normalize: []
                    original_fieldset: pe
                    short: CPU architecture target for the file.
                    type: keyword
                company:
                  field_details:
                    dashed_name: threat-indicator-file-pe-company
                    description: Internal company name of the file, provided at compile-time.
                    example: Microsoft Corporation
                    flat_name: threat.indicator.file.pe.company
                    ignore_above: 1024
                    level: extended
                    name: company
                    node_name: company
                    normalize: []
                    original_fieldset: pe
                    short: Internal company name of the file, provided at compile-time.
                    type: keyword
                description:
                  field_details:
                    dashed_name: threat-indicator-file-pe-description
                    description: Internal description of the file, provided at compile-time.
                    example: Paint
                    flat_name: threat.indicator.file.pe.description
                    ignore_above: 1024
                    level: extended
                    name: description
                    node_name: description
                    normalize: []
                    original_fieldset: pe
                    short: Internal description of the file, provided at compile-time.
                    type: keyword
                file_version:
                  field_details:
                    dashed_name: threat-indicator-file-pe-file-version
                    description: Internal version of the file, provided at compile-time.
                    example: 6.3.9600.17415
                    flat_name: threat.indicator.file.pe.file_version
                    ignore_above: 1024
                    level: extended
                    name: file_version
                    node_name: file_version
                    normalize: []
                    original_fieldset: pe
                    short: Process name.
                    type: keyword
                go_import_hash:
                  field_details:
                    dashed_name: threat-indicator-file-pe-go-import-hash
                    description: 'A hash of the Go language imports in a PE file excluding
                      standard library imports. An import hash can be used to fingerprint
                      binaries even after recompilation or other code-level transformations
                      have occurred, which would change more traditional hash values.

                      The algorithm used to calculate the Go symbol hash and a reference
                      implementation are available [here](https://github.com/elastic/toutoumomoma).'
                    example: 10bddcb4cee42080f76c88d9ff964491
                    flat_name: threat.indicator.file.pe.go_import_hash
                    ignore_above: 1024
                    level: extended
                    name: go_import_hash
                    node_name: go_import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the Go language imports in a PE file.
                    type: keyword
                go_imports:
                  field_details:
                    dashed_name: threat-indicator-file-pe-go-imports
                    description: List of imported Go language element names and types.
                    flat_name: threat.indicator.file.pe.go_imports
                    level: extended
                    name: go_imports
                    node_name: go_imports
                    normalize: []
                    original_fieldset: pe
                    short: List of imported Go language element names and types.
                    type: flattened
                go_imports_names_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-pe-go-imports-names-entropy
                    description: Shannon entropy calculation from the list of Go imports.
                    flat_name: threat.indicator.file.pe.go_imports_names_entropy
                    format: number
                    level: extended
                    name: go_imports_names_entropy
                    node_name: go_imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of Go imports.
                    type: long
                go_imports_names_var_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-pe-go-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of Go imports.
                    flat_name: threat.indicator.file.pe.go_imports_names_var_entropy
                    format: number
                    level: extended
                    name: go_imports_names_var_entropy
                    node_name: go_imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of Go imports.
                    type: long
                go_stripped:
                  field_details:
                    dashed_name: threat-indicator-file-pe-go-stripped
                    description: Set to true if the file is a Go executable that has
                      had its symbols stripped or obfuscated and false if an unobfuscated
                      Go executable.
                    flat_name: threat.indicator.file.pe.go_stripped
                    level: extended
                    name: go_stripped
                    node_name: go_stripped
                    normalize: []
                    original_fieldset: pe
                    short: Whether the file is a stripped or obfuscated Go executable.
                    type: boolean
                imphash:
                  field_details:
                    dashed_name: threat-indicator-file-pe-imphash
                    description: 'A hash of the imports in a PE file. An imphash --
                      or import hash -- can be used to fingerprint binaries even after
                      recompilation or other code-level transformations have occurred,
                      which would change more traditional hash values.

                      Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
                    example: 0c6803c4e922103c4dca5963aad36ddf
                    flat_name: threat.indicator.file.pe.imphash
                    ignore_above: 1024
                    level: extended
                    name: imphash
                    node_name: imphash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                import_hash:
                  field_details:
                    dashed_name: threat-indicator-file-pe-import-hash
                    description: 'A hash of the imports in a PE file. An import hash
                      can be used to fingerprint binaries even after recompilation
                      or other code-level transformations have occurred, which would
                      change more traditional hash values.

                      This is a synonym for imphash.'
                    example: d41d8cd98f00b204e9800998ecf8427e
                    flat_name: threat.indicator.file.pe.import_hash
                    ignore_above: 1024
                    level: extended
                    name: import_hash
                    node_name: import_hash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the imports in a PE file.
                    type: keyword
                imports:
                  field_details:
                    dashed_name: threat-indicator-file-pe-imports
                    description: List of imported element names and types.
                    flat_name: threat.indicator.file.pe.imports
                    level: extended
                    name: imports
                    node_name: imports
                    normalize:
                    - array
                    original_fieldset: pe
                    short: List of imported element names and types.
                    type: flattened
                imports_names_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-pe-imports-names-entropy
                    description: Shannon entropy calculation from the list of imported
                      element names and types.
                    flat_name: threat.indicator.file.pe.imports_names_entropy
                    format: number
                    level: extended
                    name: imports_names_entropy
                    node_name: imports_names_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Shannon entropy calculation from the list of imported element
                      names and types.
                    type: long
                imports_names_var_entropy:
                  field_details:
                    dashed_name: threat-indicator-file-pe-imports-names-var-entropy
                    description: Variance for Shannon entropy calculation from the
                      list of imported element names and types.
                    flat_name: threat.indicator.file.pe.imports_names_var_entropy
                    format: number
                    level: extended
                    name: imports_names_var_entropy
                    node_name: imports_names_var_entropy
                    normalize: []
                    original_fieldset: pe
                    short: Variance for Shannon entropy calculation from the list
                      of imported element names and types.
                    type: long
                original_file_name:
                  field_details:
                    dashed_name: threat-indicator-file-pe-original-file-name
                    description: Internal name of the file, provided at compile-time.
                    example: MSPAINT.EXE
                    flat_name: threat.indicator.file.pe.original_file_name
                    ignore_above: 1024
                    level: extended
                    name: original_file_name
                    node_name: original_file_name
                    normalize: []
                    original_fieldset: pe
                    short: Internal name of the file, provided at compile-time.
                    type: keyword
                pehash:
                  field_details:
                    dashed_name: threat-indicator-file-pe-pehash
                    description: 'A hash of the PE header and data from one or more
                      PE sections. An pehash can be used to cluster files by transforming
                      structural information about a file into a hash value.

                      Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
                    example: 73ff189b63cd6be375a7ff25179a38d347651975
                    flat_name: threat.indicator.file.pe.pehash
                    ignore_above: 1024
                    level: extended
                    name: pehash
                    node_name: pehash
                    normalize: []
                    original_fieldset: pe
                    short: A hash of the PE header and data from one or more PE sections.
                    type: keyword
                product:
                  field_details:
                    dashed_name: threat-indicator-file-pe-product
                    description: Internal product name of the file, provided at compile-time.
                    example: "Microsoft\xAE Windows\xAE Operating System"
                    flat_name: threat.indicator.file.pe.product
                    ignore_above: 1024
                    level: extended
                    name: product
                    node_name: product
                    normalize: []
                    original_fieldset: pe
                    short: Internal product name of the file, provided at compile-time.
                    type: keyword
                sections:
                  field_details:
                    dashed_name: threat-indicator-file-pe-sections
                    description: 'An array containing an object for each section of
                      the PE file.

                      The keys that should be present in these objects are defined
                      by sub-fields underneath `pe.sections.*`.'
                    flat_name: threat.indicator.file.pe.sections
                    intermediate: false
                    level: extended
                    name: sections
                    node_name: sections
                    normalize:
                    - array
                    original_fieldset: pe
                    short: Section information of the PE file.
                    type: nested
                  fields:
                    entropy:
                      field_details:
                        dashed_name: threat-indicator-file-pe-sections-entropy
                        description: Shannon entropy calculation from the section.
                        flat_name: threat.indicator.file.pe.sections.entropy
                        format: number
                        level: extended
                        name: sections.entropy
                        node_name: entropy
                        normalize: []
                        original_fieldset: pe
                        short: Shannon entropy calculation from the section.
                        type: long
                    name:
                      field_details:
                        dashed_name: threat-indicator-file-pe-sections-name
                        description: PE Section List name.
                        flat_name: threat.indicator.file.pe.sections.name
                        ignore_above: 1024
                        level: extended
                        name: sections.name
                        node_name: name
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List name.
                        type: keyword
                    physical_size:
                      field_details:
                        dashed_name: threat-indicator-file-pe-sections-physical-size
                        description: PE Section List physical size.
                        flat_name: threat.indicator.file.pe.sections.physical_size
                        format: bytes
                        level: extended
                        name: sections.physical_size
                        node_name: physical_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List physical size.
                        type: long
                    var_entropy:
                      field_details:
                        dashed_name: threat-indicator-file-pe-sections-var-entropy
                        description: Variance for Shannon entropy calculation from
                          the section.
                        flat_name: threat.indicator.file.pe.sections.var_entropy
                        format: number
                        level: extended
                        name: sections.var_entropy
                        node_name: var_entropy
                        normalize: []
                        original_fieldset: pe
                        short: Variance for Shannon entropy calculation from the section.
                        type: long
                    virtual_size:
                      field_details:
                        dashed_name: threat-indicator-file-pe-sections-virtual-size
                        description: PE Section List virtual size. This is always
                          the same as `physical_size`.
                        flat_name: threat.indicator.file.pe.sections.virtual_size
                        format: string
                        level: extended
                        name: sections.virtual_size
                        node_name: virtual_size
                        normalize: []
                        original_fieldset: pe
                        short: PE Section List virtual size. This is always the same
                          as `physical_size`.
                        type: long
            size:
              field_details:
                dashed_name: threat-indicator-file-size
                description: 'File size in bytes.

                  Only relevant when `file.type` is "file".'
                example: 16384
                flat_name: threat.indicator.file.size
                level: extended
                name: size
                node_name: size
                normalize: []
                original_fieldset: file
                short: File size in bytes.
                type: long
            target_path:
              field_details:
                dashed_name: threat-indicator-file-target-path
                description: Target path for symlinks.
                flat_name: threat.indicator.file.target_path
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: threat.indicator.file.target_path.text
                  name: text
                  type: match_only_text
                name: target_path
                node_name: target_path
                normalize: []
                original_fieldset: file
                short: Target path for symlinks.
                type: keyword
            type:
              field_details:
                dashed_name: threat-indicator-file-type
                description: File type (file, dir, or symlink).
                example: file
                flat_name: threat.indicator.file.type
                ignore_above: 1024
                level: extended
                name: type
                node_name: type
                normalize: []
                original_fieldset: file
                short: File type (file, dir, or symlink).
                type: keyword
            uid:
              field_details:
                dashed_name: threat-indicator-file-uid
                description: The user ID (UID) or security identifier (SID) of the
                  file owner.
                example: '1001'
                flat_name: threat.indicator.file.uid
                ignore_above: 1024
                level: extended
                name: uid
                node_name: uid
                normalize: []
                original_fieldset: file
                short: The user ID (UID) or security identifier (SID) of the file
                  owner.
                type: keyword
            x509:
              field_details:
                dashed_name: threat-indicator-file-x509
                description: 'This implements the common core fields for x509 certificates.
                  This information is likely logged with TLS sessions, digital signatures
                  found in executable binaries, S/MIME information in email bodies,
                  or analysis of files on disk.

                  When the certificate relates to a file, use the fields at `file.x509`.
                  When hashes of the DER-encoded certificate are available, the `hash`
                  data set should be populated as well (e.g. `file.hash.sha256`).

                  Events that contain certificate information about network connections,
                  should use the x509 fields under the relevant TLS fields: `tls.server.x509`
                  and/or `tls.client.x509`.'
                flat_name: threat.indicator.file.x509
                intermediate: true
                name: x509
                node_name: x509
                original_fieldset: x509
                short: These fields contain x509 certificate metadata.
                type: group
              fields:
                alternative_names:
                  field_details:
                    dashed_name: threat-indicator-file-x509-alternative-names
                    description: List of subject alternative names (SAN). Name types
                      vary by certificate authority and certificate type but commonly
                      contain IP addresses, DNS names (and wildcards), and email addresses.
                    example: '*.elastic.co'
                    flat_name: threat.indicator.file.x509.alternative_names
                    ignore_above: 1024
                    level: extended
                    name: alternative_names
                    node_name: alternative_names
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of subject alternative names (SAN).
                    type: keyword
                issuer:
                  field_details:
                    dashed_name: threat-indicator-file-x509-issuer
                    flat_name: threat.indicator.file.x509.issuer
                    intermediate: true
                    name: issuer
                    node_name: issuer
                    original_fieldset: x509
                    type: object
                  fields:
                    common_name:
                      field_details:
                        dashed_name: threat-indicator-file-x509-issuer-common-name
                        description: List of common name (CN) of issuing certificate
                          authority.
                        example: Example SHA2 High Assurance Server CA
                        flat_name: threat.indicator.file.x509.issuer.common_name
                        ignore_above: 1024
                        level: extended
                        name: issuer.common_name
                        node_name: common_name
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of common name (CN) of issuing certificate authority.
                        type: keyword
                    country:
                      field_details:
                        dashed_name: threat-indicator-file-x509-issuer-country
                        description: List of country \(C) codes
                        example: US
                        flat_name: threat.indicator.file.x509.issuer.country
                        ignore_above: 1024
                        level: extended
                        name: issuer.country
                        node_name: country
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of country \(C) codes
                        type: keyword
                    distinguished_name:
                      field_details:
                        dashed_name: threat-indicator-file-x509-issuer-distinguished-name
                        description: Distinguished name (DN) of issuing certificate
                          authority.
                        example: C=US, O=Example Inc, OU=www.example.com, CN=Example
                          SHA2 High Assurance Server CA
                        flat_name: threat.indicator.file.x509.issuer.distinguished_name
                        ignore_above: 1024
                        level: extended
                        name: issuer.distinguished_name
                        node_name: distinguished_name
                        normalize: []
                        original_fieldset: x509
                        short: Distinguished name (DN) of issuing certificate authority.
                        type: keyword
                    locality:
                      field_details:
                        dashed_name: threat-indicator-file-x509-issuer-locality
                        description: List of locality names (L)
                        example: Mountain View
                        flat_name: threat.indicator.file.x509.issuer.locality
                        ignore_above: 1024
                        level: extended
                        name: issuer.locality
                        node_name: locality
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of locality names (L)
                        type: keyword
                    organization:
                      field_details:
                        dashed_name: threat-indicator-file-x509-issuer-organization
                        description: List of organizations (O) of issuing certificate
                          authority.
                        example: Example Inc
                        flat_name: threat.indicator.file.x509.issuer.organization
                        ignore_above: 1024
                        level: extended
                        name: issuer.organization
                        node_name: organization
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizations (O) of issuing certificate authority.
                        type: keyword
                    organizational_unit:
                      field_details:
                        dashed_name: threat-indicator-file-x509-issuer-organizational-unit
                        description: List of organizational units (OU) of issuing
                          certificate authority.
                        example: www.example.com
                        flat_name: threat.indicator.file.x509.issuer.organizational_unit
                        ignore_above: 1024
                        level: extended
                        name: issuer.organizational_unit
                        node_name: organizational_unit
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizational units (OU) of issuing certificate
                          authority.
                        type: keyword
                    state_or_province:
                      field_details:
                        dashed_name: threat-indicator-file-x509-issuer-state-or-province
                        description: List of state or province names (ST, S, or P)
                        example: California
                        flat_name: threat.indicator.file.x509.issuer.state_or_province
                        ignore_above: 1024
                        level: extended
                        name: issuer.state_or_province
                        node_name: state_or_province
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of state or province names (ST, S, or P)
                        type: keyword
                not_after:
                  field_details:
                    dashed_name: threat-indicator-file-x509-not-after
                    description: Time at which the certificate is no longer considered
                      valid.
                    example: '2020-07-16T03:15:39Z'
                    flat_name: threat.indicator.file.x509.not_after
                    level: extended
                    name: not_after
                    node_name: not_after
                    normalize: []
                    original_fieldset: x509
                    short: Time at which the certificate is no longer considered valid.
                    type: date
                not_before:
                  field_details:
                    dashed_name: threat-indicator-file-x509-not-before
                    description: Time at which the certificate is first considered
                      valid.
                    example: '2019-08-16T01:40:25Z'
                    flat_name: threat.indicator.file.x509.not_before
                    level: extended
                    name: not_before
                    node_name: not_before
                    normalize: []
                    original_fieldset: x509
                    short: Time at which the certificate is first considered valid.
                    type: date
                public_key_algorithm:
                  field_details:
                    dashed_name: threat-indicator-file-x509-public-key-algorithm
                    description: Algorithm used to generate the public key.
                    example: RSA
                    flat_name: threat.indicator.file.x509.public_key_algorithm
                    ignore_above: 1024
                    level: extended
                    name: public_key_algorithm
                    node_name: public_key_algorithm
                    normalize: []
                    original_fieldset: x509
                    short: Algorithm used to generate the public key.
                    type: keyword
                public_key_curve:
                  field_details:
                    dashed_name: threat-indicator-file-x509-public-key-curve
                    description: The curve used by the elliptic curve public key algorithm.
                      This is algorithm specific.
                    example: nistp521
                    flat_name: threat.indicator.file.x509.public_key_curve
                    ignore_above: 1024
                    level: extended
                    name: public_key_curve
                    node_name: public_key_curve
                    normalize: []
                    original_fieldset: x509
                    short: The curve used by the elliptic curve public key algorithm.
                      This is algorithm specific.
                    type: keyword
                public_key_exponent:
                  field_details:
                    dashed_name: threat-indicator-file-x509-public-key-exponent
                    description: Exponent used to derive the public key. This is algorithm
                      specific.
                    doc_values: false
                    example: 65537
                    flat_name: threat.indicator.file.x509.public_key_exponent
                    index: false
                    level: extended
                    name: public_key_exponent
                    node_name: public_key_exponent
                    normalize: []
                    original_fieldset: x509
                    short: Exponent used to derive the public key. This is algorithm
                      specific.
                    type: long
                public_key_size:
                  field_details:
                    dashed_name: threat-indicator-file-x509-public-key-size
                    description: The size of the public key space in bits.
                    example: 2048
                    flat_name: threat.indicator.file.x509.public_key_size
                    level: extended
                    name: public_key_size
                    node_name: public_key_size
                    normalize: []
                    original_fieldset: x509
                    short: The size of the public key space in bits.
                    type: long
                serial_number:
                  field_details:
                    dashed_name: threat-indicator-file-x509-serial-number
                    description: Unique serial number issued by the certificate authority.
                      For consistency, if this value is alphanumeric, it should be
                      formatted without colons and uppercase characters.
                    example: 55FBB9C7DEBF09809D12CCAA
                    flat_name: threat.indicator.file.x509.serial_number
                    ignore_above: 1024
                    level: extended
                    name: serial_number
                    node_name: serial_number
                    normalize: []
                    original_fieldset: x509
                    short: Unique serial number issued by the certificate authority.
                    type: keyword
                signature_algorithm:
                  field_details:
                    dashed_name: threat-indicator-file-x509-signature-algorithm
                    description: Identifier for certificate signature algorithm. We
                      recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
                    example: SHA256-RSA
                    flat_name: threat.indicator.file.x509.signature_algorithm
                    ignore_above: 1024
                    level: extended
                    name: signature_algorithm
                    node_name: signature_algorithm
                    normalize: []
                    original_fieldset: x509
                    short: Identifier for certificate signature algorithm.
                    type: keyword
                subject:
                  field_details:
                    dashed_name: threat-indicator-file-x509-subject
                    flat_name: threat.indicator.file.x509.subject
                    intermediate: true
                    name: subject
                    node_name: subject
                    original_fieldset: x509
                    type: object
                  fields:
                    common_name:
                      field_details:
                        dashed_name: threat-indicator-file-x509-subject-common-name
                        description: List of common names (CN) of subject.
                        example: shared.global.example.net
                        flat_name: threat.indicator.file.x509.subject.common_name
                        ignore_above: 1024
                        level: extended
                        name: subject.common_name
                        node_name: common_name
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of common names (CN) of subject.
                        type: keyword
                    country:
                      field_details:
                        dashed_name: threat-indicator-file-x509-subject-country
                        description: List of country \(C) code
                        example: US
                        flat_name: threat.indicator.file.x509.subject.country
                        ignore_above: 1024
                        level: extended
                        name: subject.country
                        node_name: country
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of country \(C) code
                        type: keyword
                    distinguished_name:
                      field_details:
                        dashed_name: threat-indicator-file-x509-subject-distinguished-name
                        description: Distinguished name (DN) of the certificate subject
                          entity.
                        example: C=US, ST=California, L=San Francisco, O=Example,
                          Inc., CN=shared.global.example.net
                        flat_name: threat.indicator.file.x509.subject.distinguished_name
                        ignore_above: 1024
                        level: extended
                        name: subject.distinguished_name
                        node_name: distinguished_name
                        normalize: []
                        original_fieldset: x509
                        short: Distinguished name (DN) of the certificate subject
                          entity.
                        type: keyword
                    locality:
                      field_details:
                        dashed_name: threat-indicator-file-x509-subject-locality
                        description: List of locality names (L)
                        example: San Francisco
                        flat_name: threat.indicator.file.x509.subject.locality
                        ignore_above: 1024
                        level: extended
                        name: subject.locality
                        node_name: locality
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of locality names (L)
                        type: keyword
                    organization:
                      field_details:
                        dashed_name: threat-indicator-file-x509-subject-organization
                        description: List of organizations (O) of subject.
                        example: Example, Inc.
                        flat_name: threat.indicator.file.x509.subject.organization
                        ignore_above: 1024
                        level: extended
                        name: subject.organization
                        node_name: organization
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizations (O) of subject.
                        type: keyword
                    organizational_unit:
                      field_details:
                        dashed_name: threat-indicator-file-x509-subject-organizational-unit
                        description: List of organizational units (OU) of subject.
                        flat_name: threat.indicator.file.x509.subject.organizational_unit
                        ignore_above: 1024
                        level: extended
                        name: subject.organizational_unit
                        node_name: organizational_unit
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of organizational units (OU) of subject.
                        type: keyword
                    state_or_province:
                      field_details:
                        dashed_name: threat-indicator-file-x509-subject-state-or-province
                        description: List of state or province names (ST, S, or P)
                        example: California
                        flat_name: threat.indicator.file.x509.subject.state_or_province
                        ignore_above: 1024
                        level: extended
                        name: subject.state_or_province
                        node_name: state_or_province
                        normalize:
                        - array
                        original_fieldset: x509
                        short: List of state or province names (ST, S, or P)
                        type: keyword
                version_number:
                  field_details:
                    dashed_name: threat-indicator-file-x509-version-number
                    description: Version of x509 format.
                    example: 3
                    flat_name: threat.indicator.file.x509.version_number
                    ignore_above: 1024
                    level: extended
                    name: version_number
                    node_name: version_number
                    normalize: []
                    original_fieldset: x509
                    short: Version of x509 format.
                    type: keyword
        first_seen:
          field_details:
            dashed_name: threat-indicator-first-seen
            description: The date and time when intelligence source first reported
              sighting this indicator.
            example: '2020-11-05T17:25:47.000Z'
            flat_name: threat.indicator.first_seen
            level: extended
            name: indicator.first_seen
            node_name: first_seen
            normalize: []
            short: Date/time indicator was first reported.
            type: date
        geo:
          field_details:
            dashed_name: threat-indicator-geo
            description: 'Geo fields can carry data about a specific location related
              to an event.

              This geolocation information can be derived from techniques such as
              Geo IP, or be user-supplied.'
            flat_name: threat.indicator.geo
            intermediate: true
            name: geo
            node_name: geo
            original_fieldset: geo
            short: Fields describing a location.
            type: group
          fields:
            city_name:
              field_details:
                dashed_name: threat-indicator-geo-city-name
                description: City name.
                example: Montreal
                flat_name: threat.indicator.geo.city_name
                ignore_above: 1024
                level: core
                name: city_name
                node_name: city_name
                normalize: []
                original_fieldset: geo
                short: City name.
                type: keyword
            continent_code:
              field_details:
                dashed_name: threat-indicator-geo-continent-code
                description: Two-letter code representing continent's name.
                example: NA
                flat_name: threat.indicator.geo.continent_code
                ignore_above: 1024
                level: core
                name: continent_code
                node_name: continent_code
                normalize: []
                original_fieldset: geo
                short: Continent code.
                type: keyword
            continent_name:
              field_details:
                dashed_name: threat-indicator-geo-continent-name
                description: Name of the continent.
                example: North America
                flat_name: threat.indicator.geo.continent_name
                ignore_above: 1024
                level: core
                name: continent_name
                node_name: continent_name
                normalize: []
                original_fieldset: geo
                short: Name of the continent.
                type: keyword
            country_iso_code:
              field_details:
                dashed_name: threat-indicator-geo-country-iso-code
                description: Country ISO code.
                example: CA
                flat_name: threat.indicator.geo.country_iso_code
                ignore_above: 1024
                level: core
                name: country_iso_code
                node_name: country_iso_code
                normalize: []
                original_fieldset: geo
                short: Country ISO code.
                type: keyword
            country_name:
              field_details:
                dashed_name: threat-indicator-geo-country-name
                description: Country name.
                example: Canada
                flat_name: threat.indicator.geo.country_name
                ignore_above: 1024
                level: core
                name: country_name
                node_name: country_name
                normalize: []
                original_fieldset: geo
                short: Country name.
                type: keyword
            location:
              field_details:
                dashed_name: threat-indicator-geo-location
                description: Longitude and latitude.
                example: '{ "lon": -73.614830, "lat": 45.505918 }'
                flat_name: threat.indicator.geo.location
                level: core
                name: location
                node_name: location
                normalize: []
                original_fieldset: geo
                short: Longitude and latitude.
                type: geo_point
            name:
              field_details:
                dashed_name: threat-indicator-geo-name
                description: 'User-defined description of a location, at the level
                  of granularity they care about.

                  Could be the name of their data centers, the floor number, if this
                  describes a local physical entity, city names.

                  Not typically used in automated geolocation.'
                example: boston-dc
                flat_name: threat.indicator.geo.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: geo
                short: User-defined description of a location.
                type: keyword
            postal_code:
              field_details:
                dashed_name: threat-indicator-geo-postal-code
                description: 'Postal code associated with the location.

                  Values appropriate for this field may also be known as a postcode
                  or ZIP code and will vary widely from country to country.'
                example: 94040
                flat_name: threat.indicator.geo.postal_code
                ignore_above: 1024
                level: core
                name: postal_code
                node_name: postal_code
                normalize: []
                original_fieldset: geo
                short: Postal code.
                type: keyword
            region_iso_code:
              field_details:
                dashed_name: threat-indicator-geo-region-iso-code
                description: Region ISO code.
                example: CA-QC
                flat_name: threat.indicator.geo.region_iso_code
                ignore_above: 1024
                level: core
                name: region_iso_code
                node_name: region_iso_code
                normalize: []
                original_fieldset: geo
                short: Region ISO code.
                type: keyword
            region_name:
              field_details:
                dashed_name: threat-indicator-geo-region-name
                description: Region name.
                example: Quebec
                flat_name: threat.indicator.geo.region_name
                ignore_above: 1024
                level: core
                name: region_name
                node_name: region_name
                normalize: []
                original_fieldset: geo
                short: Region name.
                type: keyword
            timezone:
              field_details:
                dashed_name: threat-indicator-geo-timezone
                description: The time zone of the location, such as IANA time zone
                  name.
                example: America/Argentina/Buenos_Aires
                flat_name: threat.indicator.geo.timezone
                ignore_above: 1024
                level: core
                name: timezone
                node_name: timezone
                normalize: []
                original_fieldset: geo
                short: Time zone.
                type: keyword
        ip:
          field_details:
            dashed_name: threat-indicator-ip
            description: Identifies a threat indicator as an IP address (irrespective
              of direction).
            example: 1.2.3.4
            flat_name: threat.indicator.ip
            level: extended
            name: indicator.ip
            node_name: ip
            normalize: []
            short: Indicator IP address
            type: ip
        last_seen:
          field_details:
            dashed_name: threat-indicator-last-seen
            description: The date and time when intelligence source last reported
              sighting this indicator.
            example: '2020-11-05T17:25:47.000Z'
            flat_name: threat.indicator.last_seen
            level: extended
            name: indicator.last_seen
            node_name: last_seen
            normalize: []
            short: Date/time indicator was last reported.
            type: date
        marking:
          field_details:
            dashed_name: threat-indicator-marking
            flat_name: threat.indicator.marking
            intermediate: true
            name: indicator.marking
            node_name: marking
            type: object
          fields:
            tlp:
              field_details:
                dashed_name: threat-indicator-marking-tlp
                description: Traffic Light Protocol sharing markings.
                example: CLEAR
                expected_values:
                - WHITE
                - CLEAR
                - GREEN
                - AMBER
                - AMBER+STRICT
                - RED
                flat_name: threat.indicator.marking.tlp
                ignore_above: 1024
                level: extended
                name: indicator.marking.tlp
                node_name: tlp
                normalize: []
                short: Indicator TLP marking
                type: keyword
            tlp_version:
              field_details:
                dashed_name: threat-indicator-marking-tlp-version
                description: Traffic Light Protocol version.
                example: 2.0
                flat_name: threat.indicator.marking.tlp_version
                ignore_above: 1024
                level: extended
                name: indicator.marking.tlp_version
                node_name: tlp_version
                normalize: []
                short: Indicator TLP version
                type: keyword
        modified_at:
          field_details:
            dashed_name: threat-indicator-modified-at
            description: The date and time when intelligence source last modified
              information for this indicator.
            example: '2020-11-05T17:25:47.000Z'
            flat_name: threat.indicator.modified_at
            level: extended
            name: indicator.modified_at
            node_name: modified_at
            normalize: []
            short: Date/time indicator was last updated.
            type: date
        name:
          field_details:
            dashed_name: threat-indicator-name
            description: 'The display name indicator in an UI friendly format

              URL, IP address, email address, registry key, port number, hash value,
              or other relevant name can serve as the display name.'
            example: 5.2.75.227
            flat_name: threat.indicator.name
            ignore_above: 1024
            level: extended
            name: indicator.name
            node_name: name
            normalize: []
            short: Indicator display name
            type: keyword
        port:
          field_details:
            dashed_name: threat-indicator-port
            description: Identifies a threat indicator as a port number (irrespective
              of direction).
            example: 443
            flat_name: threat.indicator.port
            level: extended
            name: indicator.port
            node_name: port
            normalize: []
            short: Indicator port
            type: long
        provider:
          field_details:
            dashed_name: threat-indicator-provider
            description: The name of the indicator's provider.
            example: lrz_urlhaus
            flat_name: threat.indicator.provider
            ignore_above: 1024
            level: extended
            name: indicator.provider
            node_name: provider
            normalize: []
            short: Indicator provider
            type: keyword
        reference:
          field_details:
            dashed_name: threat-indicator-reference
            description: Reference URL linking to additional information about this
              indicator.
            example: https://system.example.com/indicator/0001234
            flat_name: threat.indicator.reference
            ignore_above: 1024
            level: extended
            name: indicator.reference
            node_name: reference
            normalize: []
            short: Indicator reference URL
            type: keyword
        registry:
          field_details:
            dashed_name: threat-indicator-registry
            description: Fields related to Windows Registry operations.
            flat_name: threat.indicator.registry
            intermediate: true
            name: registry
            node_name: registry
            original_fieldset: registry
            short: Fields related to Windows Registry operations.
            type: group
          fields:
            data:
              field_details:
                dashed_name: threat-indicator-registry-data
                flat_name: threat.indicator.registry.data
                intermediate: true
                name: data
                node_name: data
                original_fieldset: registry
                type: object
              fields:
                bytes:
                  field_details:
                    dashed_name: threat-indicator-registry-data-bytes
                    description: 'Original bytes written with base64 encoding.

                      For Windows registry operations, such as SetValueEx and RegQueryValueEx,
                      this corresponds to the data pointed by `lp_data`. This is optional
                      but provides better recoverability and should be populated for
                      REG_BINARY encoded values.'
                    example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=
                    flat_name: threat.indicator.registry.data.bytes
                    ignore_above: 1024
                    level: extended
                    name: data.bytes
                    node_name: bytes
                    normalize: []
                    original_fieldset: registry
                    short: Original bytes written with base64 encoding.
                    type: keyword
                strings:
                  field_details:
                    dashed_name: threat-indicator-registry-data-strings
                    description: 'Content when writing string types.

                      Populated as an array when writing string data to the registry.
                      For single string registry types (REG_SZ, REG_EXPAND_SZ), this
                      should be an array with one string. For sequences of string
                      with REG_MULTI_SZ, this array will be variable length. For numeric
                      data, such as REG_DWORD and REG_QWORD, this should be populated
                      with the decimal representation (e.g `"1"`).'
                    example: '["C:\rta\red_ttp\bin\myapp.exe"]'
                    flat_name: threat.indicator.registry.data.strings
                    level: core
                    name: data.strings
                    node_name: strings
                    normalize:
                    - array
                    original_fieldset: registry
                    short: List of strings representing what was written to the registry.
                    type: wildcard
                type:
                  field_details:
                    dashed_name: threat-indicator-registry-data-type
                    description: Standard registry type for encoding contents
                    example: REG_SZ
                    flat_name: threat.indicator.registry.data.type
                    ignore_above: 1024
                    level: core
                    name: data.type
                    node_name: type
                    normalize: []
                    original_fieldset: registry
                    short: Standard registry type for encoding contents
                    type: keyword
            hive:
              field_details:
                dashed_name: threat-indicator-registry-hive
                description: Abbreviated name for the hive.
                example: HKLM
                flat_name: threat.indicator.registry.hive
                ignore_above: 1024
                level: core
                name: hive
                node_name: hive
                normalize: []
                original_fieldset: registry
                short: Abbreviated name for the hive.
                type: keyword
            key:
              field_details:
                dashed_name: threat-indicator-registry-key
                description: Hive-relative path of keys.
                example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution
                  Options\winword.exe
                flat_name: threat.indicator.registry.key
                ignore_above: 1024
                level: core
                name: key
                node_name: key
                normalize: []
                original_fieldset: registry
                short: Hive-relative path of keys.
                type: keyword
            path:
              field_details:
                dashed_name: threat-indicator-registry-path
                description: Full path, including hive, key and value
                example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File
                  Execution Options\winword.exe\Debugger
                flat_name: threat.indicator.registry.path
                ignore_above: 1024
                level: core
                name: path
                node_name: path
                normalize: []
                original_fieldset: registry
                short: Full path, including hive, key and value
                type: keyword
            value:
              field_details:
                dashed_name: threat-indicator-registry-value
                description: Name of the value written.
                example: Debugger
                flat_name: threat.indicator.registry.value
                ignore_above: 1024
                level: core
                name: value
                node_name: value
                normalize: []
                original_fieldset: registry
                short: Name of the value written.
                type: keyword
        scanner_stats:
          field_details:
            dashed_name: threat-indicator-scanner-stats
            description: Count of AV/EDR vendors that successfully detected malicious
              file or URL.
            example: 4
            flat_name: threat.indicator.scanner_stats
            level: extended
            name: indicator.scanner_stats
            node_name: scanner_stats
            normalize: []
            short: Scanner statistics
            type: long
        sightings:
          field_details:
            dashed_name: threat-indicator-sightings
            description: Number of times this indicator was observed conducting threat
              activity.
            example: 20
            flat_name: threat.indicator.sightings
            level: extended
            name: indicator.sightings
            node_name: sightings
            normalize: []
            short: Number of times indicator observed
            type: long
        type:
          field_details:
            dashed_name: threat-indicator-type
            description: Type of indicator as represented by Cyber Observable in STIX
              2.0.
            example: ipv4-addr
            expected_values:
            - autonomous-system
            - artifact
            - directory
            - domain-name
            - email-addr
            - file
            - ipv4-addr
            - ipv6-addr
            - mac-addr
            - mutex
            - port
            - process
            - software
            - url
            - user-account
            - windows-registry-key
            - x509-certificate
            flat_name: threat.indicator.type
            ignore_above: 1024
            level: extended
            name: indicator.type
            node_name: type
            normalize: []
            short: Type of indicator
            type: keyword
        url:
          field_details:
            dashed_name: threat-indicator-url
            description: URL fields provide support for complete or partial URLs,
              and supports the breaking down into scheme, domain, path, and so on.
            flat_name: threat.indicator.url
            intermediate: true
            name: url
            node_name: url
            original_fieldset: url
            short: Fields that let you store URLs in various forms.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: threat-indicator-url-domain
                description: 'Domain of the url, such as "www.elastic.co".

                  In some cases a URL may refer to an IP and/or port directly, without
                  a domain name. In this case, the IP address would go to the `domain`
                  field.

                  If the URL contains a literal IPv6 address enclosed by `[` and `]`
                  (IETF RFC 2732), the `[` and `]` characters should also be captured
                  in the `domain` field.'
                example: www.elastic.co
                flat_name: threat.indicator.url.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: url
                short: Domain of the url.
                type: keyword
            extension:
              field_details:
                dashed_name: threat-indicator-url-extension
                description: 'The field contains the file extension from the original
                  request url, excluding the leading dot.

                  The file extension is only set if it exists, as not every url has
                  a file extension.

                  The leading period must not be included. For example, the value
                  must be "png", not ".png".

                  Note that when the file name has multiple extensions (example.tar.gz),
                  only the last one should be captured ("gz", not "tar.gz").'
                example: png
                flat_name: threat.indicator.url.extension
                ignore_above: 1024
                level: extended
                name: extension
                node_name: extension
                normalize: []
                original_fieldset: url
                short: File extension from the request url, excluding the leading
                  dot.
                type: keyword
            fragment:
              field_details:
                dashed_name: threat-indicator-url-fragment
                description: 'Portion of the url after the `#`, such as "top".

                  The `#` is not part of the fragment.'
                flat_name: threat.indicator.url.fragment
                ignore_above: 1024
                level: extended
                name: fragment
                node_name: fragment
                normalize: []
                original_fieldset: url
                short: Portion of the url after the `#`.
                type: keyword
            full:
              field_details:
                dashed_name: threat-indicator-url-full
                description: If full URLs are important to your use case, they should
                  be stored in `url.full`, whether this field is reconstructed or
                  present in the event source.
                example: https://www.elastic.co:443/search?q=elasticsearch#top
                flat_name: threat.indicator.url.full
                level: extended
                multi_fields:
                - flat_name: threat.indicator.url.full.text
                  name: text
                  type: match_only_text
                name: full
                node_name: full
                normalize: []
                original_fieldset: url
                short: Full unparsed URL.
                type: wildcard
            original:
              field_details:
                dashed_name: threat-indicator-url-original
                description: 'Unmodified original url as seen in the event source.

                  Note that in network monitoring, the observed URL may be a full
                  URL, whereas in access logs, the URL is often just represented as
                  a path.

                  This field is meant to represent the URL as it was observed, complete
                  or not.'
                example: https://www.elastic.co:443/search?q=elasticsearch#top or
                  /search?q=elasticsearch
                flat_name: threat.indicator.url.original
                level: extended
                multi_fields:
                - flat_name: threat.indicator.url.original.text
                  name: text
                  type: match_only_text
                name: original
                node_name: original
                normalize: []
                original_fieldset: url
                short: Unmodified original url as seen in the event source.
                type: wildcard
            password:
              field_details:
                dashed_name: threat-indicator-url-password
                description: Password of the request.
                flat_name: threat.indicator.url.password
                ignore_above: 1024
                level: extended
                name: password
                node_name: password
                normalize: []
                original_fieldset: url
                short: Password of the request.
                type: keyword
            path:
              field_details:
                dashed_name: threat-indicator-url-path
                description: Path of the request, such as "/search".
                flat_name: threat.indicator.url.path
                level: extended
                name: path
                node_name: path
                normalize: []
                original_fieldset: url
                short: Path of the request, such as "/search".
                type: wildcard
            port:
              field_details:
                dashed_name: threat-indicator-url-port
                description: Port of the request, such as 443.
                example: 443
                flat_name: threat.indicator.url.port
                format: string
                level: extended
                name: port
                node_name: port
                normalize: []
                original_fieldset: url
                short: Port of the request, such as 443.
                type: long
            query:
              field_details:
                dashed_name: threat-indicator-url-query
                description: 'The query field describes the query string of the request,
                  such as "q=elasticsearch".

                  The `?` is excluded from the query string. If a URL contains no
                  `?`, there is no query field. If there is a `?` but no query, the
                  query field exists with an empty string. The `exists` query can
                  be used to differentiate between the two cases.'
                flat_name: threat.indicator.url.query
                ignore_above: 1024
                level: extended
                name: query
                node_name: query
                normalize: []
                original_fieldset: url
                short: Query string of the request.
                type: keyword
            registered_domain:
              field_details:
                dashed_name: threat-indicator-url-registered-domain
                description: 'The highest registered url domain, stripped of the subdomain.

                  For example, the registered domain for "foo.example.com" is "example.com".

                  This value can be determined precisely with a list like the public
                  suffix list (http://publicsuffix.org). Trying to approximate this
                  by simply taking the last two labels will not work well for TLDs
                  such as "co.uk".'
                example: example.com
                flat_name: threat.indicator.url.registered_domain
                ignore_above: 1024
                level: extended
                name: registered_domain
                node_name: registered_domain
                normalize: []
                original_fieldset: url
                short: The highest registered url domain, stripped of the subdomain.
                type: keyword
            scheme:
              field_details:
                dashed_name: threat-indicator-url-scheme
                description: 'Scheme of the request, such as "https".

                  Note: The `:` is not part of the scheme.'
                example: https
                flat_name: threat.indicator.url.scheme
                ignore_above: 1024
                level: extended
                name: scheme
                node_name: scheme
                normalize: []
                original_fieldset: url
                short: Scheme of the url.
                type: keyword
            subdomain:
              field_details:
                dashed_name: threat-indicator-url-subdomain
                description: 'The subdomain portion of a fully qualified domain name
                  includes all of the names except the host name under the registered_domain.  In
                  a partially qualified domain, or if the the qualification level
                  of the full name cannot be determined, subdomain contains all of
                  the names below the registered domain.

                  For example the subdomain portion of "www.east.mydomain.co.uk" is
                  "east". If the domain has multiple levels of subdomain, such as
                  "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1",
                  with no trailing period.'
                example: east
                flat_name: threat.indicator.url.subdomain
                ignore_above: 1024
                level: extended
                name: subdomain
                node_name: subdomain
                normalize: []
                original_fieldset: url
                short: The subdomain of the domain.
                type: keyword
            top_level_domain:
              field_details:
                dashed_name: threat-indicator-url-top-level-domain
                description: 'The effective top level domain (eTLD), also known as
                  the domain suffix, is the last part of the domain name. For example,
                  the top level domain for example.com is "com".

                  This value can be determined precisely with a list like the public
                  suffix list (http://publicsuffix.org). Trying to approximate this
                  by simply taking the last label will not work well for effective
                  TLDs such as "co.uk".'
                example: co.uk
                flat_name: threat.indicator.url.top_level_domain
                ignore_above: 1024
                level: extended
                name: top_level_domain
                node_name: top_level_domain
                normalize: []
                original_fieldset: url
                short: The effective top level domain (com, org, net, co.uk).
                type: keyword
            username:
              field_details:
                dashed_name: threat-indicator-url-username
                description: Username of the request.
                flat_name: threat.indicator.url.username
                ignore_above: 1024
                level: extended
                name: username
                node_name: username
                normalize: []
                original_fieldset: url
                short: Username of the request.
                type: keyword
        x509:
          field_details:
            dashed_name: threat-indicator-x509
            description: 'This implements the common core fields for x509 certificates.
              This information is likely logged with TLS sessions, digital signatures
              found in executable binaries, S/MIME information in email bodies, or
              analysis of files on disk.

              When the certificate relates to a file, use the fields at `file.x509`.
              When hashes of the DER-encoded certificate are available, the `hash`
              data set should be populated as well (e.g. `file.hash.sha256`).

              Events that contain certificate information about network connections,
              should use the x509 fields under the relevant TLS fields: `tls.server.x509`
              and/or `tls.client.x509`.'
            flat_name: threat.indicator.x509
            intermediate: true
            name: x509
            node_name: x509
            original_fieldset: x509
            short: These fields contain x509 certificate metadata.
            type: group
          fields:
            alternative_names:
              field_details:
                dashed_name: threat-indicator-x509-alternative-names
                description: List of subject alternative names (SAN). Name types vary
                  by certificate authority and certificate type but commonly contain
                  IP addresses, DNS names (and wildcards), and email addresses.
                example: '*.elastic.co'
                flat_name: threat.indicator.x509.alternative_names
                ignore_above: 1024
                level: extended
                name: alternative_names
                node_name: alternative_names
                normalize:
                - array
                original_fieldset: x509
                short: List of subject alternative names (SAN).
                type: keyword
            issuer:
              field_details:
                dashed_name: threat-indicator-x509-issuer
                flat_name: threat.indicator.x509.issuer
                intermediate: true
                name: issuer
                node_name: issuer
                original_fieldset: x509
                type: object
              fields:
                common_name:
                  field_details:
                    dashed_name: threat-indicator-x509-issuer-common-name
                    description: List of common name (CN) of issuing certificate authority.
                    example: Example SHA2 High Assurance Server CA
                    flat_name: threat.indicator.x509.issuer.common_name
                    ignore_above: 1024
                    level: extended
                    name: issuer.common_name
                    node_name: common_name
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of common name (CN) of issuing certificate authority.
                    type: keyword
                country:
                  field_details:
                    dashed_name: threat-indicator-x509-issuer-country
                    description: List of country \(C) codes
                    example: US
                    flat_name: threat.indicator.x509.issuer.country
                    ignore_above: 1024
                    level: extended
                    name: issuer.country
                    node_name: country
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of country \(C) codes
                    type: keyword
                distinguished_name:
                  field_details:
                    dashed_name: threat-indicator-x509-issuer-distinguished-name
                    description: Distinguished name (DN) of issuing certificate authority.
                    example: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2
                      High Assurance Server CA
                    flat_name: threat.indicator.x509.issuer.distinguished_name
                    ignore_above: 1024
                    level: extended
                    name: issuer.distinguished_name
                    node_name: distinguished_name
                    normalize: []
                    original_fieldset: x509
                    short: Distinguished name (DN) of issuing certificate authority.
                    type: keyword
                locality:
                  field_details:
                    dashed_name: threat-indicator-x509-issuer-locality
                    description: List of locality names (L)
                    example: Mountain View
                    flat_name: threat.indicator.x509.issuer.locality
                    ignore_above: 1024
                    level: extended
                    name: issuer.locality
                    node_name: locality
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of locality names (L)
                    type: keyword
                organization:
                  field_details:
                    dashed_name: threat-indicator-x509-issuer-organization
                    description: List of organizations (O) of issuing certificate
                      authority.
                    example: Example Inc
                    flat_name: threat.indicator.x509.issuer.organization
                    ignore_above: 1024
                    level: extended
                    name: issuer.organization
                    node_name: organization
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizations (O) of issuing certificate authority.
                    type: keyword
                organizational_unit:
                  field_details:
                    dashed_name: threat-indicator-x509-issuer-organizational-unit
                    description: List of organizational units (OU) of issuing certificate
                      authority.
                    example: www.example.com
                    flat_name: threat.indicator.x509.issuer.organizational_unit
                    ignore_above: 1024
                    level: extended
                    name: issuer.organizational_unit
                    node_name: organizational_unit
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizational units (OU) of issuing certificate
                      authority.
                    type: keyword
                state_or_province:
                  field_details:
                    dashed_name: threat-indicator-x509-issuer-state-or-province
                    description: List of state or province names (ST, S, or P)
                    example: California
                    flat_name: threat.indicator.x509.issuer.state_or_province
                    ignore_above: 1024
                    level: extended
                    name: issuer.state_or_province
                    node_name: state_or_province
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of state or province names (ST, S, or P)
                    type: keyword
            not_after:
              field_details:
                dashed_name: threat-indicator-x509-not-after
                description: Time at which the certificate is no longer considered
                  valid.
                example: '2020-07-16T03:15:39Z'
                flat_name: threat.indicator.x509.not_after
                level: extended
                name: not_after
                node_name: not_after
                normalize: []
                original_fieldset: x509
                short: Time at which the certificate is no longer considered valid.
                type: date
            not_before:
              field_details:
                dashed_name: threat-indicator-x509-not-before
                description: Time at which the certificate is first considered valid.
                example: '2019-08-16T01:40:25Z'
                flat_name: threat.indicator.x509.not_before
                level: extended
                name: not_before
                node_name: not_before
                normalize: []
                original_fieldset: x509
                short: Time at which the certificate is first considered valid.
                type: date
            public_key_algorithm:
              field_details:
                dashed_name: threat-indicator-x509-public-key-algorithm
                description: Algorithm used to generate the public key.
                example: RSA
                flat_name: threat.indicator.x509.public_key_algorithm
                ignore_above: 1024
                level: extended
                name: public_key_algorithm
                node_name: public_key_algorithm
                normalize: []
                original_fieldset: x509
                short: Algorithm used to generate the public key.
                type: keyword
            public_key_curve:
              field_details:
                dashed_name: threat-indicator-x509-public-key-curve
                description: The curve used by the elliptic curve public key algorithm.
                  This is algorithm specific.
                example: nistp521
                flat_name: threat.indicator.x509.public_key_curve
                ignore_above: 1024
                level: extended
                name: public_key_curve
                node_name: public_key_curve
                normalize: []
                original_fieldset: x509
                short: The curve used by the elliptic curve public key algorithm.
                  This is algorithm specific.
                type: keyword
            public_key_exponent:
              field_details:
                dashed_name: threat-indicator-x509-public-key-exponent
                description: Exponent used to derive the public key. This is algorithm
                  specific.
                doc_values: false
                example: 65537
                flat_name: threat.indicator.x509.public_key_exponent
                index: false
                level: extended
                name: public_key_exponent
                node_name: public_key_exponent
                normalize: []
                original_fieldset: x509
                short: Exponent used to derive the public key. This is algorithm specific.
                type: long
            public_key_size:
              field_details:
                dashed_name: threat-indicator-x509-public-key-size
                description: The size of the public key space in bits.
                example: 2048
                flat_name: threat.indicator.x509.public_key_size
                level: extended
                name: public_key_size
                node_name: public_key_size
                normalize: []
                original_fieldset: x509
                short: The size of the public key space in bits.
                type: long
            serial_number:
              field_details:
                dashed_name: threat-indicator-x509-serial-number
                description: Unique serial number issued by the certificate authority.
                  For consistency, if this value is alphanumeric, it should be formatted
                  without colons and uppercase characters.
                example: 55FBB9C7DEBF09809D12CCAA
                flat_name: threat.indicator.x509.serial_number
                ignore_above: 1024
                level: extended
                name: serial_number
                node_name: serial_number
                normalize: []
                original_fieldset: x509
                short: Unique serial number issued by the certificate authority.
                type: keyword
            signature_algorithm:
              field_details:
                dashed_name: threat-indicator-x509-signature-algorithm
                description: Identifier for certificate signature algorithm. We recommend
                  using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
                example: SHA256-RSA
                flat_name: threat.indicator.x509.signature_algorithm
                ignore_above: 1024
                level: extended
                name: signature_algorithm
                node_name: signature_algorithm
                normalize: []
                original_fieldset: x509
                short: Identifier for certificate signature algorithm.
                type: keyword
            subject:
              field_details:
                dashed_name: threat-indicator-x509-subject
                flat_name: threat.indicator.x509.subject
                intermediate: true
                name: subject
                node_name: subject
                original_fieldset: x509
                type: object
              fields:
                common_name:
                  field_details:
                    dashed_name: threat-indicator-x509-subject-common-name
                    description: List of common names (CN) of subject.
                    example: shared.global.example.net
                    flat_name: threat.indicator.x509.subject.common_name
                    ignore_above: 1024
                    level: extended
                    name: subject.common_name
                    node_name: common_name
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of common names (CN) of subject.
                    type: keyword
                country:
                  field_details:
                    dashed_name: threat-indicator-x509-subject-country
                    description: List of country \(C) code
                    example: US
                    flat_name: threat.indicator.x509.subject.country
                    ignore_above: 1024
                    level: extended
                    name: subject.country
                    node_name: country
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of country \(C) code
                    type: keyword
                distinguished_name:
                  field_details:
                    dashed_name: threat-indicator-x509-subject-distinguished-name
                    description: Distinguished name (DN) of the certificate subject
                      entity.
                    example: C=US, ST=California, L=San Francisco, O=Example, Inc.,
                      CN=shared.global.example.net
                    flat_name: threat.indicator.x509.subject.distinguished_name
                    ignore_above: 1024
                    level: extended
                    name: subject.distinguished_name
                    node_name: distinguished_name
                    normalize: []
                    original_fieldset: x509
                    short: Distinguished name (DN) of the certificate subject entity.
                    type: keyword
                locality:
                  field_details:
                    dashed_name: threat-indicator-x509-subject-locality
                    description: List of locality names (L)
                    example: San Francisco
                    flat_name: threat.indicator.x509.subject.locality
                    ignore_above: 1024
                    level: extended
                    name: subject.locality
                    node_name: locality
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of locality names (L)
                    type: keyword
                organization:
                  field_details:
                    dashed_name: threat-indicator-x509-subject-organization
                    description: List of organizations (O) of subject.
                    example: Example, Inc.
                    flat_name: threat.indicator.x509.subject.organization
                    ignore_above: 1024
                    level: extended
                    name: subject.organization
                    node_name: organization
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizations (O) of subject.
                    type: keyword
                organizational_unit:
                  field_details:
                    dashed_name: threat-indicator-x509-subject-organizational-unit
                    description: List of organizational units (OU) of subject.
                    flat_name: threat.indicator.x509.subject.organizational_unit
                    ignore_above: 1024
                    level: extended
                    name: subject.organizational_unit
                    node_name: organizational_unit
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizational units (OU) of subject.
                    type: keyword
                state_or_province:
                  field_details:
                    dashed_name: threat-indicator-x509-subject-state-or-province
                    description: List of state or province names (ST, S, or P)
                    example: California
                    flat_name: threat.indicator.x509.subject.state_or_province
                    ignore_above: 1024
                    level: extended
                    name: subject.state_or_province
                    node_name: state_or_province
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of state or province names (ST, S, or P)
                    type: keyword
            version_number:
              field_details:
                dashed_name: threat-indicator-x509-version-number
                description: Version of x509 format.
                example: 3
                flat_name: threat.indicator.x509.version_number
                ignore_above: 1024
                level: extended
                name: version_number
                node_name: version_number
                normalize: []
                original_fieldset: x509
                short: Version of x509 format.
                type: keyword
    software:
      field_details:
        dashed_name: threat-software
        flat_name: threat.software
        intermediate: true
        name: software
        node_name: software
        type: object
      fields:
        alias:
          field_details:
            dashed_name: threat-software-alias
            description: "The alias(es) of the software for a set of related intrusion\
              \ activity that are tracked by a common name in the security community.\n\
              While not required, you can use a MITRE ATT&CK\xAE associated software\
              \ description."
            example: '[ "X-Agent" ]'
            flat_name: threat.software.alias
            ignore_above: 1024
            level: extended
            name: software.alias
            node_name: alias
            normalize:
            - array
            short: Alias of the software
            type: keyword
        id:
          field_details:
            dashed_name: threat-software-id
            description: "The id of the software used by this threat to conduct behavior\
              \ commonly modeled using MITRE ATT&CK\xAE.\nWhile not required, you\
              \ can use a MITRE ATT&CK\xAE software id."
            example: S0552
            flat_name: threat.software.id
            ignore_above: 1024
            level: extended
            name: software.id
            node_name: id
            normalize: []
            short: ID of the software
            type: keyword
        name:
          field_details:
            dashed_name: threat-software-name
            description: "The name of the software used by this threat to conduct\
              \ behavior commonly modeled using MITRE ATT&CK\xAE.\nWhile not required,\
              \ you can use a MITRE ATT&CK\xAE software name."
            example: AdFind
            flat_name: threat.software.name
            ignore_above: 1024
            level: extended
            name: software.name
            node_name: name
            normalize: []
            short: Name of the software.
            type: keyword
        platforms:
          field_details:
            dashed_name: threat-software-platforms
            description: "The platforms of the software used by this threat to conduct\
              \ behavior commonly modeled using MITRE ATT&CK\xAE.\nWhile not required,\
              \ you can use MITRE ATT&CK\xAE software platform values."
            example: '[ "Windows" ]'
            expected_values:
            - AWS
            - Azure
            - Azure AD
            - GCP
            - Linux
            - macOS
            - Network
            - Office 365
            - SaaS
            - Windows
            flat_name: threat.software.platforms
            ignore_above: 1024
            level: extended
            name: software.platforms
            node_name: platforms
            normalize:
            - array
            short: Platforms of the software.
            type: keyword
        reference:
          field_details:
            dashed_name: threat-software-reference
            description: "The reference URL of the software used by this threat to\
              \ conduct behavior commonly modeled using MITRE ATT&CK\xAE.\nWhile not\
              \ required, you can use a MITRE ATT&CK\xAE software reference URL."
            example: https://attack.mitre.org/software/S0552/
            flat_name: threat.software.reference
            ignore_above: 1024
            level: extended
            name: software.reference
            node_name: reference
            normalize: []
            short: Software reference URL.
            type: keyword
        type:
          field_details:
            dashed_name: threat-software-type
            description: "The type of software used by this threat to conduct behavior\
              \ commonly modeled using MITRE ATT&CK\xAE.\nWhile not required, you\
              \ can use a MITRE ATT&CK\xAE software type."
            example: Tool
            expected_values:
            - Malware
            - Tool
            flat_name: threat.software.type
            ignore_above: 1024
            level: extended
            name: software.type
            node_name: type
            normalize: []
            short: Software type.
            type: keyword
    tactic:
      field_details:
        dashed_name: threat-tactic
        flat_name: threat.tactic
        intermediate: true
        name: tactic
        node_name: tactic
        type: object
      fields:
        id:
          field_details:
            dashed_name: threat-tactic-id
            description: "The id of tactic used by this threat. You can use a MITRE\
              \ ATT&CK\xAE tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/\
              \ )"
            example: TA0002
            flat_name: threat.tactic.id
            ignore_above: 1024
            level: extended
            name: tactic.id
            node_name: id
            normalize:
            - array
            short: Threat tactic id.
            type: keyword
        name:
          field_details:
            dashed_name: threat-tactic-name
            description: "Name of the type of tactic used by this threat. You can\
              \ use a MITRE ATT&CK\xAE tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/)"
            example: Execution
            flat_name: threat.tactic.name
            ignore_above: 1024
            level: extended
            name: tactic.name
            node_name: name
            normalize:
            - array
            short: Threat tactic.
            type: keyword
        reference:
          field_details:
            dashed_name: threat-tactic-reference
            description: "The reference url of tactic used by this threat. You can\
              \ use a MITRE ATT&CK\xAE tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/\
              \ )"
            example: https://attack.mitre.org/tactics/TA0002/
            flat_name: threat.tactic.reference
            ignore_above: 1024
            level: extended
            name: tactic.reference
            node_name: reference
            normalize:
            - array
            short: Threat tactic URL reference.
            type: keyword
    technique:
      field_details:
        dashed_name: threat-technique
        flat_name: threat.technique
        intermediate: true
        name: technique
        node_name: technique
        type: object
      fields:
        id:
          field_details:
            dashed_name: threat-technique-id
            description: "The id of technique used by this threat. You can use a MITRE\
              \ ATT&CK\xAE technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)"
            example: T1059
            flat_name: threat.technique.id
            ignore_above: 1024
            level: extended
            name: technique.id
            node_name: id
            normalize:
            - array
            short: Threat technique id.
            type: keyword
        name:
          field_details:
            dashed_name: threat-technique-name
            description: "The name of technique used by this threat. You can use a\
              \ MITRE ATT&CK\xAE technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)"
            example: Command and Scripting Interpreter
            flat_name: threat.technique.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: threat.technique.name.text
              name: text
              type: match_only_text
            name: technique.name
            node_name: name
            normalize:
            - array
            short: Threat technique name.
            type: keyword
        reference:
          field_details:
            dashed_name: threat-technique-reference
            description: "The reference url of technique used by this threat. You\
              \ can use a MITRE ATT&CK\xAE technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)"
            example: https://attack.mitre.org/techniques/T1059/
            flat_name: threat.technique.reference
            ignore_above: 1024
            level: extended
            name: technique.reference
            node_name: reference
            normalize:
            - array
            short: Threat technique URL reference.
            type: keyword
        subtechnique:
          field_details:
            dashed_name: threat-technique-subtechnique
            flat_name: threat.technique.subtechnique
            intermediate: true
            name: technique.subtechnique
            node_name: subtechnique
            type: object
          fields:
            id:
              field_details:
                dashed_name: threat-technique-subtechnique-id
                description: "The full id of subtechnique used by this threat. You\
                  \ can use a MITRE ATT&CK\xAE subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)"
                example: T1059.001
                flat_name: threat.technique.subtechnique.id
                ignore_above: 1024
                level: extended
                name: technique.subtechnique.id
                node_name: id
                normalize:
                - array
                short: Threat subtechnique id.
                type: keyword
            name:
              field_details:
                dashed_name: threat-technique-subtechnique-name
                description: "The name of subtechnique used by this threat. You can\
                  \ use a MITRE ATT&CK\xAE subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)"
                example: PowerShell
                flat_name: threat.technique.subtechnique.name
                ignore_above: 1024
                level: extended
                multi_fields:
                - flat_name: threat.technique.subtechnique.name.text
                  name: text
                  type: match_only_text
                name: technique.subtechnique.name
                node_name: name
                normalize:
                - array
                short: Threat subtechnique name.
                type: keyword
            reference:
              field_details:
                dashed_name: threat-technique-subtechnique-reference
                description: "The reference url of subtechnique used by this threat.\
                  \ You can use a MITRE ATT&CK\xAE subtechnique, for example. (ex.\
                  \ https://attack.mitre.org/techniques/T1059/001/)"
                example: https://attack.mitre.org/techniques/T1059/001/
                flat_name: threat.technique.subtechnique.reference
                ignore_above: 1024
                level: extended
                name: technique.subtechnique.reference
                node_name: reference
                normalize:
                - array
                short: Threat subtechnique URL reference.
                type: keyword
  schema_details:
    group: 2
    nestings:
    - threat.enrichments.indicator.as
    - threat.enrichments.indicator.file
    - threat.enrichments.indicator.geo
    - threat.enrichments.indicator.registry
    - threat.enrichments.indicator.url
    - threat.enrichments.indicator.x509
    - threat.indicator.as
    - threat.indicator.file
    - threat.indicator.geo
    - threat.indicator.registry
    - threat.indicator.url
    - threat.indicator.x509
    prefix: threat.
    reused_here:
    - full: threat.indicator.x509
      schema_name: x509
      short: These fields contain x509 certificate metadata.
    - full: threat.enrichments.indicator.x509
      schema_name: x509
      short: These fields contain x509 certificate metadata.
    - full: threat.indicator.as
      schema_name: as
      short: Fields describing an Autonomous System (Internet routing prefix).
    - full: threat.enrichments.indicator.as
      schema_name: as
      short: Fields describing an Autonomous System (Internet routing prefix).
    - full: threat.indicator.file
      schema_name: file
      short: Fields describing files.
    - full: threat.enrichments.indicator.file
      schema_name: file
      short: Fields describing files.
    - full: threat.indicator.geo
      schema_name: geo
      short: Fields describing a location.
    - full: threat.enrichments.indicator.geo
      schema_name: geo
      short: Fields describing a location.
    - full: threat.indicator.registry
      schema_name: registry
      short: Fields related to Windows Registry operations.
    - full: threat.enrichments.indicator.registry
      schema_name: registry
      short: Fields related to Windows Registry operations.
    - full: threat.indicator.url
      schema_name: url
      short: Fields that let you store URLs in various forms.
    - full: threat.enrichments.indicator.url
      schema_name: url
      short: Fields that let you store URLs in various forms.
    root: false
    title: Threat
tls:
  field_details:
    dashed_name: tls
    description: Fields related to a TLS connection. These fields focus on the TLS
      protocol itself and intentionally avoids in-depth analysis of the related x.509
      certificate files.
    flat_name: tls
    name: tls
    node_name: tls
    short: Fields describing a TLS connection.
    type: group
  fields:
    cipher:
      field_details:
        dashed_name: tls-cipher
        description: String indicating the cipher used during the current connection.
        example: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        flat_name: tls.cipher
        ignore_above: 1024
        level: extended
        name: cipher
        node_name: cipher
        normalize: []
        short: String indicating the cipher used during the current connection.
        type: keyword
    client:
      field_details:
        dashed_name: tls-client
        flat_name: tls.client
        intermediate: true
        name: client
        node_name: client
        type: object
      fields:
        certificate:
          field_details:
            dashed_name: tls-client-certificate
            description: PEM-encoded stand-alone certificate offered by the client.
              This is usually mutually-exclusive of `client.certificate_chain` since
              this value also exists in that list.
            example: MII...
            flat_name: tls.client.certificate
            ignore_above: 1024
            level: extended
            name: client.certificate
            node_name: certificate
            normalize: []
            short: PEM-encoded stand-alone certificate offered by the client.
            type: keyword
        certificate_chain:
          field_details:
            dashed_name: tls-client-certificate-chain
            description: Array of PEM-encoded certificates that make up the certificate
              chain offered by the client. This is usually mutually-exclusive of `client.certificate`
              since that value should be the first certificate in the chain.
            example: '["MII...", "MII..."]'
            flat_name: tls.client.certificate_chain
            ignore_above: 1024
            level: extended
            name: client.certificate_chain
            node_name: certificate_chain
            normalize:
            - array
            short: Array of PEM-encoded certificates that make up the certificate
              chain offered by the client.
            type: keyword
        hash:
          field_details:
            dashed_name: tls-client-hash
            flat_name: tls.client.hash
            intermediate: true
            name: client.hash
            node_name: hash
            type: object
          fields:
            md5:
              field_details:
                dashed_name: tls-client-hash-md5
                description: Certificate fingerprint using the MD5 digest of DER-encoded
                  version of certificate offered by the client. For consistency with
                  other hash values, this value should be formatted as an uppercase
                  hash.
                example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
                flat_name: tls.client.hash.md5
                ignore_above: 1024
                level: extended
                name: client.hash.md5
                node_name: md5
                normalize: []
                short: Certificate fingerprint using the MD5 digest of DER-encoded
                  version of certificate offered by the client.
                type: keyword
            sha1:
              field_details:
                dashed_name: tls-client-hash-sha1
                description: Certificate fingerprint using the SHA1 digest of DER-encoded
                  version of certificate offered by the client. For consistency with
                  other hash values, this value should be formatted as an uppercase
                  hash.
                example: 9E393D93138888D288266C2D915214D1D1CCEB2A
                flat_name: tls.client.hash.sha1
                ignore_above: 1024
                level: extended
                name: client.hash.sha1
                node_name: sha1
                normalize: []
                short: Certificate fingerprint using the SHA1 digest of DER-encoded
                  version of certificate offered by the client.
                type: keyword
            sha256:
              field_details:
                dashed_name: tls-client-hash-sha256
                description: Certificate fingerprint using the SHA256 digest of DER-encoded
                  version of certificate offered by the client. For consistency with
                  other hash values, this value should be formatted as an uppercase
                  hash.
                example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
                flat_name: tls.client.hash.sha256
                ignore_above: 1024
                level: extended
                name: client.hash.sha256
                node_name: sha256
                normalize: []
                short: Certificate fingerprint using the SHA256 digest of DER-encoded
                  version of certificate offered by the client.
                type: keyword
        issuer:
          field_details:
            dashed_name: tls-client-issuer
            description: Distinguished name of subject of the issuer of the x.509
              certificate presented by the client.
            example: CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com
            flat_name: tls.client.issuer
            ignore_above: 1024
            level: extended
            name: client.issuer
            node_name: issuer
            normalize: []
            short: Distinguished name of subject of the issuer of the x.509 certificate
              presented by the client.
            type: keyword
        ja3:
          field_details:
            dashed_name: tls-client-ja3
            description: A hash that identifies clients based on how they perform
              an SSL/TLS handshake.
            example: d4e5b18d6b55c71272893221c96ba240
            flat_name: tls.client.ja3
            ignore_above: 1024
            level: extended
            name: client.ja3
            node_name: ja3
            normalize: []
            short: A hash that identifies clients based on how they perform an SSL/TLS
              handshake.
            type: keyword
        not_after:
          field_details:
            dashed_name: tls-client-not-after
            description: Date/Time indicating when client certificate is no longer
              considered valid.
            example: '2021-01-01T00:00:00.000Z'
            flat_name: tls.client.not_after
            level: extended
            name: client.not_after
            node_name: not_after
            normalize: []
            short: Date/Time indicating when client certificate is no longer considered
              valid.
            type: date
        not_before:
          field_details:
            dashed_name: tls-client-not-before
            description: Date/Time indicating when client certificate is first considered
              valid.
            example: '1970-01-01T00:00:00.000Z'
            flat_name: tls.client.not_before
            level: extended
            name: client.not_before
            node_name: not_before
            normalize: []
            short: Date/Time indicating when client certificate is first considered
              valid.
            type: date
        server_name:
          field_details:
            dashed_name: tls-client-server-name
            description: Also called an SNI, this tells the server which hostname
              to which the client is attempting to connect to. When this value is
              available, it should get copied to `destination.domain`.
            example: www.elastic.co
            flat_name: tls.client.server_name
            ignore_above: 1024
            level: extended
            name: client.server_name
            node_name: server_name
            normalize: []
            short: Hostname the client is trying to connect to. Also called the SNI.
            type: keyword
        subject:
          field_details:
            dashed_name: tls-client-subject
            description: Distinguished name of subject of the x.509 certificate presented
              by the client.
            example: CN=myclient, OU=Documentation Team, DC=example, DC=com
            flat_name: tls.client.subject
            ignore_above: 1024
            level: extended
            name: client.subject
            node_name: subject
            normalize: []
            short: Distinguished name of subject of the x.509 certificate presented
              by the client.
            type: keyword
        supported_ciphers:
          field_details:
            dashed_name: tls-client-supported-ciphers
            description: Array of ciphers offered by the client during the client
              hello.
            example: '["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
              "..."]'
            flat_name: tls.client.supported_ciphers
            ignore_above: 1024
            level: extended
            name: client.supported_ciphers
            node_name: supported_ciphers
            normalize:
            - array
            short: Array of ciphers offered by the client during the client hello.
            type: keyword
        x509:
          field_details:
            dashed_name: tls-client-x509
            description: 'This implements the common core fields for x509 certificates.
              This information is likely logged with TLS sessions, digital signatures
              found in executable binaries, S/MIME information in email bodies, or
              analysis of files on disk.

              When the certificate relates to a file, use the fields at `file.x509`.
              When hashes of the DER-encoded certificate are available, the `hash`
              data set should be populated as well (e.g. `file.hash.sha256`).

              Events that contain certificate information about network connections,
              should use the x509 fields under the relevant TLS fields: `tls.server.x509`
              and/or `tls.client.x509`.'
            flat_name: tls.client.x509
            intermediate: true
            name: x509
            node_name: x509
            original_fieldset: x509
            short: These fields contain x509 certificate metadata.
            type: group
          fields:
            alternative_names:
              field_details:
                dashed_name: tls-client-x509-alternative-names
                description: List of subject alternative names (SAN). Name types vary
                  by certificate authority and certificate type but commonly contain
                  IP addresses, DNS names (and wildcards), and email addresses.
                example: '*.elastic.co'
                flat_name: tls.client.x509.alternative_names
                ignore_above: 1024
                level: extended
                name: alternative_names
                node_name: alternative_names
                normalize:
                - array
                original_fieldset: x509
                short: List of subject alternative names (SAN).
                type: keyword
            issuer:
              field_details:
                dashed_name: tls-client-x509-issuer
                flat_name: tls.client.x509.issuer
                intermediate: true
                name: issuer
                node_name: issuer
                original_fieldset: x509
                type: object
              fields:
                common_name:
                  field_details:
                    dashed_name: tls-client-x509-issuer-common-name
                    description: List of common name (CN) of issuing certificate authority.
                    example: Example SHA2 High Assurance Server CA
                    flat_name: tls.client.x509.issuer.common_name
                    ignore_above: 1024
                    level: extended
                    name: issuer.common_name
                    node_name: common_name
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of common name (CN) of issuing certificate authority.
                    type: keyword
                country:
                  field_details:
                    dashed_name: tls-client-x509-issuer-country
                    description: List of country \(C) codes
                    example: US
                    flat_name: tls.client.x509.issuer.country
                    ignore_above: 1024
                    level: extended
                    name: issuer.country
                    node_name: country
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of country \(C) codes
                    type: keyword
                distinguished_name:
                  field_details:
                    dashed_name: tls-client-x509-issuer-distinguished-name
                    description: Distinguished name (DN) of issuing certificate authority.
                    example: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2
                      High Assurance Server CA
                    flat_name: tls.client.x509.issuer.distinguished_name
                    ignore_above: 1024
                    level: extended
                    name: issuer.distinguished_name
                    node_name: distinguished_name
                    normalize: []
                    original_fieldset: x509
                    short: Distinguished name (DN) of issuing certificate authority.
                    type: keyword
                locality:
                  field_details:
                    dashed_name: tls-client-x509-issuer-locality
                    description: List of locality names (L)
                    example: Mountain View
                    flat_name: tls.client.x509.issuer.locality
                    ignore_above: 1024
                    level: extended
                    name: issuer.locality
                    node_name: locality
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of locality names (L)
                    type: keyword
                organization:
                  field_details:
                    dashed_name: tls-client-x509-issuer-organization
                    description: List of organizations (O) of issuing certificate
                      authority.
                    example: Example Inc
                    flat_name: tls.client.x509.issuer.organization
                    ignore_above: 1024
                    level: extended
                    name: issuer.organization
                    node_name: organization
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizations (O) of issuing certificate authority.
                    type: keyword
                organizational_unit:
                  field_details:
                    dashed_name: tls-client-x509-issuer-organizational-unit
                    description: List of organizational units (OU) of issuing certificate
                      authority.
                    example: www.example.com
                    flat_name: tls.client.x509.issuer.organizational_unit
                    ignore_above: 1024
                    level: extended
                    name: issuer.organizational_unit
                    node_name: organizational_unit
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizational units (OU) of issuing certificate
                      authority.
                    type: keyword
                state_or_province:
                  field_details:
                    dashed_name: tls-client-x509-issuer-state-or-province
                    description: List of state or province names (ST, S, or P)
                    example: California
                    flat_name: tls.client.x509.issuer.state_or_province
                    ignore_above: 1024
                    level: extended
                    name: issuer.state_or_province
                    node_name: state_or_province
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of state or province names (ST, S, or P)
                    type: keyword
            not_after:
              field_details:
                dashed_name: tls-client-x509-not-after
                description: Time at which the certificate is no longer considered
                  valid.
                example: '2020-07-16T03:15:39Z'
                flat_name: tls.client.x509.not_after
                level: extended
                name: not_after
                node_name: not_after
                normalize: []
                original_fieldset: x509
                short: Time at which the certificate is no longer considered valid.
                type: date
            not_before:
              field_details:
                dashed_name: tls-client-x509-not-before
                description: Time at which the certificate is first considered valid.
                example: '2019-08-16T01:40:25Z'
                flat_name: tls.client.x509.not_before
                level: extended
                name: not_before
                node_name: not_before
                normalize: []
                original_fieldset: x509
                short: Time at which the certificate is first considered valid.
                type: date
            public_key_algorithm:
              field_details:
                dashed_name: tls-client-x509-public-key-algorithm
                description: Algorithm used to generate the public key.
                example: RSA
                flat_name: tls.client.x509.public_key_algorithm
                ignore_above: 1024
                level: extended
                name: public_key_algorithm
                node_name: public_key_algorithm
                normalize: []
                original_fieldset: x509
                short: Algorithm used to generate the public key.
                type: keyword
            public_key_curve:
              field_details:
                dashed_name: tls-client-x509-public-key-curve
                description: The curve used by the elliptic curve public key algorithm.
                  This is algorithm specific.
                example: nistp521
                flat_name: tls.client.x509.public_key_curve
                ignore_above: 1024
                level: extended
                name: public_key_curve
                node_name: public_key_curve
                normalize: []
                original_fieldset: x509
                short: The curve used by the elliptic curve public key algorithm.
                  This is algorithm specific.
                type: keyword
            public_key_exponent:
              field_details:
                dashed_name: tls-client-x509-public-key-exponent
                description: Exponent used to derive the public key. This is algorithm
                  specific.
                doc_values: false
                example: 65537
                flat_name: tls.client.x509.public_key_exponent
                index: false
                level: extended
                name: public_key_exponent
                node_name: public_key_exponent
                normalize: []
                original_fieldset: x509
                short: Exponent used to derive the public key. This is algorithm specific.
                type: long
            public_key_size:
              field_details:
                dashed_name: tls-client-x509-public-key-size
                description: The size of the public key space in bits.
                example: 2048
                flat_name: tls.client.x509.public_key_size
                level: extended
                name: public_key_size
                node_name: public_key_size
                normalize: []
                original_fieldset: x509
                short: The size of the public key space in bits.
                type: long
            serial_number:
              field_details:
                dashed_name: tls-client-x509-serial-number
                description: Unique serial number issued by the certificate authority.
                  For consistency, if this value is alphanumeric, it should be formatted
                  without colons and uppercase characters.
                example: 55FBB9C7DEBF09809D12CCAA
                flat_name: tls.client.x509.serial_number
                ignore_above: 1024
                level: extended
                name: serial_number
                node_name: serial_number
                normalize: []
                original_fieldset: x509
                short: Unique serial number issued by the certificate authority.
                type: keyword
            signature_algorithm:
              field_details:
                dashed_name: tls-client-x509-signature-algorithm
                description: Identifier for certificate signature algorithm. We recommend
                  using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
                example: SHA256-RSA
                flat_name: tls.client.x509.signature_algorithm
                ignore_above: 1024
                level: extended
                name: signature_algorithm
                node_name: signature_algorithm
                normalize: []
                original_fieldset: x509
                short: Identifier for certificate signature algorithm.
                type: keyword
            subject:
              field_details:
                dashed_name: tls-client-x509-subject
                flat_name: tls.client.x509.subject
                intermediate: true
                name: subject
                node_name: subject
                original_fieldset: x509
                type: object
              fields:
                common_name:
                  field_details:
                    dashed_name: tls-client-x509-subject-common-name
                    description: List of common names (CN) of subject.
                    example: shared.global.example.net
                    flat_name: tls.client.x509.subject.common_name
                    ignore_above: 1024
                    level: extended
                    name: subject.common_name
                    node_name: common_name
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of common names (CN) of subject.
                    type: keyword
                country:
                  field_details:
                    dashed_name: tls-client-x509-subject-country
                    description: List of country \(C) code
                    example: US
                    flat_name: tls.client.x509.subject.country
                    ignore_above: 1024
                    level: extended
                    name: subject.country
                    node_name: country
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of country \(C) code
                    type: keyword
                distinguished_name:
                  field_details:
                    dashed_name: tls-client-x509-subject-distinguished-name
                    description: Distinguished name (DN) of the certificate subject
                      entity.
                    example: C=US, ST=California, L=San Francisco, O=Example, Inc.,
                      CN=shared.global.example.net
                    flat_name: tls.client.x509.subject.distinguished_name
                    ignore_above: 1024
                    level: extended
                    name: subject.distinguished_name
                    node_name: distinguished_name
                    normalize: []
                    original_fieldset: x509
                    short: Distinguished name (DN) of the certificate subject entity.
                    type: keyword
                locality:
                  field_details:
                    dashed_name: tls-client-x509-subject-locality
                    description: List of locality names (L)
                    example: San Francisco
                    flat_name: tls.client.x509.subject.locality
                    ignore_above: 1024
                    level: extended
                    name: subject.locality
                    node_name: locality
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of locality names (L)
                    type: keyword
                organization:
                  field_details:
                    dashed_name: tls-client-x509-subject-organization
                    description: List of organizations (O) of subject.
                    example: Example, Inc.
                    flat_name: tls.client.x509.subject.organization
                    ignore_above: 1024
                    level: extended
                    name: subject.organization
                    node_name: organization
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizations (O) of subject.
                    type: keyword
                organizational_unit:
                  field_details:
                    dashed_name: tls-client-x509-subject-organizational-unit
                    description: List of organizational units (OU) of subject.
                    flat_name: tls.client.x509.subject.organizational_unit
                    ignore_above: 1024
                    level: extended
                    name: subject.organizational_unit
                    node_name: organizational_unit
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizational units (OU) of subject.
                    type: keyword
                state_or_province:
                  field_details:
                    dashed_name: tls-client-x509-subject-state-or-province
                    description: List of state or province names (ST, S, or P)
                    example: California
                    flat_name: tls.client.x509.subject.state_or_province
                    ignore_above: 1024
                    level: extended
                    name: subject.state_or_province
                    node_name: state_or_province
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of state or province names (ST, S, or P)
                    type: keyword
            version_number:
              field_details:
                dashed_name: tls-client-x509-version-number
                description: Version of x509 format.
                example: 3
                flat_name: tls.client.x509.version_number
                ignore_above: 1024
                level: extended
                name: version_number
                node_name: version_number
                normalize: []
                original_fieldset: x509
                short: Version of x509 format.
                type: keyword
    curve:
      field_details:
        dashed_name: tls-curve
        description: String indicating the curve used for the given cipher, when applicable.
        example: secp256r1
        flat_name: tls.curve
        ignore_above: 1024
        level: extended
        name: curve
        node_name: curve
        normalize: []
        short: String indicating the curve used for the given cipher, when applicable.
        type: keyword
    established:
      field_details:
        dashed_name: tls-established
        description: Boolean flag indicating if the TLS negotiation was successful
          and transitioned to an encrypted tunnel.
        flat_name: tls.established
        level: extended
        name: established
        node_name: established
        normalize: []
        short: Boolean flag indicating if the TLS negotiation was successful and transitioned
          to an encrypted tunnel.
        type: boolean
    next_protocol:
      field_details:
        dashed_name: tls-next-protocol
        description: String indicating the protocol being tunneled. Per the values
          in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids),
          this string should be lower case.
        example: http/1.1
        flat_name: tls.next_protocol
        ignore_above: 1024
        level: extended
        name: next_protocol
        node_name: next_protocol
        normalize: []
        short: String indicating the protocol being tunneled.
        type: keyword
    resumed:
      field_details:
        dashed_name: tls-resumed
        description: Boolean flag indicating if this TLS connection was resumed from
          an existing TLS negotiation.
        flat_name: tls.resumed
        level: extended
        name: resumed
        node_name: resumed
        normalize: []
        short: Boolean flag indicating if this TLS connection was resumed from an
          existing TLS negotiation.
        type: boolean
    server:
      field_details:
        dashed_name: tls-server
        flat_name: tls.server
        intermediate: true
        name: server
        node_name: server
        type: object
      fields:
        certificate:
          field_details:
            dashed_name: tls-server-certificate
            description: PEM-encoded stand-alone certificate offered by the server.
              This is usually mutually-exclusive of `server.certificate_chain` since
              this value also exists in that list.
            example: MII...
            flat_name: tls.server.certificate
            ignore_above: 1024
            level: extended
            name: server.certificate
            node_name: certificate
            normalize: []
            short: PEM-encoded stand-alone certificate offered by the server.
            type: keyword
        certificate_chain:
          field_details:
            dashed_name: tls-server-certificate-chain
            description: Array of PEM-encoded certificates that make up the certificate
              chain offered by the server. This is usually mutually-exclusive of `server.certificate`
              since that value should be the first certificate in the chain.
            example: '["MII...", "MII..."]'
            flat_name: tls.server.certificate_chain
            ignore_above: 1024
            level: extended
            name: server.certificate_chain
            node_name: certificate_chain
            normalize:
            - array
            short: Array of PEM-encoded certificates that make up the certificate
              chain offered by the server.
            type: keyword
        hash:
          field_details:
            dashed_name: tls-server-hash
            flat_name: tls.server.hash
            intermediate: true
            name: server.hash
            node_name: hash
            type: object
          fields:
            md5:
              field_details:
                dashed_name: tls-server-hash-md5
                description: Certificate fingerprint using the MD5 digest of DER-encoded
                  version of certificate offered by the server. For consistency with
                  other hash values, this value should be formatted as an uppercase
                  hash.
                example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
                flat_name: tls.server.hash.md5
                ignore_above: 1024
                level: extended
                name: server.hash.md5
                node_name: md5
                normalize: []
                short: Certificate fingerprint using the MD5 digest of DER-encoded
                  version of certificate offered by the server.
                type: keyword
            sha1:
              field_details:
                dashed_name: tls-server-hash-sha1
                description: Certificate fingerprint using the SHA1 digest of DER-encoded
                  version of certificate offered by the server. For consistency with
                  other hash values, this value should be formatted as an uppercase
                  hash.
                example: 9E393D93138888D288266C2D915214D1D1CCEB2A
                flat_name: tls.server.hash.sha1
                ignore_above: 1024
                level: extended
                name: server.hash.sha1
                node_name: sha1
                normalize: []
                short: Certificate fingerprint using the SHA1 digest of DER-encoded
                  version of certificate offered by the server.
                type: keyword
            sha256:
              field_details:
                dashed_name: tls-server-hash-sha256
                description: Certificate fingerprint using the SHA256 digest of DER-encoded
                  version of certificate offered by the server. For consistency with
                  other hash values, this value should be formatted as an uppercase
                  hash.
                example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
                flat_name: tls.server.hash.sha256
                ignore_above: 1024
                level: extended
                name: server.hash.sha256
                node_name: sha256
                normalize: []
                short: Certificate fingerprint using the SHA256 digest of DER-encoded
                  version of certificate offered by the server.
                type: keyword
        issuer:
          field_details:
            dashed_name: tls-server-issuer
            description: Subject of the issuer of the x.509 certificate presented
              by the server.
            example: CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com
            flat_name: tls.server.issuer
            ignore_above: 1024
            level: extended
            name: server.issuer
            node_name: issuer
            normalize: []
            short: Subject of the issuer of the x.509 certificate presented by the
              server.
            type: keyword
        ja3s:
          field_details:
            dashed_name: tls-server-ja3s
            description: A hash that identifies servers based on how they perform
              an SSL/TLS handshake.
            example: 394441ab65754e2207b1e1b457b3641d
            flat_name: tls.server.ja3s
            ignore_above: 1024
            level: extended
            name: server.ja3s
            node_name: ja3s
            normalize: []
            short: A hash that identifies servers based on how they perform an SSL/TLS
              handshake.
            type: keyword
        not_after:
          field_details:
            dashed_name: tls-server-not-after
            description: Timestamp indicating when server certificate is no longer
              considered valid.
            example: '2021-01-01T00:00:00.000Z'
            flat_name: tls.server.not_after
            level: extended
            name: server.not_after
            node_name: not_after
            normalize: []
            short: Timestamp indicating when server certificate is no longer considered
              valid.
            type: date
        not_before:
          field_details:
            dashed_name: tls-server-not-before
            description: Timestamp indicating when server certificate is first considered
              valid.
            example: '1970-01-01T00:00:00.000Z'
            flat_name: tls.server.not_before
            level: extended
            name: server.not_before
            node_name: not_before
            normalize: []
            short: Timestamp indicating when server certificate is first considered
              valid.
            type: date
        subject:
          field_details:
            dashed_name: tls-server-subject
            description: Subject of the x.509 certificate presented by the server.
            example: CN=www.example.com, OU=Infrastructure Team, DC=example, DC=com
            flat_name: tls.server.subject
            ignore_above: 1024
            level: extended
            name: server.subject
            node_name: subject
            normalize: []
            short: Subject of the x.509 certificate presented by the server.
            type: keyword
        x509:
          field_details:
            dashed_name: tls-server-x509
            description: 'This implements the common core fields for x509 certificates.
              This information is likely logged with TLS sessions, digital signatures
              found in executable binaries, S/MIME information in email bodies, or
              analysis of files on disk.

              When the certificate relates to a file, use the fields at `file.x509`.
              When hashes of the DER-encoded certificate are available, the `hash`
              data set should be populated as well (e.g. `file.hash.sha256`).

              Events that contain certificate information about network connections,
              should use the x509 fields under the relevant TLS fields: `tls.server.x509`
              and/or `tls.client.x509`.'
            flat_name: tls.server.x509
            intermediate: true
            name: x509
            node_name: x509
            original_fieldset: x509
            short: These fields contain x509 certificate metadata.
            type: group
          fields:
            alternative_names:
              field_details:
                dashed_name: tls-server-x509-alternative-names
                description: List of subject alternative names (SAN). Name types vary
                  by certificate authority and certificate type but commonly contain
                  IP addresses, DNS names (and wildcards), and email addresses.
                example: '*.elastic.co'
                flat_name: tls.server.x509.alternative_names
                ignore_above: 1024
                level: extended
                name: alternative_names
                node_name: alternative_names
                normalize:
                - array
                original_fieldset: x509
                short: List of subject alternative names (SAN).
                type: keyword
            issuer:
              field_details:
                dashed_name: tls-server-x509-issuer
                flat_name: tls.server.x509.issuer
                intermediate: true
                name: issuer
                node_name: issuer
                original_fieldset: x509
                type: object
              fields:
                common_name:
                  field_details:
                    dashed_name: tls-server-x509-issuer-common-name
                    description: List of common name (CN) of issuing certificate authority.
                    example: Example SHA2 High Assurance Server CA
                    flat_name: tls.server.x509.issuer.common_name
                    ignore_above: 1024
                    level: extended
                    name: issuer.common_name
                    node_name: common_name
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of common name (CN) of issuing certificate authority.
                    type: keyword
                country:
                  field_details:
                    dashed_name: tls-server-x509-issuer-country
                    description: List of country \(C) codes
                    example: US
                    flat_name: tls.server.x509.issuer.country
                    ignore_above: 1024
                    level: extended
                    name: issuer.country
                    node_name: country
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of country \(C) codes
                    type: keyword
                distinguished_name:
                  field_details:
                    dashed_name: tls-server-x509-issuer-distinguished-name
                    description: Distinguished name (DN) of issuing certificate authority.
                    example: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2
                      High Assurance Server CA
                    flat_name: tls.server.x509.issuer.distinguished_name
                    ignore_above: 1024
                    level: extended
                    name: issuer.distinguished_name
                    node_name: distinguished_name
                    normalize: []
                    original_fieldset: x509
                    short: Distinguished name (DN) of issuing certificate authority.
                    type: keyword
                locality:
                  field_details:
                    dashed_name: tls-server-x509-issuer-locality
                    description: List of locality names (L)
                    example: Mountain View
                    flat_name: tls.server.x509.issuer.locality
                    ignore_above: 1024
                    level: extended
                    name: issuer.locality
                    node_name: locality
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of locality names (L)
                    type: keyword
                organization:
                  field_details:
                    dashed_name: tls-server-x509-issuer-organization
                    description: List of organizations (O) of issuing certificate
                      authority.
                    example: Example Inc
                    flat_name: tls.server.x509.issuer.organization
                    ignore_above: 1024
                    level: extended
                    name: issuer.organization
                    node_name: organization
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizations (O) of issuing certificate authority.
                    type: keyword
                organizational_unit:
                  field_details:
                    dashed_name: tls-server-x509-issuer-organizational-unit
                    description: List of organizational units (OU) of issuing certificate
                      authority.
                    example: www.example.com
                    flat_name: tls.server.x509.issuer.organizational_unit
                    ignore_above: 1024
                    level: extended
                    name: issuer.organizational_unit
                    node_name: organizational_unit
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizational units (OU) of issuing certificate
                      authority.
                    type: keyword
                state_or_province:
                  field_details:
                    dashed_name: tls-server-x509-issuer-state-or-province
                    description: List of state or province names (ST, S, or P)
                    example: California
                    flat_name: tls.server.x509.issuer.state_or_province
                    ignore_above: 1024
                    level: extended
                    name: issuer.state_or_province
                    node_name: state_or_province
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of state or province names (ST, S, or P)
                    type: keyword
            not_after:
              field_details:
                dashed_name: tls-server-x509-not-after
                description: Time at which the certificate is no longer considered
                  valid.
                example: '2020-07-16T03:15:39Z'
                flat_name: tls.server.x509.not_after
                level: extended
                name: not_after
                node_name: not_after
                normalize: []
                original_fieldset: x509
                short: Time at which the certificate is no longer considered valid.
                type: date
            not_before:
              field_details:
                dashed_name: tls-server-x509-not-before
                description: Time at which the certificate is first considered valid.
                example: '2019-08-16T01:40:25Z'
                flat_name: tls.server.x509.not_before
                level: extended
                name: not_before
                node_name: not_before
                normalize: []
                original_fieldset: x509
                short: Time at which the certificate is first considered valid.
                type: date
            public_key_algorithm:
              field_details:
                dashed_name: tls-server-x509-public-key-algorithm
                description: Algorithm used to generate the public key.
                example: RSA
                flat_name: tls.server.x509.public_key_algorithm
                ignore_above: 1024
                level: extended
                name: public_key_algorithm
                node_name: public_key_algorithm
                normalize: []
                original_fieldset: x509
                short: Algorithm used to generate the public key.
                type: keyword
            public_key_curve:
              field_details:
                dashed_name: tls-server-x509-public-key-curve
                description: The curve used by the elliptic curve public key algorithm.
                  This is algorithm specific.
                example: nistp521
                flat_name: tls.server.x509.public_key_curve
                ignore_above: 1024
                level: extended
                name: public_key_curve
                node_name: public_key_curve
                normalize: []
                original_fieldset: x509
                short: The curve used by the elliptic curve public key algorithm.
                  This is algorithm specific.
                type: keyword
            public_key_exponent:
              field_details:
                dashed_name: tls-server-x509-public-key-exponent
                description: Exponent used to derive the public key. This is algorithm
                  specific.
                doc_values: false
                example: 65537
                flat_name: tls.server.x509.public_key_exponent
                index: false
                level: extended
                name: public_key_exponent
                node_name: public_key_exponent
                normalize: []
                original_fieldset: x509
                short: Exponent used to derive the public key. This is algorithm specific.
                type: long
            public_key_size:
              field_details:
                dashed_name: tls-server-x509-public-key-size
                description: The size of the public key space in bits.
                example: 2048
                flat_name: tls.server.x509.public_key_size
                level: extended
                name: public_key_size
                node_name: public_key_size
                normalize: []
                original_fieldset: x509
                short: The size of the public key space in bits.
                type: long
            serial_number:
              field_details:
                dashed_name: tls-server-x509-serial-number
                description: Unique serial number issued by the certificate authority.
                  For consistency, if this value is alphanumeric, it should be formatted
                  without colons and uppercase characters.
                example: 55FBB9C7DEBF09809D12CCAA
                flat_name: tls.server.x509.serial_number
                ignore_above: 1024
                level: extended
                name: serial_number
                node_name: serial_number
                normalize: []
                original_fieldset: x509
                short: Unique serial number issued by the certificate authority.
                type: keyword
            signature_algorithm:
              field_details:
                dashed_name: tls-server-x509-signature-algorithm
                description: Identifier for certificate signature algorithm. We recommend
                  using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
                example: SHA256-RSA
                flat_name: tls.server.x509.signature_algorithm
                ignore_above: 1024
                level: extended
                name: signature_algorithm
                node_name: signature_algorithm
                normalize: []
                original_fieldset: x509
                short: Identifier for certificate signature algorithm.
                type: keyword
            subject:
              field_details:
                dashed_name: tls-server-x509-subject
                flat_name: tls.server.x509.subject
                intermediate: true
                name: subject
                node_name: subject
                original_fieldset: x509
                type: object
              fields:
                common_name:
                  field_details:
                    dashed_name: tls-server-x509-subject-common-name
                    description: List of common names (CN) of subject.
                    example: shared.global.example.net
                    flat_name: tls.server.x509.subject.common_name
                    ignore_above: 1024
                    level: extended
                    name: subject.common_name
                    node_name: common_name
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of common names (CN) of subject.
                    type: keyword
                country:
                  field_details:
                    dashed_name: tls-server-x509-subject-country
                    description: List of country \(C) code
                    example: US
                    flat_name: tls.server.x509.subject.country
                    ignore_above: 1024
                    level: extended
                    name: subject.country
                    node_name: country
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of country \(C) code
                    type: keyword
                distinguished_name:
                  field_details:
                    dashed_name: tls-server-x509-subject-distinguished-name
                    description: Distinguished name (DN) of the certificate subject
                      entity.
                    example: C=US, ST=California, L=San Francisco, O=Example, Inc.,
                      CN=shared.global.example.net
                    flat_name: tls.server.x509.subject.distinguished_name
                    ignore_above: 1024
                    level: extended
                    name: subject.distinguished_name
                    node_name: distinguished_name
                    normalize: []
                    original_fieldset: x509
                    short: Distinguished name (DN) of the certificate subject entity.
                    type: keyword
                locality:
                  field_details:
                    dashed_name: tls-server-x509-subject-locality
                    description: List of locality names (L)
                    example: San Francisco
                    flat_name: tls.server.x509.subject.locality
                    ignore_above: 1024
                    level: extended
                    name: subject.locality
                    node_name: locality
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of locality names (L)
                    type: keyword
                organization:
                  field_details:
                    dashed_name: tls-server-x509-subject-organization
                    description: List of organizations (O) of subject.
                    example: Example, Inc.
                    flat_name: tls.server.x509.subject.organization
                    ignore_above: 1024
                    level: extended
                    name: subject.organization
                    node_name: organization
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizations (O) of subject.
                    type: keyword
                organizational_unit:
                  field_details:
                    dashed_name: tls-server-x509-subject-organizational-unit
                    description: List of organizational units (OU) of subject.
                    flat_name: tls.server.x509.subject.organizational_unit
                    ignore_above: 1024
                    level: extended
                    name: subject.organizational_unit
                    node_name: organizational_unit
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of organizational units (OU) of subject.
                    type: keyword
                state_or_province:
                  field_details:
                    dashed_name: tls-server-x509-subject-state-or-province
                    description: List of state or province names (ST, S, or P)
                    example: California
                    flat_name: tls.server.x509.subject.state_or_province
                    ignore_above: 1024
                    level: extended
                    name: subject.state_or_province
                    node_name: state_or_province
                    normalize:
                    - array
                    original_fieldset: x509
                    short: List of state or province names (ST, S, or P)
                    type: keyword
            version_number:
              field_details:
                dashed_name: tls-server-x509-version-number
                description: Version of x509 format.
                example: 3
                flat_name: tls.server.x509.version_number
                ignore_above: 1024
                level: extended
                name: version_number
                node_name: version_number
                normalize: []
                original_fieldset: x509
                short: Version of x509 format.
                type: keyword
    version:
      field_details:
        dashed_name: tls-version
        description: Numeric part of the version parsed from the original string.
        example: '1.2'
        flat_name: tls.version
        ignore_above: 1024
        level: extended
        name: version
        node_name: version
        normalize: []
        short: Numeric part of the version parsed from the original string.
        type: keyword
    version_protocol:
      field_details:
        dashed_name: tls-version-protocol
        description: Normalized lowercase protocol name parsed from original string.
        example: tls
        flat_name: tls.version_protocol
        ignore_above: 1024
        level: extended
        name: version_protocol
        node_name: version_protocol
        normalize: []
        short: Normalized lowercase protocol name parsed from original string.
        type: keyword
  schema_details:
    group: 2
    nestings:
    - tls.client.x509
    - tls.server.x509
    prefix: tls.
    reused_here:
    - full: tls.client.x509
      schema_name: x509
      short: These fields contain x509 certificate metadata.
    - full: tls.server.x509
      schema_name: x509
      short: These fields contain x509 certificate metadata.
    root: false
    title: TLS
tracing:
  field_details:
    dashed_name: tracing
    description: 'Distributed tracing makes it possible to analyze performance throughout
      a microservice architecture all in one view. This is accomplished by tracing
      all of the requests - from the initial web request in the front-end service
      - to queries made through multiple back-end services.

      Unlike most field sets in ECS, the tracing fields are *not* nested under the
      field set name. In other words, the correct field name is `trace.id`, not `tracing.trace.id`,
      and so on.'
    flat_name: tracing
    name: tracing
    node_name: tracing
    short: Fields related to distributed tracing.
    type: group
  fields:
    span:
      field_details:
        dashed_name: span
        flat_name: span
        intermediate: true
        name: span
        node_name: span
        type: object
      fields:
        id:
          field_details:
            dashed_name: span-id
            description: 'Unique identifier of the span within the scope of its trace.

              A span represents an operation within a transaction, such as a request
              to another service, or a database query.'
            example: 3ff9a8981b7ccd5a
            flat_name: span.id
            ignore_above: 1024
            level: extended
            name: span.id
            node_name: id
            normalize: []
            short: Unique identifier of the span within the scope of its trace.
            type: keyword
    trace:
      field_details:
        dashed_name: trace
        flat_name: trace
        intermediate: true
        name: trace
        node_name: trace
        type: object
      fields:
        id:
          field_details:
            dashed_name: trace-id
            description: 'Unique identifier of the trace.

              A trace groups multiple events like transactions that belong together.
              For example, a user request handled by multiple inter-connected services.'
            example: 4bf92f3577b34da6a3ce929d0e0e4736
            flat_name: trace.id
            ignore_above: 1024
            level: extended
            name: trace.id
            node_name: id
            normalize: []
            short: Unique identifier of the trace.
            type: keyword
    transaction:
      field_details:
        dashed_name: transaction
        flat_name: transaction
        intermediate: true
        name: transaction
        node_name: transaction
        type: object
      fields:
        id:
          field_details:
            dashed_name: transaction-id
            description: 'Unique identifier of the transaction within the scope of
              its trace.

              A transaction is the highest level of work measured within a service,
              such as a request to a server.'
            example: 00f067aa0ba902b7
            flat_name: transaction.id
            ignore_above: 1024
            level: extended
            name: transaction.id
            node_name: id
            normalize: []
            short: Unique identifier of the transaction within the scope of its trace.
            type: keyword
  schema_details:
    group: 2
    prefix: ''
    root: true
    title: Tracing
url:
  field_details:
    dashed_name: url
    description: URL fields provide support for complete or partial URLs, and supports
      the breaking down into scheme, domain, path, and so on.
    flat_name: url
    name: url
    node_name: url
    short: Fields that let you store URLs in various forms.
    type: group
  fields:
    domain:
      field_details:
        dashed_name: url-domain
        description: 'Domain of the url, such as "www.elastic.co".

          In some cases a URL may refer to an IP and/or port directly, without a domain
          name. In this case, the IP address would go to the `domain` field.

          If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF
          RFC 2732), the `[` and `]` characters should also be captured in the `domain`
          field.'
        example: www.elastic.co
        flat_name: url.domain
        ignore_above: 1024
        level: extended
        name: domain
        node_name: domain
        normalize: []
        short: Domain of the url.
        type: keyword
    extension:
      field_details:
        dashed_name: url-extension
        description: 'The field contains the file extension from the original request
          url, excluding the leading dot.

          The file extension is only set if it exists, as not every url has a file
          extension.

          The leading period must not be included. For example, the value must be
          "png", not ".png".

          Note that when the file name has multiple extensions (example.tar.gz), only
          the last one should be captured ("gz", not "tar.gz").'
        example: png
        flat_name: url.extension
        ignore_above: 1024
        level: extended
        name: extension
        node_name: extension
        normalize: []
        short: File extension from the request url, excluding the leading dot.
        type: keyword
    fragment:
      field_details:
        dashed_name: url-fragment
        description: 'Portion of the url after the `#`, such as "top".

          The `#` is not part of the fragment.'
        flat_name: url.fragment
        ignore_above: 1024
        level: extended
        name: fragment
        node_name: fragment
        normalize: []
        short: Portion of the url after the `#`.
        type: keyword
    full:
      field_details:
        dashed_name: url-full
        description: If full URLs are important to your use case, they should be stored
          in `url.full`, whether this field is reconstructed or present in the event
          source.
        example: https://www.elastic.co:443/search?q=elasticsearch#top
        flat_name: url.full
        level: extended
        multi_fields:
        - flat_name: url.full.text
          name: text
          type: match_only_text
        name: full
        node_name: full
        normalize: []
        short: Full unparsed URL.
        type: wildcard
    original:
      field_details:
        dashed_name: url-original
        description: 'Unmodified original url as seen in the event source.

          Note that in network monitoring, the observed URL may be a full URL, whereas
          in access logs, the URL is often just represented as a path.

          This field is meant to represent the URL as it was observed, complete or
          not.'
        example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch
        flat_name: url.original
        level: extended
        multi_fields:
        - flat_name: url.original.text
          name: text
          type: match_only_text
        name: original
        node_name: original
        normalize: []
        short: Unmodified original url as seen in the event source.
        type: wildcard
    password:
      field_details:
        dashed_name: url-password
        description: Password of the request.
        flat_name: url.password
        ignore_above: 1024
        level: extended
        name: password
        node_name: password
        normalize: []
        short: Password of the request.
        type: keyword
    path:
      field_details:
        dashed_name: url-path
        description: Path of the request, such as "/search".
        flat_name: url.path
        level: extended
        name: path
        node_name: path
        normalize: []
        short: Path of the request, such as "/search".
        type: wildcard
    port:
      field_details:
        dashed_name: url-port
        description: Port of the request, such as 443.
        example: 443
        flat_name: url.port
        format: string
        level: extended
        name: port
        node_name: port
        normalize: []
        short: Port of the request, such as 443.
        type: long
    query:
      field_details:
        dashed_name: url-query
        description: 'The query field describes the query string of the request, such
          as "q=elasticsearch".

          The `?` is excluded from the query string. If a URL contains no `?`, there
          is no query field. If there is a `?` but no query, the query field exists
          with an empty string. The `exists` query can be used to differentiate between
          the two cases.'
        flat_name: url.query
        ignore_above: 1024
        level: extended
        name: query
        node_name: query
        normalize: []
        short: Query string of the request.
        type: keyword
    registered_domain:
      field_details:
        dashed_name: url-registered-domain
        description: 'The highest registered url domain, stripped of the subdomain.

          For example, the registered domain for "foo.example.com" is "example.com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last two labels will not work well for TLDs such as "co.uk".'
        example: example.com
        flat_name: url.registered_domain
        ignore_above: 1024
        level: extended
        name: registered_domain
        node_name: registered_domain
        normalize: []
        short: The highest registered url domain, stripped of the subdomain.
        type: keyword
    scheme:
      field_details:
        dashed_name: url-scheme
        description: 'Scheme of the request, such as "https".

          Note: The `:` is not part of the scheme.'
        example: https
        flat_name: url.scheme
        ignore_above: 1024
        level: extended
        name: scheme
        node_name: scheme
        normalize: []
        short: Scheme of the url.
        type: keyword
    subdomain:
      field_details:
        dashed_name: url-subdomain
        description: 'The subdomain portion of a fully qualified domain name includes
          all of the names except the host name under the registered_domain.  In a
          partially qualified domain, or if the the qualification level of the full
          name cannot be determined, subdomain contains all of the names below the
          registered domain.

          For example the subdomain portion of "www.east.mydomain.co.uk" is "east".
          If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
          the subdomain field should contain "sub2.sub1", with no trailing period.'
        example: east
        flat_name: url.subdomain
        ignore_above: 1024
        level: extended
        name: subdomain
        node_name: subdomain
        normalize: []
        short: The subdomain of the domain.
        type: keyword
    top_level_domain:
      field_details:
        dashed_name: url-top-level-domain
        description: 'The effective top level domain (eTLD), also known as the domain
          suffix, is the last part of the domain name. For example, the top level
          domain for example.com is "com".

          This value can be determined precisely with a list like the public suffix
          list (http://publicsuffix.org). Trying to approximate this by simply taking
          the last label will not work well for effective TLDs such as "co.uk".'
        example: co.uk
        flat_name: url.top_level_domain
        ignore_above: 1024
        level: extended
        name: top_level_domain
        node_name: top_level_domain
        normalize: []
        short: The effective top level domain (com, org, net, co.uk).
        type: keyword
    username:
      field_details:
        dashed_name: url-username
        description: Username of the request.
        flat_name: url.username
        ignore_above: 1024
        level: extended
        name: username
        node_name: username
        normalize: []
        short: Username of the request.
        type: keyword
  schema_details:
    group: 2
    prefix: url.
    reusable:
      expected:
      - as: url
        at: threat.indicator
        full: threat.indicator.url
      - as: url
        at: threat.enrichments.indicator
        full: threat.enrichments.indicator.url
      order: 2
      top_level: true
    root: false
    title: URL
user:
  field_details:
    dashed_name: user
    description: 'The user fields describe information about the user that is relevant
      to the event.

      Fields can have one entry or multiple entries. If a user has more than one id,
      provide an array that includes all of them.'
    flat_name: user
    name: user
    node_name: user
    short: Fields to describe the user relevant to the event.
    type: group
  fields:
    changes:
      field_details:
        dashed_name: user-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: user.user
        intermediate: true
        name: changes
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: user-changes-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: user.changes.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: user-changes-email
            description: User email address.
            flat_name: user.changes.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: user-changes-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: user.changes.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: user.changes.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: user-changes-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: user.changes.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: user-changes-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: user.changes.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: user-changes-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: user.changes.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: user-changes-group-name
                description: Name of the group.
                flat_name: user.changes.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: user-changes-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: user.changes.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: user-changes-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: user.changes.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: user-changes-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: user.changes.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: user.changes.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: user-changes-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: user.changes.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: user-changes-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: user.changes.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: user-changes-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: user.changes.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: user-changes-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: user.changes.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: user-changes-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: user.changes.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: user-changes-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: user.changes.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: user-changes-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: user.changes.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: user-changes-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: user.changes.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
    domain:
      field_details:
        dashed_name: user-domain
        description: 'Name of the directory the user is a member of.

          For example, an LDAP or Active Directory domain name.'
        flat_name: user.domain
        ignore_above: 1024
        level: extended
        name: domain
        node_name: domain
        normalize: []
        short: Name of the directory the user is a member of.
        type: keyword
    effective:
      field_details:
        dashed_name: user-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: user.user
        intermediate: true
        name: effective
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: user-effective-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: user.effective.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: user-effective-email
            description: User email address.
            flat_name: user.effective.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: user-effective-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: user.effective.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: user.effective.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: user-effective-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: user.effective.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: user-effective-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: user.effective.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: user-effective-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: user.effective.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: user-effective-group-name
                description: Name of the group.
                flat_name: user.effective.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: user-effective-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: user.effective.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: user-effective-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: user.effective.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: user-effective-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: user.effective.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: user.effective.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: user-effective-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: user.effective.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: user-effective-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: user.effective.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: user-effective-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: user.effective.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: user-effective-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: user.effective.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: user-effective-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: user.effective.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: user-effective-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: user.effective.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: user-effective-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: user.effective.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: user-effective-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: user.effective.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
    email:
      field_details:
        dashed_name: user-email
        description: User email address.
        flat_name: user.email
        ignore_above: 1024
        level: extended
        name: email
        node_name: email
        normalize: []
        short: User email address.
        type: keyword
    full_name:
      field_details:
        dashed_name: user-full-name
        description: User's full name, if available.
        example: Albert Einstein
        flat_name: user.full_name
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: user.full_name.text
          name: text
          type: match_only_text
        name: full_name
        node_name: full_name
        normalize: []
        short: User's full name, if available.
        type: keyword
    group:
      field_details:
        dashed_name: user-group
        description: The group fields are meant to represent groups that are relevant
          to the event.
        flat_name: user.group
        intermediate: true
        name: group
        node_name: group
        original_fieldset: group
        short: User's group relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: user-group-domain
            description: 'Name of the directory the group is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: user.group.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: group
            short: Name of the directory the group is a member of.
            type: keyword
        id:
          field_details:
            dashed_name: user-group-id
            description: Unique identifier for the group on the system/platform.
            flat_name: user.group.id
            ignore_above: 1024
            level: extended
            name: id
            node_name: id
            normalize: []
            original_fieldset: group
            short: Unique identifier for the group on the system/platform.
            type: keyword
        name:
          field_details:
            dashed_name: user-group-name
            description: Name of the group.
            flat_name: user.group.name
            ignore_above: 1024
            level: extended
            name: name
            node_name: name
            normalize: []
            original_fieldset: group
            short: Name of the group.
            type: keyword
    hash:
      field_details:
        dashed_name: user-hash
        description: 'Unique user hash to correlate information for a user in anonymized
          form.

          Useful if `user.id` or `user.name` contain confidential information and
          cannot be used.'
        flat_name: user.hash
        ignore_above: 1024
        level: extended
        name: hash
        node_name: hash
        normalize: []
        short: Unique user hash to correlate information for a user in anonymized
          form.
        type: keyword
    id:
      field_details:
        dashed_name: user-id
        description: Unique identifier of the user.
        example: S-1-5-21-202424912787-2692429404-2351956786-1000
        flat_name: user.id
        ignore_above: 1024
        level: core
        name: id
        node_name: id
        normalize: []
        short: Unique identifier of the user.
        type: keyword
    name:
      field_details:
        dashed_name: user-name
        description: Short name or login of the user.
        example: a.einstein
        flat_name: user.name
        ignore_above: 1024
        level: core
        multi_fields:
        - flat_name: user.name.text
          name: text
          type: match_only_text
        name: name
        node_name: name
        normalize: []
        short: Short name or login of the user.
        type: keyword
    risk:
      field_details:
        beta: These fields are in beta and are subject to change.
        dashed_name: user-risk
        description: Fields for describing risk score and risk level of entities such
          as hosts and users.  These fields are not allowed to be nested under `event.*`.
          Please continue to use  `event.risk_score` and `event.risk_score_norm` for
          event risk.
        flat_name: user.risk
        intermediate: true
        name: risk
        node_name: risk
        original_fieldset: risk
        short: Fields for describing risk score and level.
        type: group
      fields:
        calculated_level:
          field_details:
            dashed_name: user-risk-calculated-level
            description: A risk classification level calculated by an internal system
              as part of entity analytics and entity risk scoring.
            example: High
            flat_name: user.risk.calculated_level
            ignore_above: 1024
            level: extended
            name: calculated_level
            node_name: calculated_level
            normalize: []
            original_fieldset: risk
            short: A risk classification level calculated by an internal system as
              part of entity analytics and entity risk scoring.
            type: keyword
        calculated_score:
          field_details:
            dashed_name: user-risk-calculated-score
            description: A risk classification score calculated by an internal system
              as part of entity analytics and entity risk scoring.
            example: 880.73
            flat_name: user.risk.calculated_score
            level: extended
            name: calculated_score
            node_name: calculated_score
            normalize: []
            original_fieldset: risk
            short: A risk classification score calculated by an internal system as
              part of entity analytics and entity risk scoring.
            type: float
        calculated_score_norm:
          field_details:
            dashed_name: user-risk-calculated-score-norm
            description: A risk classification score calculated by an internal system
              as part of entity analytics and entity risk scoring, and normalized
              to a range of 0 to 100.
            example: 88.73
            flat_name: user.risk.calculated_score_norm
            level: extended
            name: calculated_score_norm
            node_name: calculated_score_norm
            normalize: []
            original_fieldset: risk
            short: A normalized risk score calculated by an internal system.
            type: float
        static_level:
          field_details:
            dashed_name: user-risk-static-level
            description: A risk classification level obtained from outside the system,
              such as from some external Threat Intelligence Platform.
            example: High
            flat_name: user.risk.static_level
            ignore_above: 1024
            level: extended
            name: static_level
            node_name: static_level
            normalize: []
            original_fieldset: risk
            short: A risk classification level obtained from outside the system, such
              as from some external Threat Intelligence Platform.
            type: keyword
        static_score:
          field_details:
            dashed_name: user-risk-static-score
            description: A risk classification score obtained from outside the system,
              such as from some external Threat Intelligence Platform.
            example: 830.0
            flat_name: user.risk.static_score
            level: extended
            name: static_score
            node_name: static_score
            normalize: []
            original_fieldset: risk
            short: A risk classification score obtained from outside the system, such
              as from some external Threat Intelligence Platform.
            type: float
        static_score_norm:
          field_details:
            dashed_name: user-risk-static-score-norm
            description: A risk classification score obtained from outside the system,
              such as from some external Threat Intelligence Platform, and normalized
              to a range of 0 to 100.
            example: 83.0
            flat_name: user.risk.static_score_norm
            level: extended
            name: static_score_norm
            node_name: static_score_norm
            normalize: []
            original_fieldset: risk
            short: A normalized risk score calculated by an external system.
            type: float
    roles:
      field_details:
        dashed_name: user-roles
        description: Array of user roles at the time of the event.
        example: '["kibana_admin", "reporting_user"]'
        flat_name: user.roles
        ignore_above: 1024
        level: extended
        name: roles
        node_name: roles
        normalize:
        - array
        short: Array of user roles at the time of the event.
        type: keyword
    target:
      field_details:
        dashed_name: user-user
        description: 'The user fields describe information about the user that is
          relevant to the event.

          Fields can have one entry or multiple entries. If a user has more than one
          id, provide an array that includes all of them.'
        flat_name: user.user
        intermediate: true
        name: target
        node_name: user
        original_fieldset: user
        short: Fields to describe the user relevant to the event.
        type: group
      fields:
        domain:
          field_details:
            dashed_name: user-target-domain
            description: 'Name of the directory the user is a member of.

              For example, an LDAP or Active Directory domain name.'
            flat_name: user.target.domain
            ignore_above: 1024
            level: extended
            name: domain
            node_name: domain
            normalize: []
            original_fieldset: user
            short: Name of the directory the user is a member of.
            type: keyword
        email:
          field_details:
            dashed_name: user-target-email
            description: User email address.
            flat_name: user.target.email
            ignore_above: 1024
            level: extended
            name: email
            node_name: email
            normalize: []
            original_fieldset: user
            short: User email address.
            type: keyword
        full_name:
          field_details:
            dashed_name: user-target-full-name
            description: User's full name, if available.
            example: Albert Einstein
            flat_name: user.target.full_name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: user.target.full_name.text
              name: text
              type: match_only_text
            name: full_name
            node_name: full_name
            normalize: []
            original_fieldset: user
            short: User's full name, if available.
            type: keyword
        group:
          field_details:
            dashed_name: user-target-group
            description: The group fields are meant to represent groups that are relevant
              to the event.
            flat_name: user.target.group
            intermediate: true
            name: group
            node_name: group
            original_fieldset: group
            short: User's group relevant to the event.
            type: group
          fields:
            domain:
              field_details:
                dashed_name: user-target-group-domain
                description: 'Name of the directory the group is a member of.

                  For example, an LDAP or Active Directory domain name.'
                flat_name: user.target.group.domain
                ignore_above: 1024
                level: extended
                name: domain
                node_name: domain
                normalize: []
                original_fieldset: group
                short: Name of the directory the group is a member of.
                type: keyword
            id:
              field_details:
                dashed_name: user-target-group-id
                description: Unique identifier for the group on the system/platform.
                flat_name: user.target.group.id
                ignore_above: 1024
                level: extended
                name: id
                node_name: id
                normalize: []
                original_fieldset: group
                short: Unique identifier for the group on the system/platform.
                type: keyword
            name:
              field_details:
                dashed_name: user-target-group-name
                description: Name of the group.
                flat_name: user.target.group.name
                ignore_above: 1024
                level: extended
                name: name
                node_name: name
                normalize: []
                original_fieldset: group
                short: Name of the group.
                type: keyword
        hash:
          field_details:
            dashed_name: user-target-hash
            description: 'Unique user hash to correlate information for a user in
              anonymized form.

              Useful if `user.id` or `user.name` contain confidential information
              and cannot be used.'
            flat_name: user.target.hash
            ignore_above: 1024
            level: extended
            name: hash
            node_name: hash
            normalize: []
            original_fieldset: user
            short: Unique user hash to correlate information for a user in anonymized
              form.
            type: keyword
        id:
          field_details:
            dashed_name: user-target-id
            description: Unique identifier of the user.
            example: S-1-5-21-202424912787-2692429404-2351956786-1000
            flat_name: user.target.id
            ignore_above: 1024
            level: core
            name: id
            node_name: id
            normalize: []
            original_fieldset: user
            short: Unique identifier of the user.
            type: keyword
        name:
          field_details:
            dashed_name: user-target-name
            description: Short name or login of the user.
            example: a.einstein
            flat_name: user.target.name
            ignore_above: 1024
            level: core
            multi_fields:
            - flat_name: user.target.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: user
            short: Short name or login of the user.
            type: keyword
        risk:
          field_details:
            beta: These fields are in beta and are subject to change.
            dashed_name: user-target-risk
            description: Fields for describing risk score and risk level of entities
              such as hosts and users.  These fields are not allowed to be nested
              under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm`
              for event risk.
            flat_name: user.target.risk
            intermediate: true
            name: risk
            node_name: risk
            original_fieldset: risk
            short: Fields for describing risk score and level.
            type: group
          fields:
            calculated_level:
              field_details:
                dashed_name: user-target-risk-calculated-level
                description: A risk classification level calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: High
                flat_name: user.target.risk.calculated_level
                ignore_above: 1024
                level: extended
                name: calculated_level
                node_name: calculated_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: keyword
            calculated_score:
              field_details:
                dashed_name: user-target-risk-calculated-score
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring.
                example: 880.73
                flat_name: user.target.risk.calculated_score
                level: extended
                name: calculated_score
                node_name: calculated_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score calculated by an internal system
                  as part of entity analytics and entity risk scoring.
                type: float
            calculated_score_norm:
              field_details:
                dashed_name: user-target-risk-calculated-score-norm
                description: A risk classification score calculated by an internal
                  system as part of entity analytics and entity risk scoring, and
                  normalized to a range of 0 to 100.
                example: 88.73
                flat_name: user.target.risk.calculated_score_norm
                level: extended
                name: calculated_score_norm
                node_name: calculated_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an internal system.
                type: float
            static_level:
              field_details:
                dashed_name: user-target-risk-static-level
                description: A risk classification level obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: High
                flat_name: user.target.risk.static_level
                ignore_above: 1024
                level: extended
                name: static_level
                node_name: static_level
                normalize: []
                original_fieldset: risk
                short: A risk classification level obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: keyword
            static_score:
              field_details:
                dashed_name: user-target-risk-static-score
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform.
                example: 830.0
                flat_name: user.target.risk.static_score
                level: extended
                name: static_score
                node_name: static_score
                normalize: []
                original_fieldset: risk
                short: A risk classification score obtained from outside the system,
                  such as from some external Threat Intelligence Platform.
                type: float
            static_score_norm:
              field_details:
                dashed_name: user-target-risk-static-score-norm
                description: A risk classification score obtained from outside the
                  system, such as from some external Threat Intelligence Platform,
                  and normalized to a range of 0 to 100.
                example: 83.0
                flat_name: user.target.risk.static_score_norm
                level: extended
                name: static_score_norm
                node_name: static_score_norm
                normalize: []
                original_fieldset: risk
                short: A normalized risk score calculated by an external system.
                type: float
        roles:
          field_details:
            dashed_name: user-target-roles
            description: Array of user roles at the time of the event.
            example: '["kibana_admin", "reporting_user"]'
            flat_name: user.target.roles
            ignore_above: 1024
            level: extended
            name: roles
            node_name: roles
            normalize:
            - array
            original_fieldset: user
            short: Array of user roles at the time of the event.
            type: keyword
  schema_details:
    group: 2
    nestings:
    - user.changes
    - user.effective
    - user.group
    - user.risk
    - user.target
    prefix: user.
    reusable:
      expected:
      - as: user
        at: client
        full: client.user
      - as: user
        at: destination
        full: destination.user
      - as: user
        at: server
        full: server.user
      - as: user
        at: source
        full: source.user
      - as: target
        at: user
        full: user.target
        short_override: Targeted user of action taken.
      - as: effective
        at: user
        full: user.effective
        short_override: User whose privileges were assumed.
      - as: changes
        at: user
        full: user.changes
        short_override: Captures changes made to a user.
      - as: user
        at: process
        full: process.user
        short_override: The effective user (euid).
      - as: saved_user
        at: process
        full: process.saved_user
        short_override: The saved user (suid).
      - as: real_user
        at: process
        full: process.real_user
        short_override: The real user (ruid). Identifies the real owner of the process.
      - as: attested_user
        at: process
        beta: Reusing the `user` fields in this location is currently considered beta.
        full: process.attested_user
        short_override: The externally attested user based on an external source such
          as the Kube API.
      order: 2
      top_level: true
    reused_here:
    - full: user.group
      schema_name: group
      short: User's group relevant to the event.
    - full: user.risk
      schema_name: risk
      short: Fields for describing risk score and level.
    - full: user.target
      schema_name: user
      short: Targeted user of action taken.
    - full: user.effective
      schema_name: user
      short: User whose privileges were assumed.
    - full: user.changes
      schema_name: user
      short: Captures changes made to a user.
    root: false
    title: User
user_agent:
  field_details:
    dashed_name: user-agent
    description: 'The user_agent fields normally come from a browser request.

      They often show up in web service logs coming from the parsed user agent string.'
    flat_name: user_agent
    name: user_agent
    node_name: user_agent
    short: Fields to describe a browser user_agent string.
    type: group
  fields:
    device:
      field_details:
        dashed_name: user-agent-device
        flat_name: user_agent.device
        intermediate: true
        name: device
        node_name: device
        type: object
      fields:
        name:
          field_details:
            dashed_name: user-agent-device-name
            description: Name of the device.
            example: iPhone
            flat_name: user_agent.device.name
            ignore_above: 1024
            level: extended
            name: device.name
            node_name: name
            normalize: []
            short: Name of the device.
            type: keyword
    name:
      field_details:
        dashed_name: user-agent-name
        description: Name of the user agent.
        example: Safari
        flat_name: user_agent.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Name of the user agent.
        type: keyword
    original:
      field_details:
        dashed_name: user-agent-original
        description: Unparsed user_agent string.
        example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15
          (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1
        flat_name: user_agent.original
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: user_agent.original.text
          name: text
          type: match_only_text
        name: original
        node_name: original
        normalize: []
        short: Unparsed user_agent string.
        type: keyword
    os:
      field_details:
        dashed_name: user-agent-os
        description: The OS fields contain information about the operating system.
        flat_name: user_agent.os
        intermediate: true
        name: os
        node_name: os
        original_fieldset: os
        short: OS fields contain information about the operating system.
        type: group
      fields:
        family:
          field_details:
            dashed_name: user-agent-os-family
            description: OS family (such as redhat, debian, freebsd, windows).
            example: debian
            flat_name: user_agent.os.family
            ignore_above: 1024
            level: extended
            name: family
            node_name: family
            normalize: []
            original_fieldset: os
            short: OS family (such as redhat, debian, freebsd, windows).
            type: keyword
        full:
          field_details:
            dashed_name: user-agent-os-full
            description: Operating system name, including the version or code name.
            example: Mac OS Mojave
            flat_name: user_agent.os.full
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: user_agent.os.full.text
              name: text
              type: match_only_text
            name: full
            node_name: full
            normalize: []
            original_fieldset: os
            short: Operating system name, including the version or code name.
            type: keyword
        kernel:
          field_details:
            dashed_name: user-agent-os-kernel
            description: Operating system kernel version as a raw string.
            example: 4.4.0-112-generic
            flat_name: user_agent.os.kernel
            ignore_above: 1024
            level: extended
            name: kernel
            node_name: kernel
            normalize: []
            original_fieldset: os
            short: Operating system kernel version as a raw string.
            type: keyword
        name:
          field_details:
            dashed_name: user-agent-os-name
            description: Operating system name, without the version.
            example: Mac OS X
            flat_name: user_agent.os.name
            ignore_above: 1024
            level: extended
            multi_fields:
            - flat_name: user_agent.os.name.text
              name: text
              type: match_only_text
            name: name
            node_name: name
            normalize: []
            original_fieldset: os
            short: Operating system name, without the version.
            type: keyword
        platform:
          field_details:
            dashed_name: user-agent-os-platform
            description: Operating system platform (such centos, ubuntu, windows).
            example: darwin
            flat_name: user_agent.os.platform
            ignore_above: 1024
            level: extended
            name: platform
            node_name: platform
            normalize: []
            original_fieldset: os
            short: Operating system platform (such centos, ubuntu, windows).
            type: keyword
        type:
          field_details:
            dashed_name: user-agent-os-type
            description: 'Use the `os.type` field to categorize the operating system
              into one of the broad commercial families.

              If the OS you''re dealing with is not listed as an expected value, the
              field should not be populated. Please let us know by opening an issue
              with ECS, to propose its addition.'
            example: macos
            expected_values:
            - linux
            - macos
            - unix
            - windows
            - ios
            - android
            flat_name: user_agent.os.type
            ignore_above: 1024
            level: extended
            name: type
            node_name: type
            normalize: []
            original_fieldset: os
            short: 'Which commercial OS family (one of: linux, macos, unix, windows,
              ios or android).'
            type: keyword
        version:
          field_details:
            dashed_name: user-agent-os-version
            description: Operating system version as a raw string.
            example: 10.14.1
            flat_name: user_agent.os.version
            ignore_above: 1024
            level: extended
            name: version
            node_name: version
            normalize: []
            original_fieldset: os
            short: Operating system version as a raw string.
            type: keyword
    version:
      field_details:
        dashed_name: user-agent-version
        description: Version of the user agent.
        example: 12.0
        flat_name: user_agent.version
        ignore_above: 1024
        level: extended
        name: version
        node_name: version
        normalize: []
        short: Version of the user agent.
        type: keyword
  schema_details:
    group: 2
    nestings:
    - user_agent.os
    prefix: user_agent.
    reused_here:
    - full: user_agent.os
      schema_name: os
      short: OS fields contain information about the operating system.
    root: false
    title: User agent
vlan:
  field_details:
    dashed_name: vlan
    description: 'The VLAN fields are used to identify 802.1q tag(s) of a packet,
      as well as ingress and egress VLAN associations of an observer in relation to
      a specific packet or connection.

      Network.vlan fields are used to record a single VLAN tag, or the outer tag in
      the case of q-in-q encapsulations, for a packet or connection as observed, typically
      provided by a network sensor (e.g. Zeek, Wireshark) passively reporting on traffic.

      Network.inner VLAN fields are used to report inner q-in-q 802.1q tags (multiple
      802.1q encapsulations) as observed, typically provided by a network sensor  (e.g.
      Zeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields should
      only be used in addition to network.vlan fields to indicate q-in-q tagging.

      Observer.ingress and observer.egress VLAN values are used to record observer
      specific information when observer events contain discrete ingress and egress
      VLAN information, typically provided by firewalls, routers, or load balancers.'
    flat_name: vlan
    name: vlan
    node_name: vlan
    short: Fields to describe observed VLAN information.
    type: group
  fields:
    id:
      field_details:
        dashed_name: vlan-id
        description: VLAN ID as reported by the observer.
        example: 10
        flat_name: vlan.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: VLAN ID as reported by the observer.
        type: keyword
    name:
      field_details:
        dashed_name: vlan-name
        description: Optional VLAN name as reported by the observer.
        example: outside
        flat_name: vlan.name
        ignore_above: 1024
        level: extended
        name: name
        node_name: name
        normalize: []
        short: Optional VLAN name as reported by the observer.
        type: keyword
  schema_details:
    group: 2
    prefix: vlan.
    reusable:
      expected:
      - as: vlan
        at: observer.ingress
        full: observer.ingress.vlan
      - as: vlan
        at: observer.egress
        full: observer.egress.vlan
      - as: vlan
        at: network
        full: network.vlan
      - as: vlan
        at: network.inner
        full: network.inner.vlan
      order: 2
      top_level: false
    root: false
    title: VLAN
vulnerability:
  field_details:
    dashed_name: vulnerability
    description: The vulnerability fields describe information about a vulnerability
      that is relevant to an event.
    flat_name: vulnerability
    name: vulnerability
    node_name: vulnerability
    short: Fields to describe the vulnerability relevant to an event.
    type: group
  fields:
    category:
      field_details:
        dashed_name: vulnerability-category
        description: 'The type of system or architecture that the vulnerability affects.
          These may be platform-specific (for example, Debian or SUSE) or general
          (for example, Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys
          vulnerability categories])

          This field must be an array.'
        example: '["Firewall"]'
        flat_name: vulnerability.category
        ignore_above: 1024
        level: extended
        name: category
        node_name: category
        normalize:
        - array
        short: Category of a vulnerability.
        type: keyword
    classification:
      field_details:
        dashed_name: vulnerability-classification
        description: The classification of the vulnerability scoring system. For example
          (https://www.first.org/cvss/)
        example: CVSS
        flat_name: vulnerability.classification
        ignore_above: 1024
        level: extended
        name: classification
        node_name: classification
        normalize: []
        short: Classification of the vulnerability.
        type: keyword
    description:
      field_details:
        dashed_name: vulnerability-description
        description: The description of the vulnerability that provides additional
          context of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common
          Vulnerabilities and Exposure CVE description])
        example: In macOS before 2.12.6, there is a vulnerability in the RPC...
        flat_name: vulnerability.description
        ignore_above: 1024
        level: extended
        multi_fields:
        - flat_name: vulnerability.description.text
          name: text
          type: match_only_text
        name: description
        node_name: description
        normalize: []
        short: Description of the vulnerability.
        type: keyword
    enumeration:
      field_details:
        dashed_name: vulnerability-enumeration
        description: The type of identifier used for this vulnerability. For example
          (https://cve.mitre.org/about/)
        example: CVE
        flat_name: vulnerability.enumeration
        ignore_above: 1024
        level: extended
        name: enumeration
        node_name: enumeration
        normalize: []
        short: Identifier of the vulnerability.
        type: keyword
    id:
      field_details:
        dashed_name: vulnerability-id
        description: The identification (ID) is the number portion of a vulnerability
          entry. It includes a unique identification number for the vulnerability.
          For example (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common
          Vulnerabilities and Exposure CVE ID]
        example: CVE-2019-00001
        flat_name: vulnerability.id
        ignore_above: 1024
        level: extended
        name: id
        node_name: id
        normalize: []
        short: ID of the vulnerability.
        type: keyword
    reference:
      field_details:
        dashed_name: vulnerability-reference
        description: A resource that provides additional information, context, and
          mitigations for the identified vulnerability.
        example: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111
        flat_name: vulnerability.reference
        ignore_above: 1024
        level: extended
        name: reference
        node_name: reference
        normalize: []
        short: Reference of the vulnerability.
        type: keyword
    report_id:
      field_details:
        dashed_name: vulnerability-report-id
        description: The report or scan identification number.
        example: 20191018.0001
        flat_name: vulnerability.report_id
        ignore_above: 1024
        level: extended
        name: report_id
        node_name: report_id
        normalize: []
        short: Scan identification number.
        type: keyword
    scanner:
      field_details:
        dashed_name: vulnerability-scanner
        flat_name: vulnerability.scanner
        intermediate: true
        name: scanner
        node_name: scanner
        type: object
      fields:
        vendor:
          field_details:
            dashed_name: vulnerability-scanner-vendor
            description: The name of the vulnerability scanner vendor.
            example: Tenable
            flat_name: vulnerability.scanner.vendor
            ignore_above: 1024
            level: extended
            name: scanner.vendor
            node_name: vendor
            normalize: []
            short: Name of the scanner vendor.
            type: keyword
    score:
      field_details:
        dashed_name: vulnerability-score
        flat_name: vulnerability.score
        intermediate: true
        name: score
        node_name: score
        type: object
      fields:
        base:
          field_details:
            dashed_name: vulnerability-score-base
            description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most
              severe.

              Base scores cover an assessment for exploitability metrics (attack vector,
              complexity, privileges, and user interaction), impact metrics (confidentiality,
              integrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)'
            example: 5.5
            flat_name: vulnerability.score.base
            level: extended
            name: score.base
            node_name: base
            normalize: []
            short: Vulnerability Base score.
            type: float
        environmental:
          field_details:
            dashed_name: vulnerability-score-environmental
            description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most
              severe.

              Environmental scores cover an assessment for any modified Base metrics,
              confidentiality, integrity, and availability requirements. For example
              (https://www.first.org/cvss/specification-document)'
            example: 5.5
            flat_name: vulnerability.score.environmental
            level: extended
            name: score.environmental
            node_name: environmental
            normalize: []
            short: Vulnerability Environmental score.
            type: float
        temporal:
          field_details:
            dashed_name: vulnerability-score-temporal
            description: 'Scores can range from 0.0 to 10.0, with 10.0 being the most
              severe.

              Temporal scores cover an assessment for code maturity, remediation level,
              and confidence. For example (https://www.first.org/cvss/specification-document)'
            flat_name: vulnerability.score.temporal
            level: extended
            name: score.temporal
            node_name: temporal
            normalize: []
            short: Vulnerability Temporal score.
            type: float
        version:
          field_details:
            dashed_name: vulnerability-score-version
            description: 'The National Vulnerability Database (NVD) provides qualitative
              severity rankings of "Low", "Medium", and "High" for CVSS v2.0 base
              score ranges in addition to the severity ratings for CVSS v3.0 as they
              are defined in the CVSS v3.0 specification.

              CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit
              organization, whose mission is to help computer security incident response
              teams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)'
            example: 2.0
            flat_name: vulnerability.score.version
            ignore_above: 1024
            level: extended
            name: score.version
            node_name: version
            normalize: []
            short: CVSS version.
            type: keyword
    severity:
      field_details:
        dashed_name: vulnerability-severity
        description: The severity of the vulnerability can help with metrics and internal
          prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)
        example: Critical
        flat_name: vulnerability.severity
        ignore_above: 1024
        level: extended
        name: severity
        node_name: severity
        normalize: []
        short: Severity of the vulnerability.
        type: keyword
  schema_details:
    group: 2
    prefix: vulnerability.
    root: false
    title: Vulnerability
x509:
  field_details:
    dashed_name: x509
    description: 'This implements the common core fields for x509 certificates. This
      information is likely logged with TLS sessions, digital signatures found in
      executable binaries, S/MIME information in email bodies, or analysis of files
      on disk.

      When the certificate relates to a file, use the fields at `file.x509`. When
      hashes of the DER-encoded certificate are available, the `hash` data set should
      be populated as well (e.g. `file.hash.sha256`).

      Events that contain certificate information about network connections, should
      use the x509 fields under the relevant TLS fields: `tls.server.x509` and/or
      `tls.client.x509`.'
    flat_name: x509
    name: x509
    node_name: x509
    short: These fields contain x509 certificate metadata.
    type: group
  fields:
    alternative_names:
      field_details:
        dashed_name: x509-alternative-names
        description: List of subject alternative names (SAN). Name types vary by certificate
          authority and certificate type but commonly contain IP addresses, DNS names
          (and wildcards), and email addresses.
        example: '*.elastic.co'
        flat_name: x509.alternative_names
        ignore_above: 1024
        level: extended
        name: alternative_names
        node_name: alternative_names
        normalize:
        - array
        short: List of subject alternative names (SAN).
        type: keyword
    issuer:
      field_details:
        dashed_name: x509-issuer
        flat_name: x509.issuer
        intermediate: true
        name: issuer
        node_name: issuer
        type: object
      fields:
        common_name:
          field_details:
            dashed_name: x509-issuer-common-name
            description: List of common name (CN) of issuing certificate authority.
            example: Example SHA2 High Assurance Server CA
            flat_name: x509.issuer.common_name
            ignore_above: 1024
            level: extended
            name: issuer.common_name
            node_name: common_name
            normalize:
            - array
            short: List of common name (CN) of issuing certificate authority.
            type: keyword
        country:
          field_details:
            dashed_name: x509-issuer-country
            description: List of country \(C) codes
            example: US
            flat_name: x509.issuer.country
            ignore_above: 1024
            level: extended
            name: issuer.country
            node_name: country
            normalize:
            - array
            short: List of country \(C) codes
            type: keyword
        distinguished_name:
          field_details:
            dashed_name: x509-issuer-distinguished-name
            description: Distinguished name (DN) of issuing certificate authority.
            example: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High
              Assurance Server CA
            flat_name: x509.issuer.distinguished_name
            ignore_above: 1024
            level: extended
            name: issuer.distinguished_name
            node_name: distinguished_name
            normalize: []
            short: Distinguished name (DN) of issuing certificate authority.
            type: keyword
        locality:
          field_details:
            dashed_name: x509-issuer-locality
            description: List of locality names (L)
            example: Mountain View
            flat_name: x509.issuer.locality
            ignore_above: 1024
            level: extended
            name: issuer.locality
            node_name: locality
            normalize:
            - array
            short: List of locality names (L)
            type: keyword
        organization:
          field_details:
            dashed_name: x509-issuer-organization
            description: List of organizations (O) of issuing certificate authority.
            example: Example Inc
            flat_name: x509.issuer.organization
            ignore_above: 1024
            level: extended
            name: issuer.organization
            node_name: organization
            normalize:
            - array
            short: List of organizations (O) of issuing certificate authority.
            type: keyword
        organizational_unit:
          field_details:
            dashed_name: x509-issuer-organizational-unit
            description: List of organizational units (OU) of issuing certificate
              authority.
            example: www.example.com
            flat_name: x509.issuer.organizational_unit
            ignore_above: 1024
            level: extended
            name: issuer.organizational_unit
            node_name: organizational_unit
            normalize:
            - array
            short: List of organizational units (OU) of issuing certificate authority.
            type: keyword
        state_or_province:
          field_details:
            dashed_name: x509-issuer-state-or-province
            description: List of state or province names (ST, S, or P)
            example: California
            flat_name: x509.issuer.state_or_province
            ignore_above: 1024
            level: extended
            name: issuer.state_or_province
            node_name: state_or_province
            normalize:
            - array
            short: List of state or province names (ST, S, or P)
            type: keyword
    not_after:
      field_details:
        dashed_name: x509-not-after
        description: Time at which the certificate is no longer considered valid.
        example: '2020-07-16T03:15:39Z'
        flat_name: x509.not_after
        level: extended
        name: not_after
        node_name: not_after
        normalize: []
        short: Time at which the certificate is no longer considered valid.
        type: date
    not_before:
      field_details:
        dashed_name: x509-not-before
        description: Time at which the certificate is first considered valid.
        example: '2019-08-16T01:40:25Z'
        flat_name: x509.not_before
        level: extended
        name: not_before
        node_name: not_before
        normalize: []
        short: Time at which the certificate is first considered valid.
        type: date
    public_key_algorithm:
      field_details:
        dashed_name: x509-public-key-algorithm
        description: Algorithm used to generate the public key.
        example: RSA
        flat_name: x509.public_key_algorithm
        ignore_above: 1024
        level: extended
        name: public_key_algorithm
        node_name: public_key_algorithm
        normalize: []
        short: Algorithm used to generate the public key.
        type: keyword
    public_key_curve:
      field_details:
        dashed_name: x509-public-key-curve
        description: The curve used by the elliptic curve public key algorithm. This
          is algorithm specific.
        example: nistp521
        flat_name: x509.public_key_curve
        ignore_above: 1024
        level: extended
        name: public_key_curve
        node_name: public_key_curve
        normalize: []
        short: The curve used by the elliptic curve public key algorithm. This is
          algorithm specific.
        type: keyword
    public_key_exponent:
      field_details:
        dashed_name: x509-public-key-exponent
        description: Exponent used to derive the public key. This is algorithm specific.
        doc_values: false
        example: 65537
        flat_name: x509.public_key_exponent
        index: false
        level: extended
        name: public_key_exponent
        node_name: public_key_exponent
        normalize: []
        short: Exponent used to derive the public key. This is algorithm specific.
        type: long
    public_key_size:
      field_details:
        dashed_name: x509-public-key-size
        description: The size of the public key space in bits.
        example: 2048
        flat_name: x509.public_key_size
        level: extended
        name: public_key_size
        node_name: public_key_size
        normalize: []
        short: The size of the public key space in bits.
        type: long
    serial_number:
      field_details:
        dashed_name: x509-serial-number
        description: Unique serial number issued by the certificate authority. For
          consistency, if this value is alphanumeric, it should be formatted without
          colons and uppercase characters.
        example: 55FBB9C7DEBF09809D12CCAA
        flat_name: x509.serial_number
        ignore_above: 1024
        level: extended
        name: serial_number
        node_name: serial_number
        normalize: []
        short: Unique serial number issued by the certificate authority.
        type: keyword
    signature_algorithm:
      field_details:
        dashed_name: x509-signature-algorithm
        description: Identifier for certificate signature algorithm. We recommend
          using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
        example: SHA256-RSA
        flat_name: x509.signature_algorithm
        ignore_above: 1024
        level: extended
        name: signature_algorithm
        node_name: signature_algorithm
        normalize: []
        short: Identifier for certificate signature algorithm.
        type: keyword
    subject:
      field_details:
        dashed_name: x509-subject
        flat_name: x509.subject
        intermediate: true
        name: subject
        node_name: subject
        type: object
      fields:
        common_name:
          field_details:
            dashed_name: x509-subject-common-name
            description: List of common names (CN) of subject.
            example: shared.global.example.net
            flat_name: x509.subject.common_name
            ignore_above: 1024
            level: extended
            name: subject.common_name
            node_name: common_name
            normalize:
            - array
            short: List of common names (CN) of subject.
            type: keyword
        country:
          field_details:
            dashed_name: x509-subject-country
            description: List of country \(C) code
            example: US
            flat_name: x509.subject.country
            ignore_above: 1024
            level: extended
            name: subject.country
            node_name: country
            normalize:
            - array
            short: List of country \(C) code
            type: keyword
        distinguished_name:
          field_details:
            dashed_name: x509-subject-distinguished-name
            description: Distinguished name (DN) of the certificate subject entity.
            example: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net
            flat_name: x509.subject.distinguished_name
            ignore_above: 1024
            level: extended
            name: subject.distinguished_name
            node_name: distinguished_name
            normalize: []
            short: Distinguished name (DN) of the certificate subject entity.
            type: keyword
        locality:
          field_details:
            dashed_name: x509-subject-locality
            description: List of locality names (L)
            example: San Francisco
            flat_name: x509.subject.locality
            ignore_above: 1024
            level: extended
            name: subject.locality
            node_name: locality
            normalize:
            - array
            short: List of locality names (L)
            type: keyword
        organization:
          field_details:
            dashed_name: x509-subject-organization
            description: List of organizations (O) of subject.
            example: Example, Inc.
            flat_name: x509.subject.organization
            ignore_above: 1024
            level: extended
            name: subject.organization
            node_name: organization
            normalize:
            - array
            short: List of organizations (O) of subject.
            type: keyword
        organizational_unit:
          field_details:
            dashed_name: x509-subject-organizational-unit
            description: List of organizational units (OU) of subject.
            flat_name: x509.subject.organizational_unit
            ignore_above: 1024
            level: extended
            name: subject.organizational_unit
            node_name: organizational_unit
            normalize:
            - array
            short: List of organizational units (OU) of subject.
            type: keyword
        state_or_province:
          field_details:
            dashed_name: x509-subject-state-or-province
            description: List of state or province names (ST, S, or P)
            example: California
            flat_name: x509.subject.state_or_province
            ignore_above: 1024
            level: extended
            name: subject.state_or_province
            node_name: state_or_province
            normalize:
            - array
            short: List of state or province names (ST, S, or P)
            type: keyword
    version_number:
      field_details:
        dashed_name: x509-version-number
        description: Version of x509 format.
        example: 3
        flat_name: x509.version_number
        ignore_above: 1024
        level: extended
        name: version_number
        node_name: version_number
        normalize: []
        short: Version of x509 format.
        type: keyword
  schema_details:
    group: 2
    prefix: x509.
    reusable:
      expected:
      - as: x509
        at: file
        full: file.x509
      - as: x509
        at: threat.indicator
        full: threat.indicator.x509
      - as: x509
        at: threat.enrichments.indicator
        full: threat.enrichments.indicator.x509
      - as: x509
        at: tls.client
        full: tls.client.x509
      - as: x509
        at: tls.server
        full: tls.server.x509
      order: 1
      top_level: false
    root: false
    title: x509 Certificate
